

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon Jun 11 11:53:44 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F47K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1,inline
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1,inline
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1,inline
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1,inline
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1,inline
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1,inline
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1,inline
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1,inline
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1,inline
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1,inline
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1,inline
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1,inline
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1,inline
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1,inline
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1,inline
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	text103,global,reloc=2,class=CODE,delta=1,inline
   119                           	psect	text104,global,reloc=2,class=CODE,delta=1,inline
   120                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   121                           	psect	text106,global,reloc=2,class=CODE,delta=1
   122                           	psect	text107,global,reloc=2,class=CODE,delta=1,inline
   123                           	psect	text108,global,reloc=2,class=CODE,delta=1
   124                           	psect	text109,global,reloc=2,class=CODE,delta=1
   125                           	psect	text110,global,reloc=2,class=CODE,delta=1
   126                           	psect	text111,global,reloc=2,class=CODE,delta=1
   127                           	psect	text112,global,reloc=2,class=CODE,delta=1
   128                           	psect	text113,global,reloc=2,class=CODE,delta=1
   129                           	psect	text114,global,reloc=2,class=CODE,delta=1
   130                           	psect	text115,global,reloc=2,class=CODE,delta=1
   131                           	psect	text116,global,reloc=2,class=CODE,delta=1
   132                           	psect	text117,global,reloc=2,class=CODE,delta=1
   133                           	psect	text118,global,reloc=2,class=CODE,delta=1
   134                           	psect	text119,global,reloc=2,class=CODE,delta=1
   135                           	psect	text120,global,reloc=2,class=CODE,delta=1
   136                           	psect	text121,global,reloc=2,class=CODE,delta=1
   137                           	psect	text122,global,reloc=2,class=CODE,delta=1
   138                           	psect	text123,global,reloc=2,class=CODE,delta=1
   139                           	psect	text124,global,reloc=2,class=CODE,delta=1,inline
   140                           	psect	text125,global,reloc=2,class=CODE,delta=1,inline
   141                           	psect	text126,global,reloc=2,class=CODE,delta=1,inline
   142                           	psect	text127,global,reloc=2,class=CODE,delta=1,inline
   143                           	psect	text128,global,reloc=2,class=CODE,delta=1,inline
   144                           	psect	text129,global,reloc=2,class=CODE,delta=1,inline
   145                           	psect	text130,global,reloc=2,class=CODE,delta=1,inline
   146                           	psect	text131,global,reloc=2,class=CODE,delta=1
   147                           	psect	text132,global,reloc=2,class=CODE,delta=1
   148                           	psect	text133,global,reloc=2,class=CODE,delta=1
   149                           	psect	text134,global,reloc=2,class=CODE,delta=1
   150                           	psect	text135,global,reloc=2,class=CODE,delta=1
   151                           	psect	text136,global,reloc=2,class=CODE,delta=1
   152                           	psect	text137,global,reloc=2,class=CODE,delta=1
   153                           	psect	text138,global,reloc=2,class=CODE,delta=1
   154                           	psect	text139,global,reloc=2,class=CODE,delta=1
   155                           	psect	text140,global,reloc=2,class=CODE,delta=1
   156                           	psect	text141,global,reloc=2,class=CODE,delta=1
   157                           	psect	text142,global,reloc=2,class=CODE,delta=1,inline
   158                           	psect	text143,global,reloc=2,class=CODE,delta=1,inline
   159                           	psect	text144,global,reloc=2,class=CODE,delta=1,inline
   160                           	psect	text145,global,reloc=2,class=CODE,delta=1
   161                           	psect	text146,global,reloc=2,class=CODE,delta=1,inline
   162                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   163                           	psect	text147,global,reloc=2,class=CODE,delta=1,inline
   164                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   165                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   166  0000                     
   167                           ; Version 1.44
   168                           ; Generated 14/09/2017 GMT
   169                           ; 
   170                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   171                           ; All rights reserved.
   172                           ; 
   173                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   174                           ; 
   175                           ; Redistribution and use in source and binary forms, with or without modification, are
   176                           ; permitted provided that the following conditions are met:
   177                           ; 
   178                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   179                           ;        conditions and the following disclaimer.
   180                           ; 
   181                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   182                           ;        of conditions and the following disclaimer in the documentation and/or other
   183                           ;        materials provided with the distribution.
   184                           ; 
   185                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   186                           ;        software without specific prior written permission.
   187                           ; 
   188                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   189                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   190                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   191                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   192                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   193                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   194                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   195                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   196                           ; 
   197                           ; 
   198                           ; Code-generator required, PIC18F47K40 Definitions
   199                           ; 
   200                           ; SFR Addresses
   201  0000                     
   202                           	psect	idataBANK1
   203  00396A                     __pidataBANK1:
   204                           	opt stack 0
   205                           
   206                           ;initializer for _fsmStateTable
   207  00396A  80                 	db	low _do_I2C_IDLE
   208  00396B  3D                 	db	high _do_I2C_IDLE
   209  00396C  00                 	db	low (_do_I2C_IDLE shr (0+16))
   210  00396D  A2                 	db	low _do_I2C_SEND_ADR_READ
   211  00396E  3C                 	db	high _do_I2C_SEND_ADR_READ
   212  00396F  00                 	db	low (_do_I2C_SEND_ADR_READ shr (0+16))
   213  003970  8C                 	db	low _do_I2C_SEND_ADR_WRITE
   214  003971  3C                 	db	high _do_I2C_SEND_ADR_WRITE
   215  003972  00                 	db	low (_do_I2C_SEND_ADR_WRITE shr (0+16))
   216  003973  26                 	db	low _do_I2C_TX
   217  003974  2D                 	db	high _do_I2C_TX
   218  003975  00                 	db	low (_do_I2C_TX shr (0+16))
   219  003976  62                 	db	low _do_I2C_RX
   220  003977  30                 	db	high _do_I2C_RX
   221  003978  00                 	db	low (_do_I2C_RX shr (0+16))
   222  003979  6E                 	db	low _do_I2C_RCEN
   223  00397A  3D                 	db	high _do_I2C_RCEN
   224  00397B  00                 	db	low (_do_I2C_RCEN shr (0+16))
   225  00397C  86                 	db	low _do_I2C_TX_EMPTY
   226  00397D  33                 	db	high _do_I2C_TX_EMPTY
   227  00397E  00                 	db	low (_do_I2C_TX_EMPTY shr (0+16))
   228  00397F  5E                 	db	low _do_I2C_SEND_RESTART_READ
   229  003980  3E                 	db	high _do_I2C_SEND_RESTART_READ
   230  003981  00                 	db	low (_do_I2C_SEND_RESTART_READ shr (0+16))
   231  003982  50                 	db	low _do_I2C_SEND_RESTART_WRITE
   232  003983  3E                 	db	high _do_I2C_SEND_RESTART_WRITE
   233  003984  00                 	db	low (_do_I2C_SEND_RESTART_WRITE shr (0+16))
   234  003985  42                 	db	low _do_I2C_SEND_RESTART
   235  003986  3E                 	db	high _do_I2C_SEND_RESTART
   236  003987  00                 	db	low (_do_I2C_SEND_RESTART shr (0+16))
   237  003988  34                 	db	low _do_I2C_SEND_STOP
   238  003989  3E                 	db	high _do_I2C_SEND_STOP
   239  00398A  00                 	db	low (_do_I2C_SEND_STOP shr (0+16))
   240  00398B  26                 	db	low _do_I2C_DO_ACK
   241  00398C  3E                 	db	high _do_I2C_DO_ACK
   242  00398D  00                 	db	low (_do_I2C_DO_ACK shr (0+16))
   243  00398E  18                 	db	low _do_I2C_DO_NACK_STOP
   244  00398F  3E                 	db	high _do_I2C_DO_NACK_STOP
   245  003990  00                 	db	low (_do_I2C_DO_NACK_STOP shr (0+16))
   246  003991  0A                 	db	low _do_I2C_DO_NACK_RESTART
   247  003992  3E                 	db	high _do_I2C_DO_NACK_RESTART
   248  003993  00                 	db	low (_do_I2C_DO_NACK_RESTART shr (0+16))
   249  003994  B8                 	db	low _do_I2C_RESET
   250  003995  3C                 	db	high _do_I2C_RESET
   251  003996  00                 	db	low (_do_I2C_RESET shr (0+16))
   252  003997  42                 	db	low _do_I2C_DO_ADDRESS_NACK
   253  003998  35                 	db	high _do_I2C_DO_ADDRESS_NACK
   254  003999  00                 	db	low (_do_I2C_DO_ADDRESS_NACK shr (0+16))
   255                           
   256                           	psect	smallconst
   257  000F00                     __psmallconst:
   258                           	opt stack 0
   259  000F00  00                 	db	0
   260  000F01                     _dpowers:
   261                           	opt stack 0
   262  000F01  0001               	dw	1
   263  000F03  0000               	dw	0
   264  000F05  000A               	dw	10
   265  000F07  0000               	dw	0
   266  000F09  0064               	dw	100
   267  000F0B  0000               	dw	0
   268  000F0D  03E8               	dw	1000
   269  000F0F  0000               	dw	0
   270  000F11  2710               	dw	10000
   271  000F13  0000               	dw	0
   272  000F15  86A0               	dw	34464
   273  000F17  0001               	dw	1
   274  000F19  4240               	dw	16960
   275  000F1B  000F               	dw	15
   276  000F1D  9680               	dw	38528
   277  000F1F  0098               	dw	152
   278  000F21  E100               	dw	57600
   279  000F23  05F5               	dw	1525
   280  000F25  CA00               	dw	51712
   281  000F27  3B9A               	dw	15258
   282  000F29                     __end_of_dpowers:
   283                           	opt stack 0
   284  000F29                     __powers_:
   285                           	opt stack 0
   286  000F29  00                 	db	0
   287  000F2A  80                 	db	128
   288  000F2B  3F                 	db	63
   289  000F2C  00                 	db	0
   290  000F2D  20                 	db	32
   291  000F2E  41                 	db	65
   292  000F2F  00                 	db	0
   293  000F30  C8                 	db	200
   294  000F31  42                 	db	66
   295  000F32  00                 	db	0
   296  000F33  7A                 	db	122
   297  000F34  44                 	db	68
   298  000F35  40                 	db	64
   299  000F36  1C                 	db	28
   300  000F37  46                 	db	70
   301  000F38  50                 	db	80
   302  000F39  C3                 	db	195
   303  000F3A  47                 	db	71
   304  000F3B  24                 	db	36
   305  000F3C  74                 	db	116
   306  000F3D  49                 	db	73
   307  000F3E  97                 	db	151
   308  000F3F  18                 	db	24
   309  000F40  4B                 	db	75
   310  000F41  BC                 	db	188
   311  000F42  BE                 	db	190
   312  000F43  4C                 	db	76
   313  000F44  6B                 	db	107
   314  000F45  6E                 	db	110
   315  000F46  4E                 	db	78
   316  000F47  03                 	db	3
   317  000F48  15                 	db	21
   318  000F49  50                 	db	80
   319  000F4A  79                 	db	121
   320  000F4B  AD                 	db	173
   321  000F4C  60                 	db	96
   322  000F4D  F3                 	db	243
   323  000F4E  49                 	db	73
   324  000F4F  71                 	db	113
   325  000F50                     __end_of__powers_:
   326                           	opt stack 0
   327  000F50                     __npowers_:
   328                           	opt stack 0
   329  000F50  00                 	db	0
   330  000F51  80                 	db	128
   331  000F52  3F                 	db	63
   332  000F53  CD                 	db	205
   333  000F54  CC                 	db	204
   334  000F55  3D                 	db	61
   335  000F56  D7                 	db	215
   336  000F57  23                 	db	35
   337  000F58  3C                 	db	60
   338  000F59  12                 	db	18
   339  000F5A  83                 	db	131
   340  000F5B  3A                 	db	58
   341  000F5C  B7                 	db	183
   342  000F5D  D1                 	db	209
   343  000F5E  38                 	db	56
   344  000F5F  C6                 	db	198
   345  000F60  27                 	db	39
   346  000F61  37                 	db	55
   347  000F62  38                 	db	56
   348  000F63  86                 	db	134
   349  000F64  35                 	db	53
   350  000F65  C0                 	db	192
   351  000F66  D6                 	db	214
   352  000F67  33                 	db	51
   353  000F68  CC                 	db	204
   354  000F69  2B                 	db	43
   355  000F6A  32                 	db	50
   356  000F6B  70                 	db	112
   357  000F6C  89                 	db	137
   358  000F6D  30                 	db	48
   359  000F6E  E7                 	db	231
   360  000F6F  DB                 	db	219
   361  000F70  2E                 	db	46
   362  000F71  E5                 	db	229
   363  000F72  3C                 	db	60
   364  000F73  1E                 	db	30
   365  000F74  42                 	db	66
   366  000F75  A2                 	db	162
   367  000F76  0D                 	db	13
   368  000F77                     __end_of__npowers_:
   369                           	opt stack 0
   370  000F77                     atan@coeff_a:
   371                           	opt stack 0
   372  000F77  3C                 	db	60
   373  000F78  04                 	db	4
   374  000F79  42                 	db	66
   375  000F7A  9F                 	db	159
   376  000F7B  6A                 	db	106
   377  000F7C  42                 	db	66
   378  000F7D  90                 	db	144
   379  000F7E  01                 	db	1
   380  000F7F  42                 	db	66
   381  000F80  4D                 	db	77
   382  000F81  BB                 	db	187
   383  000F82  40                 	db	64
   384  000F83  EC                 	db	236
   385  000F84  47                 	db	71
   386  000F85  3E                 	db	62
   387  000F86  8E                 	db	142
   388  000F87  1F                 	db	31
   389  000F88  BB                 	db	187
   390  000F89                     __end_ofatan@coeff_a:
   391                           	opt stack 0
   392  000F89                     atan@coeff_b:
   393                           	opt stack 0
   394  000F89  3C                 	db	60
   395  000F8A  04                 	db	4
   396  000F8B  42                 	db	66
   397  000F8C  5A                 	db	90
   398  000F8D  8B                 	db	139
   399  000F8E  42                 	db	66
   400  000F8F  04                 	db	4
   401  000F90  44                 	db	68
   402  000F91  42                 	db	66
   403  000F92  9C                 	db	156
   404  000F93  4F                 	db	79
   405  000F94  41                 	db	65
   406  000F95  00                 	db	0
   407  000F96  80                 	db	128
   408  000F97  3F                 	db	63
   409  000F98                     __end_ofatan@coeff_b:
   410                           	opt stack 0
   411  000F98                     STR_1:
   412                           
   413                           ; BSR set to: 14
   414  000F98  44                 	db	68	;'D'
   415  000F99  49                 	db	73	;'I'
   416  000F9A  52                 	db	82	;'R'
   417  000F9B  20                 	db	32
   418  000F9C  2F                 	db	47
   419  000F9D  4E                 	db	78	;'N'
   420  000F9E  4F                 	db	79	;'O'
   421  000F9F  52                 	db	82	;'R'
   422  000FA0  00                 	db	0
   423  000FA1                     STR_2:
   424                           
   425                           ; BSR set to: 14
   426  000FA1  44                 	db	68	;'D'
   427  000FA2  3A                 	db	58	;':'
   428  000FA3  25                 	db	37
   429  000FA4  2E                 	db	46
   430  000FA5  33                 	db	51	;'3'
   431  000FA6  66                 	db	102	;'f'
   432  000FA7  00                 	db	0
   433                           
   434                           ; #config settings
   435  000FA8  00                 	db	0	; dummy byte at the end
   436  0000                     
   437                           	psect	nvCOMRAM
   438  000049                     __pnvCOMRAM:
   439                           	opt stack 0
   440  000049                     __displayfunction:
   441                           	opt stack 0
   442  000049                     	ds	1
   443  0000                     _SSP1DATPPSbits	set	3768
   444  0000                     _SSP1CLKPPSbits	set	3767
   445  0000                     _RC4PPS	set	3835
   446  0000                     _RC3PPS	set	3834
   447  0000                     _PIR3bits	set	3789
   448  0000                     _PIE3bits	set	3781
   449  0000                     _PMD5	set	3814
   450  0000                     _PMD4	set	3813
   451  0000                     _PMD3	set	3812
   452  0000                     _PMD2	set	3811
   453  0000                     _PMD1	set	3810
   454  0000                     _PMD0	set	3809
   455  0000                     _OSCTUNE	set	3805
   456  0000                     _OSCFRQ	set	3806
   457  0000                     _OSCEN	set	3804
   458  0000                     _OSCCON3	set	3802
   459  0000                     _OSCCON1	set	3800
   460  0000                     _ODCOND	set	3876
   461  0000                     _ODCONC	set	3871
   462  0000                     _ODCONB	set	3863
   463  0000                     _ODCONA	set	3855
   464  0000                     _ODCONE	set	3884
   465  0000                     _WPUC	set	3872
   466  0000                     _WPUA	set	3856
   467  0000                     _WPUB	set	3864
   468  0000                     _WPUE	set	3885
   469  0000                     _WPUD	set	3877
   470  0000                     _ANSELA	set	3857
   471  0000                     _ANSELE	set	3886
   472  0000                     _ANSELB	set	3865
   473  0000                     _ANSELC	set	3873
   474  0000                     _ANSELD	set	3878
   475  0000                     _SSP1STATbits	set	3989
   476  0000                     _SSP1MSK	set	3988
   477  0000                     _SSP1BUF	set	3986
   478  0000                     _SSP1CON2bits	set	3991
   479  0000                     _SSP1ADD	set	3987
   480  0000                     _SSP1CON2	set	3991
   481  0000                     _SSP1CON1	set	3990
   482  0000                     _SSP1STAT	set	3989
   483  0000                     _SSP1CON1bits	set	3990
   484  0000                     _TRISD	set	3979
   485  0000                     _TRISC	set	3978
   486  0000                     _TRISB	set	3977
   487  0000                     _TRISA	set	3976
   488  0000                     _TRISE	set	3980
   489  0000                     _LATC	set	3973
   490  0000                     _LATB	set	3972
   491  0000                     _LATA	set	3971
   492  0000                     _LATD	set	3974
   493  0000                     _LATE	set	3975
   494  0000                     _INTCONbits	set	4082
   495                           
   496                           	psect	cinit
   497  003740                     __pcinit:
   498                           	opt stack 0
   499  003740                     start_initialization:
   500                           	opt stack 0
   501  003740                     __initialization:
   502                           	opt stack 0
   503                           
   504                           ; Initialize objects allocated to BANK1 (48 bytes)
   505                           ; load TBLPTR registers with __pidataBANK1
   506  003740  0E6A               	movlw	low __pidataBANK1
   507  003742  6EF6               	movwf	tblptrl,c
   508  003744  0E39               	movlw	high __pidataBANK1
   509  003746  6EF7               	movwf	tblptrh,c
   510  003748  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   511  00374A  6EF8               	movwf	tblptru,c
   512  00374C  EE01  F000         	lfsr	0,__pdataBANK1
   513  003750  EE10 F030          	lfsr	1,48
   514  003754                     copy_data0:
   515  003754  0009               	tblrd		*+
   516  003756  CFF5 FFEE          	movff	tablat,postinc0
   517  00375A  50E5               	movf	postdec1,w,c
   518  00375C  50E1               	movf	fsr1l,w,c
   519  00375E  E1FA               	bnz	copy_data0
   520                           
   521                           ; Clear objects allocated to BANK0 (76 bytes)
   522  003760  EE00  F0B2         	lfsr	0,__pbssBANK0
   523  003764  0E4C               	movlw	76
   524  003766                     clear_0:
   525  003766  6AEE               	clrf	postinc0,c
   526  003768  06E8               	decf	wreg,f,c
   527  00376A  E1FD               	bnz	clear_0
   528                           
   529                           ; Clear objects allocated to COMRAM (14 bytes)
   530  00376C  EE00  F03B         	lfsr	0,__pbssCOMRAM
   531  003770  0E0E               	movlw	14
   532  003772                     clear_1:
   533  003772  6AEE               	clrf	postinc0,c
   534  003774  06E8               	decf	wreg,f,c
   535  003776  E1FD               	bnz	clear_1
   536  003778                     end_of_initialization:
   537                           	opt stack 0
   538  003778                     __end_of__initialization:
   539                           	opt stack 0
   540  003778  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   541  00377A  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   542  00377C  0100               	movlb	0
   543  00377E  EFF1  F015         	goto	_main	;jump to C main() function
   544                           tblptru	equ	0xFF8
   545                           tblptrh	equ	0xFF7
   546                           tblptrl	equ	0xFF6
   547                           tablat	equ	0xFF5
   548                           postinc0	equ	0xFEE
   549                           wreg	equ	0xFE8
   550                           postdec1	equ	0xFE5
   551                           fsr1l	equ	0xFE1
   552                           
   553                           	psect	bssCOMRAM
   554  00003B                     __pbssCOMRAM:
   555                           	opt stack 0
   556  00003B                     _i2c1_driver_i2cISR:
   557                           	opt stack 0
   558  00003B                     	ds	3
   559  00003E                     _i2c1_driver_busCollisionISR:
   560                           	opt stack 0
   561  00003E                     	ds	3
   562  000041                     __displaymode:
   563                           	opt stack 0
   564  000041                     	ds	1
   565  000042                     __displaycontrol:
   566                           	opt stack 0
   567  000042                     	ds	1
   568  000043                     _LCD_I2C_BUFFER:
   569                           	opt stack 0
   570  000043                     	ds	1
   571  000044                     XYZ_WriteReg@wrtBuffer:
   572                           	opt stack 0
   573  000044                     	ds	2
   574  000046                     XYZ_ReadTemp@wrtBuffer:
   575                           	opt stack 0
   576  000046                     	ds	1
   577  000047                     XYZ_Read@wrtBuffer:
   578                           	opt stack 0
   579  000047                     	ds	1
   580  000048                     LCD_writeI2C@wrtBuffer:
   581                           	opt stack 0
   582  000048                     	ds	1
   583                           tblptru	equ	0xFF8
   584                           tblptrh	equ	0xFF7
   585                           tblptrl	equ	0xFF6
   586                           tablat	equ	0xFF5
   587                           postinc0	equ	0xFEE
   588                           wreg	equ	0xFE8
   589                           postdec1	equ	0xFE5
   590                           fsr1l	equ	0xFE1
   591                           
   592                           	psect	bssBANK0
   593  0000B2                     __pbssBANK0:
   594                           	opt stack 0
   595  0000B2                     _i2c_status:
   596                           	opt stack 0
   597  0000B2                     	ds	42
   598  0000DC                     _errno:
   599                           	opt stack 0
   600  0000DC                     	ds	2
   601  0000DE                     _vectorString:
   602                           	opt stack 0
   603  0000DE                     	ds	32
   604                           tblptru	equ	0xFF8
   605                           tblptrh	equ	0xFF7
   606                           tblptrl	equ	0xFF6
   607                           tablat	equ	0xFF5
   608                           postinc0	equ	0xFEE
   609                           wreg	equ	0xFE8
   610                           postdec1	equ	0xFE5
   611                           fsr1l	equ	0xFE1
   612                           
   613                           	psect	dataBANK1
   614  000100                     __pdataBANK1:
   615                           	opt stack 0
   616  000100                     _fsmStateTable:
   617                           	opt stack 0
   618  000100                     	ds	48
   619                           tblptru	equ	0xFF8
   620                           tblptrh	equ	0xFF7
   621                           tblptrl	equ	0xFF6
   622                           tablat	equ	0xFF5
   623                           postinc0	equ	0xFEE
   624                           wreg	equ	0xFE8
   625                           postdec1	equ	0xFE5
   626                           fsr1l	equ	0xFE1
   627                           
   628                           	psect	cstackBANK1
   629  000130                     __pcstackBANK1:
   630                           	opt stack 0
   631  000130                     main@az:
   632                           	opt stack 0
   633                           
   634                           ; 3 bytes @ 0x0
   635  000130                     	ds	3
   636  000133                     main@z:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x3
   640  000133                     	ds	2
   641  000135                     main@x:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x5
   645  000135                     	ds	2
   646  000137                     main@y:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x7
   650  000137                     	ds	2
   651                           tblptru	equ	0xFF8
   652                           tblptrh	equ	0xFF7
   653                           tblptrl	equ	0xFF6
   654                           tablat	equ	0xFF5
   655                           postinc0	equ	0xFEE
   656                           wreg	equ	0xFE8
   657                           postdec1	equ	0xFE5
   658                           fsr1l	equ	0xFE1
   659                           
   660                           	psect	cstackBANK0
   661  000060                     __pcstackBANK0:
   662                           	opt stack 0
   663  000060                     ?___ftdiv:
   664                           	opt stack 0
   665  000060                     ?_fround:
   666                           	opt stack 0
   667  000060                     ?_scale:
   668                           	opt stack 0
   669  000060                     ___ftdiv@f1:
   670                           	opt stack 0
   671                           
   672                           ; 3 bytes @ 0x0
   673  000060                     	ds	3
   674  000063                     ___ftdiv@f2:
   675                           	opt stack 0
   676  000063                     _fround$2292:
   677                           	opt stack 0
   678  000063                     _scale$2293:
   679                           	opt stack 0
   680                           
   681                           ; 3 bytes @ 0x3
   682  000063                     	ds	3
   683  000066                     ??___ftdiv:
   684  000066                     scale@scl:
   685                           	opt stack 0
   686  000066                     _fround$2291:
   687                           	opt stack 0
   688                           
   689                           ; 3 bytes @ 0x6
   690  000066                     	ds	1
   691  000067                     ?___fttol:
   692                           	opt stack 0
   693  000067                     ___fttol@f1:
   694                           	opt stack 0
   695                           
   696                           ; 3 bytes @ 0x7
   697  000067                     	ds	2
   698  000069                     fround@prec:
   699                           	opt stack 0
   700  000069                     ___ftdiv@cntr:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x9
   704  000069                     	ds	1
   705  00006A                     ___ftdiv@f3:
   706                           	opt stack 0
   707                           
   708                           ; 3 bytes @ 0xA
   709  00006A                     	ds	1
   710  00006B                     ??___fttol:
   711                           
   712                           ; 1 bytes @ 0xB
   713  00006B                     	ds	2
   714  00006D                     ___ftdiv@exp:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0xD
   718  00006D                     	ds	1
   719  00006E                     ___ftdiv@sign:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0xE
   723  00006E                     	ds	1
   724  00006F                     ?___ftneg:
   725                           	opt stack 0
   726  00006F                     ___ftneg@f1:
   727                           	opt stack 0
   728                           
   729                           ; 3 bytes @ 0xF
   730  00006F                     	ds	1
   731  000070                     ___fttol@sign1:
   732                           	opt stack 0
   733                           
   734                           ; 1 bytes @ 0x10
   735  000070                     	ds	1
   736  000071                     ___fttol@lval:
   737                           	opt stack 0
   738                           
   739                           ; 4 bytes @ 0x11
   740  000071                     	ds	1
   741  000072                     ?___ftadd:
   742                           	opt stack 0
   743  000072                     ?_fabs:
   744                           	opt stack 0
   745  000072                     fabs@d:
   746                           	opt stack 0
   747  000072                     ___ftadd@f1:
   748                           	opt stack 0
   749                           
   750                           ; 3 bytes @ 0x12
   751  000072                     	ds	3
   752  000075                     ___fttol@exp1:
   753                           	opt stack 0
   754  000075                     ___ftadd@f2:
   755                           	opt stack 0
   756  000075                     ___ftge@ff1:
   757                           	opt stack 0
   758                           
   759                           ; 3 bytes @ 0x15
   760  000075                     	ds	3
   761  000078                     ??___ftadd:
   762  000078                     ___ftge@ff2:
   763                           	opt stack 0
   764                           
   765                           ; 3 bytes @ 0x18
   766  000078                     	ds	3
   767  00007B                     ??___ftge:
   768  00007B                     ___ftadd@sign:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x1B
   772  00007B                     	ds	1
   773  00007C                     ___ftadd@exp2:
   774                           	opt stack 0
   775                           
   776                           ; 1 bytes @ 0x1C
   777  00007C                     	ds	1
   778  00007D                     ___ftadd@exp1:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x1D
   782  00007D                     	ds	1
   783  00007E                     ?___ftsub:
   784                           	opt stack 0
   785  00007E                     ?_eval_poly:
   786                           	opt stack 0
   787  00007E                     ___ftsub@f1:
   788                           	opt stack 0
   789  00007E                     eval_poly@x:
   790                           	opt stack 0
   791                           
   792                           ; 3 bytes @ 0x1E
   793  00007E                     	ds	3
   794  000081                     eval_poly@d:
   795                           	opt stack 0
   796  000081                     ___ftsub@f2:
   797                           	opt stack 0
   798                           
   799                           ; 3 bytes @ 0x21
   800  000081                     	ds	2
   801  000083                     eval_poly@n:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x23
   805  000083                     	ds	1
   806  000084                     ?_sprintf:
   807                           	opt stack 0
   808  000084                     sprintf@sp:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0x24
   812  000084                     	ds	1
   813  000085                     eval_poly@res:
   814                           	opt stack 0
   815                           
   816                           ; 3 bytes @ 0x25
   817  000085                     	ds	1
   818  000086                     sprintf@f:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x26
   822  000086                     	ds	2
   823  000088                     ?_atan:
   824                           	opt stack 0
   825  000088                     atan@f:
   826                           	opt stack 0
   827                           
   828                           ; 3 bytes @ 0x28
   829  000088                     	ds	3
   830  00008B                     ??_sprintf:
   831  00008B                     atan@y:
   832                           	opt stack 0
   833                           
   834                           ; 3 bytes @ 0x2B
   835  00008B                     	ds	3
   836  00008E                     atan@x:
   837                           	opt stack 0
   838                           
   839                           ; 3 bytes @ 0x2E
   840  00008E                     	ds	3
   841  000091                     atan@recip:
   842                           	opt stack 0
   843  000091                     _sprintf$2294:
   844                           	opt stack 0
   845                           
   846                           ; 3 bytes @ 0x31
   847  000091                     	ds	1
   848  000092                     atan@val_squared:
   849                           	opt stack 0
   850                           
   851                           ; 3 bytes @ 0x32
   852  000092                     	ds	2
   853  000094                     sprintf@ap:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x34
   857  000094                     	ds	1
   858  000095                     atan@val:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0x35
   862  000095                     	ds	1
   863  000096                     sprintf@flag:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x36
   867  000096                     	ds	2
   868  000098                     ?_atan2:
   869                           	opt stack 0
   870  000098                     atan2@y:
   871                           	opt stack 0
   872  000098                     sprintf@val:
   873                           	opt stack 0
   874                           
   875                           ; 4 bytes @ 0x38
   876  000098                     	ds	3
   877  00009B                     atan2@x:
   878                           	opt stack 0
   879                           
   880                           ; 3 bytes @ 0x3B
   881  00009B                     	ds	1
   882  00009C                     sprintf@exp:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x3C
   886  00009C                     	ds	2
   887  00009E                     _atan2$2296:
   888                           	opt stack 0
   889  00009E                     sprintf@tmpval:
   890                           	opt stack 0
   891                           
   892                           ; 4 bytes @ 0x3E
   893  00009E                     	ds	3
   894  0000A1                     _atan2$2295:
   895                           	opt stack 0
   896                           
   897                           ; 3 bytes @ 0x41
   898  0000A1                     	ds	1
   899  0000A2                     sprintf@prec:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x42
   903  0000A2                     	ds	2
   904  0000A4                     sprintf@fval:
   905                           	opt stack 0
   906  0000A4                     atan2@v:
   907                           	opt stack 0
   908                           
   909                           ; 3 bytes @ 0x44
   910  0000A4                     	ds	3
   911  0000A7                     ?_XYZ_azimuth:
   912                           	opt stack 0
   913  0000A7                     sprintf@c:
   914                           	opt stack 0
   915  0000A7                     XYZ_azimuth@a:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x47
   919  0000A7                     	ds	2
   920  0000A9                     XYZ_azimuth@b:
   921                           	opt stack 0
   922                           
   923                           ; 2 bytes @ 0x49
   924  0000A9                     	ds	2
   925  0000AB                     _XYZ_azimuth$2290:
   926                           	opt stack 0
   927                           
   928                           ; 3 bytes @ 0x4B
   929  0000AB                     	ds	3
   930  0000AE                     XYZ_azimuth@azimuth:
   931                           	opt stack 0
   932                           
   933                           ; 3 bytes @ 0x4E
   934  0000AE                     	ds	3
   935  0000B1                     ??_main:
   936                           
   937                           ; 1 bytes @ 0x51
   938  0000B1                     	ds	1
   939                           tblptru	equ	0xFF8
   940                           tblptrh	equ	0xFF7
   941                           tblptrl	equ	0xFF6
   942                           tablat	equ	0xFF5
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           postdec1	equ	0xFE5
   946                           fsr1l	equ	0xFE1
   947                           
   948                           	psect	cstackCOMRAM
   949  000001                     __pcstackCOMRAM:
   950                           	opt stack 0
   951  000001                     ??i2_i2c1_driver_isNACK:
   952  000001                     i2i2c1_driver_TXData@d:
   953                           	opt stack 0
   954  000001                     i2i2c_setBuffer@buffer:
   955                           	opt stack 0
   956  000001                     i2setCallBack@cb:
   957                           	opt stack 0
   958                           
   959                           ; 3 bytes @ 0x0
   960  000001                     	ds	1
   961  000002                     i2_do_I2C_TX$1023:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x1
   965  000002                     	ds	1
   966  000003                     i2i2c_setBuffer@bufferSize:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x2
   970  000003                     	ds	1
   971  000004                     ??_INTERRUPT_InterruptManager:
   972  000004                     i2setCallBack@p:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x3
   976  000004                     	ds	1
   977  000005                     
   978                           ; 1 bytes @ 0x4
   979  000005                     	ds	1
   980  000006                     i2setCallBack@idx:
   981                           	opt stack 0
   982                           
   983                           ; 1 bytes @ 0x5
   984  000006                     	ds	1
   985  000007                     i2i2c_setDataCompleteCallback@cb:
   986                           	opt stack 0
   987                           
   988                           ; 3 bytes @ 0x6
   989  000007                     	ds	3
   990  00000A                     i2i2c_setDataCompleteCallback@p:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x9
   994  00000A                     	ds	2
   995  00000C                     i2returnStop@p:
   996                           	opt stack 0
   997  00000C                     i2wr1RegCompleteHandler@p:
   998                           	opt stack 0
   999  00000C                     i2rd1RegCompleteHandler@p:
  1000                           	opt stack 0
  1001  00000C                     i2rd2RegCompleteHandler@p:
  1002                           	opt stack 0
  1003  00000C                     i2wr2RegCompleteHandler@p:
  1004                           	opt stack 0
  1005  00000C                     i2rdBlkRegCompleteHandler@p:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0xB
  1009  00000C                     	ds	2
  1010  00000E                     
  1011                           ; 1 bytes @ 0xD
  1012  00000E                     	ds	8
  1013  000016                     ??_isdigit:
  1014  000016                     ??_mssp1_IRQisEnabled:
  1015  000016                     ??_i2c1_driver_isNACK:
  1016  000016                     ?___awmod:
  1017                           	opt stack 0
  1018  000016                     ?___ftpack:
  1019                           	opt stack 0
  1020  000016                     ?__tdiv_to_l_:
  1021                           	opt stack 0
  1022  000016                     ?__div_to_l_:
  1023                           	opt stack 0
  1024  000016                     ?___lldiv:
  1025                           	opt stack 0
  1026  000016                     ?___llmod:
  1027                           	opt stack 0
  1028  000016                     i2c1_driver_TXData@d:
  1029                           	opt stack 0
  1030  000016                     i2c_close@ret:
  1031                           	opt stack 0
  1032  000016                     mssp1_waitForEvent@timeout:
  1033                           	opt stack 0
  1034  000016                     i2c_setBuffer@buffer:
  1035                           	opt stack 0
  1036  000016                     ___awmod@dividend:
  1037                           	opt stack 0
  1038  000016                     i2c1_driver_setBusCollisionISR@f:
  1039                           	opt stack 0
  1040  000016                     i2c1_driver_setI2cISR@f:
  1041                           	opt stack 0
  1042  000016                     setCallBack@cb:
  1043                           	opt stack 0
  1044  000016                     __div_to_l_@f1:
  1045                           	opt stack 0
  1046  000016                     ___ftpack@arg:
  1047                           	opt stack 0
  1048  000016                     __tdiv_to_l_@f1:
  1049                           	opt stack 0
  1050  000016                     ___lldiv@dividend:
  1051                           	opt stack 0
  1052  000016                     ___llmod@dividend:
  1053                           	opt stack 0
  1054                           
  1055                           ; 4 bytes @ 0x15
  1056  000016                     	ds	1
  1057  000017                     _isdigit$1677:
  1058                           	opt stack 0
  1059  000017                     _do_I2C_TX$1023:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x16
  1063  000017                     	ds	1
  1064  000018                     isdigit@c:
  1065                           	opt stack 0
  1066  000018                     i2c_setBuffer@bufferSize:
  1067                           	opt stack 0
  1068  000018                     ___awmod@divisor:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x17
  1072  000018                     	ds	1
  1073  000019                     i2c_open@address:
  1074                           	opt stack 0
  1075  000019                     i2c_masterOperation@read:
  1076                           	opt stack 0
  1077  000019                     ___ftpack@exp:
  1078                           	opt stack 0
  1079  000019                     setCallBack@p:
  1080                           	opt stack 0
  1081  000019                     __div_to_l_@f2:
  1082                           	opt stack 0
  1083  000019                     __tdiv_to_l_@f2:
  1084                           	opt stack 0
  1085                           
  1086                           ; 3 bytes @ 0x18
  1087  000019                     	ds	1
  1088  00001A                     i2c_open@ret:
  1089                           	opt stack 0
  1090  00001A                     i2c_masterOperation@ret:
  1091                           	opt stack 0
  1092  00001A                     ___awmod@counter:
  1093                           	opt stack 0
  1094  00001A                     ___ftpack@sign:
  1095                           	opt stack 0
  1096  00001A                     ___lldiv@divisor:
  1097                           	opt stack 0
  1098  00001A                     ___llmod@divisor:
  1099                           	opt stack 0
  1100                           
  1101                           ; 4 bytes @ 0x19
  1102  00001A                     	ds	1
  1103  00001B                     ??___ftpack:
  1104  00001B                     setCallBack@idx:
  1105                           	opt stack 0
  1106  00001B                     ___awmod@sign:
  1107                           	opt stack 0
  1108  00001B                     i2c_readNBytes@data:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x1A
  1112  00001B                     	ds	1
  1113  00001C                     ??__tdiv_to_l_:
  1114  00001C                     ?___awdiv:
  1115                           	opt stack 0
  1116  00001C                     ___awdiv@dividend:
  1117                           	opt stack 0
  1118  00001C                     i2c_setDataCompleteCallback@cb:
  1119                           	opt stack 0
  1120  00001C                     i2c_setAddressNACKCallback@cb:
  1121                           	opt stack 0
  1122  00001C                     __div_to_l_@quot:
  1123                           	opt stack 0
  1124                           
  1125                           ; 4 bytes @ 0x1B
  1126  00001C                     	ds	1
  1127  00001D                     i2c_readNBytes@len:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0x1C
  1131  00001D                     	ds	1
  1132  00001E                     ?___awtoft:
  1133                           	opt stack 0
  1134  00001E                     ?___lltoft:
  1135                           	opt stack 0
  1136  00001E                     ___llmod@counter:
  1137                           	opt stack 0
  1138  00001E                     ___awdiv@divisor:
  1139                           	opt stack 0
  1140  00001E                     ___awtoft@c:
  1141                           	opt stack 0
  1142  00001E                     ___lldiv@quotient:
  1143                           	opt stack 0
  1144  00001E                     ___lltoft@c:
  1145                           	opt stack 0
  1146                           
  1147                           ; 4 bytes @ 0x1D
  1148  00001E                     	ds	1
  1149  00001F                     i2c_readNBytes@address:
  1150                           	opt stack 0
  1151  00001F                     i2c_setDataCompleteCallback@p:
  1152                           	opt stack 0
  1153  00001F                     i2c_setAddressNACKCallback@p:
  1154                           	opt stack 0
  1155  00001F                     __tdiv_to_l_@quot:
  1156                           	opt stack 0
  1157                           
  1158                           ; 4 bytes @ 0x1E
  1159  00001F                     	ds	1
  1160  000020                     ___awdiv@counter:
  1161                           	opt stack 0
  1162  000020                     __div_to_l_@cntr:
  1163                           	opt stack 0
  1164                           
  1165                           ; 1 bytes @ 0x1F
  1166  000020                     	ds	1
  1167  000021                     ___awdiv@sign:
  1168                           	opt stack 0
  1169  000021                     ___awtoft@sign:
  1170                           	opt stack 0
  1171  000021                     __div_to_l_@exp1:
  1172                           	opt stack 0
  1173  000021                     returnStop@p:
  1174                           	opt stack 0
  1175  000021                     wr1RegCompleteHandler@p:
  1176                           	opt stack 0
  1177  000021                     i2c_writeNBytes@data:
  1178                           	opt stack 0
  1179  000021                     rd1RegCompleteHandler@p:
  1180                           	opt stack 0
  1181  000021                     rd2RegCompleteHandler@p:
  1182                           	opt stack 0
  1183  000021                     wr2RegCompleteHandler@p:
  1184                           	opt stack 0
  1185  000021                     rdBlkRegCompleteHandler@p:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0x20
  1189  000021                     	ds	1
  1190  000022                     ??___lltoft:
  1191  000022                     ___lldiv@counter:
  1192                           	opt stack 0
  1193  000022                     ___awdiv@quotient:
  1194                           	opt stack 0
  1195                           
  1196                           ; 2 bytes @ 0x21
  1197  000022                     	ds	1
  1198  000023                     __tdiv_to_l_@cntr:
  1199                           	opt stack 0
  1200  000023                     i2c_writeNBytes@len:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x22
  1204  000023                     	ds	1
  1205  000024                     ?___wmul:
  1206                           	opt stack 0
  1207  000024                     __tdiv_to_l_@exp1:
  1208                           	opt stack 0
  1209  000024                     ___wmul@multiplier:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x23
  1213  000024                     	ds	1
  1214  000025                     i2c_writeNBytes@address:
  1215                           	opt stack 0
  1216                           
  1217                           ; 1 bytes @ 0x24
  1218  000025                     	ds	1
  1219  000026                     LCD_RS_SET@value:
  1220                           	opt stack 0
  1221  000026                     LCD_EN_SET@value:
  1222                           	opt stack 0
  1223  000026                     LCD_BL_SET@value:
  1224                           	opt stack 0
  1225  000026                     XYZ_WriteReg@val:
  1226                           	opt stack 0
  1227  000026                     ___lltoft@exp:
  1228                           	opt stack 0
  1229  000026                     XYZ_Read@x:
  1230                           	opt stack 0
  1231  000026                     ___wmul@multiplicand:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x25
  1235  000026                     	ds	1
  1236  000027                     ??_LCD_write4bits:
  1237  000027                     XYZ_WriteReg@reg:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x26
  1241  000027                     	ds	1
  1242  000028                     LCD_write4bits@a:
  1243                           	opt stack 0
  1244  000028                     XYZ_setMode@odr:
  1245                           	opt stack 0
  1246  000028                     XYZ_Read@y:
  1247                           	opt stack 0
  1248  000028                     ___wmul@product:
  1249                           	opt stack 0
  1250                           
  1251                           ; 2 bytes @ 0x27
  1252  000028                     	ds	1
  1253  000029                     LCD_send@mode:
  1254                           	opt stack 0
  1255  000029                     XYZ_setMode@rng:
  1256                           	opt stack 0
  1257                           
  1258                           ; 1 bytes @ 0x28
  1259  000029                     	ds	1
  1260  00002A                     ?___ftmul:
  1261                           	opt stack 0
  1262  00002A                     LCD_send@value:
  1263                           	opt stack 0
  1264  00002A                     XYZ_setMode@osr:
  1265                           	opt stack 0
  1266  00002A                     XYZ_Read@z:
  1267                           	opt stack 0
  1268  00002A                     ___ftmul@f1:
  1269                           	opt stack 0
  1270                           
  1271                           ; 3 bytes @ 0x29
  1272  00002A                     	ds	1
  1273  00002B                     LCD_command@value:
  1274                           	opt stack 0
  1275  00002B                     LCD_write@value:
  1276                           	opt stack 0
  1277  00002B                     XYZ_setMode@mode:
  1278                           	opt stack 0
  1279                           
  1280                           ; 1 bytes @ 0x2A
  1281  00002B                     	ds	1
  1282  00002C                     ??_LCD_init:
  1283  00002C                     ??_XYZ_Read:
  1284  00002C                     LCD_setCursor@fila:
  1285                           	opt stack 0
  1286  00002C                     LCD_print@s:
  1287                           	opt stack 0
  1288                           
  1289                           ; 2 bytes @ 0x2B
  1290  00002C                     	ds	1
  1291  00002D                     LCD_setCursor@columna:
  1292                           	opt stack 0
  1293  00002D                     ___ftmul@f2:
  1294                           	opt stack 0
  1295                           
  1296                           ; 3 bytes @ 0x2C
  1297  00002D                     	ds	1
  1298  00002E                     LCD_print@cs:
  1299                           	opt stack 0
  1300                           
  1301                           ; 1 bytes @ 0x2D
  1302  00002E                     	ds	2
  1303  000030                     ??___ftmul:
  1304  000030                     XYZ_Read@readBuffer:
  1305                           	opt stack 0
  1306                           
  1307                           ; 6 bytes @ 0x2F
  1308  000030                     	ds	3
  1309  000033                     ___ftmul@exp:
  1310                           	opt stack 0
  1311                           
  1312                           ; 1 bytes @ 0x32
  1313  000033                     	ds	1
  1314  000034                     ___ftmul@f3_as_product:
  1315                           	opt stack 0
  1316                           
  1317                           ; 3 bytes @ 0x33
  1318  000034                     	ds	3
  1319  000037                     ___ftmul@cntr:
  1320                           	opt stack 0
  1321                           
  1322                           ; 1 bytes @ 0x36
  1323  000037                     	ds	1
  1324  000038                     ___ftmul@sign:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0x37
  1328  000038                     	ds	1
  1329  000039                     ??_eval_poly:
  1330  000039                     
  1331                           ; 1 bytes @ 0x38
  1332  000039                     	ds	2
  1333  00003B                     tblptru	equ	0xFF8
  1334                           tblptrh	equ	0xFF7
  1335                           tblptrl	equ	0xFF6
  1336                           tablat	equ	0xFF5
  1337                           postinc0	equ	0xFEE
  1338                           wreg	equ	0xFE8
  1339                           postdec1	equ	0xFE5
  1340                           fsr1l	equ	0xFE1
  1341                           
  1342                           ; 1 bytes @ 0x3A
  1343 ;;
  1344 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1345 ;;
  1346 ;; *************** function _main *****************
  1347 ;; Defined at:
  1348 ;;		line 55 in file "main.c"
  1349 ;; Parameters:    Size  Location     Type
  1350 ;;		None
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;  az              3    0[BANK1 ] float 
  1353 ;;  y               2    7[BANK1 ] int 
  1354 ;;  x               2    5[BANK1 ] int 
  1355 ;;  z               2    3[BANK1 ] int 
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  1    wreg      void 
  1358 ;; Registers used:
  1359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1366 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1368 ;;      Totals:         0       1       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1369 ;;Total ram usage:       10 bytes
  1370 ;; Hardware stack levels required when called:   23
  1371 ;; This function calls:
  1372 ;;		_LCD_init
  1373 ;;		_LCD_print
  1374 ;;		_LCD_setCursor
  1375 ;;		_SYSTEM_Initialize
  1376 ;;		_XYZ_Init
  1377 ;;		_XYZ_Read
  1378 ;;		_XYZ_azimuth
  1379 ;;		_sprintf
  1380 ;; This function is called by:
  1381 ;;		Startup code after reset
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           	psect	text0
  1386  002BE2                     __ptext0:
  1387                           	opt stack 0
  1388  002BE2                     _main:
  1389                           	opt stack 8
  1390                           
  1391                           ;main.c: 58: SYSTEM_Initialize();
  1392                           
  1393                           ;incstack = 0
  1394  002BE2  ECA5  F01E         	call	_SYSTEM_Initialize	;wreg free
  1395                           
  1396                           ;main.c: 65: (INTCONbits.GIE = 1);
  1397  002BE6  8EF2               	bsf	intcon,7,c	;volatile
  1398                           
  1399                           ;main.c: 71: (INTCONbits.PEIE = 1);
  1400  002BE8  8CF2               	bsf	intcon,6,c	;volatile
  1401                           
  1402                           ;main.c: 76: LCD_init();
  1403  002BEA  EC58  F019         	call	_LCD_init	;wreg free
  1404                           
  1405                           ;main.c: 77: XYZ_Init();
  1406  002BEE  EC73  F01D         	call	_XYZ_Init	;wreg free
  1407                           
  1408                           ;main.c: 79: LCD_print("DIR /NOR");
  1409  002BF2  0E98               	movlw	low STR_1
  1410  002BF4  6E2C               	movwf	LCD_print@s,c
  1411  002BF6  0E0F               	movlw	high STR_1
  1412  002BF8  6E2D               	movwf	LCD_print@s+1,c
  1413  002BFA  EC20  F01A         	call	_LCD_print	;wreg free
  1414  002BFE                     
  1415                           ;main.c: 82: {
  1416                           ;main.c: 83: _delay((unsigned long)((100)*(1000000/4000.0)));
  1417  002BFE  0E21               	movlw	33
  1418  002C00  0100               	movlb	0	; () banked
  1419  002C02  6FB1               	movwf	??_main& (0+255),b
  1420  002C04  0E76               	movlw	118
  1421  002C06                     u6487:
  1422  002C06  2EE8               	decfsz	wreg,f,c
  1423  002C08  D7FE               	bra	u6487
  1424  002C0A  2FB1               	decfsz	??_main& (0+255),f,b
  1425  002C0C  D7FC               	bra	u6487
  1426  002C0E  F000               	nop	
  1427                           
  1428                           ;main.c: 84: int x, y, z;
  1429                           ;main.c: 86: XYZ_Read(&x, &y, &z);
  1430  002C10  0E35               	movlw	low main@x
  1431  002C12  6E26               	movwf	XYZ_Read@x,c
  1432  002C14  0E01               	movlw	high main@x
  1433  002C16  6E27               	movwf	XYZ_Read@x+1,c
  1434  002C18  0E37               	movlw	low main@y
  1435  002C1A  6E28               	movwf	XYZ_Read@y,c
  1436  002C1C  0E01               	movlw	high main@y
  1437  002C1E  6E29               	movwf	XYZ_Read@y+1,c
  1438  002C20  0E33               	movlw	low main@z
  1439  002C22  6E2A               	movwf	XYZ_Read@z,c
  1440  002C24  0E01               	movlw	high main@z
  1441  002C26  6E2B               	movwf	XYZ_Read@z+1,c
  1442  002C28  EC44  F016         	call	_XYZ_Read	;wreg free
  1443                           
  1444                           ;main.c: 87: float az = XYZ_azimuth(&y, &x);
  1445  002C2C  0E37               	movlw	low main@y
  1446  002C2E  0100               	movlb	0	; () banked
  1447  002C30  6FA7               	movwf	XYZ_azimuth@a& (0+255),b
  1448  002C32  0E01               	movlw	high main@y
  1449  002C34  6FA8               	movwf	(XYZ_azimuth@a+1)& (0+255),b
  1450  002C36  0E35               	movlw	low main@x
  1451  002C38  6FA9               	movwf	XYZ_azimuth@b& (0+255),b
  1452  002C3A  0E01               	movlw	high main@x
  1453  002C3C  6FAA               	movwf	(XYZ_azimuth@b+1)& (0+255),b
  1454  002C3E  ECD8  F014         	call	_XYZ_azimuth	;wreg free
  1455  002C42  C0A7  F130         	movff	?_XYZ_azimuth,main@az
  1456  002C46  C0A8  F131         	movff	?_XYZ_azimuth+1,main@az+1
  1457  002C4A  C0A9  F132         	movff	?_XYZ_azimuth+2,main@az+2
  1458                           
  1459                           ;main.c: 89: sprintf(vectorString, "D:%.3f", az);
  1460  002C4E  0EDE               	movlw	low _vectorString
  1461  002C50  0100               	movlb	0	; () banked
  1462  002C52  6F84               	movwf	sprintf@sp& (0+255),b
  1463  002C54  0E00               	movlw	high _vectorString
  1464  002C56  6F85               	movwf	(sprintf@sp+1)& (0+255),b
  1465  002C58  0EA1               	movlw	low STR_2
  1466  002C5A  6F86               	movwf	sprintf@f& (0+255),b
  1467  002C5C  0E0F               	movlw	high STR_2
  1468  002C5E  6F87               	movwf	(sprintf@f+1)& (0+255),b
  1469  002C60  C130  F088         	movff	main@az,?_sprintf+4
  1470  002C64  C131  F089         	movff	main@az+1,?_sprintf+5
  1471  002C68  C132  F08A         	movff	main@az+2,?_sprintf+6
  1472  002C6C  ECD5  F007         	call	_sprintf	;wreg free
  1473                           
  1474                           ;main.c: 90: LCD_setCursor(0, 1);
  1475  002C70  0E01               	movlw	1
  1476  002C72  6E2C               	movwf	LCD_setCursor@fila,c
  1477  002C74  0E00               	movlw	0
  1478  002C76  EC12  F01B         	call	_LCD_setCursor
  1479                           
  1480                           ;main.c: 91: LCD_print(vectorString);
  1481  002C7A  0EDE               	movlw	low _vectorString
  1482  002C7C  6E2C               	movwf	LCD_print@s,c
  1483  002C7E  0E00               	movlw	high _vectorString
  1484  002C80  6E2D               	movwf	LCD_print@s+1,c
  1485  002C82  EC20  F01A         	call	_LCD_print	;wreg free
  1486  002C86  D7BB               	goto	l632
  1487  002C88                     __end_of_main:
  1488                           	opt stack 0
  1489                           tblptru	equ	0xFF8
  1490                           tblptrh	equ	0xFF7
  1491                           tblptrl	equ	0xFF6
  1492                           tablat	equ	0xFF5
  1493                           intcon	equ	0xFF2
  1494                           postinc0	equ	0xFEE
  1495                           wreg	equ	0xFE8
  1496                           postdec1	equ	0xFE5
  1497                           fsr1l	equ	0xFE1
  1498                           
  1499 ;; *************** function _sprintf *****************
  1500 ;; Defined at:
  1501 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;  sp              2   36[BANK0 ] PTR unsigned char 
  1504 ;;		 -> vectorString(32), 
  1505 ;;  f               2   38[BANK0 ] PTR const unsigned char 
  1506 ;;		 -> STR_2(7), 
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;  tmpval          4   62[BANK0 ] struct .
  1509 ;;  val             4   56[BANK0 ] unsigned long 
  1510 ;;  fval            3   68[BANK0 ] unsigned long 
  1511 ;;  cp              3    0        PTR const unsigned char 
  1512 ;;  prec            2   66[BANK0 ] int 
  1513 ;;  exp             2   60[BANK0 ] int 
  1514 ;;  flag            2   54[BANK0 ] unsigned short 
  1515 ;;  ap              2   52[BANK0 ] PTR void [1]
  1516 ;;		 -> ?_sprintf(2), 
  1517 ;;  len             2    0        unsigned int 
  1518 ;;  width           2    0        int 
  1519 ;;  c               1   71[BANK0 ] char 
  1520 ;;  d               1    0        unsigned char 
  1521 ;; Return value:  Size  Location     Type
  1522 ;;                  2   36[BANK0 ] int 
  1523 ;; Registers used:
  1524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1525 ;; Tracked objects:
  1526 ;;		On entry : 0/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1530 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1531 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1532 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1533 ;;      Totals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1534 ;;Total ram usage:       36 bytes
  1535 ;; Hardware stack levels used:    1
  1536 ;; Hardware stack levels required when called:    9
  1537 ;; This function calls:
  1538 ;;		___awdiv
  1539 ;;		___ftadd
  1540 ;;		___ftge
  1541 ;;		___ftmul
  1542 ;;		___ftneg
  1543 ;;		___ftsub
  1544 ;;		___fttol
  1545 ;;		___lldiv
  1546 ;;		___llmod
  1547 ;;		___lltoft
  1548 ;;		___wmul
  1549 ;;		__div_to_l_
  1550 ;;		__tdiv_to_l_
  1551 ;;		_fround
  1552 ;;		_isdigit
  1553 ;;		_scale
  1554 ;; This function is called by:
  1555 ;;		_main
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text1
  1560  000FAA                     __ptext1:
  1561                           	opt stack 0
  1562  000FAA                     _sprintf:
  1563                           	opt stack 21
  1564                           
  1565                           ;doprnt.c: 494: va_list ap;
  1566                           ;doprnt.c: 499: signed char c;
  1567                           ;doprnt.c: 501: int width;
  1568                           ;doprnt.c: 504: int prec;
  1569                           ;doprnt.c: 508: unsigned short flag;
  1570                           ;doprnt.c: 515: char d;
  1571                           ;doprnt.c: 516: double fval;
  1572                           ;doprnt.c: 517: int exp;
  1573                           ;doprnt.c: 523: union {
  1574                           ;doprnt.c: 524: unsigned long vd;
  1575                           ;doprnt.c: 525: double integ;
  1576                           ;doprnt.c: 526: } tmpval;
  1577                           ;doprnt.c: 528: unsigned long val;
  1578                           ;doprnt.c: 529: unsigned len;
  1579                           ;doprnt.c: 530: const char * cp;
  1580                           ;doprnt.c: 533: *ap = __va_start();
  1581                           
  1582                           ;incstack = 0
  1583  000FAA  0E88               	movlw	low (?_sprintf+4)
  1584  000FAC  0100               	movlb	0	; () banked
  1585  000FAE  6F94               	movwf	sprintf@ap& (0+255),b
  1586  000FB0  0E00               	movlw	high (?_sprintf+4)
  1587  000FB2  6F95               	movwf	(sprintf@ap+1)& (0+255),b
  1588                           
  1589                           ;doprnt.c: 536: while(c = *f++) {
  1590  000FB4  D37D               	goto	l910
  1591  000FB6                     
  1592                           ; BSR set to: 0
  1593                           ;doprnt.c: 538: if(c != '%')
  1594                           
  1595                           ; BSR set to: 0
  1596  000FB6  0E25               	movlw	37
  1597  000FB8  19A7               	xorwf	sprintf@c& (0+255),w,b
  1598  000FBA  B4D8               	btfsc	status,2,c
  1599  000FBC  D007               	goto	l856
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;doprnt.c: 540: {
  1603                           ;doprnt.c: 541: ((*sp++ = (c)));
  1604  000FBE  C084  FFD9         	movff	sprintf@sp,fsr2l
  1605  000FC2  C085  FFDA         	movff	sprintf@sp+1,fsr2h
  1606  000FC6  C0A7  FFDF         	movff	sprintf@c,indf2
  1607  000FCA  D370               	goto	l7385
  1608  000FCC                     l856:
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;doprnt.c: 543: }
  1612                           ;doprnt.c: 548: flag = 0;
  1613                           
  1614                           ; BSR set to: 0
  1615  000FCC  0E00               	movlw	0
  1616  000FCE  6F97               	movwf	(sprintf@flag+1)& (0+255),b
  1617  000FD0  0E00               	movlw	0
  1618  000FD2  6F96               	movwf	sprintf@flag& (0+255),b
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;doprnt.c: 611: if(*f == '.') {
  1622  000FD4  C086  FFF6         	movff	sprintf@f,tblptrl
  1623  000FD8  C087  FFF7         	movff	sprintf@f+1,tblptrh
  1624  000FDC                     	if	0	;tblptru may be non-zero
  1625  000FDC                     	endif
  1626  000FDC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1627  000FDC  0E00               	movlw	low (__mediumconst shr (0+16))
  1628  000FDE  6EF8               	movwf	tblptru,c
  1629  000FE0                     	endif
  1630  000FE0  0008               	tblrd		*
  1631  000FE2  50F5               	movf	tablat,w,c
  1632  000FE4  0A2E               	xorlw	46
  1633  000FE6  A4D8               	btfss	status,2,c
  1634  000FE8  D033               	goto	l857
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;doprnt.c: 612: flag |= 0x4000;
  1638  000FEA  8D97               	bsf	(sprintf@flag+1)& (0+255),6,b
  1639                           
  1640                           ;doprnt.c: 613: f++;
  1641  000FEC  4B86               	infsnz	sprintf@f& (0+255),f,b
  1642  000FEE  2B87               	incf	(sprintf@f+1)& (0+255),f,b
  1643                           
  1644                           ; BSR set to: 0
  1645                           ;doprnt.c: 620: {
  1646                           ;doprnt.c: 621: prec = 0;
  1647  000FF0  0E00               	movlw	0
  1648  000FF2  6FA3               	movwf	(sprintf@prec+1)& (0+255),b
  1649  000FF4  0E00               	movlw	0
  1650  000FF6  6FA2               	movwf	sprintf@prec& (0+255),b
  1651                           
  1652                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1653  000FF8  D01E               	goto	l858
  1654  000FFA                     
  1655                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1656                           
  1657                           ; BSR set to: 0
  1658  000FFA  C0A2  F024         	movff	sprintf@prec,___wmul@multiplier
  1659  000FFE  C0A3  F025         	movff	sprintf@prec+1,___wmul@multiplier+1
  1660  001002  0E00               	movlw	0
  1661  001004  6E27               	movwf	___wmul@multiplicand+1,c
  1662  001006  0E0A               	movlw	10
  1663  001008  6E26               	movwf	___wmul@multiplicand,c
  1664  00100A  EC40  F01D         	call	___wmul	;wreg free
  1665  00100E  C086  FFF6         	movff	sprintf@f,tblptrl
  1666  001012  C087  FFF7         	movff	sprintf@f+1,tblptrh
  1667  001016                     	if	0	;tblptru may be non-zero
  1668  001016                     	endif
  1669  001016                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1670  001016  0E00               	movlw	low (__mediumconst shr (0+16))
  1671  001018  6EF8               	movwf	tblptru,c
  1672  00101A                     	endif
  1673  00101A  0008               	tblrd		*
  1674  00101C  50F5               	movf	tablat,w,c
  1675  00101E  2624               	addwf	?___wmul,f,c
  1676  001020  0E00               	movlw	0
  1677  001022  2225               	addwfc	?___wmul+1,f,c
  1678  001024  0ED0               	movlw	208
  1679  001026  2424               	addwf	?___wmul,w,c
  1680  001028  0100               	movlb	0	; () banked
  1681  00102A  6FA2               	movwf	sprintf@prec& (0+255),b
  1682  00102C  0EFF               	movlw	255
  1683  00102E  2025               	addwfc	?___wmul+1,w,c
  1684  001030  6FA3               	movwf	(sprintf@prec+1)& (0+255),b
  1685                           
  1686                           ; BSR set to: 0
  1687  001032  4B86               	infsnz	sprintf@f& (0+255),f,b
  1688  001034  2B87               	incf	(sprintf@f+1)& (0+255),f,b
  1689  001036                     l858:
  1690                           
  1691                           ; BSR set to: 0
  1692                           
  1693                           ; BSR set to: 0
  1694  001036  C086  FFF6         	movff	sprintf@f,tblptrl
  1695  00103A  C087  FFF7         	movff	sprintf@f+1,tblptrh
  1696  00103E                     	if	0	;tblptru may be non-zero
  1697  00103E                     	endif
  1698  00103E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1699  00103E  0E00               	movlw	low (__mediumconst shr (0+16))
  1700  001040  6EF8               	movwf	tblptru,c
  1701  001042                     	endif
  1702  001042  0008               	tblrd		*
  1703  001044  50F5               	movf	tablat,w,c
  1704  001046  EC64  F01D         	call	_isdigit
  1705  00104A  A0D8               	btfss	status,0,c
  1706  00104C  D00A               	goto	l862
  1707  00104E  D7D5               	goto	l859
  1708  001050                     l857:
  1709                           
  1710                           ;doprnt.c: 626: prec = 0;
  1711  001050  0E00               	movlw	0
  1712  001052  0100               	movlb	0	; () banked
  1713  001054  6FA3               	movwf	(sprintf@prec+1)& (0+255),b
  1714  001056  0E00               	movlw	0
  1715  001058  6FA2               	movwf	sprintf@prec& (0+255),b
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;doprnt.c: 628: flag |= 0x1000;
  1719  00105A  8997               	bsf	(sprintf@flag+1)& (0+255),4,b
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;doprnt.c: 630: }
  1723                           ;doprnt.c: 635: switch(c = *f++) {
  1724  00105C  D002               	goto	l862
  1725  00105E                     
  1726                           ; BSR set to: 0
  1727                           ;doprnt.c: 663: flag |= 0x400;
  1728                           
  1729                           ; BSR set to: 0
  1730  00105E  8597               	bsf	(sprintf@flag+1)& (0+255),2,b
  1731                           
  1732                           ;doprnt.c: 664: break;
  1733  001060  D014               	goto	l866
  1734  001062                     l862:
  1735                           
  1736                           ; BSR set to: 0
  1737  001062  C086  FFF6         	movff	sprintf@f,tblptrl
  1738  001066  C087  FFF7         	movff	sprintf@f+1,tblptrh
  1739  00106A  0100               	movlb	0	; () banked
  1740  00106C  4B86               	infsnz	sprintf@f& (0+255),f,b
  1741  00106E  2B87               	incf	(sprintf@f+1)& (0+255),f,b
  1742  001070                     	if	0	;tblptru may be non-zero
  1743  001070                     	endif
  1744  001070                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1745  001070  0E00               	movlw	low (__mediumconst shr (0+16))
  1746  001072  6EF8               	movwf	tblptru,c
  1747  001074                     	endif
  1748  001074  0008               	tblrd		*
  1749  001076  CFF5 F0A7          	movff	tablat,sprintf@c
  1750  00107A  51A7               	movf	sprintf@c& (0+255),w,b
  1751                           
  1752                           ; Switch size 1, requested type "space"
  1753                           ; Number of cases is 2, Range of values is 0 to 102
  1754                           ; switch strategies available:
  1755                           ; Name         Instructions Cycles
  1756                           ; simple_byte            7     4 (average)
  1757                           ;	Chosen strategy is simple_byte
  1758  00107C  0A00               	xorlw	0	; case 0
  1759  00107E  B4D8               	btfsc	status,2,c
  1760  001080  D325               	goto	u6210
  1761  001082  0A66               	xorlw	102	; case 102
  1762  001084  B4D8               	btfsc	status,2,c
  1763  001086  D7EB               	goto	l865
  1764  001088  D313               	goto	l910
  1765  00108A                     l866:
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;doprnt.c: 825: if(flag & (0x700)) {
  1769                           
  1770                           ; BSR set to: 0
  1771  00108A  0E07               	movlw	7
  1772  00108C  1597               	andwf	(sprintf@flag+1)& (0+255),w,b
  1773  00108E  B4D8               	btfsc	status,2,c
  1774  001090  D2D3               	goto	l868
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;doprnt.c: 827: if(flag & 0x1000)
  1778  001092  A997               	btfss	(sprintf@flag+1)& (0+255),4,b
  1779  001094  D004               	goto	l869
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;doprnt.c: 829: prec = 6;
  1783  001096  0E00               	movlw	0
  1784  001098  6FA3               	movwf	(sprintf@prec+1)& (0+255),b
  1785  00109A  0E06               	movlw	6
  1786  00109C  6FA2               	movwf	sprintf@prec& (0+255),b
  1787  00109E                     l869:
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1791                           
  1792                           ; BSR set to: 0
  1793  00109E  C094  FFD9         	movff	sprintf@ap,fsr2l
  1794  0010A2  C095  FFDA         	movff	sprintf@ap+1,fsr2h
  1795  0010A6  CFDE F0A4          	movff	postinc2,sprintf@fval
  1796  0010AA  CFDE F0A5          	movff	postinc2,sprintf@fval+1
  1797  0010AE  CFDD F0A6          	movff	postdec2,sprintf@fval+2
  1798                           
  1799                           ; BSR set to: 0
  1800  0010B2  0E03               	movlw	3
  1801  0010B4  2794               	addwf	sprintf@ap& (0+255),f,b
  1802  0010B6  0E00               	movlw	0
  1803  0010B8  2395               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;doprnt.c: 831: if(fval < 0.0) {
  1807  0010BA  AFA6               	btfss	(sprintf@fval+2)& (0+255),7,b
  1808  0010BC  D011               	goto	l870
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;doprnt.c: 832: fval = -fval;
  1812  0010BE  C0A4  F06F         	movff	sprintf@fval,___ftneg@f1
  1813  0010C2  C0A5  F070         	movff	sprintf@fval+1,___ftneg@f1+1
  1814  0010C6  C0A6  F071         	movff	sprintf@fval+2,___ftneg@f1+2
  1815  0010CA  EC2D  F01D         	call	___ftneg	;wreg free
  1816  0010CE  C06F  F0A4         	movff	?___ftneg,sprintf@fval
  1817  0010D2  C070  F0A5         	movff	?___ftneg+1,sprintf@fval+1
  1818  0010D6  C071  F0A6         	movff	?___ftneg+2,sprintf@fval+2
  1819                           
  1820                           ;doprnt.c: 833: flag |= 0x03;
  1821  0010DA  0E03               	movlw	3
  1822  0010DC  0100               	movlb	0	; () banked
  1823  0010DE  1396               	iorwf	sprintf@flag& (0+255),f,b
  1824  0010E0                     l870:
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;doprnt.c: 834: }
  1828                           ;doprnt.c: 835: exp = 0;
  1829                           
  1830                           ; BSR set to: 0
  1831  0010E0  0E00               	movlw	0
  1832  0010E2  6F9D               	movwf	(sprintf@exp+1)& (0+255),b
  1833  0010E4  0E00               	movlw	0
  1834  0010E6  6F9C               	movwf	sprintf@exp& (0+255),b
  1835                           
  1836                           ; BSR set to: 0
  1837                           ;doprnt.c: 836: if( fval!=0) {
  1838  0010E8  51A4               	movf	sprintf@fval& (0+255),w,b
  1839  0010EA  11A5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1840  0010EC  11A6               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1841  0010EE  B4D8               	btfsc	status,2,c
  1842  0010F0  D087               	goto	l875
  1843                           
  1844                           ; BSR set to: 0
  1845                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1846  0010F2  0E82               	movlw	130
  1847  0010F4  6F8B               	movwf	??_sprintf& (0+255),b
  1848  0010F6  0EFF               	movlw	255
  1849  0010F8  6F8C               	movwf	(??_sprintf+1)& (0+255),b
  1850  0010FA  C0A4  F08D         	movff	sprintf@fval,??_sprintf+2
  1851  0010FE  C0A5  F08E         	movff	sprintf@fval+1,??_sprintf+3
  1852  001102  C0A6  F08F         	movff	sprintf@fval+2,??_sprintf+4
  1853  001106  C0A7  F090         	movff	sprintf@fval+3,??_sprintf+5
  1854  00110A  0E10               	movlw	16
  1855  00110C  D005               	goto	u5960
  1856  00110E                     u5965:
  1857  00110E  90D8               	bcf	status,0,c
  1858  001110  3390               	rrcf	(??_sprintf+5)& (0+255),f,b
  1859  001112  338F               	rrcf	(??_sprintf+4)& (0+255),f,b
  1860  001114  338E               	rrcf	(??_sprintf+3)& (0+255),f,b
  1861  001116  338D               	rrcf	(??_sprintf+2)& (0+255),f,b
  1862  001118                     u5960:
  1863  001118  2EE8               	decfsz	wreg,f,c
  1864  00111A  D7F9               	goto	u5965
  1865  00111C  518D               	movf	(??_sprintf+2)& (0+255),w,b
  1866  00111E  258B               	addwf	??_sprintf& (0+255),w,b
  1867  001120  6F9C               	movwf	sprintf@exp& (0+255),b
  1868  001122  0E00               	movlw	0
  1869  001124  218C               	addwfc	(??_sprintf+1)& (0+255),w,b
  1870  001126  6F9D               	movwf	(sprintf@exp+1)& (0+255),b
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;doprnt.c: 838: exp--;
  1874  001128  079C               	decf	sprintf@exp& (0+255),f,b
  1875  00112A  A0D8               	btfss	status,0,c
  1876  00112C  079D               	decf	(sprintf@exp+1)& (0+255),f,b
  1877                           
  1878                           ; BSR set to: 0
  1879                           ;doprnt.c: 839: exp *= 3;
  1880  00112E  C09C  F024         	movff	sprintf@exp,___wmul@multiplier
  1881  001132  C09D  F025         	movff	sprintf@exp+1,___wmul@multiplier+1
  1882  001136  0E00               	movlw	0
  1883  001138  6E27               	movwf	___wmul@multiplicand+1,c
  1884  00113A  0E03               	movlw	3
  1885  00113C  6E26               	movwf	___wmul@multiplicand,c
  1886  00113E  EC40  F01D         	call	___wmul	;wreg free
  1887  001142  C024  F09C         	movff	?___wmul,sprintf@exp
  1888  001146  C025  F09D         	movff	?___wmul+1,sprintf@exp+1
  1889                           
  1890                           ;doprnt.c: 840: exp /= 10;
  1891  00114A  C09C  F01C         	movff	sprintf@exp,___awdiv@dividend
  1892  00114E  C09D  F01D         	movff	sprintf@exp+1,___awdiv@dividend+1
  1893  001152  0E00               	movlw	0
  1894  001154  6E1F               	movwf	___awdiv@divisor+1,c
  1895  001156  0E0A               	movlw	10
  1896  001158  6E1E               	movwf	___awdiv@divisor,c
  1897  00115A  EC6F  F017         	call	___awdiv	;wreg free
  1898  00115E  C01C  F09C         	movff	?___awdiv,sprintf@exp
  1899  001162  C01D  F09D         	movff	?___awdiv+1,sprintf@exp+1
  1900                           
  1901                           ;doprnt.c: 841: if(exp < 0)
  1902  001166  0100               	movlb	0	; () banked
  1903  001168  AF9D               	btfss	(sprintf@exp+1)& (0+255),7,b
  1904  00116A  D003               	goto	l872
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;doprnt.c: 842: exp--;
  1908  00116C  079C               	decf	sprintf@exp& (0+255),f,b
  1909  00116E  A0D8               	btfss	status,0,c
  1910  001170  079D               	decf	(sprintf@exp+1)& (0+255),f,b
  1911  001172                     l872:
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1915                           
  1916                           ; BSR set to: 0
  1917  001172  519C               	movf	sprintf@exp& (0+255),w,b
  1918  001174  0800               	sublw	0
  1919  001176  EC6D  F00B         	call	_scale
  1920  00117A  C060  F09E         	movff	?_scale,sprintf@tmpval
  1921  00117E  C061  F09F         	movff	?_scale+1,sprintf@tmpval+1
  1922  001182  C062  F0A0         	movff	?_scale+2,sprintf@tmpval+2
  1923                           
  1924                           ;doprnt.c: 847: tmpval.integ *= fval;
  1925  001186  C09E  F02A         	movff	sprintf@tmpval,___ftmul@f1
  1926  00118A  C09F  F02B         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1927  00118E  C0A0  F02C         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1928  001192  C0A4  F02D         	movff	sprintf@fval,___ftmul@f2
  1929  001196  C0A5  F02E         	movff	sprintf@fval+1,___ftmul@f2+1
  1930  00119A  C0A6  F02F         	movff	sprintf@fval+2,___ftmul@f2+2
  1931  00119E  EC7B  F013         	call	___ftmul	;wreg free
  1932  0011A2  C02A  F09E         	movff	?___ftmul,sprintf@tmpval
  1933  0011A6  C02B  F09F         	movff	?___ftmul+1,sprintf@tmpval+1
  1934  0011AA  C02C  F0A0         	movff	?___ftmul+2,sprintf@tmpval+2
  1935                           
  1936                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1937  0011AE  C09E  F075         	movff	sprintf@tmpval,___ftge@ff1
  1938  0011B2  C09F  F076         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1939  0011B6  C0A0  F077         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1940  0011BA  0E00               	movlw	0
  1941  0011BC  0100               	movlb	0	; () banked
  1942  0011BE  6F78               	movwf	___ftge@ff2& (0+255),b
  1943  0011C0  0E80               	movlw	128
  1944  0011C2  6F79               	movwf	(___ftge@ff2+1)& (0+255),b
  1945  0011C4  0E3F               	movlw	63
  1946  0011C6  6F7A               	movwf	(___ftge@ff2+2)& (0+255),b
  1947  0011C8  ECDE  F016         	call	___ftge	;wreg free
  1948  0011CC  0100               	movlb	0	; () banked
  1949  0011CE  B0D8               	btfsc	status,0,c
  1950  0011D0  D004               	goto	l873
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;doprnt.c: 849: exp--;
  1954  0011D2  079C               	decf	sprintf@exp& (0+255),f,b
  1955  0011D4  A0D8               	btfss	status,0,c
  1956  0011D6  079D               	decf	(sprintf@exp+1)& (0+255),f,b
  1957  0011D8  D013               	goto	l875
  1958  0011DA                     l873:
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1962                           
  1963                           ; BSR set to: 0
  1964  0011DA  C09E  F075         	movff	sprintf@tmpval,___ftge@ff1
  1965  0011DE  C09F  F076         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1966  0011E2  C0A0  F077         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1967  0011E6  0E00               	movlw	0
  1968  0011E8  6F78               	movwf	___ftge@ff2& (0+255),b
  1969  0011EA  0E20               	movlw	32
  1970  0011EC  6F79               	movwf	(___ftge@ff2+1)& (0+255),b
  1971  0011EE  0E41               	movlw	65
  1972  0011F0  6F7A               	movwf	(___ftge@ff2+2)& (0+255),b
  1973  0011F2  ECDE  F016         	call	___ftge	;wreg free
  1974  0011F6  0100               	movlb	0	; () banked
  1975  0011F8  A0D8               	btfss	status,0,c
  1976  0011FA  D002               	goto	l875
  1977                           
  1978                           ; BSR set to: 0
  1979                           ;doprnt.c: 851: exp++;
  1980  0011FC  4B9C               	infsnz	sprintf@exp& (0+255),f,b
  1981  0011FE  2B9D               	incf	(sprintf@exp+1)& (0+255),f,b
  1982  001200                     l875:
  1983                           
  1984                           ; BSR set to: 0
  1985                           ;doprnt.c: 852: }
  1986                           ;doprnt.c: 1112: if(prec <= 12)
  1987                           
  1988                           ; BSR set to: 0
  1989                           
  1990                           ; BSR set to: 0
  1991                           
  1992                           ; BSR set to: 0
  1993  001200  BFA3               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1994  001202  D006               	goto	u6000
  1995  001204  51A3               	movf	(sprintf@prec+1)& (0+255),w,b
  1996  001206  E11B               	bnz	l7267
  1997  001208  0E0D               	movlw	13
  1998  00120A  5DA2               	subwf	sprintf@prec& (0+255),w,b
  1999  00120C  B0D8               	btfsc	status,0,c
  2000  00120E  D017               	goto	l876
  2001  001210                     u6000:
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;doprnt.c: 1113: fval += fround(prec);
  2005  001210  C0A4  F072         	movff	sprintf@fval,___ftadd@f1
  2006  001214  C0A5  F073         	movff	sprintf@fval+1,___ftadd@f1+1
  2007  001218  C0A6  F074         	movff	sprintf@fval+2,___ftadd@f1+2
  2008  00121C  51A2               	movf	sprintf@prec& (0+255),w,b
  2009  00121E  ECA1  F00D         	call	_fround
  2010  001222  C060  F075         	movff	?_fround,___ftadd@f2
  2011  001226  C061  F076         	movff	?_fround+1,___ftadd@f2+1
  2012  00122A  C062  F077         	movff	?_fround+2,___ftadd@f2+2
  2013  00122E  ECFB  F010         	call	___ftadd	;wreg free
  2014  001232  C072  F0A4         	movff	?___ftadd,sprintf@fval
  2015  001236  C073  F0A5         	movff	?___ftadd+1,sprintf@fval+1
  2016  00123A  C074  F0A6         	movff	?___ftadd+2,sprintf@fval+2
  2017  00123E                     l876:
  2018  00123E                     l7267:
  2019                           
  2020                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2021  00123E  0100               	movlb	0	; () banked
  2022  001240  BF9D               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2023  001242  D006               	goto	u6010
  2024  001244  519D               	movf	(sprintf@exp+1)& (0+255),w,b
  2025  001246  E11F               	bnz	l7275
  2026  001248  0E0A               	movlw	10
  2027  00124A  5D9C               	subwf	sprintf@exp& (0+255),w,b
  2028  00124C  B0D8               	btfsc	status,0,c
  2029  00124E  D01B               	goto	u6040
  2030  001250                     u6010:
  2031                           
  2032                           ; BSR set to: 0
  2033  001250  51A4               	movf	sprintf@fval& (0+255),w,b
  2034  001252  11A5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2035  001254  11A6               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2036  001256  B4D8               	btfsc	status,2,c
  2037  001258  D054               	goto	l877
  2038                           
  2039                           ; BSR set to: 0
  2040  00125A  C0A4  F067         	movff	sprintf@fval,___fttol@f1
  2041  00125E  C0A5  F068         	movff	sprintf@fval+1,___fttol@f1+1
  2042  001262  C0A6  F069         	movff	sprintf@fval+2,___fttol@f1+2
  2043  001266  ECFF  F012         	call	___fttol	;wreg free
  2044  00126A  0100               	movlb	0	; () banked
  2045  00126C  5167               	movf	?___fttol& (0+255),w,b
  2046  00126E  1168               	iorwf	(?___fttol+1)& (0+255),w,b
  2047  001270  1169               	iorwf	(?___fttol+2)& (0+255),w,b
  2048  001272  116A               	iorwf	(?___fttol+3)& (0+255),w,b
  2049  001274  B4D8               	btfsc	status,2,c
  2050                           
  2051                           ; BSR set to: 0
  2052  001276  BF9D               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2053  001278  D044               	goto	l877
  2054  00127A  519D               	movf	(sprintf@exp+1)& (0+255),w,b
  2055  00127C  E104               	bnz	l7275
  2056  00127E  0E02               	movlw	2
  2057  001280  5D9C               	subwf	sprintf@exp& (0+255),w,b
  2058  001282  A0D8               	btfss	status,0,c
  2059  001284  D03E               	goto	l877
  2060  001286                     u6040:
  2061  001286                     l7275:
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2065  001286  C09E  F075         	movff	sprintf@tmpval,___ftge@ff1
  2066  00128A  C09F  F076         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2067  00128E  C0A0  F077         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2068  001292  0E70               	movlw	112
  2069  001294  6F78               	movwf	___ftge@ff2& (0+255),b
  2070  001296  0E89               	movlw	137
  2071  001298  6F79               	movwf	(___ftge@ff2+1)& (0+255),b
  2072  00129A  0E40               	movlw	64
  2073  00129C  6F7A               	movwf	(___ftge@ff2+2)& (0+255),b
  2074  00129E  ECDE  F016         	call	___ftge	;wreg free
  2075  0012A2  0100               	movlb	0	; () banked
  2076  0012A4  B0D8               	btfsc	status,0,c
  2077  0012A6  D002               	goto	l880
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2081  0012A8  0EF7               	movlw	247
  2082  0012AA  D001               	goto	L1
  2083  0012AC                     l880:
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2087                           
  2088                           ; BSR set to: 0
  2089  0012AC  0EF8               	movlw	248
  2090  0012AE                     L1:
  2091  0012AE  279C               	addwf	sprintf@exp& (0+255),f,b
  2092  0012B0  0EFF               	movlw	255
  2093  0012B2  239D               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;doprnt.c: 1124: }
  2097                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2098                           
  2099                           ; BSR set to: 0
  2100  0012B4  519C               	movf	sprintf@exp& (0+255),w,b
  2101  0012B6  EC6D  F00B         	call	_scale
  2102  0012BA  C060  F09E         	movff	?_scale,sprintf@tmpval
  2103  0012BE  C061  F09F         	movff	?_scale+1,sprintf@tmpval+1
  2104  0012C2  C062  F0A0         	movff	?_scale+2,sprintf@tmpval+2
  2105                           
  2106                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2107  0012C6  C0A4  F016         	movff	sprintf@fval,__tdiv_to_l_@f1
  2108  0012CA  C0A5  F017         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2109  0012CE  C0A6  F018         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2110  0012D2  C09E  F019         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2111  0012D6  C09F  F01A         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2112  0012DA  C0A0  F01B         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2113  0012DE  ECD2  F011         	call	__tdiv_to_l_	;wreg free
  2114  0012E2  C016  F098         	movff	?__tdiv_to_l_,sprintf@val
  2115  0012E6  C017  F099         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2116  0012EA  C018  F09A         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2117  0012EE  C019  F09B         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2118                           
  2119                           ;doprnt.c: 1129: fval = 0.0;
  2120  0012F2  0E00               	movlw	0
  2121  0012F4  0100               	movlb	0	; () banked
  2122  0012F6  6FA4               	movwf	sprintf@fval& (0+255),b
  2123  0012F8  0E00               	movlw	0
  2124  0012FA  6FA5               	movwf	(sprintf@fval+1)& (0+255),b
  2125  0012FC  0E00               	movlw	0
  2126  0012FE  6FA6               	movwf	(sprintf@fval+2)& (0+255),b
  2127                           
  2128                           ;doprnt.c: 1130: } else {
  2129  001300  D033               	goto	l886
  2130  001302                     l877:
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2134                           
  2135                           ; BSR set to: 0
  2136  001302  C0A4  F067         	movff	sprintf@fval,___fttol@f1
  2137  001306  C0A5  F068         	movff	sprintf@fval+1,___fttol@f1+1
  2138  00130A  C0A6  F069         	movff	sprintf@fval+2,___fttol@f1+2
  2139  00130E  ECFF  F012         	call	___fttol	;wreg free
  2140  001312  C067  F098         	movff	?___fttol,sprintf@val
  2141  001316  C068  F099         	movff	?___fttol+1,sprintf@val+1
  2142  00131A  C069  F09A         	movff	?___fttol+2,sprintf@val+2
  2143  00131E  C06A  F09B         	movff	?___fttol+3,sprintf@val+3
  2144                           
  2145                           ;doprnt.c: 1132: fval -= (double)val;
  2146  001322  C0A4  F07E         	movff	sprintf@fval,___ftsub@f1
  2147  001326  C0A5  F07F         	movff	sprintf@fval+1,___ftsub@f1+1
  2148  00132A  C0A6  F080         	movff	sprintf@fval+2,___ftsub@f1+2
  2149  00132E  C098  F01E         	movff	sprintf@val,___lltoft@c
  2150  001332  C099  F01F         	movff	sprintf@val+1,___lltoft@c+1
  2151  001336  C09A  F020         	movff	sprintf@val+2,___lltoft@c+2
  2152  00133A  C09B  F021         	movff	sprintf@val+3,___lltoft@c+3
  2153  00133E  ECF2  F019         	call	___lltoft	;wreg free
  2154  001342  C01E  F081         	movff	?___lltoft,___ftsub@f2
  2155  001346  C01F  F082         	movff	?___lltoft+1,___ftsub@f2+1
  2156  00134A  C020  F083         	movff	?___lltoft+2,___ftsub@f2+2
  2157  00134E  ECC1  F01B         	call	___ftsub	;wreg free
  2158  001352  C07E  F0A4         	movff	?___ftsub,sprintf@fval
  2159  001356  C07F  F0A5         	movff	?___ftsub+1,sprintf@fval+1
  2160  00135A  C080  F0A6         	movff	?___ftsub+2,sprintf@fval+2
  2161                           
  2162                           ;doprnt.c: 1133: exp = 0;
  2163  00135E  0E00               	movlw	0
  2164  001360  0100               	movlb	0	; () banked
  2165  001362  6F9D               	movwf	(sprintf@exp+1)& (0+255),b
  2166  001364  0E00               	movlw	0
  2167  001366  6F9C               	movwf	sprintf@exp& (0+255),b
  2168  001368                     l886:
  2169                           
  2170                           ; BSR set to: 0
  2171                           ;doprnt.c: 1134: }
  2172                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2173                           
  2174                           ; BSR set to: 0
  2175  001368  0E01               	movlw	1
  2176  00136A  6FA7               	movwf	sprintf@c& (0+255),b
  2177  00136C                     l7295:
  2178                           
  2179                           ; BSR set to: 0
  2180  00136C  0E0A               	movlw	10
  2181  00136E  19A7               	xorwf	sprintf@c& (0+255),w,b
  2182  001370  B4D8               	btfsc	status,2,c
  2183  001372  D01B               	goto	u6080
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;doprnt.c: 1137: if(val < dpowers[c])
  2187                           
  2188                           ; BSR set to: 0
  2189                           
  2190                           ; BSR set to: 0
  2191  001374  51A7               	movf	sprintf@c& (0+255),w,b
  2192  001376  0D04               	mullw	4
  2193  001378  0E01               	movlw	low _dpowers
  2194  00137A  24F3               	addwf	prodl,w,c
  2195  00137C  6EF6               	movwf	tblptrl,c
  2196  00137E  0E0F               	movlw	high _dpowers
  2197  001380  20F4               	addwfc	prodh,w,c
  2198  001382  6EF7               	movwf	tblptrh,c
  2199  001384                     	if	1	;There are 3 active tblptr bytes
  2200  001384  6AF8               	clrf	tblptru,c
  2201  001386  0E00               	movlw	low (__mediumconst shr (0+16))
  2202  001388  22F8               	addwfc	tblptru,f,c
  2203  00138A                     	endif
  2204  00138A  0009               	tblrd		*+
  2205  00138C  50F5               	movf	tablat,w,c
  2206  00138E  5D98               	subwf	sprintf@val& (0+255),w,b
  2207  001390  0009               	tblrd		*+
  2208  001392  50F5               	movf	tablat,w,c
  2209  001394  5999               	subwfb	(sprintf@val+1)& (0+255),w,b
  2210  001396  0009               	tblrd		*+
  2211  001398  50F5               	movf	tablat,w,c
  2212  00139A  599A               	subwfb	(sprintf@val+2)& (0+255),w,b
  2213  00139C  0009               	tblrd		*+
  2214  00139E  50F5               	movf	tablat,w,c
  2215  0013A0  599B               	subwfb	(sprintf@val+3)& (0+255),w,b
  2216  0013A2  A0D8               	btfss	status,0,c
  2217  0013A4  D002               	goto	u6080
  2218                           
  2219                           ; BSR set to: 0
  2220                           
  2221                           ; BSR set to: 0
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;doprnt.c: 1138: break;
  2225  0013A6  2BA7               	incf	sprintf@c& (0+255),f,b
  2226  0013A8  D7E1               	goto	l7295
  2227  0013AA                     u6080:
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;doprnt.c: 1175: {
  2231                           ;doprnt.c: 1188: if(flag & 0x03)
  2232                           
  2233                           ; BSR set to: 0
  2234  0013AA  0E03               	movlw	3
  2235  0013AC  1596               	andwf	sprintf@flag& (0+255),w,b
  2236  0013AE  6F8B               	movwf	??_sprintf& (0+255),b
  2237  0013B0  0E00               	movlw	0
  2238  0013B2  1597               	andwf	(sprintf@flag+1)& (0+255),w,b
  2239  0013B4  6F8C               	movwf	(??_sprintf+1)& (0+255),b
  2240  0013B6  518B               	movf	??_sprintf& (0+255),w,b
  2241  0013B8  118C               	iorwf	(??_sprintf+1)& (0+255),w,b
  2242  0013BA  B4D8               	btfsc	status,2,c
  2243  0013BC  D053               	goto	l891
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2247  0013BE  C084  FFD9         	movff	sprintf@sp,fsr2l
  2248  0013C2  C085  FFDA         	movff	sprintf@sp+1,fsr2h
  2249  0013C6  0E2D               	movlw	45
  2250  0013C8  D04A               	goto	L2
  2251  0013CA                     
  2252                           ; BSR set to: 0
  2253                           ;doprnt.c: 1200: {
  2254                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2255                           
  2256                           ; BSR set to: 0
  2257  0013CA  C098  F016         	movff	sprintf@val,___lldiv@dividend
  2258  0013CE  C099  F017         	movff	sprintf@val+1,___lldiv@dividend+1
  2259  0013D2  C09A  F018         	movff	sprintf@val+2,___lldiv@dividend+2
  2260  0013D6  C09B  F019         	movff	sprintf@val+3,___lldiv@dividend+3
  2261  0013DA  51A7               	movf	sprintf@c& (0+255),w,b
  2262  0013DC  0D04               	mullw	4
  2263  0013DE  0E01               	movlw	low _dpowers
  2264  0013E0  24F3               	addwf	prodl,w,c
  2265  0013E2  6EF6               	movwf	tblptrl,c
  2266  0013E4  0E0F               	movlw	high _dpowers
  2267  0013E6  20F4               	addwfc	prodh,w,c
  2268  0013E8  6EF7               	movwf	tblptrh,c
  2269  0013EA                     	if	1	;There are 3 active tblptr bytes
  2270  0013EA  6AF8               	clrf	tblptru,c
  2271  0013EC  0E00               	movlw	low (__mediumconst shr (0+16))
  2272  0013EE  22F8               	addwfc	tblptru,f,c
  2273  0013F0                     	endif
  2274  0013F0  0009               	tblrd		*+
  2275  0013F2  CFF5 F01A          	movff	tablat,___lldiv@divisor
  2276  0013F6  0009               	tblrd		*+
  2277  0013F8  CFF5 F01B          	movff	tablat,___lldiv@divisor+1
  2278  0013FC  0009               	tblrd		*+
  2279  0013FE  CFF5 F01C          	movff	tablat,___lldiv@divisor+2
  2280  001402  000A               	tblrd		*-
  2281  001404  CFF5 F01D          	movff	tablat,___lldiv@divisor+3
  2282  001408  ECB1  F017         	call	___lldiv	;wreg free
  2283  00140C  C016  F09E         	movff	?___lldiv,sprintf@tmpval
  2284  001410  C017  F09F         	movff	?___lldiv+1,sprintf@tmpval+1
  2285  001414  C018  F0A0         	movff	?___lldiv+2,sprintf@tmpval+2
  2286  001418  C019  F0A1         	movff	?___lldiv+3,sprintf@tmpval+3
  2287                           
  2288                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2289  00141C  C09E  F016         	movff	sprintf@tmpval,___llmod@dividend
  2290  001420  C09F  F017         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2291  001424  C0A0  F018         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2292  001428  C0A1  F019         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2293  00142C  0E0A               	movlw	10
  2294  00142E  6E1A               	movwf	___llmod@divisor,c
  2295  001430  0E00               	movlw	0
  2296  001432  6E1B               	movwf	___llmod@divisor+1,c
  2297  001434  0E00               	movlw	0
  2298  001436  6E1C               	movwf	___llmod@divisor+2,c
  2299  001438  0E00               	movlw	0
  2300  00143A  6E1D               	movwf	___llmod@divisor+3,c
  2301  00143C  EC90  F019         	call	___llmod	;wreg free
  2302  001440  C016  F09E         	movff	?___llmod,sprintf@tmpval
  2303  001444  C017  F09F         	movff	?___llmod+1,sprintf@tmpval+1
  2304  001448  C018  F0A0         	movff	?___llmod+2,sprintf@tmpval+2
  2305  00144C  C019  F0A1         	movff	?___llmod+3,sprintf@tmpval+3
  2306                           
  2307                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2308  001450  0100               	movlb	0	; () banked
  2309  001452  519E               	movf	sprintf@tmpval& (0+255),w,b
  2310  001454  0F30               	addlw	48
  2311  001456  C084  FFD9         	movff	sprintf@sp,fsr2l
  2312  00145A  C085  FFDA         	movff	sprintf@sp+1,fsr2h
  2313  00145E                     L2:
  2314  00145E  6EDF               	movwf	indf2,c
  2315                           
  2316                           ; BSR set to: 0
  2317  001460  4B84               	infsnz	sprintf@sp& (0+255),f,b
  2318  001462  2B85               	incf	(sprintf@sp+1)& (0+255),f,b
  2319  001464                     l891:
  2320                           
  2321                           ; BSR set to: 0
  2322                           
  2323                           ; BSR set to: 0
  2324  001464  07A7               	decf	sprintf@c& (0+255),f,b
  2325  001466  29A7               	incf	sprintf@c& (0+255),w,b
  2326  001468  B4D8               	btfsc	status,2,c
  2327  00146A  D00C               	goto	l894
  2328  00146C  D7AE               	goto	l892
  2329  00146E                     l7323:
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2333  00146E  C084  FFD9         	movff	sprintf@sp,fsr2l
  2334  001472  C085  FFDA         	movff	sprintf@sp+1,fsr2h
  2335  001476  0E30               	movlw	48
  2336  001478  6EDF               	movwf	indf2,c
  2337                           
  2338                           ; BSR set to: 0
  2339  00147A  4B84               	infsnz	sprintf@sp& (0+255),f,b
  2340  00147C  2B85               	incf	(sprintf@sp+1)& (0+255),f,b
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;doprnt.c: 1209: exp--;
  2344  00147E  079C               	decf	sprintf@exp& (0+255),f,b
  2345  001480  A0D8               	btfss	status,0,c
  2346  001482  079D               	decf	(sprintf@exp+1)& (0+255),f,b
  2347  001484                     l894:
  2348                           
  2349                           ; BSR set to: 0
  2350                           
  2351                           ; BSR set to: 0
  2352  001484  BF9D               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2353  001486  D005               	goto	u6110
  2354  001488  519D               	movf	(sprintf@exp+1)& (0+255),w,b
  2355  00148A  E1F1               	bnz	l7323
  2356  00148C  059C               	decf	sprintf@exp& (0+255),w,b
  2357  00148E  B0D8               	btfsc	status,0,c
  2358  001490  D7EE               	goto	l895
  2359  001492                     u6110:
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;doprnt.c: 1210: }
  2363                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2364                           
  2365                           ; BSR set to: 0
  2366  001492  BFA3               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2367  001494  D009               	goto	l897
  2368  001496  51A3               	movf	(sprintf@prec+1)& (0+255),w,b
  2369  001498  E104               	bnz	u6120
  2370  00149A  0E09               	movlw	9
  2371  00149C  5DA2               	subwf	sprintf@prec& (0+255),w,b
  2372  00149E  A0D8               	btfss	status,0,c
  2373  0014A0  D003               	goto	l897
  2374  0014A2                     u6120:
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2378  0014A2  0E08               	movlw	8
  2379  0014A4  6FA7               	movwf	sprintf@c& (0+255),b
  2380  0014A6  D002               	goto	l898
  2381  0014A8                     l897:
  2382                           
  2383                           ; BSR set to: 0
  2384                           ;doprnt.c: 1213: else
  2385                           ;doprnt.c: 1214: c = prec;
  2386  0014A8  C0A2  F0A7         	movff	sprintf@prec,sprintf@c
  2387  0014AC                     l898:
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;doprnt.c: 1215: prec -= c;
  2391                           
  2392                           ; BSR set to: 0
  2393  0014AC  51A7               	movf	sprintf@c& (0+255),w,b
  2394  0014AE  5FA2               	subwf	sprintf@prec& (0+255),f,b
  2395  0014B0  0E00               	movlw	0
  2396  0014B2  BFA7               	btfsc	sprintf@c& (0+255),7,b
  2397  0014B4  0EFF               	movlw	255
  2398  0014B6  5BA3               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;doprnt.c: 1219: if(c)
  2402  0014B8  51A7               	movf	sprintf@c& (0+255),w,b
  2403  0014BA  B4D8               	btfsc	status,2,c
  2404  0014BC  D008               	goto	l899
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2408  0014BE  C084  FFD9         	movff	sprintf@sp,fsr2l
  2409  0014C2  C085  FFDA         	movff	sprintf@sp+1,fsr2h
  2410  0014C6  0E2E               	movlw	46
  2411  0014C8  6EDF               	movwf	indf2,c
  2412                           
  2413                           ; BSR set to: 0
  2414  0014CA  4B84               	infsnz	sprintf@sp& (0+255),f,b
  2415  0014CC  2B85               	incf	(sprintf@sp+1)& (0+255),f,b
  2416  0014CE                     l899:
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2420                           
  2421                           ; BSR set to: 0
  2422  0014CE  51A7               	movf	sprintf@c& (0+255),w,b
  2423  0014D0  EC6D  F00B         	call	_scale
  2424  0014D4  C060  F091         	movff	?_scale,_sprintf$2294
  2425  0014D8  C061  F092         	movff	?_scale+1,_sprintf$2294+1
  2426  0014DC  C062  F093         	movff	?_scale+2,_sprintf$2294+2
  2427                           
  2428                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2429  0014E0  C0A4  F02D         	movff	sprintf@fval,___ftmul@f2
  2430  0014E4  C0A5  F02E         	movff	sprintf@fval+1,___ftmul@f2+1
  2431  0014E8  C0A6  F02F         	movff	sprintf@fval+2,___ftmul@f2+2
  2432  0014EC  C091  F02A         	movff	_sprintf$2294,___ftmul@f1
  2433  0014F0  C092  F02B         	movff	_sprintf$2294+1,___ftmul@f1+1
  2434  0014F4  C093  F02C         	movff	_sprintf$2294+2,___ftmul@f1+2
  2435  0014F8  EC7B  F013         	call	___ftmul	;wreg free
  2436  0014FC  C02A  F067         	movff	?___ftmul,___fttol@f1
  2437  001500  C02B  F068         	movff	?___ftmul+1,___fttol@f1+1
  2438  001504  C02C  F069         	movff	?___ftmul+2,___fttol@f1+2
  2439  001508  ECFF  F012         	call	___fttol	;wreg free
  2440  00150C  C067  F098         	movff	?___fttol,sprintf@val
  2441  001510  C068  F099         	movff	?___fttol+1,sprintf@val+1
  2442  001514  C069  F09A         	movff	?___fttol+2,sprintf@val+2
  2443  001518  C06A  F09B         	movff	?___fttol+3,sprintf@val+3
  2444                           
  2445                           ;doprnt.c: 1228: while(c--) {
  2446  00151C  D077               	goto	l900
  2447  00151E                     
  2448                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2449  00151E  C098  F016         	movff	sprintf@val,___lldiv@dividend
  2450  001522  C099  F017         	movff	sprintf@val+1,___lldiv@dividend+1
  2451  001526  C09A  F018         	movff	sprintf@val+2,___lldiv@dividend+2
  2452  00152A  C09B  F019         	movff	sprintf@val+3,___lldiv@dividend+3
  2453  00152E  0100               	movlb	0	; () banked
  2454  001530  51A7               	movf	sprintf@c& (0+255),w,b
  2455  001532  0D04               	mullw	4
  2456  001534  0E01               	movlw	low _dpowers
  2457  001536  24F3               	addwf	prodl,w,c
  2458  001538  6EF6               	movwf	tblptrl,c
  2459  00153A  0E0F               	movlw	high _dpowers
  2460  00153C  20F4               	addwfc	prodh,w,c
  2461  00153E  6EF7               	movwf	tblptrh,c
  2462  001540                     	if	1	;There are 3 active tblptr bytes
  2463  001540  6AF8               	clrf	tblptru,c
  2464  001542  0E00               	movlw	low (__mediumconst shr (0+16))
  2465  001544  22F8               	addwfc	tblptru,f,c
  2466  001546                     	endif
  2467  001546  0009               	tblrd		*+
  2468  001548  CFF5 F01A          	movff	tablat,___lldiv@divisor
  2469  00154C  0009               	tblrd		*+
  2470  00154E  CFF5 F01B          	movff	tablat,___lldiv@divisor+1
  2471  001552  0009               	tblrd		*+
  2472  001554  CFF5 F01C          	movff	tablat,___lldiv@divisor+2
  2473  001558  000A               	tblrd		*-
  2474  00155A  CFF5 F01D          	movff	tablat,___lldiv@divisor+3
  2475  00155E  ECB1  F017         	call	___lldiv	;wreg free
  2476  001562  C016  F09E         	movff	?___lldiv,sprintf@tmpval
  2477  001566  C017  F09F         	movff	?___lldiv+1,sprintf@tmpval+1
  2478  00156A  C018  F0A0         	movff	?___lldiv+2,sprintf@tmpval+2
  2479  00156E  C019  F0A1         	movff	?___lldiv+3,sprintf@tmpval+3
  2480                           
  2481                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2482  001572  C09E  F016         	movff	sprintf@tmpval,___llmod@dividend
  2483  001576  C09F  F017         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2484  00157A  C0A0  F018         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2485  00157E  C0A1  F019         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2486  001582  0E0A               	movlw	10
  2487  001584  6E1A               	movwf	___llmod@divisor,c
  2488  001586  0E00               	movlw	0
  2489  001588  6E1B               	movwf	___llmod@divisor+1,c
  2490  00158A  0E00               	movlw	0
  2491  00158C  6E1C               	movwf	___llmod@divisor+2,c
  2492  00158E  0E00               	movlw	0
  2493  001590  6E1D               	movwf	___llmod@divisor+3,c
  2494  001592  EC90  F019         	call	___llmod	;wreg free
  2495  001596  C016  F09E         	movff	?___llmod,sprintf@tmpval
  2496  00159A  C017  F09F         	movff	?___llmod+1,sprintf@tmpval+1
  2497  00159E  C018  F0A0         	movff	?___llmod+2,sprintf@tmpval+2
  2498  0015A2  C019  F0A1         	movff	?___llmod+3,sprintf@tmpval+3
  2499                           
  2500                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2501  0015A6  0100               	movlb	0	; () banked
  2502  0015A8  519E               	movf	sprintf@tmpval& (0+255),w,b
  2503  0015AA  0F30               	addlw	48
  2504  0015AC  C084  FFD9         	movff	sprintf@sp,fsr2l
  2505  0015B0  C085  FFDA         	movff	sprintf@sp+1,fsr2h
  2506  0015B4  6EDF               	movwf	indf2,c
  2507                           
  2508                           ; BSR set to: 0
  2509  0015B6  4B84               	infsnz	sprintf@sp& (0+255),f,b
  2510  0015B8  2B85               	incf	(sprintf@sp+1)& (0+255),f,b
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;doprnt.c: 1232: val %= dpowers[c];
  2514  0015BA  C098  F016         	movff	sprintf@val,___llmod@dividend
  2515  0015BE  C099  F017         	movff	sprintf@val+1,___llmod@dividend+1
  2516  0015C2  C09A  F018         	movff	sprintf@val+2,___llmod@dividend+2
  2517  0015C6  C09B  F019         	movff	sprintf@val+3,___llmod@dividend+3
  2518  0015CA  51A7               	movf	sprintf@c& (0+255),w,b
  2519  0015CC  0D04               	mullw	4
  2520  0015CE  0E01               	movlw	low _dpowers
  2521  0015D0  24F3               	addwf	prodl,w,c
  2522  0015D2  6EF6               	movwf	tblptrl,c
  2523  0015D4  0E0F               	movlw	high _dpowers
  2524  0015D6  20F4               	addwfc	prodh,w,c
  2525  0015D8  6EF7               	movwf	tblptrh,c
  2526  0015DA                     	if	1	;There are 3 active tblptr bytes
  2527  0015DA  6AF8               	clrf	tblptru,c
  2528  0015DC  0E00               	movlw	low (__mediumconst shr (0+16))
  2529  0015DE  22F8               	addwfc	tblptru,f,c
  2530  0015E0                     	endif
  2531  0015E0  0009               	tblrd		*+
  2532  0015E2  CFF5 F01A          	movff	tablat,___llmod@divisor
  2533  0015E6  0009               	tblrd		*+
  2534  0015E8  CFF5 F01B          	movff	tablat,___llmod@divisor+1
  2535  0015EC  0009               	tblrd		*+
  2536  0015EE  CFF5 F01C          	movff	tablat,___llmod@divisor+2
  2537  0015F2  000A               	tblrd		*-
  2538  0015F4  CFF5 F01D          	movff	tablat,___llmod@divisor+3
  2539  0015F8  EC90  F019         	call	___llmod	;wreg free
  2540  0015FC  C016  F098         	movff	?___llmod,sprintf@val
  2541  001600  C017  F099         	movff	?___llmod+1,sprintf@val+1
  2542  001604  C018  F09A         	movff	?___llmod+2,sprintf@val+2
  2543  001608  C019  F09B         	movff	?___llmod+3,sprintf@val+3
  2544  00160C                     l900:
  2545  00160C  0100               	movlb	0	; () banked
  2546  00160E  07A7               	decf	sprintf@c& (0+255),f,b
  2547  001610  29A7               	incf	sprintf@c& (0+255),w,b
  2548  001612  B4D8               	btfsc	status,2,c
  2549  001614  D00C               	goto	l903
  2550  001616  D783               	goto	l901
  2551  001618                     
  2552                           ; BSR set to: 0
  2553                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2554                           
  2555                           ; BSR set to: 0
  2556  001618  C084  FFD9         	movff	sprintf@sp,fsr2l
  2557  00161C  C085  FFDA         	movff	sprintf@sp+1,fsr2h
  2558  001620  0E30               	movlw	48
  2559  001622  6EDF               	movwf	indf2,c
  2560                           
  2561                           ; BSR set to: 0
  2562  001624  4B84               	infsnz	sprintf@sp& (0+255),f,b
  2563  001626  2B85               	incf	(sprintf@sp+1)& (0+255),f,b
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;doprnt.c: 1237: prec--;
  2567  001628  07A2               	decf	sprintf@prec& (0+255),f,b
  2568  00162A  A0D8               	btfss	status,0,c
  2569  00162C  07A3               	decf	(sprintf@prec+1)& (0+255),f,b
  2570  00162E                     l903:
  2571                           
  2572                           ; BSR set to: 0
  2573                           
  2574                           ; BSR set to: 0
  2575  00162E  51A2               	movf	sprintf@prec& (0+255),w,b
  2576  001630  11A3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2577  001632  B4D8               	btfsc	status,2,c
  2578  001634  D03D               	goto	l910
  2579  001636  D7F0               	goto	l904
  2580  001638                     l868:
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;doprnt.c: 1246: }
  2584                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2585                           
  2586                           ; BSR set to: 0
  2587  001638  51A2               	movf	sprintf@prec& (0+255),w,b
  2588  00163A  11A3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2589  00163C  A4D8               	btfss	status,2,c
  2590  00163E  D008               	goto	l906
  2591                           
  2592                           ; BSR set to: 0
  2593  001640  5198               	movf	sprintf@val& (0+255),w,b
  2594  001642  1199               	iorwf	(sprintf@val+1)& (0+255),w,b
  2595  001644  119A               	iorwf	(sprintf@val+2)& (0+255),w,b
  2596  001646  119B               	iorwf	(sprintf@val+3)& (0+255),w,b
  2597  001648  A4D8               	btfss	status,2,c
  2598  00164A  D002               	goto	l906
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;doprnt.c: 1291: prec++;
  2602  00164C  4BA2               	infsnz	sprintf@prec& (0+255),f,b
  2603  00164E  2BA3               	incf	(sprintf@prec+1)& (0+255),f,b
  2604  001650                     l906:
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;doprnt.c: 1339: if(c < prec)
  2608                           
  2609                           ; BSR set to: 0
  2610  001650  0E80               	movlw	128
  2611  001652  BFA7               	btfsc	sprintf@c& (0+255),7,b
  2612  001654  0E7F               	movlw	127
  2613  001656  6F8B               	movwf	??_sprintf& (0+255),b
  2614  001658  51A2               	movf	sprintf@prec& (0+255),w,b
  2615  00165A  5DA7               	subwf	sprintf@c& (0+255),w,b
  2616  00165C  51A3               	movf	(sprintf@prec+1)& (0+255),w,b
  2617  00165E  0A80               	xorlw	128
  2618  001660  598B               	subwfb	??_sprintf& (0+255),w,b
  2619  001662  B0D8               	btfsc	status,0,c
  2620  001664  D003               	goto	l907
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;doprnt.c: 1340: c = prec;
  2624  001666  C0A2  F0A7         	movff	sprintf@prec,sprintf@c
  2625  00166A  D010               	goto	l909
  2626  00166C                     l907:
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;doprnt.c: 1341: else if(prec < c)
  2630                           
  2631                           ; BSR set to: 0
  2632  00166C  51A3               	movf	(sprintf@prec+1)& (0+255),w,b
  2633  00166E  0A80               	xorlw	128
  2634  001670  6F8B               	movwf	??_sprintf& (0+255),b
  2635  001672  51A7               	movf	sprintf@c& (0+255),w,b
  2636  001674  5DA2               	subwf	sprintf@prec& (0+255),w,b
  2637  001676  0E80               	movlw	128
  2638  001678  BFA7               	btfsc	sprintf@c& (0+255),7,b
  2639  00167A  0E7F               	movlw	127
  2640  00167C  598B               	subwfb	??_sprintf& (0+255),w,b
  2641  00167E  B0D8               	btfsc	status,0,c
  2642  001680  D005               	goto	l909
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;doprnt.c: 1342: prec = c;
  2646  001682  51A7               	movf	sprintf@c& (0+255),w,b
  2647  001684  6FA2               	movwf	sprintf@prec& (0+255),b
  2648  001686  6BA3               	clrf	(sprintf@prec+1)& (0+255),b
  2649  001688  BFA2               	btfsc	sprintf@prec& (0+255),7,b
  2650  00168A  07A3               	decf	(sprintf@prec+1)& (0+255),f,b
  2651  00168C                     l909:
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;doprnt.c: 1422: {
  2655                           ;doprnt.c: 1438: if(flag & 0x03)
  2656                           
  2657                           ; BSR set to: 0
  2658                           
  2659                           ; BSR set to: 0
  2660  00168C  0E03               	movlw	3
  2661  00168E  1596               	andwf	sprintf@flag& (0+255),w,b
  2662  001690  6F8B               	movwf	??_sprintf& (0+255),b
  2663  001692  0E00               	movlw	0
  2664  001694  1597               	andwf	(sprintf@flag+1)& (0+255),w,b
  2665  001696  6F8C               	movwf	(??_sprintf+1)& (0+255),b
  2666  001698  518B               	movf	??_sprintf& (0+255),w,b
  2667  00169A  118C               	iorwf	(??_sprintf+1)& (0+255),w,b
  2668  00169C  B4D8               	btfsc	status,2,c
  2669  00169E  D008               	goto	l910
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2673  0016A0  C084  FFD9         	movff	sprintf@sp,fsr2l
  2674  0016A4  C085  FFDA         	movff	sprintf@sp+1,fsr2h
  2675  0016A8  0E2D               	movlw	45
  2676  0016AA  6EDF               	movwf	indf2,c
  2677  0016AC                     l7385:
  2678                           
  2679                           ; BSR set to: 0
  2680  0016AC  4B84               	infsnz	sprintf@sp& (0+255),f,b
  2681  0016AE  2B85               	incf	(sprintf@sp+1)& (0+255),f,b
  2682  0016B0                     l910:
  2683                           
  2684                           ; BSR set to: 0
  2685                           
  2686                           ; BSR set to: 0
  2687                           
  2688                           ; BSR set to: 0
  2689  0016B0  C086  FFF6         	movff	sprintf@f,tblptrl
  2690  0016B4  C087  FFF7         	movff	sprintf@f+1,tblptrh
  2691  0016B8  4B86               	infsnz	sprintf@f& (0+255),f,b
  2692  0016BA  2B87               	incf	(sprintf@f+1)& (0+255),f,b
  2693  0016BC                     	if	0	;tblptru may be non-zero
  2694  0016BC                     	endif
  2695  0016BC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2696  0016BC  0E00               	movlw	low (__mediumconst shr (0+16))
  2697  0016BE  6EF8               	movwf	tblptru,c
  2698  0016C0                     	endif
  2699  0016C0  0008               	tblrd		*
  2700  0016C2  CFF5 F0A7          	movff	tablat,sprintf@c
  2701  0016C6  51A7               	movf	sprintf@c& (0+255),w,b
  2702  0016C8  A4D8               	btfss	status,2,c
  2703  0016CA  D475               	goto	l855
  2704  0016CC                     u6210:
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;doprnt.c: 1538: *sp = 0;
  2708                           
  2709                           ; BSR set to: 0
  2710                           
  2711                           ;doprnt.c: 1469: }
  2712                           ;doprnt.c: 1533: }
  2713                           ;doprnt.c: 1535: alldone:
  2714                           
  2715                           ; BSR set to: 0
  2716  0016CC  C084  FFD9         	movff	sprintf@sp,fsr2l
  2717  0016D0  C085  FFDA         	movff	sprintf@sp+1,fsr2h
  2718  0016D4  0E00               	movlw	0
  2719  0016D6  6EDF               	movwf	indf2,c
  2720  0016D8  0012               	return	
  2721  0016DA                     __end_of_sprintf:
  2722                           	opt stack 0
  2723                           tblptru	equ	0xFF8
  2724                           tblptrh	equ	0xFF7
  2725                           tblptrl	equ	0xFF6
  2726                           tablat	equ	0xFF5
  2727                           prodh	equ	0xFF4
  2728                           prodl	equ	0xFF3
  2729                           intcon	equ	0xFF2
  2730                           postinc0	equ	0xFEE
  2731                           wreg	equ	0xFE8
  2732                           postdec1	equ	0xFE5
  2733                           fsr1l	equ	0xFE1
  2734                           indf2	equ	0xFDF
  2735                           postinc2	equ	0xFDE
  2736                           postdec2	equ	0xFDD
  2737                           fsr2h	equ	0xFDA
  2738                           fsr2l	equ	0xFD9
  2739                           status	equ	0xFD8
  2740                           
  2741 ;; *************** function _scale *****************
  2742 ;; Defined at:
  2743 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;  scl             1    wreg     char 
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;  scl             1    6[BANK0 ] char 
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  3    0[BANK0 ] char 
  2750 ;; Registers used:
  2751 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2757 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2758 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2760 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2761 ;;Total ram usage:        7 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    8
  2764 ;; This function calls:
  2765 ;;		___awdiv
  2766 ;;		___awmod
  2767 ;;		___ftmul
  2768 ;;		___wmul
  2769 ;; This function is called by:
  2770 ;;		_sprintf
  2771 ;; This function uses a non-reentrant model
  2772 ;;
  2773                           
  2774                           	psect	text2
  2775  0016DA                     __ptext2:
  2776                           	opt stack 0
  2777  0016DA                     _scale:
  2778                           	opt stack 21
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;incstack = 0
  2782                           ;scale@scl stored from wreg
  2783  0016DA  0100               	movlb	0	; () banked
  2784  0016DC  6F66               	movwf	scale@scl& (0+255),b
  2785                           
  2786                           ;doprnt.c: 428: if(scl < 0) {
  2787  0016DE  0100               	movlb	0	; () banked
  2788  0016E0  AF66               	btfss	scale@scl& (0+255),7,b
  2789  0016E2  D118               	goto	l844
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;doprnt.c: 429: scl = -scl;
  2793  0016E4  6D66               	negf	scale@scl& (0+255),b
  2794                           
  2795                           ;doprnt.c: 430: if(scl>=110)
  2796  0016E6  5166               	movf	scale@scl& (0+255),w,b
  2797  0016E8  0A80               	xorlw	128
  2798  0016EA  0F12               	addlw	-238
  2799  0016EC  A0D8               	btfss	status,0,c
  2800  0016EE  D09C               	goto	l845
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2804  0016F0  0E00               	movlw	0
  2805  0016F2  6E27               	movwf	___wmul@multiplicand+1,c
  2806  0016F4  0E03               	movlw	3
  2807  0016F6  6E26               	movwf	___wmul@multiplicand,c
  2808  0016F8  0E00               	movlw	0
  2809  0016FA  6E1F               	movwf	___awdiv@divisor+1,c
  2810  0016FC  0E0A               	movlw	10
  2811  0016FE  6E1E               	movwf	___awdiv@divisor,c
  2812  001700  0E00               	movlw	0
  2813  001702  6E19               	movwf	___awmod@divisor+1,c
  2814  001704  0E64               	movlw	100
  2815  001706  6E18               	movwf	___awmod@divisor,c
  2816  001708  5166               	movf	scale@scl& (0+255),w,b
  2817  00170A  6E16               	movwf	___awmod@dividend,c
  2818  00170C  6A17               	clrf	___awmod@dividend+1,c
  2819  00170E  BE16               	btfsc	___awmod@dividend,7,c
  2820  001710  0617               	decf	___awmod@dividend+1,f,c
  2821  001712  EC20  F019         	call	___awmod	;wreg free
  2822  001716  C016  F01C         	movff	?___awmod,___awdiv@dividend
  2823  00171A  C017  F01D         	movff	?___awmod+1,___awdiv@dividend+1
  2824  00171E  EC6F  F017         	call	___awdiv	;wreg free
  2825  001722  0E09               	movlw	9
  2826  001724  241C               	addwf	?___awdiv,w,c
  2827  001726  6E24               	movwf	___wmul@multiplier,c
  2828  001728  0E00               	movlw	0
  2829  00172A  201D               	addwfc	?___awdiv+1,w,c
  2830  00172C  6E25               	movwf	___wmul@multiplier+1,c
  2831  00172E  EC40  F01D         	call	___wmul	;wreg free
  2832  001732  0E50               	movlw	low __npowers_
  2833  001734  2424               	addwf	?___wmul,w,c
  2834  001736  6EF6               	movwf	tblptrl,c
  2835  001738  0E0F               	movlw	high __npowers_
  2836  00173A  2025               	addwfc	?___wmul+1,w,c
  2837  00173C  6EF7               	movwf	tblptrh,c
  2838  00173E                     	if	1	;There are 3 active tblptr bytes
  2839  00173E  6AF8               	clrf	tblptru,c
  2840  001740  0E00               	movlw	low (__mediumconst shr (0+16))
  2841  001742  22F8               	addwfc	tblptru,f,c
  2842  001744                     	endif
  2843  001744  0009               	tblrd		*+
  2844  001746  CFF5 F02D          	movff	tablat,___ftmul@f2
  2845  00174A  0009               	tblrd		*+
  2846  00174C  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  2847  001750  000A               	tblrd		*-
  2848  001752  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  2849  001756  0E00               	movlw	0
  2850  001758  6E1F               	movwf	___awdiv@divisor+1,c
  2851  00175A  0E64               	movlw	100
  2852  00175C  6E1E               	movwf	___awdiv@divisor,c
  2853  00175E  0100               	movlb	0	; () banked
  2854  001760  5166               	movf	scale@scl& (0+255),w,b
  2855  001762  6E1C               	movwf	___awdiv@dividend,c
  2856  001764  6A1D               	clrf	___awdiv@dividend+1,c
  2857  001766  BE1C               	btfsc	___awdiv@dividend,7,c
  2858  001768  061D               	decf	___awdiv@dividend+1,f,c
  2859  00176A  EC6F  F017         	call	___awdiv	;wreg free
  2860  00176E  0E12               	movlw	18
  2861  001770  241C               	addwf	?___awdiv,w,c
  2862  001772  6E24               	movwf	___wmul@multiplier,c
  2863  001774  0E00               	movlw	0
  2864  001776  201D               	addwfc	?___awdiv+1,w,c
  2865  001778  6E25               	movwf	___wmul@multiplier+1,c
  2866  00177A  0E00               	movlw	0
  2867  00177C  6E27               	movwf	___wmul@multiplicand+1,c
  2868  00177E  0E03               	movlw	3
  2869  001780  6E26               	movwf	___wmul@multiplicand,c
  2870  001782  EC40  F01D         	call	___wmul	;wreg free
  2871  001786  0E50               	movlw	low __npowers_
  2872  001788  2424               	addwf	?___wmul,w,c
  2873  00178A  6EF6               	movwf	tblptrl,c
  2874  00178C  0E0F               	movlw	high __npowers_
  2875  00178E  2025               	addwfc	?___wmul+1,w,c
  2876  001790  6EF7               	movwf	tblptrh,c
  2877  001792                     	if	1	;There are 3 active tblptr bytes
  2878  001792  6AF8               	clrf	tblptru,c
  2879  001794  0E00               	movlw	low (__mediumconst shr (0+16))
  2880  001796  22F8               	addwfc	tblptru,f,c
  2881  001798                     	endif
  2882  001798  0009               	tblrd		*+
  2883  00179A  CFF5 F02A          	movff	tablat,___ftmul@f1
  2884  00179E  0009               	tblrd		*+
  2885  0017A0  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  2886  0017A4  000A               	tblrd		*-
  2887  0017A6  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  2888  0017AA  EC7B  F013         	call	___ftmul	;wreg free
  2889  0017AE  C02A  F063         	movff	?___ftmul,_scale$2293
  2890  0017B2  C02B  F064         	movff	?___ftmul+1,_scale$2293+1
  2891  0017B6  C02C  F065         	movff	?___ftmul+2,_scale$2293+2
  2892                           
  2893                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2894  0017BA  C063  F02A         	movff	_scale$2293,___ftmul@f1
  2895  0017BE  C064  F02B         	movff	_scale$2293+1,___ftmul@f1+1
  2896  0017C2  C065  F02C         	movff	_scale$2293+2,___ftmul@f1+2
  2897  0017C6  0E00               	movlw	0
  2898  0017C8  6E27               	movwf	___wmul@multiplicand+1,c
  2899  0017CA  0E03               	movlw	3
  2900  0017CC  6E26               	movwf	___wmul@multiplicand,c
  2901  0017CE  0E00               	movlw	0
  2902  0017D0  6E19               	movwf	___awmod@divisor+1,c
  2903  0017D2  0E0A               	movlw	10
  2904  0017D4  6E18               	movwf	___awmod@divisor,c
  2905  0017D6  0100               	movlb	0	; () banked
  2906  0017D8  5166               	movf	scale@scl& (0+255),w,b
  2907  0017DA  6E16               	movwf	___awmod@dividend,c
  2908  0017DC  6A17               	clrf	___awmod@dividend+1,c
  2909  0017DE  BE16               	btfsc	___awmod@dividend,7,c
  2910  0017E0  0617               	decf	___awmod@dividend+1,f,c
  2911  0017E2  EC20  F019         	call	___awmod	;wreg free
  2912  0017E6  C016  F024         	movff	?___awmod,___wmul@multiplier
  2913  0017EA  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  2914  0017EE  EC40  F01D         	call	___wmul	;wreg free
  2915  0017F2  0E50               	movlw	low __npowers_
  2916  0017F4  2424               	addwf	?___wmul,w,c
  2917  0017F6  6EF6               	movwf	tblptrl,c
  2918  0017F8  0E0F               	movlw	high __npowers_
  2919  0017FA  2025               	addwfc	?___wmul+1,w,c
  2920  0017FC  6EF7               	movwf	tblptrh,c
  2921  0017FE                     	if	1	;There are 3 active tblptr bytes
  2922  0017FE  6AF8               	clrf	tblptru,c
  2923  001800  0E00               	movlw	low (__mediumconst shr (0+16))
  2924  001802  22F8               	addwfc	tblptru,f,c
  2925  001804                     	endif
  2926  001804  0009               	tblrd		*+
  2927  001806  CFF5 F02D          	movff	tablat,___ftmul@f2
  2928  00180A  0009               	tblrd		*+
  2929  00180C  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  2930  001810  000A               	tblrd		*-
  2931  001812  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  2932  001816  EC7B  F013         	call	___ftmul	;wreg free
  2933  00181A  C02A  F060         	movff	?___ftmul,?_scale
  2934  00181E  C02B  F061         	movff	?___ftmul+1,?_scale+1
  2935  001822  C02C  F062         	movff	?___ftmul+2,?_scale+2
  2936  001826  0012               	return	
  2937  001828                     l845:
  2938                           
  2939                           ;doprnt.c: 432: else if(scl > 10)
  2940  001828  0100               	movlb	0	; () banked
  2941  00182A  5166               	movf	scale@scl& (0+255),w,b
  2942  00182C  0A80               	xorlw	128
  2943  00182E  0F75               	addlw	-139
  2944  001830  A0D8               	btfss	status,0,c
  2945  001832  D05A               	goto	l848
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2949  001834  0E00               	movlw	0
  2950  001836  6E1F               	movwf	___awdiv@divisor+1,c
  2951  001838  0E0A               	movlw	10
  2952  00183A  6E1E               	movwf	___awdiv@divisor,c
  2953  00183C  5166               	movf	scale@scl& (0+255),w,b
  2954  00183E  6E1C               	movwf	___awdiv@dividend,c
  2955  001840  6A1D               	clrf	___awdiv@dividend+1,c
  2956  001842  BE1C               	btfsc	___awdiv@dividend,7,c
  2957  001844  061D               	decf	___awdiv@dividend+1,f,c
  2958  001846  EC6F  F017         	call	___awdiv	;wreg free
  2959  00184A  0E09               	movlw	9
  2960  00184C  241C               	addwf	?___awdiv,w,c
  2961  00184E  6E24               	movwf	___wmul@multiplier,c
  2962  001850  0E00               	movlw	0
  2963  001852  201D               	addwfc	?___awdiv+1,w,c
  2964  001854  6E25               	movwf	___wmul@multiplier+1,c
  2965  001856  0E00               	movlw	0
  2966  001858  6E27               	movwf	___wmul@multiplicand+1,c
  2967  00185A  0E03               	movlw	3
  2968  00185C  6E26               	movwf	___wmul@multiplicand,c
  2969  00185E  EC40  F01D         	call	___wmul	;wreg free
  2970  001862  0E50               	movlw	low __npowers_
  2971  001864  2424               	addwf	?___wmul,w,c
  2972  001866  6EF6               	movwf	tblptrl,c
  2973  001868  0E0F               	movlw	high __npowers_
  2974  00186A  2025               	addwfc	?___wmul+1,w,c
  2975  00186C  6EF7               	movwf	tblptrh,c
  2976  00186E                     	if	1	;There are 3 active tblptr bytes
  2977  00186E  6AF8               	clrf	tblptru,c
  2978  001870  0E00               	movlw	low (__mediumconst shr (0+16))
  2979  001872  22F8               	addwfc	tblptru,f,c
  2980  001874                     	endif
  2981  001874  0009               	tblrd		*+
  2982  001876  CFF5 F02A          	movff	tablat,___ftmul@f1
  2983  00187A  0009               	tblrd		*+
  2984  00187C  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  2985  001880  000A               	tblrd		*-
  2986  001882  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  2987  001886  0E00               	movlw	0
  2988  001888  6E27               	movwf	___wmul@multiplicand+1,c
  2989  00188A  0E03               	movlw	3
  2990  00188C  6E26               	movwf	___wmul@multiplicand,c
  2991  00188E  0E00               	movlw	0
  2992  001890  6E19               	movwf	___awmod@divisor+1,c
  2993  001892  0E0A               	movlw	10
  2994  001894  6E18               	movwf	___awmod@divisor,c
  2995  001896  0100               	movlb	0	; () banked
  2996  001898  5166               	movf	scale@scl& (0+255),w,b
  2997  00189A  6E16               	movwf	___awmod@dividend,c
  2998  00189C  6A17               	clrf	___awmod@dividend+1,c
  2999  00189E  BE16               	btfsc	___awmod@dividend,7,c
  3000  0018A0  0617               	decf	___awmod@dividend+1,f,c
  3001  0018A2  EC20  F019         	call	___awmod	;wreg free
  3002  0018A6  C016  F024         	movff	?___awmod,___wmul@multiplier
  3003  0018AA  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  3004  0018AE  EC40  F01D         	call	___wmul	;wreg free
  3005  0018B2  0E50               	movlw	low __npowers_
  3006  0018B4  2424               	addwf	?___wmul,w,c
  3007  0018B6  6EF6               	movwf	tblptrl,c
  3008  0018B8  0E0F               	movlw	high __npowers_
  3009  0018BA  2025               	addwfc	?___wmul+1,w,c
  3010  0018BC  6EF7               	movwf	tblptrh,c
  3011  0018BE                     	if	1	;There are 3 active tblptr bytes
  3012  0018BE  6AF8               	clrf	tblptru,c
  3013  0018C0  0E00               	movlw	low (__mediumconst shr (0+16))
  3014  0018C2  22F8               	addwfc	tblptru,f,c
  3015  0018C4                     	endif
  3016  0018C4  0009               	tblrd		*+
  3017  0018C6  CFF5 F02D          	movff	tablat,___ftmul@f2
  3018  0018CA  0009               	tblrd		*+
  3019  0018CC  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  3020  0018D0  000A               	tblrd		*-
  3021  0018D2  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  3022  0018D6  EC7B  F013         	call	___ftmul	;wreg free
  3023  0018DA  C02A  F060         	movff	?___ftmul,?_scale
  3024  0018DE  C02B  F061         	movff	?___ftmul+1,?_scale+1
  3025  0018E2  C02C  F062         	movff	?___ftmul+2,?_scale+2
  3026  0018E6  0012               	return	
  3027  0018E8                     l848:
  3028                           
  3029                           ;doprnt.c: 434: return _npowers_[scl];
  3030  0018E8  0100               	movlb	0	; () banked
  3031  0018EA  5166               	movf	scale@scl& (0+255),w,b
  3032  0018EC  0D03               	mullw	3
  3033  0018EE  0E50               	movlw	low __npowers_
  3034  0018F0  24F3               	addwf	prodl,w,c
  3035  0018F2  6EF6               	movwf	tblptrl,c
  3036  0018F4  0E0F               	movlw	high __npowers_
  3037  0018F6  20F4               	addwfc	prodh,w,c
  3038  0018F8  6EF7               	movwf	tblptrh,c
  3039  0018FA                     	if	1	;There are 3 active tblptr bytes
  3040  0018FA  6AF8               	clrf	tblptru,c
  3041  0018FC  0E00               	movlw	low (__mediumconst shr (0+16))
  3042  0018FE  22F8               	addwfc	tblptru,f,c
  3043  001900                     	endif
  3044  001900  0009               	tblrd		*+
  3045  001902  CFF5 F060          	movff	tablat,?_scale
  3046  001906  0009               	tblrd		*+
  3047  001908  CFF5 F061          	movff	tablat,?_scale+1
  3048  00190C  000A               	tblrd		*-
  3049  00190E  CFF5 F062          	movff	tablat,?_scale+2
  3050                           
  3051                           ; BSR set to: 0
  3052  001912  0012               	return	
  3053  001914                     l844:
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;doprnt.c: 435: }
  3057                           ;doprnt.c: 436: if(scl>=110)
  3058                           
  3059                           ; BSR set to: 0
  3060  001914  5166               	movf	scale@scl& (0+255),w,b
  3061  001916  0A80               	xorlw	128
  3062  001918  0F12               	addlw	-238
  3063  00191A  A0D8               	btfss	status,0,c
  3064  00191C  D09C               	goto	l849
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3068  00191E  0E00               	movlw	0
  3069  001920  6E27               	movwf	___wmul@multiplicand+1,c
  3070  001922  0E03               	movlw	3
  3071  001924  6E26               	movwf	___wmul@multiplicand,c
  3072  001926  0E00               	movlw	0
  3073  001928  6E1F               	movwf	___awdiv@divisor+1,c
  3074  00192A  0E0A               	movlw	10
  3075  00192C  6E1E               	movwf	___awdiv@divisor,c
  3076  00192E  0E00               	movlw	0
  3077  001930  6E19               	movwf	___awmod@divisor+1,c
  3078  001932  0E64               	movlw	100
  3079  001934  6E18               	movwf	___awmod@divisor,c
  3080  001936  5166               	movf	scale@scl& (0+255),w,b
  3081  001938  6E16               	movwf	___awmod@dividend,c
  3082  00193A  6A17               	clrf	___awmod@dividend+1,c
  3083  00193C  BE16               	btfsc	___awmod@dividend,7,c
  3084  00193E  0617               	decf	___awmod@dividend+1,f,c
  3085  001940  EC20  F019         	call	___awmod	;wreg free
  3086  001944  C016  F01C         	movff	?___awmod,___awdiv@dividend
  3087  001948  C017  F01D         	movff	?___awmod+1,___awdiv@dividend+1
  3088  00194C  EC6F  F017         	call	___awdiv	;wreg free
  3089  001950  0E09               	movlw	9
  3090  001952  241C               	addwf	?___awdiv,w,c
  3091  001954  6E24               	movwf	___wmul@multiplier,c
  3092  001956  0E00               	movlw	0
  3093  001958  201D               	addwfc	?___awdiv+1,w,c
  3094  00195A  6E25               	movwf	___wmul@multiplier+1,c
  3095  00195C  EC40  F01D         	call	___wmul	;wreg free
  3096  001960  0E29               	movlw	low __powers_
  3097  001962  2424               	addwf	?___wmul,w,c
  3098  001964  6EF6               	movwf	tblptrl,c
  3099  001966  0E0F               	movlw	high __powers_
  3100  001968  2025               	addwfc	?___wmul+1,w,c
  3101  00196A  6EF7               	movwf	tblptrh,c
  3102  00196C                     	if	1	;There are 3 active tblptr bytes
  3103  00196C  6AF8               	clrf	tblptru,c
  3104  00196E  0E00               	movlw	low (__mediumconst shr (0+16))
  3105  001970  22F8               	addwfc	tblptru,f,c
  3106  001972                     	endif
  3107  001972  0009               	tblrd		*+
  3108  001974  CFF5 F02D          	movff	tablat,___ftmul@f2
  3109  001978  0009               	tblrd		*+
  3110  00197A  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  3111  00197E  000A               	tblrd		*-
  3112  001980  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  3113  001984  0E00               	movlw	0
  3114  001986  6E1F               	movwf	___awdiv@divisor+1,c
  3115  001988  0E64               	movlw	100
  3116  00198A  6E1E               	movwf	___awdiv@divisor,c
  3117  00198C  0100               	movlb	0	; () banked
  3118  00198E  5166               	movf	scale@scl& (0+255),w,b
  3119  001990  6E1C               	movwf	___awdiv@dividend,c
  3120  001992  6A1D               	clrf	___awdiv@dividend+1,c
  3121  001994  BE1C               	btfsc	___awdiv@dividend,7,c
  3122  001996  061D               	decf	___awdiv@dividend+1,f,c
  3123  001998  EC6F  F017         	call	___awdiv	;wreg free
  3124  00199C  0E12               	movlw	18
  3125  00199E  241C               	addwf	?___awdiv,w,c
  3126  0019A0  6E24               	movwf	___wmul@multiplier,c
  3127  0019A2  0E00               	movlw	0
  3128  0019A4  201D               	addwfc	?___awdiv+1,w,c
  3129  0019A6  6E25               	movwf	___wmul@multiplier+1,c
  3130  0019A8  0E00               	movlw	0
  3131  0019AA  6E27               	movwf	___wmul@multiplicand+1,c
  3132  0019AC  0E03               	movlw	3
  3133  0019AE  6E26               	movwf	___wmul@multiplicand,c
  3134  0019B0  EC40  F01D         	call	___wmul	;wreg free
  3135  0019B4  0E29               	movlw	low __powers_
  3136  0019B6  2424               	addwf	?___wmul,w,c
  3137  0019B8  6EF6               	movwf	tblptrl,c
  3138  0019BA  0E0F               	movlw	high __powers_
  3139  0019BC  2025               	addwfc	?___wmul+1,w,c
  3140  0019BE  6EF7               	movwf	tblptrh,c
  3141  0019C0                     	if	1	;There are 3 active tblptr bytes
  3142  0019C0  6AF8               	clrf	tblptru,c
  3143  0019C2  0E00               	movlw	low (__mediumconst shr (0+16))
  3144  0019C4  22F8               	addwfc	tblptru,f,c
  3145  0019C6                     	endif
  3146  0019C6  0009               	tblrd		*+
  3147  0019C8  CFF5 F02A          	movff	tablat,___ftmul@f1
  3148  0019CC  0009               	tblrd		*+
  3149  0019CE  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  3150  0019D2  000A               	tblrd		*-
  3151  0019D4  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  3152  0019D8  EC7B  F013         	call	___ftmul	;wreg free
  3153  0019DC  C02A  F063         	movff	?___ftmul,_scale$2293
  3154  0019E0  C02B  F064         	movff	?___ftmul+1,_scale$2293+1
  3155  0019E4  C02C  F065         	movff	?___ftmul+2,_scale$2293+2
  3156                           
  3157                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3158  0019E8  C063  F02A         	movff	_scale$2293,___ftmul@f1
  3159  0019EC  C064  F02B         	movff	_scale$2293+1,___ftmul@f1+1
  3160  0019F0  C065  F02C         	movff	_scale$2293+2,___ftmul@f1+2
  3161  0019F4  0E00               	movlw	0
  3162  0019F6  6E27               	movwf	___wmul@multiplicand+1,c
  3163  0019F8  0E03               	movlw	3
  3164  0019FA  6E26               	movwf	___wmul@multiplicand,c
  3165  0019FC  0E00               	movlw	0
  3166  0019FE  6E19               	movwf	___awmod@divisor+1,c
  3167  001A00  0E0A               	movlw	10
  3168  001A02  6E18               	movwf	___awmod@divisor,c
  3169  001A04  0100               	movlb	0	; () banked
  3170  001A06  5166               	movf	scale@scl& (0+255),w,b
  3171  001A08  6E16               	movwf	___awmod@dividend,c
  3172  001A0A  6A17               	clrf	___awmod@dividend+1,c
  3173  001A0C  BE16               	btfsc	___awmod@dividend,7,c
  3174  001A0E  0617               	decf	___awmod@dividend+1,f,c
  3175  001A10  EC20  F019         	call	___awmod	;wreg free
  3176  001A14  C016  F024         	movff	?___awmod,___wmul@multiplier
  3177  001A18  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  3178  001A1C  EC40  F01D         	call	___wmul	;wreg free
  3179  001A20  0E29               	movlw	low __powers_
  3180  001A22  2424               	addwf	?___wmul,w,c
  3181  001A24  6EF6               	movwf	tblptrl,c
  3182  001A26  0E0F               	movlw	high __powers_
  3183  001A28  2025               	addwfc	?___wmul+1,w,c
  3184  001A2A  6EF7               	movwf	tblptrh,c
  3185  001A2C                     	if	1	;There are 3 active tblptr bytes
  3186  001A2C  6AF8               	clrf	tblptru,c
  3187  001A2E  0E00               	movlw	low (__mediumconst shr (0+16))
  3188  001A30  22F8               	addwfc	tblptru,f,c
  3189  001A32                     	endif
  3190  001A32  0009               	tblrd		*+
  3191  001A34  CFF5 F02D          	movff	tablat,___ftmul@f2
  3192  001A38  0009               	tblrd		*+
  3193  001A3A  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  3194  001A3E  000A               	tblrd		*-
  3195  001A40  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  3196  001A44  EC7B  F013         	call	___ftmul	;wreg free
  3197  001A48  C02A  F060         	movff	?___ftmul,?_scale
  3198  001A4C  C02B  F061         	movff	?___ftmul+1,?_scale+1
  3199  001A50  C02C  F062         	movff	?___ftmul+2,?_scale+2
  3200  001A54  0012               	return	
  3201  001A56                     l849:
  3202                           
  3203                           ;doprnt.c: 438: else if(scl > 10)
  3204  001A56  0100               	movlb	0	; () banked
  3205  001A58  5166               	movf	scale@scl& (0+255),w,b
  3206  001A5A  0A80               	xorlw	128
  3207  001A5C  0F75               	addlw	-139
  3208  001A5E  A0D8               	btfss	status,0,c
  3209  001A60  D05A               	goto	l851
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3213  001A62  0E00               	movlw	0
  3214  001A64  6E1F               	movwf	___awdiv@divisor+1,c
  3215  001A66  0E0A               	movlw	10
  3216  001A68  6E1E               	movwf	___awdiv@divisor,c
  3217  001A6A  5166               	movf	scale@scl& (0+255),w,b
  3218  001A6C  6E1C               	movwf	___awdiv@dividend,c
  3219  001A6E  6A1D               	clrf	___awdiv@dividend+1,c
  3220  001A70  BE1C               	btfsc	___awdiv@dividend,7,c
  3221  001A72  061D               	decf	___awdiv@dividend+1,f,c
  3222  001A74  EC6F  F017         	call	___awdiv	;wreg free
  3223  001A78  0E09               	movlw	9
  3224  001A7A  241C               	addwf	?___awdiv,w,c
  3225  001A7C  6E24               	movwf	___wmul@multiplier,c
  3226  001A7E  0E00               	movlw	0
  3227  001A80  201D               	addwfc	?___awdiv+1,w,c
  3228  001A82  6E25               	movwf	___wmul@multiplier+1,c
  3229  001A84  0E00               	movlw	0
  3230  001A86  6E27               	movwf	___wmul@multiplicand+1,c
  3231  001A88  0E03               	movlw	3
  3232  001A8A  6E26               	movwf	___wmul@multiplicand,c
  3233  001A8C  EC40  F01D         	call	___wmul	;wreg free
  3234  001A90  0E29               	movlw	low __powers_
  3235  001A92  2424               	addwf	?___wmul,w,c
  3236  001A94  6EF6               	movwf	tblptrl,c
  3237  001A96  0E0F               	movlw	high __powers_
  3238  001A98  2025               	addwfc	?___wmul+1,w,c
  3239  001A9A  6EF7               	movwf	tblptrh,c
  3240  001A9C                     	if	1	;There are 3 active tblptr bytes
  3241  001A9C  6AF8               	clrf	tblptru,c
  3242  001A9E  0E00               	movlw	low (__mediumconst shr (0+16))
  3243  001AA0  22F8               	addwfc	tblptru,f,c
  3244  001AA2                     	endif
  3245  001AA2  0009               	tblrd		*+
  3246  001AA4  CFF5 F02A          	movff	tablat,___ftmul@f1
  3247  001AA8  0009               	tblrd		*+
  3248  001AAA  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  3249  001AAE  000A               	tblrd		*-
  3250  001AB0  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  3251  001AB4  0E00               	movlw	0
  3252  001AB6  6E27               	movwf	___wmul@multiplicand+1,c
  3253  001AB8  0E03               	movlw	3
  3254  001ABA  6E26               	movwf	___wmul@multiplicand,c
  3255  001ABC  0E00               	movlw	0
  3256  001ABE  6E19               	movwf	___awmod@divisor+1,c
  3257  001AC0  0E0A               	movlw	10
  3258  001AC2  6E18               	movwf	___awmod@divisor,c
  3259  001AC4  0100               	movlb	0	; () banked
  3260  001AC6  5166               	movf	scale@scl& (0+255),w,b
  3261  001AC8  6E16               	movwf	___awmod@dividend,c
  3262  001ACA  6A17               	clrf	___awmod@dividend+1,c
  3263  001ACC  BE16               	btfsc	___awmod@dividend,7,c
  3264  001ACE  0617               	decf	___awmod@dividend+1,f,c
  3265  001AD0  EC20  F019         	call	___awmod	;wreg free
  3266  001AD4  C016  F024         	movff	?___awmod,___wmul@multiplier
  3267  001AD8  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  3268  001ADC  EC40  F01D         	call	___wmul	;wreg free
  3269  001AE0  0E29               	movlw	low __powers_
  3270  001AE2  2424               	addwf	?___wmul,w,c
  3271  001AE4  6EF6               	movwf	tblptrl,c
  3272  001AE6  0E0F               	movlw	high __powers_
  3273  001AE8  2025               	addwfc	?___wmul+1,w,c
  3274  001AEA  6EF7               	movwf	tblptrh,c
  3275  001AEC                     	if	1	;There are 3 active tblptr bytes
  3276  001AEC  6AF8               	clrf	tblptru,c
  3277  001AEE  0E00               	movlw	low (__mediumconst shr (0+16))
  3278  001AF0  22F8               	addwfc	tblptru,f,c
  3279  001AF2                     	endif
  3280  001AF2  0009               	tblrd		*+
  3281  001AF4  CFF5 F02D          	movff	tablat,___ftmul@f2
  3282  001AF8  0009               	tblrd		*+
  3283  001AFA  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  3284  001AFE  000A               	tblrd		*-
  3285  001B00  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  3286  001B04  EC7B  F013         	call	___ftmul	;wreg free
  3287  001B08  C02A  F060         	movff	?___ftmul,?_scale
  3288  001B0C  C02B  F061         	movff	?___ftmul+1,?_scale+1
  3289  001B10  C02C  F062         	movff	?___ftmul+2,?_scale+2
  3290  001B14  0012               	return	
  3291  001B16                     l851:
  3292                           
  3293                           ;doprnt.c: 440: return _powers_[scl];
  3294  001B16  0100               	movlb	0	; () banked
  3295  001B18  5166               	movf	scale@scl& (0+255),w,b
  3296  001B1A  0D03               	mullw	3
  3297  001B1C  0E29               	movlw	low __powers_
  3298  001B1E  24F3               	addwf	prodl,w,c
  3299  001B20  6EF6               	movwf	tblptrl,c
  3300  001B22  0E0F               	movlw	high __powers_
  3301  001B24  20F4               	addwfc	prodh,w,c
  3302  001B26  6EF7               	movwf	tblptrh,c
  3303  001B28                     	if	1	;There are 3 active tblptr bytes
  3304  001B28  6AF8               	clrf	tblptru,c
  3305  001B2A  0E00               	movlw	low (__mediumconst shr (0+16))
  3306  001B2C  22F8               	addwfc	tblptru,f,c
  3307  001B2E                     	endif
  3308  001B2E  0009               	tblrd		*+
  3309  001B30  CFF5 F060          	movff	tablat,?_scale
  3310  001B34  0009               	tblrd		*+
  3311  001B36  CFF5 F061          	movff	tablat,?_scale+1
  3312  001B3A  000A               	tblrd		*-
  3313  001B3C  CFF5 F062          	movff	tablat,?_scale+2
  3314  001B40  0012               	return	
  3315  001B42                     __end_of_scale:
  3316                           	opt stack 0
  3317                           tblptru	equ	0xFF8
  3318                           tblptrh	equ	0xFF7
  3319                           tblptrl	equ	0xFF6
  3320                           tablat	equ	0xFF5
  3321                           prodh	equ	0xFF4
  3322                           prodl	equ	0xFF3
  3323                           intcon	equ	0xFF2
  3324                           postinc0	equ	0xFEE
  3325                           wreg	equ	0xFE8
  3326                           postdec1	equ	0xFE5
  3327                           fsr1l	equ	0xFE1
  3328                           indf2	equ	0xFDF
  3329                           postinc2	equ	0xFDE
  3330                           postdec2	equ	0xFDD
  3331                           fsr2h	equ	0xFDA
  3332                           fsr2l	equ	0xFD9
  3333                           status	equ	0xFD8
  3334                           
  3335 ;; *************** function _isdigit *****************
  3336 ;; Defined at:
  3337 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;  c               1    wreg     unsigned char 
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  c               1   23[COMRAM] unsigned char 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;		None               void
  3344 ;; Registers used:
  3345 ;;		wreg, status,2, status,0
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3352 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3353 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3354 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3355 ;;Total ram usage:        3 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:    6
  3358 ;; This function calls:
  3359 ;;		Nothing
  3360 ;; This function is called by:
  3361 ;;		_sprintf
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365                           	psect	text3
  3366  003AC8                     __ptext3:
  3367                           	opt stack 0
  3368  003AC8                     _isdigit:
  3369                           	opt stack 23
  3370                           
  3371                           ;incstack = 0
  3372                           ;isdigit@c stored from wreg
  3373  003AC8  6E18               	movwf	isdigit@c,c
  3374  003ACA  0E00               	movlw	0
  3375  003ACC  6E17               	movwf	_isdigit$1677,c
  3376  003ACE  0E3A               	movlw	58
  3377  003AD0  6018               	cpfslt	isdigit@c,c
  3378  003AD2  D005               	goto	l1304
  3379  003AD4  0E2F               	movlw	47
  3380  003AD6  6418               	cpfsgt	isdigit@c,c
  3381  003AD8  D002               	goto	l1304
  3382  003ADA  0E01               	movlw	1
  3383  003ADC  6E17               	movwf	_isdigit$1677,c
  3384  003ADE                     l1304:
  3385  003ADE  C017  F016         	movff	_isdigit$1677,??_isdigit
  3386  003AE2  3016               	rrcf	??_isdigit,w,c
  3387  003AE4  0012               	return	
  3388  003AE6                     __end_of_isdigit:
  3389                           	opt stack 0
  3390                           tblptru	equ	0xFF8
  3391                           tblptrh	equ	0xFF7
  3392                           tblptrl	equ	0xFF6
  3393                           tablat	equ	0xFF5
  3394                           prodh	equ	0xFF4
  3395                           prodl	equ	0xFF3
  3396                           intcon	equ	0xFF2
  3397                           postinc0	equ	0xFEE
  3398                           wreg	equ	0xFE8
  3399                           postdec1	equ	0xFE5
  3400                           fsr1l	equ	0xFE1
  3401                           indf2	equ	0xFDF
  3402                           postinc2	equ	0xFDE
  3403                           postdec2	equ	0xFDD
  3404                           fsr2h	equ	0xFDA
  3405                           fsr2l	equ	0xFD9
  3406                           status	equ	0xFD8
  3407                           
  3408 ;; *************** function _fround *****************
  3409 ;; Defined at:
  3410 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;  prec            1    wreg     unsigned char 
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;  prec            1    9[BANK0 ] unsigned char 
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  3    0[BANK0 ] unsigned char 
  3417 ;; Registers used:
  3418 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3424 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3425 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3427 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3428 ;;Total ram usage:       10 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    8
  3431 ;; This function calls:
  3432 ;;		___awdiv
  3433 ;;		___awmod
  3434 ;;		___ftmul
  3435 ;;		___wmul
  3436 ;; This function is called by:
  3437 ;;		_sprintf
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text4
  3442  001B42                     __ptext4:
  3443                           	opt stack 0
  3444  001B42                     _fround:
  3445                           	opt stack 21
  3446                           
  3447                           ;incstack = 0
  3448                           ;fround@prec stored from wreg
  3449  001B42  0100               	movlb	0	; () banked
  3450  001B44  6F69               	movwf	fround@prec& (0+255),b
  3451                           
  3452                           ;doprnt.c: 413: if(prec>=110)
  3453  001B46  0E6D               	movlw	109
  3454  001B48  0100               	movlb	0	; () banked
  3455  001B4A  6569               	cpfsgt	fround@prec& (0+255),b
  3456  001B4C  D0A8               	goto	l838
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3460  001B4E  0E00               	movlw	0
  3461  001B50  6E27               	movwf	___wmul@multiplicand+1,c
  3462  001B52  0E03               	movlw	3
  3463  001B54  6E26               	movwf	___wmul@multiplicand,c
  3464  001B56  0E00               	movlw	0
  3465  001B58  6E1F               	movwf	___awdiv@divisor+1,c
  3466  001B5A  0E0A               	movlw	10
  3467  001B5C  6E1E               	movwf	___awdiv@divisor,c
  3468  001B5E  0E00               	movlw	0
  3469  001B60  6E19               	movwf	___awmod@divisor+1,c
  3470  001B62  0E64               	movlw	100
  3471  001B64  6E18               	movwf	___awmod@divisor,c
  3472  001B66  C069  F016         	movff	fround@prec,___awmod@dividend
  3473  001B6A  6A17               	clrf	___awmod@dividend+1,c
  3474  001B6C  EC20  F019         	call	___awmod	;wreg free
  3475  001B70  C016  F01C         	movff	?___awmod,___awdiv@dividend
  3476  001B74  C017  F01D         	movff	?___awmod+1,___awdiv@dividend+1
  3477  001B78  EC6F  F017         	call	___awdiv	;wreg free
  3478  001B7C  0E09               	movlw	9
  3479  001B7E  241C               	addwf	?___awdiv,w,c
  3480  001B80  6E24               	movwf	___wmul@multiplier,c
  3481  001B82  0E00               	movlw	0
  3482  001B84  201D               	addwfc	?___awdiv+1,w,c
  3483  001B86  6E25               	movwf	___wmul@multiplier+1,c
  3484  001B88  EC40  F01D         	call	___wmul	;wreg free
  3485  001B8C  0E50               	movlw	low __npowers_
  3486  001B8E  2424               	addwf	?___wmul,w,c
  3487  001B90  6EF6               	movwf	tblptrl,c
  3488  001B92  0E0F               	movlw	high __npowers_
  3489  001B94  2025               	addwfc	?___wmul+1,w,c
  3490  001B96  6EF7               	movwf	tblptrh,c
  3491  001B98                     	if	1	;There are 3 active tblptr bytes
  3492  001B98  6AF8               	clrf	tblptru,c
  3493  001B9A  0E00               	movlw	low (__mediumconst shr (0+16))
  3494  001B9C  22F8               	addwfc	tblptru,f,c
  3495  001B9E                     	endif
  3496  001B9E  0009               	tblrd		*+
  3497  001BA0  CFF5 F02D          	movff	tablat,___ftmul@f2
  3498  001BA4  0009               	tblrd		*+
  3499  001BA6  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  3500  001BAA  000A               	tblrd		*-
  3501  001BAC  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  3502  001BB0  0E00               	movlw	0
  3503  001BB2  6E1F               	movwf	___awdiv@divisor+1,c
  3504  001BB4  0E64               	movlw	100
  3505  001BB6  6E1E               	movwf	___awdiv@divisor,c
  3506  001BB8  C069  F01C         	movff	fround@prec,___awdiv@dividend
  3507  001BBC  6A1D               	clrf	___awdiv@dividend+1,c
  3508  001BBE  EC6F  F017         	call	___awdiv	;wreg free
  3509  001BC2  0E12               	movlw	18
  3510  001BC4  241C               	addwf	?___awdiv,w,c
  3511  001BC6  6E24               	movwf	___wmul@multiplier,c
  3512  001BC8  0E00               	movlw	0
  3513  001BCA  201D               	addwfc	?___awdiv+1,w,c
  3514  001BCC  6E25               	movwf	___wmul@multiplier+1,c
  3515  001BCE  0E00               	movlw	0
  3516  001BD0  6E27               	movwf	___wmul@multiplicand+1,c
  3517  001BD2  0E03               	movlw	3
  3518  001BD4  6E26               	movwf	___wmul@multiplicand,c
  3519  001BD6  EC40  F01D         	call	___wmul	;wreg free
  3520  001BDA  0E50               	movlw	low __npowers_
  3521  001BDC  2424               	addwf	?___wmul,w,c
  3522  001BDE  6EF6               	movwf	tblptrl,c
  3523  001BE0  0E0F               	movlw	high __npowers_
  3524  001BE2  2025               	addwfc	?___wmul+1,w,c
  3525  001BE4  6EF7               	movwf	tblptrh,c
  3526  001BE6                     	if	1	;There are 3 active tblptr bytes
  3527  001BE6  6AF8               	clrf	tblptru,c
  3528  001BE8  0E00               	movlw	low (__mediumconst shr (0+16))
  3529  001BEA  22F8               	addwfc	tblptru,f,c
  3530  001BEC                     	endif
  3531  001BEC  0009               	tblrd		*+
  3532  001BEE  CFF5 F02A          	movff	tablat,___ftmul@f1
  3533  001BF2  0009               	tblrd		*+
  3534  001BF4  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  3535  001BF8  000A               	tblrd		*-
  3536  001BFA  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  3537  001BFE  EC7B  F013         	call	___ftmul	;wreg free
  3538  001C02  C02A  F066         	movff	?___ftmul,_fround$2291
  3539  001C06  C02B  F067         	movff	?___ftmul+1,_fround$2291+1
  3540  001C0A  C02C  F068         	movff	?___ftmul+2,_fround$2291+2
  3541                           
  3542                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3543  001C0E  0E00               	movlw	0
  3544  001C10  6E27               	movwf	___wmul@multiplicand+1,c
  3545  001C12  0E03               	movlw	3
  3546  001C14  6E26               	movwf	___wmul@multiplicand,c
  3547  001C16  0E00               	movlw	0
  3548  001C18  6E19               	movwf	___awmod@divisor+1,c
  3549  001C1A  0E0A               	movlw	10
  3550  001C1C  6E18               	movwf	___awmod@divisor,c
  3551  001C1E  C069  F016         	movff	fround@prec,___awmod@dividend
  3552  001C22  6A17               	clrf	___awmod@dividend+1,c
  3553  001C24  EC20  F019         	call	___awmod	;wreg free
  3554  001C28  C016  F024         	movff	?___awmod,___wmul@multiplier
  3555  001C2C  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  3556  001C30  EC40  F01D         	call	___wmul	;wreg free
  3557  001C34  0E50               	movlw	low __npowers_
  3558  001C36  2424               	addwf	?___wmul,w,c
  3559  001C38  6EF6               	movwf	tblptrl,c
  3560  001C3A  0E0F               	movlw	high __npowers_
  3561  001C3C  2025               	addwfc	?___wmul+1,w,c
  3562  001C3E  6EF7               	movwf	tblptrh,c
  3563  001C40                     	if	1	;There are 3 active tblptr bytes
  3564  001C40  6AF8               	clrf	tblptru,c
  3565  001C42  0E00               	movlw	low (__mediumconst shr (0+16))
  3566  001C44  22F8               	addwfc	tblptru,f,c
  3567  001C46                     	endif
  3568  001C46  0009               	tblrd		*+
  3569  001C48  CFF5 F02D          	movff	tablat,___ftmul@f2
  3570  001C4C  0009               	tblrd		*+
  3571  001C4E  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  3572  001C52  000A               	tblrd		*-
  3573  001C54  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  3574  001C58  C066  F02A         	movff	_fround$2291,___ftmul@f1
  3575  001C5C  C067  F02B         	movff	_fround$2291+1,___ftmul@f1+1
  3576  001C60  C068  F02C         	movff	_fround$2291+2,___ftmul@f1+2
  3577  001C64  EC7B  F013         	call	___ftmul	;wreg free
  3578  001C68  C02A  F063         	movff	?___ftmul,_fround$2292
  3579  001C6C  C02B  F064         	movff	?___ftmul+1,_fround$2292+1
  3580  001C70  C02C  F065         	movff	?___ftmul+2,_fround$2292+2
  3581                           
  3582                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3583  001C74  C063  F02A         	movff	_fround$2292,___ftmul@f1
  3584  001C78  C064  F02B         	movff	_fround$2292+1,___ftmul@f1+1
  3585  001C7C  C065  F02C         	movff	_fround$2292+2,___ftmul@f1+2
  3586  001C80  0E00               	movlw	0
  3587  001C82  6E2D               	movwf	___ftmul@f2,c
  3588  001C84  0E00               	movlw	0
  3589  001C86  6E2E               	movwf	___ftmul@f2+1,c
  3590  001C88  0E3F               	movlw	63
  3591  001C8A  6E2F               	movwf	___ftmul@f2+2,c
  3592  001C8C  EC7B  F013         	call	___ftmul	;wreg free
  3593  001C90  C02A  F060         	movff	?___ftmul,?_fround
  3594  001C94  C02B  F061         	movff	?___ftmul+1,?_fround+1
  3595  001C98  C02C  F062         	movff	?___ftmul+2,?_fround+2
  3596  001C9C  0012               	return	
  3597  001C9E                     l838:
  3598                           
  3599                           ;doprnt.c: 415: else if(prec > 10)
  3600  001C9E  0E0A               	movlw	10
  3601  001CA0  0100               	movlb	0	; () banked
  3602  001CA2  6569               	cpfsgt	fround@prec& (0+255),b
  3603  001CA4  D069               	goto	l841
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3607  001CA6  0E00               	movlw	0
  3608  001CA8  6E27               	movwf	___wmul@multiplicand+1,c
  3609  001CAA  0E03               	movlw	3
  3610  001CAC  6E26               	movwf	___wmul@multiplicand,c
  3611  001CAE  0E00               	movlw	0
  3612  001CB0  6E19               	movwf	___awmod@divisor+1,c
  3613  001CB2  0E0A               	movlw	10
  3614  001CB4  6E18               	movwf	___awmod@divisor,c
  3615  001CB6  C069  F016         	movff	fround@prec,___awmod@dividend
  3616  001CBA  6A17               	clrf	___awmod@dividend+1,c
  3617  001CBC  EC20  F019         	call	___awmod	;wreg free
  3618  001CC0  C016  F024         	movff	?___awmod,___wmul@multiplier
  3619  001CC4  C017  F025         	movff	?___awmod+1,___wmul@multiplier+1
  3620  001CC8  EC40  F01D         	call	___wmul	;wreg free
  3621  001CCC  0E50               	movlw	low __npowers_
  3622  001CCE  2424               	addwf	?___wmul,w,c
  3623  001CD0  6EF6               	movwf	tblptrl,c
  3624  001CD2  0E0F               	movlw	high __npowers_
  3625  001CD4  2025               	addwfc	?___wmul+1,w,c
  3626  001CD6  6EF7               	movwf	tblptrh,c
  3627  001CD8                     	if	1	;There are 3 active tblptr bytes
  3628  001CD8  6AF8               	clrf	tblptru,c
  3629  001CDA  0E00               	movlw	low (__mediumconst shr (0+16))
  3630  001CDC  22F8               	addwfc	tblptru,f,c
  3631  001CDE                     	endif
  3632  001CDE  0009               	tblrd		*+
  3633  001CE0  CFF5 F02D          	movff	tablat,___ftmul@f2
  3634  001CE4  0009               	tblrd		*+
  3635  001CE6  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  3636  001CEA  000A               	tblrd		*-
  3637  001CEC  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  3638  001CF0  0E00               	movlw	0
  3639  001CF2  6E1F               	movwf	___awdiv@divisor+1,c
  3640  001CF4  0E0A               	movlw	10
  3641  001CF6  6E1E               	movwf	___awdiv@divisor,c
  3642  001CF8  C069  F01C         	movff	fround@prec,___awdiv@dividend
  3643  001CFC  6A1D               	clrf	___awdiv@dividend+1,c
  3644  001CFE  EC6F  F017         	call	___awdiv	;wreg free
  3645  001D02  0E09               	movlw	9
  3646  001D04  241C               	addwf	?___awdiv,w,c
  3647  001D06  6E24               	movwf	___wmul@multiplier,c
  3648  001D08  0E00               	movlw	0
  3649  001D0A  201D               	addwfc	?___awdiv+1,w,c
  3650  001D0C  6E25               	movwf	___wmul@multiplier+1,c
  3651  001D0E  0E00               	movlw	0
  3652  001D10  6E27               	movwf	___wmul@multiplicand+1,c
  3653  001D12  0E03               	movlw	3
  3654  001D14  6E26               	movwf	___wmul@multiplicand,c
  3655  001D16  EC40  F01D         	call	___wmul	;wreg free
  3656  001D1A  0E50               	movlw	low __npowers_
  3657  001D1C  2424               	addwf	?___wmul,w,c
  3658  001D1E  6EF6               	movwf	tblptrl,c
  3659  001D20  0E0F               	movlw	high __npowers_
  3660  001D22  2025               	addwfc	?___wmul+1,w,c
  3661  001D24  6EF7               	movwf	tblptrh,c
  3662  001D26                     	if	1	;There are 3 active tblptr bytes
  3663  001D26  6AF8               	clrf	tblptru,c
  3664  001D28  0E00               	movlw	low (__mediumconst shr (0+16))
  3665  001D2A  22F8               	addwfc	tblptru,f,c
  3666  001D2C                     	endif
  3667  001D2C  0009               	tblrd		*+
  3668  001D2E  CFF5 F02A          	movff	tablat,___ftmul@f1
  3669  001D32  0009               	tblrd		*+
  3670  001D34  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  3671  001D38  000A               	tblrd		*-
  3672  001D3A  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  3673  001D3E  EC7B  F013         	call	___ftmul	;wreg free
  3674  001D42  C02A  F066         	movff	?___ftmul,_fround$2291
  3675  001D46  C02B  F067         	movff	?___ftmul+1,_fround$2291+1
  3676  001D4A  C02C  F068         	movff	?___ftmul+2,_fround$2291+2
  3677                           
  3678                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3679  001D4E  C066  F02A         	movff	_fround$2291,___ftmul@f1
  3680  001D52  C067  F02B         	movff	_fround$2291+1,___ftmul@f1+1
  3681  001D56  C068  F02C         	movff	_fround$2291+2,___ftmul@f1+2
  3682  001D5A  0E00               	movlw	0
  3683  001D5C  6E2D               	movwf	___ftmul@f2,c
  3684  001D5E  0E00               	movlw	0
  3685  001D60  6E2E               	movwf	___ftmul@f2+1,c
  3686  001D62  0E3F               	movlw	63
  3687  001D64  6E2F               	movwf	___ftmul@f2+2,c
  3688  001D66  EC7B  F013         	call	___ftmul	;wreg free
  3689  001D6A  C02A  F060         	movff	?___ftmul,?_fround
  3690  001D6E  C02B  F061         	movff	?___ftmul+1,?_fround+1
  3691  001D72  C02C  F062         	movff	?___ftmul+2,?_fround+2
  3692  001D76  0012               	return	
  3693  001D78                     l841:
  3694                           
  3695                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3696  001D78  0100               	movlb	0	; () banked
  3697  001D7A  5169               	movf	fround@prec& (0+255),w,b
  3698  001D7C  0D03               	mullw	3
  3699  001D7E  0E50               	movlw	low __npowers_
  3700  001D80  24F3               	addwf	prodl,w,c
  3701  001D82  6EF6               	movwf	tblptrl,c
  3702  001D84  0E0F               	movlw	high __npowers_
  3703  001D86  20F4               	addwfc	prodh,w,c
  3704  001D88  6EF7               	movwf	tblptrh,c
  3705  001D8A                     	if	1	;There are 3 active tblptr bytes
  3706  001D8A  6AF8               	clrf	tblptru,c
  3707  001D8C  0E00               	movlw	low (__mediumconst shr (0+16))
  3708  001D8E  22F8               	addwfc	tblptru,f,c
  3709  001D90                     	endif
  3710  001D90  0009               	tblrd		*+
  3711  001D92  CFF5 F02A          	movff	tablat,___ftmul@f1
  3712  001D96  0009               	tblrd		*+
  3713  001D98  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  3714  001D9C  000A               	tblrd		*-
  3715  001D9E  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  3716  001DA2  0E00               	movlw	0
  3717  001DA4  6E2D               	movwf	___ftmul@f2,c
  3718  001DA6  0E00               	movlw	0
  3719  001DA8  6E2E               	movwf	___ftmul@f2+1,c
  3720  001DAA  0E3F               	movlw	63
  3721  001DAC  6E2F               	movwf	___ftmul@f2+2,c
  3722  001DAE  EC7B  F013         	call	___ftmul	;wreg free
  3723  001DB2  C02A  F060         	movff	?___ftmul,?_fround
  3724  001DB6  C02B  F061         	movff	?___ftmul+1,?_fround+1
  3725  001DBA  C02C  F062         	movff	?___ftmul+2,?_fround+2
  3726  001DBE  0012               	return	
  3727  001DC0                     __end_of_fround:
  3728                           	opt stack 0
  3729                           tblptru	equ	0xFF8
  3730                           tblptrh	equ	0xFF7
  3731                           tblptrl	equ	0xFF6
  3732                           tablat	equ	0xFF5
  3733                           prodh	equ	0xFF4
  3734                           prodl	equ	0xFF3
  3735                           intcon	equ	0xFF2
  3736                           postinc0	equ	0xFEE
  3737                           wreg	equ	0xFE8
  3738                           postdec1	equ	0xFE5
  3739                           fsr1l	equ	0xFE1
  3740                           indf2	equ	0xFDF
  3741                           postinc2	equ	0xFDE
  3742                           postdec2	equ	0xFDD
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8
  3746                           
  3747 ;; *************** function ___awmod *****************
  3748 ;; Defined at:
  3749 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;  dividend        2   21[COMRAM] int 
  3752 ;;  divisor         2   23[COMRAM] int 
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;  sign            1   26[COMRAM] unsigned char 
  3755 ;;  counter         1   25[COMRAM] unsigned char 
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  2   21[COMRAM] int 
  3758 ;; Registers used:
  3759 ;;		wreg, status,2, status,0
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3765 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3766 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3768 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3769 ;;Total ram usage:        6 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; Hardware stack levels required when called:    6
  3772 ;; This function calls:
  3773 ;;		Nothing
  3774 ;; This function is called by:
  3775 ;;		_fround
  3776 ;;		_scale
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           	psect	text5
  3781  003240                     __ptext5:
  3782                           	opt stack 0
  3783  003240                     ___awmod:
  3784                           	opt stack 22
  3785                           
  3786                           ;incstack = 0
  3787  003240  0E00               	movlw	0
  3788  003242  6E1B               	movwf	___awmod@sign,c
  3789  003244  AE17               	btfss	___awmod@dividend+1,7,c
  3790  003246  D006               	goto	l1115
  3791  003248  6C16               	negf	___awmod@dividend,c
  3792  00324A  1E17               	comf	___awmod@dividend+1,f,c
  3793  00324C  B0D8               	btfsc	status,0,c
  3794  00324E  2A17               	incf	___awmod@dividend+1,f,c
  3795  003250  0E01               	movlw	1
  3796  003252  6E1B               	movwf	___awmod@sign,c
  3797  003254                     l1115:
  3798  003254  AE19               	btfss	___awmod@divisor+1,7,c
  3799  003256  D004               	goto	l1116
  3800  003258  6C18               	negf	___awmod@divisor,c
  3801  00325A  1E19               	comf	___awmod@divisor+1,f,c
  3802  00325C  B0D8               	btfsc	status,0,c
  3803  00325E  2A19               	incf	___awmod@divisor+1,f,c
  3804  003260                     l1116:
  3805  003260  5018               	movf	___awmod@divisor,w,c
  3806  003262  1019               	iorwf	___awmod@divisor+1,w,c
  3807  003264  B4D8               	btfsc	status,2,c
  3808  003266  D018               	goto	l1123
  3809  003268  0E01               	movlw	1
  3810  00326A  6E1A               	movwf	___awmod@counter,c
  3811  00326C  D004               	goto	l1118
  3812  00326E  90D8               	bcf	status,0,c
  3813  003270  3618               	rlcf	___awmod@divisor,f,c
  3814  003272  3619               	rlcf	___awmod@divisor+1,f,c
  3815  003274  2A1A               	incf	___awmod@counter,f,c
  3816  003276                     l1118:
  3817  003276  AE19               	btfss	___awmod@divisor+1,7,c
  3818  003278  D7FA               	goto	l1119
  3819  00327A                     u5220:
  3820  00327A  5018               	movf	___awmod@divisor,w,c
  3821  00327C  5C16               	subwf	___awmod@dividend,w,c
  3822  00327E  5019               	movf	___awmod@divisor+1,w,c
  3823  003280  5817               	subwfb	___awmod@dividend+1,w,c
  3824  003282  A0D8               	btfss	status,0,c
  3825  003284  D004               	goto	l1122
  3826  003286  5018               	movf	___awmod@divisor,w,c
  3827  003288  5E16               	subwf	___awmod@dividend,f,c
  3828  00328A  5019               	movf	___awmod@divisor+1,w,c
  3829  00328C  5A17               	subwfb	___awmod@dividend+1,f,c
  3830  00328E                     l1122:
  3831  00328E  90D8               	bcf	status,0,c
  3832  003290  3219               	rrcf	___awmod@divisor+1,f,c
  3833  003292  3218               	rrcf	___awmod@divisor,f,c
  3834  003294  2E1A               	decfsz	___awmod@counter,f,c
  3835  003296  D7F1               	goto	u5220
  3836  003298                     l1123:
  3837  003298  501B               	movf	___awmod@sign,w,c
  3838  00329A  B4D8               	btfsc	status,2,c
  3839  00329C  D004               	goto	l1124
  3840  00329E  6C16               	negf	___awmod@dividend,c
  3841  0032A0  1E17               	comf	___awmod@dividend+1,f,c
  3842  0032A2  B0D8               	btfsc	status,0,c
  3843  0032A4  2A17               	incf	___awmod@dividend+1,f,c
  3844  0032A6                     l1124:
  3845  0032A6  C016  F016         	movff	___awmod@dividend,?___awmod
  3846  0032AA  C017  F017         	movff	___awmod@dividend+1,?___awmod+1
  3847  0032AE  0012               	return	
  3848  0032B0                     __end_of___awmod:
  3849                           	opt stack 0
  3850                           tblptru	equ	0xFF8
  3851                           tblptrh	equ	0xFF7
  3852                           tblptrl	equ	0xFF6
  3853                           tablat	equ	0xFF5
  3854                           prodh	equ	0xFF4
  3855                           prodl	equ	0xFF3
  3856                           intcon	equ	0xFF2
  3857                           postinc0	equ	0xFEE
  3858                           wreg	equ	0xFE8
  3859                           postdec1	equ	0xFE5
  3860                           fsr1l	equ	0xFE1
  3861                           indf2	equ	0xFDF
  3862                           postinc2	equ	0xFDE
  3863                           postdec2	equ	0xFDD
  3864                           fsr2h	equ	0xFDA
  3865                           fsr2l	equ	0xFD9
  3866                           status	equ	0xFD8
  3867                           
  3868 ;; *************** function ___awdiv *****************
  3869 ;; Defined at:
  3870 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  3871 ;; Parameters:    Size  Location     Type
  3872 ;;  dividend        2   27[COMRAM] int 
  3873 ;;  divisor         2   29[COMRAM] int 
  3874 ;; Auto vars:     Size  Location     Type
  3875 ;;  quotient        2   33[COMRAM] int 
  3876 ;;  sign            1   32[COMRAM] unsigned char 
  3877 ;;  counter         1   31[COMRAM] unsigned char 
  3878 ;; Return value:  Size  Location     Type
  3879 ;;                  2   27[COMRAM] int 
  3880 ;; Registers used:
  3881 ;;		wreg, status,2, status,0
  3882 ;; Tracked objects:
  3883 ;;		On entry : 0/0
  3884 ;;		On exit  : 0/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3887 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3888 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3890 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3891 ;;Total ram usage:        8 bytes
  3892 ;; Hardware stack levels used:    1
  3893 ;; Hardware stack levels required when called:    6
  3894 ;; This function calls:
  3895 ;;		Nothing
  3896 ;; This function is called by:
  3897 ;;		_fround
  3898 ;;		_scale
  3899 ;;		_sprintf
  3900 ;; This function uses a non-reentrant model
  3901 ;;
  3902                           
  3903                           	psect	text6
  3904  002EDE                     __ptext6:
  3905                           	opt stack 0
  3906  002EDE                     ___awdiv:
  3907                           	opt stack 22
  3908                           
  3909                           ;incstack = 0
  3910  002EDE  0E00               	movlw	0
  3911  002EE0  6E21               	movwf	___awdiv@sign,c
  3912  002EE2  AE1F               	btfss	___awdiv@divisor+1,7,c
  3913  002EE4  D006               	goto	l1102
  3914  002EE6  6C1E               	negf	___awdiv@divisor,c
  3915  002EE8  1E1F               	comf	___awdiv@divisor+1,f,c
  3916  002EEA  B0D8               	btfsc	status,0,c
  3917  002EEC  2A1F               	incf	___awdiv@divisor+1,f,c
  3918  002EEE  0E01               	movlw	1
  3919  002EF0  6E21               	movwf	___awdiv@sign,c
  3920  002EF2                     l1102:
  3921  002EF2  AE1D               	btfss	___awdiv@dividend+1,7,c
  3922  002EF4  D006               	goto	l1103
  3923  002EF6  6C1C               	negf	___awdiv@dividend,c
  3924  002EF8  1E1D               	comf	___awdiv@dividend+1,f,c
  3925  002EFA  B0D8               	btfsc	status,0,c
  3926  002EFC  2A1D               	incf	___awdiv@dividend+1,f,c
  3927  002EFE  0E01               	movlw	1
  3928  002F00  1A21               	xorwf	___awdiv@sign,f,c
  3929  002F02                     l1103:
  3930  002F02  0E00               	movlw	0
  3931  002F04  6E23               	movwf	___awdiv@quotient+1,c
  3932  002F06  0E00               	movlw	0
  3933  002F08  6E22               	movwf	___awdiv@quotient,c
  3934  002F0A  501E               	movf	___awdiv@divisor,w,c
  3935  002F0C  101F               	iorwf	___awdiv@divisor+1,w,c
  3936  002F0E  B4D8               	btfsc	status,2,c
  3937  002F10  D01C               	goto	l1110
  3938  002F12  0E01               	movlw	1
  3939  002F14  6E20               	movwf	___awdiv@counter,c
  3940  002F16  D004               	goto	l1105
  3941  002F18  90D8               	bcf	status,0,c
  3942  002F1A  361E               	rlcf	___awdiv@divisor,f,c
  3943  002F1C  361F               	rlcf	___awdiv@divisor+1,f,c
  3944  002F1E  2A20               	incf	___awdiv@counter,f,c
  3945  002F20                     l1105:
  3946  002F20  AE1F               	btfss	___awdiv@divisor+1,7,c
  3947  002F22  D7FA               	goto	l1106
  3948  002F24                     u5160:
  3949  002F24  90D8               	bcf	status,0,c
  3950  002F26  3622               	rlcf	___awdiv@quotient,f,c
  3951  002F28  3623               	rlcf	___awdiv@quotient+1,f,c
  3952  002F2A  501E               	movf	___awdiv@divisor,w,c
  3953  002F2C  5C1C               	subwf	___awdiv@dividend,w,c
  3954  002F2E  501F               	movf	___awdiv@divisor+1,w,c
  3955  002F30  581D               	subwfb	___awdiv@dividend+1,w,c
  3956  002F32  A0D8               	btfss	status,0,c
  3957  002F34  D005               	goto	l1109
  3958  002F36  501E               	movf	___awdiv@divisor,w,c
  3959  002F38  5E1C               	subwf	___awdiv@dividend,f,c
  3960  002F3A  501F               	movf	___awdiv@divisor+1,w,c
  3961  002F3C  5A1D               	subwfb	___awdiv@dividend+1,f,c
  3962  002F3E  8022               	bsf	___awdiv@quotient,0,c
  3963  002F40                     l1109:
  3964  002F40  90D8               	bcf	status,0,c
  3965  002F42  321F               	rrcf	___awdiv@divisor+1,f,c
  3966  002F44  321E               	rrcf	___awdiv@divisor,f,c
  3967  002F46  2E20               	decfsz	___awdiv@counter,f,c
  3968  002F48  D7ED               	goto	u5160
  3969  002F4A                     l1110:
  3970  002F4A  5021               	movf	___awdiv@sign,w,c
  3971  002F4C  B4D8               	btfsc	status,2,c
  3972  002F4E  D004               	goto	l1111
  3973  002F50  6C22               	negf	___awdiv@quotient,c
  3974  002F52  1E23               	comf	___awdiv@quotient+1,f,c
  3975  002F54  B0D8               	btfsc	status,0,c
  3976  002F56  2A23               	incf	___awdiv@quotient+1,f,c
  3977  002F58                     l1111:
  3978  002F58  C022  F01C         	movff	___awdiv@quotient,?___awdiv
  3979  002F5C  C023  F01D         	movff	___awdiv@quotient+1,?___awdiv+1
  3980  002F60  0012               	return	
  3981  002F62                     __end_of___awdiv:
  3982                           	opt stack 0
  3983                           tblptru	equ	0xFF8
  3984                           tblptrh	equ	0xFF7
  3985                           tblptrl	equ	0xFF6
  3986                           tablat	equ	0xFF5
  3987                           prodh	equ	0xFF4
  3988                           prodl	equ	0xFF3
  3989                           intcon	equ	0xFF2
  3990                           postinc0	equ	0xFEE
  3991                           wreg	equ	0xFE8
  3992                           postdec1	equ	0xFE5
  3993                           fsr1l	equ	0xFE1
  3994                           indf2	equ	0xFDF
  3995                           postinc2	equ	0xFDE
  3996                           postdec2	equ	0xFDD
  3997                           fsr2h	equ	0xFDA
  3998                           fsr2l	equ	0xFD9
  3999                           status	equ	0xFD8
  4000                           
  4001 ;; *************** function __tdiv_to_l_ *****************
  4002 ;; Defined at:
  4003 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdivl.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;  f1              3   21[COMRAM] float 
  4006 ;;  f2              3   24[COMRAM] float 
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;  quot            4   30[COMRAM] unsigned long 
  4009 ;;  exp1            1   35[COMRAM] unsigned char 
  4010 ;;  cntr            1   34[COMRAM] unsigned char 
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  4   21[COMRAM] unsigned long 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4020 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4021 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4022 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4023 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4024 ;;Total ram usage:       15 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:    6
  4027 ;; This function calls:
  4028 ;;		Nothing
  4029 ;; This function is called by:
  4030 ;;		_sprintf
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           	psect	text7
  4035  0023A4                     __ptext7:
  4036                           	opt stack 0
  4037  0023A4                     __tdiv_to_l_:
  4038                           	opt stack 23
  4039                           
  4040                           ;incstack = 0
  4041  0023A4  C018  F01C         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4042  0023A8  6A1D               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4043  0023AA  6A1E               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4044  0023AC  3417               	rlcf	__tdiv_to_l_@f1+1,w,c
  4045  0023AE  361C               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4046  0023B0  E301               	bnc	u5461
  4047  0023B2  801D               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4048  0023B4                     u5461:
  4049  0023B4  501C               	movf	??__tdiv_to_l_,w,c
  4050  0023B6  6E24               	movwf	__tdiv_to_l_@exp1,c
  4051  0023B8  5024               	movf	__tdiv_to_l_@exp1,w,c
  4052  0023BA  A4D8               	btfss	status,2,c
  4053  0023BC  D009               	goto	l1244
  4054  0023BE  0E00               	movlw	0
  4055  0023C0  6E16               	movwf	?__tdiv_to_l_,c
  4056  0023C2  0E00               	movlw	0
  4057  0023C4  6E17               	movwf	?__tdiv_to_l_+1,c
  4058  0023C6  0E00               	movlw	0
  4059  0023C8  6E18               	movwf	?__tdiv_to_l_+2,c
  4060  0023CA  0E00               	movlw	0
  4061  0023CC  6E19               	movwf	?__tdiv_to_l_+3,c
  4062  0023CE  0012               	return	
  4063  0023D0                     l1244:
  4064  0023D0  C01B  F01C         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4065  0023D4  6A1D               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4066  0023D6  6A1E               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4067  0023D8  341A               	rlcf	__tdiv_to_l_@f2+1,w,c
  4068  0023DA  361C               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4069  0023DC  E301               	bnc	u5481
  4070  0023DE  801D               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4071  0023E0                     u5481:
  4072  0023E0  501C               	movf	??__tdiv_to_l_,w,c
  4073  0023E2  6E23               	movwf	__tdiv_to_l_@cntr,c
  4074  0023E4  5023               	movf	__tdiv_to_l_@cntr,w,c
  4075  0023E6  A4D8               	btfss	status,2,c
  4076  0023E8  D009               	goto	l1246
  4077  0023EA  0E00               	movlw	0
  4078  0023EC  6E16               	movwf	?__tdiv_to_l_,c
  4079  0023EE  0E00               	movlw	0
  4080  0023F0  6E17               	movwf	?__tdiv_to_l_+1,c
  4081  0023F2  0E00               	movlw	0
  4082  0023F4  6E18               	movwf	?__tdiv_to_l_+2,c
  4083  0023F6  0E00               	movlw	0
  4084  0023F8  6E19               	movwf	?__tdiv_to_l_+3,c
  4085  0023FA  0012               	return	
  4086  0023FC                     l1246:
  4087  0023FC  8E17               	bsf	__tdiv_to_l_@f1+1,7,c
  4088  0023FE  0EFF               	movlw	255
  4089  002400  1616               	andwf	__tdiv_to_l_@f1,f,c
  4090  002402  0EFF               	movlw	255
  4091  002404  1617               	andwf	__tdiv_to_l_@f1+1,f,c
  4092  002406  0E00               	movlw	0
  4093  002408  1618               	andwf	__tdiv_to_l_@f1+2,f,c
  4094  00240A  8E1A               	bsf	__tdiv_to_l_@f2+1,7,c
  4095  00240C  0EFF               	movlw	255
  4096  00240E  1619               	andwf	__tdiv_to_l_@f2,f,c
  4097  002410  0EFF               	movlw	255
  4098  002412  161A               	andwf	__tdiv_to_l_@f2+1,f,c
  4099  002414  0E00               	movlw	0
  4100  002416  161B               	andwf	__tdiv_to_l_@f2+2,f,c
  4101  002418  0E00               	movlw	0
  4102  00241A  6E1F               	movwf	__tdiv_to_l_@quot,c
  4103  00241C  0E00               	movlw	0
  4104  00241E  6E20               	movwf	__tdiv_to_l_@quot+1,c
  4105  002420  0E00               	movlw	0
  4106  002422  6E21               	movwf	__tdiv_to_l_@quot+2,c
  4107  002424  0E00               	movlw	0
  4108  002426  6E22               	movwf	__tdiv_to_l_@quot+3,c
  4109  002428  0E7F               	movlw	127
  4110  00242A  5E24               	subwf	__tdiv_to_l_@exp1,f,c
  4111  00242C  5023               	movf	__tdiv_to_l_@cntr,w,c
  4112  00242E  0F98               	addlw	152
  4113  002430  5E24               	subwf	__tdiv_to_l_@exp1,f,c
  4114  002432  0E18               	movlw	24
  4115  002434  6E23               	movwf	__tdiv_to_l_@cntr,c
  4116  002436                     l1247:
  4117  002436  90D8               	bcf	status,0,c
  4118  002438  361F               	rlcf	__tdiv_to_l_@quot,f,c
  4119  00243A  3620               	rlcf	__tdiv_to_l_@quot+1,f,c
  4120  00243C  3621               	rlcf	__tdiv_to_l_@quot+2,f,c
  4121  00243E  3622               	rlcf	__tdiv_to_l_@quot+3,f,c
  4122  002440  5019               	movf	__tdiv_to_l_@f2,w,c
  4123  002442  5C16               	subwf	__tdiv_to_l_@f1,w,c
  4124  002444  501A               	movf	__tdiv_to_l_@f2+1,w,c
  4125  002446  5817               	subwfb	__tdiv_to_l_@f1+1,w,c
  4126  002448  501B               	movf	__tdiv_to_l_@f2+2,w,c
  4127  00244A  5818               	subwfb	__tdiv_to_l_@f1+2,w,c
  4128  00244C  A0D8               	btfss	status,0,c
  4129  00244E  D007               	goto	l1248
  4130  002450  5019               	movf	__tdiv_to_l_@f2,w,c
  4131  002452  5E16               	subwf	__tdiv_to_l_@f1,f,c
  4132  002454  501A               	movf	__tdiv_to_l_@f2+1,w,c
  4133  002456  5A17               	subwfb	__tdiv_to_l_@f1+1,f,c
  4134  002458  501B               	movf	__tdiv_to_l_@f2+2,w,c
  4135  00245A  5A18               	subwfb	__tdiv_to_l_@f1+2,f,c
  4136  00245C  801F               	bsf	__tdiv_to_l_@quot,0,c
  4137  00245E                     l1248:
  4138  00245E  90D8               	bcf	status,0,c
  4139  002460  3616               	rlcf	__tdiv_to_l_@f1,f,c
  4140  002462  3617               	rlcf	__tdiv_to_l_@f1+1,f,c
  4141  002464  3618               	rlcf	__tdiv_to_l_@f1+2,f,c
  4142  002466  2E23               	decfsz	__tdiv_to_l_@cntr,f,c
  4143  002468  D7E6               	goto	l1247
  4144  00246A  AE24               	btfss	__tdiv_to_l_@exp1,7,c
  4145  00246C  D016               	goto	l1250
  4146  00246E  5024               	movf	__tdiv_to_l_@exp1,w,c
  4147  002470  0A80               	xorlw	128
  4148  002472  0F97               	addlw	151
  4149  002474  B0D8               	btfsc	status,0,c
  4150  002476  D009               	goto	l1251
  4151  002478  0E00               	movlw	0
  4152  00247A  6E16               	movwf	?__tdiv_to_l_,c
  4153  00247C  0E00               	movlw	0
  4154  00247E  6E17               	movwf	?__tdiv_to_l_+1,c
  4155  002480  0E00               	movlw	0
  4156  002482  6E18               	movwf	?__tdiv_to_l_+2,c
  4157  002484  0E00               	movlw	0
  4158  002486  6E19               	movwf	?__tdiv_to_l_+3,c
  4159  002488  0012               	return	
  4160  00248A                     l1251:
  4161  00248A  90D8               	bcf	status,0,c
  4162  00248C  3222               	rrcf	__tdiv_to_l_@quot+3,f,c
  4163  00248E  3221               	rrcf	__tdiv_to_l_@quot+2,f,c
  4164  002490  3220               	rrcf	__tdiv_to_l_@quot+1,f,c
  4165  002492  321F               	rrcf	__tdiv_to_l_@quot,f,c
  4166  002494  3E24               	incfsz	__tdiv_to_l_@exp1,f,c
  4167  002496  D7F9               	goto	l1251
  4168  002498  D015               	goto	u5540
  4169  00249A                     l1250:
  4170  00249A  0E17               	movlw	23
  4171  00249C  6424               	cpfsgt	__tdiv_to_l_@exp1,c
  4172  00249E  D00F               	goto	l1256
  4173  0024A0  0E00               	movlw	0
  4174  0024A2  6E16               	movwf	?__tdiv_to_l_,c
  4175  0024A4  0E00               	movlw	0
  4176  0024A6  6E17               	movwf	?__tdiv_to_l_+1,c
  4177  0024A8  0E00               	movlw	0
  4178  0024AA  6E18               	movwf	?__tdiv_to_l_+2,c
  4179  0024AC  0E00               	movlw	0
  4180  0024AE  6E19               	movwf	?__tdiv_to_l_+3,c
  4181  0024B0  0012               	return	
  4182  0024B2  90D8               	bcf	status,0,c
  4183  0024B4  361F               	rlcf	__tdiv_to_l_@quot,f,c
  4184  0024B6  3620               	rlcf	__tdiv_to_l_@quot+1,f,c
  4185  0024B8  3621               	rlcf	__tdiv_to_l_@quot+2,f,c
  4186  0024BA  3622               	rlcf	__tdiv_to_l_@quot+3,f,c
  4187  0024BC  0624               	decf	__tdiv_to_l_@exp1,f,c
  4188  0024BE                     l1256:
  4189  0024BE  5024               	movf	__tdiv_to_l_@exp1,w,c
  4190  0024C0  A4D8               	btfss	status,2,c
  4191  0024C2  D7F7               	goto	l1257
  4192  0024C4                     u5540:
  4193  0024C4  C01F  F016         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4194  0024C8  C020  F017         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4195  0024CC  C021  F018         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4196  0024D0  C022  F019         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4197  0024D4  0012               	return		;funcret
  4198  0024D6                     __end_of__tdiv_to_l_:
  4199                           	opt stack 0
  4200                           tblptru	equ	0xFF8
  4201                           tblptrh	equ	0xFF7
  4202                           tblptrl	equ	0xFF6
  4203                           tablat	equ	0xFF5
  4204                           prodh	equ	0xFF4
  4205                           prodl	equ	0xFF3
  4206                           intcon	equ	0xFF2
  4207                           postinc0	equ	0xFEE
  4208                           wreg	equ	0xFE8
  4209                           postdec1	equ	0xFE5
  4210                           fsr1l	equ	0xFE1
  4211                           indf2	equ	0xFDF
  4212                           postinc2	equ	0xFDE
  4213                           postdec2	equ	0xFDD
  4214                           fsr2h	equ	0xFDA
  4215                           fsr2l	equ	0xFD9
  4216                           status	equ	0xFD8
  4217                           
  4218 ;; *************** function __div_to_l_ *****************
  4219 ;; Defined at:
  4220 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fldivl.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;  f1              3   21[COMRAM] unsigned long 
  4223 ;;  f2              3   24[COMRAM] unsigned long 
  4224 ;; Auto vars:     Size  Location     Type
  4225 ;;  quot            4   27[COMRAM] unsigned long 
  4226 ;;  exp1            1   32[COMRAM] unsigned char 
  4227 ;;  cntr            1   31[COMRAM] unsigned char 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  4   21[COMRAM] unsigned long 
  4230 ;; Registers used:
  4231 ;;		wreg, status,2, status,0
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4237 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4238 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4240 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4241 ;;Total ram usage:       12 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:    6
  4244 ;; This function calls:
  4245 ;;		Nothing
  4246 ;; This function is called by:
  4247 ;;		_sprintf
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           	psect	text8
  4252  0024D6                     __ptext8:
  4253                           	opt stack 0
  4254  0024D6                     __div_to_l_:
  4255                           	opt stack 23
  4256                           
  4257                           ;incstack = 0
  4258  0024D6  3418               	rlcf	__div_to_l_@f1+2,w,c
  4259  0024D8  3419               	rlcf	__div_to_l_@f1+3,w,c
  4260  0024DA  6E21               	movwf	__div_to_l_@exp1,c
  4261  0024DC  5021               	movf	__div_to_l_@exp1,w,c
  4262  0024DE  A4D8               	btfss	status,2,c
  4263  0024E0  D009               	goto	l1140
  4264  0024E2  0E00               	movlw	0
  4265  0024E4  6E16               	movwf	?__div_to_l_,c
  4266  0024E6  0E00               	movlw	0
  4267  0024E8  6E17               	movwf	?__div_to_l_+1,c
  4268  0024EA  0E00               	movlw	0
  4269  0024EC  6E18               	movwf	?__div_to_l_+2,c
  4270  0024EE  0E00               	movlw	0
  4271  0024F0  6E19               	movwf	?__div_to_l_+3,c
  4272  0024F2  0012               	return	
  4273  0024F4                     l1140:
  4274  0024F4  341B               	rlcf	__div_to_l_@f2+2,w,c
  4275  0024F6  341C               	rlcf	__div_to_l_@f2+3,w,c
  4276  0024F8  6E20               	movwf	__div_to_l_@cntr,c
  4277  0024FA  5020               	movf	__div_to_l_@cntr,w,c
  4278  0024FC  A4D8               	btfss	status,2,c
  4279  0024FE  D009               	goto	l1142
  4280  002500  0E00               	movlw	0
  4281  002502  6E16               	movwf	?__div_to_l_,c
  4282  002504  0E00               	movlw	0
  4283  002506  6E17               	movwf	?__div_to_l_+1,c
  4284  002508  0E00               	movlw	0
  4285  00250A  6E18               	movwf	?__div_to_l_+2,c
  4286  00250C  0E00               	movlw	0
  4287  00250E  6E19               	movwf	?__div_to_l_+3,c
  4288  002510  0012               	return	
  4289  002512                     l1142:
  4290  002512  8E18               	bsf	__div_to_l_@f1+2,7,c
  4291  002514  0EFF               	movlw	255
  4292  002516  1616               	andwf	__div_to_l_@f1,f,c
  4293  002518  0EFF               	movlw	255
  4294  00251A  1617               	andwf	__div_to_l_@f1+1,f,c
  4295  00251C  0EFF               	movlw	255
  4296  00251E  1618               	andwf	__div_to_l_@f1+2,f,c
  4297  002520  0E00               	movlw	0
  4298  002522  1619               	andwf	__div_to_l_@f1+3,f,c
  4299  002524  8E1B               	bsf	__div_to_l_@f2+2,7,c
  4300  002526  0EFF               	movlw	255
  4301  002528  1619               	andwf	__div_to_l_@f2,f,c
  4302  00252A  0EFF               	movlw	255
  4303  00252C  161A               	andwf	__div_to_l_@f2+1,f,c
  4304  00252E  0EFF               	movlw	255
  4305  002530  161B               	andwf	__div_to_l_@f2+2,f,c
  4306  002532  0E00               	movlw	0
  4307  002534  161C               	andwf	__div_to_l_@f2+3,f,c
  4308  002536  0E00               	movlw	0
  4309  002538  6E1C               	movwf	__div_to_l_@quot,c
  4310  00253A  0E00               	movlw	0
  4311  00253C  6E1D               	movwf	__div_to_l_@quot+1,c
  4312  00253E  0E00               	movlw	0
  4313  002540  6E1E               	movwf	__div_to_l_@quot+2,c
  4314  002542  0E00               	movlw	0
  4315  002544  6E1F               	movwf	__div_to_l_@quot+3,c
  4316  002546  0E7F               	movlw	127
  4317  002548  5E21               	subwf	__div_to_l_@exp1,f,c
  4318  00254A  5020               	movf	__div_to_l_@cntr,w,c
  4319  00254C  0FA0               	addlw	160
  4320  00254E  5E21               	subwf	__div_to_l_@exp1,f,c
  4321  002550  0E20               	movlw	32
  4322  002552  6E20               	movwf	__div_to_l_@cntr,c
  4323  002554  90D8               	bcf	status,0,c
  4324  002556  361C               	rlcf	__div_to_l_@quot,f,c
  4325  002558  361D               	rlcf	__div_to_l_@quot+1,f,c
  4326  00255A  361E               	rlcf	__div_to_l_@quot+2,f,c
  4327  00255C  361F               	rlcf	__div_to_l_@quot+3,f,c
  4328  00255E  5019               	movf	__div_to_l_@f2,w,c
  4329  002560  5C16               	subwf	__div_to_l_@f1,w,c
  4330  002562  501A               	movf	__div_to_l_@f2+1,w,c
  4331  002564  5817               	subwfb	__div_to_l_@f1+1,w,c
  4332  002566  501B               	movf	__div_to_l_@f2+2,w,c
  4333  002568  5818               	subwfb	__div_to_l_@f1+2,w,c
  4334  00256A  501C               	movf	__div_to_l_@f2+3,w,c
  4335  00256C  5819               	subwfb	__div_to_l_@f1+3,w,c
  4336  00256E  A0D8               	btfss	status,0,c
  4337  002570  D009               	goto	l1144
  4338  002572  5019               	movf	__div_to_l_@f2,w,c
  4339  002574  5E16               	subwf	__div_to_l_@f1,f,c
  4340  002576  501A               	movf	__div_to_l_@f2+1,w,c
  4341  002578  5A17               	subwfb	__div_to_l_@f1+1,f,c
  4342  00257A  501B               	movf	__div_to_l_@f2+2,w,c
  4343  00257C  5A18               	subwfb	__div_to_l_@f1+2,f,c
  4344  00257E  501C               	movf	__div_to_l_@f2+3,w,c
  4345  002580  5A19               	subwfb	__div_to_l_@f1+3,f,c
  4346  002582  801C               	bsf	__div_to_l_@quot,0,c
  4347  002584                     l1144:
  4348  002584  90D8               	bcf	status,0,c
  4349  002586  3616               	rlcf	__div_to_l_@f1,f,c
  4350  002588  3617               	rlcf	__div_to_l_@f1+1,f,c
  4351  00258A  3618               	rlcf	__div_to_l_@f1+2,f,c
  4352  00258C  3619               	rlcf	__div_to_l_@f1+3,f,c
  4353  00258E  2E20               	decfsz	__div_to_l_@cntr,f,c
  4354  002590  D7E1               	goto	l1143
  4355  002592  AE21               	btfss	__div_to_l_@exp1,7,c
  4356  002594  D016               	goto	l1146
  4357  002596  5021               	movf	__div_to_l_@exp1,w,c
  4358  002598  0A80               	xorlw	128
  4359  00259A  0F9F               	addlw	159
  4360  00259C  B0D8               	btfsc	status,0,c
  4361  00259E  D009               	goto	l1147
  4362  0025A0  0E00               	movlw	0
  4363  0025A2  6E16               	movwf	?__div_to_l_,c
  4364  0025A4  0E00               	movlw	0
  4365  0025A6  6E17               	movwf	?__div_to_l_+1,c
  4366  0025A8  0E00               	movlw	0
  4367  0025AA  6E18               	movwf	?__div_to_l_+2,c
  4368  0025AC  0E00               	movlw	0
  4369  0025AE  6E19               	movwf	?__div_to_l_+3,c
  4370  0025B0  0012               	return	
  4371  0025B2                     l1147:
  4372  0025B2  90D8               	bcf	status,0,c
  4373  0025B4  321F               	rrcf	__div_to_l_@quot+3,f,c
  4374  0025B6  321E               	rrcf	__div_to_l_@quot+2,f,c
  4375  0025B8  321D               	rrcf	__div_to_l_@quot+1,f,c
  4376  0025BA  321C               	rrcf	__div_to_l_@quot,f,c
  4377  0025BC  3E21               	incfsz	__div_to_l_@exp1,f,c
  4378  0025BE  D7F9               	goto	l1147
  4379  0025C0  D015               	goto	u5610
  4380  0025C2                     l1146:
  4381  0025C2  0E1F               	movlw	31
  4382  0025C4  6421               	cpfsgt	__div_to_l_@exp1,c
  4383  0025C6  D00F               	goto	l1152
  4384  0025C8  0E00               	movlw	0
  4385  0025CA  6E16               	movwf	?__div_to_l_,c
  4386  0025CC  0E00               	movlw	0
  4387  0025CE  6E17               	movwf	?__div_to_l_+1,c
  4388  0025D0  0E00               	movlw	0
  4389  0025D2  6E18               	movwf	?__div_to_l_+2,c
  4390  0025D4  0E00               	movlw	0
  4391  0025D6  6E19               	movwf	?__div_to_l_+3,c
  4392  0025D8  0012               	return	
  4393  0025DA  90D8               	bcf	status,0,c
  4394  0025DC  361C               	rlcf	__div_to_l_@quot,f,c
  4395  0025DE  361D               	rlcf	__div_to_l_@quot+1,f,c
  4396  0025E0  361E               	rlcf	__div_to_l_@quot+2,f,c
  4397  0025E2  361F               	rlcf	__div_to_l_@quot+3,f,c
  4398  0025E4  0621               	decf	__div_to_l_@exp1,f,c
  4399  0025E6                     l1152:
  4400  0025E6  5021               	movf	__div_to_l_@exp1,w,c
  4401  0025E8  A4D8               	btfss	status,2,c
  4402  0025EA  D7F7               	goto	l1153
  4403  0025EC                     u5610:
  4404  0025EC  C01C  F016         	movff	__div_to_l_@quot,?__div_to_l_
  4405  0025F0  C01D  F017         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4406  0025F4  C01E  F018         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4407  0025F8  C01F  F019         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4408  0025FC  0012               	return		;funcret
  4409  0025FE                     __end_of__div_to_l_:
  4410                           	opt stack 0
  4411                           tblptru	equ	0xFF8
  4412                           tblptrh	equ	0xFF7
  4413                           tblptrl	equ	0xFF6
  4414                           tablat	equ	0xFF5
  4415                           prodh	equ	0xFF4
  4416                           prodl	equ	0xFF3
  4417                           intcon	equ	0xFF2
  4418                           postinc0	equ	0xFEE
  4419                           wreg	equ	0xFE8
  4420                           postdec1	equ	0xFE5
  4421                           fsr1l	equ	0xFE1
  4422                           indf2	equ	0xFDF
  4423                           postinc2	equ	0xFDE
  4424                           postdec2	equ	0xFDD
  4425                           fsr2h	equ	0xFDA
  4426                           fsr2l	equ	0xFD9
  4427                           status	equ	0xFD8
  4428                           
  4429 ;; *************** function ___lltoft *****************
  4430 ;; Defined at:
  4431 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lltoft.c"
  4432 ;; Parameters:    Size  Location     Type
  4433 ;;  c               4   29[COMRAM] unsigned long 
  4434 ;; Auto vars:     Size  Location     Type
  4435 ;;  exp             1   37[COMRAM] unsigned char 
  4436 ;; Return value:  Size  Location     Type
  4437 ;;                  3   29[COMRAM] float 
  4438 ;; Registers used:
  4439 ;;		wreg, status,2, status,0, cstack
  4440 ;; Tracked objects:
  4441 ;;		On entry : 0/0
  4442 ;;		On exit  : 0/0
  4443 ;;		Unchanged: 0/0
  4444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4445 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4446 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4447 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4448 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4449 ;;Total ram usage:        9 bytes
  4450 ;; Hardware stack levels used:    1
  4451 ;; Hardware stack levels required when called:    7
  4452 ;; This function calls:
  4453 ;;		___ftpack
  4454 ;; This function is called by:
  4455 ;;		_sprintf
  4456 ;; This function uses a non-reentrant model
  4457 ;;
  4458                           
  4459                           	psect	text9
  4460  0033E4                     __ptext9:
  4461                           	opt stack 0
  4462  0033E4                     ___lltoft:
  4463                           	opt stack 22
  4464                           
  4465                           ;incstack = 0
  4466  0033E4  0E8E               	movlw	142
  4467  0033E6  6E26               	movwf	___lltoft@exp,c
  4468  0033E8  D006               	goto	l1351
  4469  0033EA  90D8               	bcf	status,0,c
  4470  0033EC  3221               	rrcf	___lltoft@c+3,f,c
  4471  0033EE  3220               	rrcf	___lltoft@c+2,f,c
  4472  0033F0  321F               	rrcf	___lltoft@c+1,f,c
  4473  0033F2  321E               	rrcf	___lltoft@c,f,c
  4474  0033F4  2A26               	incf	___lltoft@exp,f,c
  4475  0033F6                     l1351:
  4476  0033F6  0E00               	movlw	0
  4477  0033F8  141E               	andwf	___lltoft@c,w,c
  4478  0033FA  6E22               	movwf	??___lltoft& (0+255),c
  4479  0033FC  0E00               	movlw	0
  4480  0033FE  141F               	andwf	___lltoft@c+1,w,c
  4481  003400  6E23               	movwf	(??___lltoft+1)& (0+255),c
  4482  003402  0E00               	movlw	0
  4483  003404  1420               	andwf	___lltoft@c+2,w,c
  4484  003406  6E24               	movwf	(??___lltoft+2)& (0+255),c
  4485  003408  0EFF               	movlw	255
  4486  00340A  1421               	andwf	___lltoft@c+3,w,c
  4487  00340C  6E25               	movwf	(??___lltoft+3)& (0+255),c
  4488  00340E  5022               	movf	??___lltoft,w,c
  4489  003410  1023               	iorwf	??___lltoft+1,w,c
  4490  003412  1024               	iorwf	??___lltoft+2,w,c
  4491  003414  1025               	iorwf	??___lltoft+3,w,c
  4492  003416  A4D8               	btfss	status,2,c
  4493  003418  D7E8               	goto	l1352
  4494  00341A  C01E  F016         	movff	___lltoft@c,___ftpack@arg
  4495  00341E  C01F  F017         	movff	___lltoft@c+1,___ftpack@arg+1
  4496  003422  C020  F018         	movff	___lltoft@c+2,___ftpack@arg+2
  4497  003426  C026  F019         	movff	___lltoft@exp,___ftpack@exp
  4498  00342A  0E00               	movlw	0
  4499  00342C  6E1A               	movwf	___ftpack@sign,c
  4500  00342E  EC9A  F015         	call	___ftpack	;wreg free
  4501  003432  C016  F01E         	movff	?___ftpack,?___lltoft
  4502  003436  C017  F01F         	movff	?___ftpack+1,?___lltoft+1
  4503  00343A  C018  F020         	movff	?___ftpack+2,?___lltoft+2
  4504  00343E  0012               	return	
  4505  003440                     __end_of___lltoft:
  4506                           	opt stack 0
  4507                           tblptru	equ	0xFF8
  4508                           tblptrh	equ	0xFF7
  4509                           tblptrl	equ	0xFF6
  4510                           tablat	equ	0xFF5
  4511                           prodh	equ	0xFF4
  4512                           prodl	equ	0xFF3
  4513                           intcon	equ	0xFF2
  4514                           postinc0	equ	0xFEE
  4515                           wreg	equ	0xFE8
  4516                           postdec1	equ	0xFE5
  4517                           fsr1l	equ	0xFE1
  4518                           indf2	equ	0xFDF
  4519                           postinc2	equ	0xFDE
  4520                           postdec2	equ	0xFDD
  4521                           fsr2h	equ	0xFDA
  4522                           fsr2l	equ	0xFD9
  4523                           status	equ	0xFD8
  4524                           
  4525 ;; *************** function ___llmod *****************
  4526 ;; Defined at:
  4527 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\llmod.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;  dividend        4   21[COMRAM] unsigned long 
  4530 ;;  divisor         4   25[COMRAM] unsigned long 
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;  counter         1   29[COMRAM] unsigned char 
  4533 ;; Return value:  Size  Location     Type
  4534 ;;                  4   21[COMRAM] unsigned long 
  4535 ;; Registers used:
  4536 ;;		wreg, status,2, status,0
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4542 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4543 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4545 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4546 ;;Total ram usage:        9 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    6
  4549 ;; This function calls:
  4550 ;;		Nothing
  4551 ;; This function is called by:
  4552 ;;		_sprintf
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           	psect	text10
  4557  003320                     __ptext10:
  4558                           	opt stack 0
  4559  003320                     ___llmod:
  4560                           	opt stack 23
  4561                           
  4562                           ;incstack = 0
  4563  003320  501A               	movf	___llmod@divisor,w,c
  4564  003322  101B               	iorwf	___llmod@divisor+1,w,c
  4565  003324  101C               	iorwf	___llmod@divisor+2,w,c
  4566  003326  101D               	iorwf	___llmod@divisor+3,w,c
  4567  003328  B4D8               	btfsc	status,2,c
  4568  00332A  D024               	goto	l1345
  4569  00332C  0E01               	movlw	1
  4570  00332E  6E1E               	movwf	___llmod@counter,c
  4571  003330  D006               	goto	l1340
  4572  003332  90D8               	bcf	status,0,c
  4573  003334  361A               	rlcf	___llmod@divisor,f,c
  4574  003336  361B               	rlcf	___llmod@divisor+1,f,c
  4575  003338  361C               	rlcf	___llmod@divisor+2,f,c
  4576  00333A  361D               	rlcf	___llmod@divisor+3,f,c
  4577  00333C  2A1E               	incf	___llmod@counter,f,c
  4578  00333E                     l1340:
  4579  00333E  AE1D               	btfss	___llmod@divisor+3,7,c
  4580  003340  D7F8               	goto	l1341
  4581  003342                     u5750:
  4582  003342  501A               	movf	___llmod@divisor,w,c
  4583  003344  5C16               	subwf	___llmod@dividend,w,c
  4584  003346  501B               	movf	___llmod@divisor+1,w,c
  4585  003348  5817               	subwfb	___llmod@dividend+1,w,c
  4586  00334A  501C               	movf	___llmod@divisor+2,w,c
  4587  00334C  5818               	subwfb	___llmod@dividend+2,w,c
  4588  00334E  501D               	movf	___llmod@divisor+3,w,c
  4589  003350  5819               	subwfb	___llmod@dividend+3,w,c
  4590  003352  A0D8               	btfss	status,0,c
  4591  003354  D008               	goto	l1344
  4592  003356  501A               	movf	___llmod@divisor,w,c
  4593  003358  5E16               	subwf	___llmod@dividend,f,c
  4594  00335A  501B               	movf	___llmod@divisor+1,w,c
  4595  00335C  5A17               	subwfb	___llmod@dividend+1,f,c
  4596  00335E  501C               	movf	___llmod@divisor+2,w,c
  4597  003360  5A18               	subwfb	___llmod@dividend+2,f,c
  4598  003362  501D               	movf	___llmod@divisor+3,w,c
  4599  003364  5A19               	subwfb	___llmod@dividend+3,f,c
  4600  003366                     l1344:
  4601  003366  90D8               	bcf	status,0,c
  4602  003368  321D               	rrcf	___llmod@divisor+3,f,c
  4603  00336A  321C               	rrcf	___llmod@divisor+2,f,c
  4604  00336C  321B               	rrcf	___llmod@divisor+1,f,c
  4605  00336E  321A               	rrcf	___llmod@divisor,f,c
  4606  003370  2E1E               	decfsz	___llmod@counter,f,c
  4607  003372  D7E7               	goto	u5750
  4608  003374                     l1345:
  4609  003374  C016  F016         	movff	___llmod@dividend,?___llmod
  4610  003378  C017  F017         	movff	___llmod@dividend+1,?___llmod+1
  4611  00337C  C018  F018         	movff	___llmod@dividend+2,?___llmod+2
  4612  003380  C019  F019         	movff	___llmod@dividend+3,?___llmod+3
  4613  003384  0012               	return		;funcret
  4614  003386                     __end_of___llmod:
  4615                           	opt stack 0
  4616                           tblptru	equ	0xFF8
  4617                           tblptrh	equ	0xFF7
  4618                           tblptrl	equ	0xFF6
  4619                           tablat	equ	0xFF5
  4620                           prodh	equ	0xFF4
  4621                           prodl	equ	0xFF3
  4622                           intcon	equ	0xFF2
  4623                           postinc0	equ	0xFEE
  4624                           wreg	equ	0xFE8
  4625                           postdec1	equ	0xFE5
  4626                           fsr1l	equ	0xFE1
  4627                           indf2	equ	0xFDF
  4628                           postinc2	equ	0xFDE
  4629                           postdec2	equ	0xFDD
  4630                           fsr2h	equ	0xFDA
  4631                           fsr2l	equ	0xFD9
  4632                           status	equ	0xFD8
  4633                           
  4634 ;; *************** function ___lldiv *****************
  4635 ;; Defined at:
  4636 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;  dividend        4   21[COMRAM] unsigned long 
  4639 ;;  divisor         4   25[COMRAM] unsigned long 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  quotient        4   29[COMRAM] unsigned long 
  4642 ;;  counter         1   33[COMRAM] unsigned char 
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  4   21[COMRAM] unsigned long 
  4645 ;; Registers used:
  4646 ;;		wreg, status,2, status,0
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4652 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4653 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4655 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4656 ;;Total ram usage:       13 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:    6
  4659 ;; This function calls:
  4660 ;;		Nothing
  4661 ;; This function is called by:
  4662 ;;		_sprintf
  4663 ;; This function uses a non-reentrant model
  4664 ;;
  4665                           
  4666                           	psect	text11
  4667  002F62                     __ptext11:
  4668                           	opt stack 0
  4669  002F62                     ___lldiv:
  4670                           	opt stack 23
  4671                           
  4672                           ;incstack = 0
  4673  002F62  0E00               	movlw	0
  4674  002F64  6E1E               	movwf	___lldiv@quotient,c
  4675  002F66  0E00               	movlw	0
  4676  002F68  6E1F               	movwf	___lldiv@quotient+1,c
  4677  002F6A  0E00               	movlw	0
  4678  002F6C  6E20               	movwf	___lldiv@quotient+2,c
  4679  002F6E  0E00               	movlw	0
  4680  002F70  6E21               	movwf	___lldiv@quotient+3,c
  4681  002F72  501A               	movf	___lldiv@divisor,w,c
  4682  002F74  101B               	iorwf	___lldiv@divisor+1,w,c
  4683  002F76  101C               	iorwf	___lldiv@divisor+2,w,c
  4684  002F78  101D               	iorwf	___lldiv@divisor+3,w,c
  4685  002F7A  B4D8               	btfsc	status,2,c
  4686  002F7C  D02A               	goto	l1335
  4687  002F7E  0E01               	movlw	1
  4688  002F80  6E22               	movwf	___lldiv@counter,c
  4689  002F82  D006               	goto	l1330
  4690  002F84  90D8               	bcf	status,0,c
  4691  002F86  361A               	rlcf	___lldiv@divisor,f,c
  4692  002F88  361B               	rlcf	___lldiv@divisor+1,f,c
  4693  002F8A  361C               	rlcf	___lldiv@divisor+2,f,c
  4694  002F8C  361D               	rlcf	___lldiv@divisor+3,f,c
  4695  002F8E  2A22               	incf	___lldiv@counter,f,c
  4696  002F90                     l1330:
  4697  002F90  AE1D               	btfss	___lldiv@divisor+3,7,c
  4698  002F92  D7F8               	goto	l1331
  4699  002F94                     u5720:
  4700  002F94  90D8               	bcf	status,0,c
  4701  002F96  361E               	rlcf	___lldiv@quotient,f,c
  4702  002F98  361F               	rlcf	___lldiv@quotient+1,f,c
  4703  002F9A  3620               	rlcf	___lldiv@quotient+2,f,c
  4704  002F9C  3621               	rlcf	___lldiv@quotient+3,f,c
  4705  002F9E  501A               	movf	___lldiv@divisor,w,c
  4706  002FA0  5C16               	subwf	___lldiv@dividend,w,c
  4707  002FA2  501B               	movf	___lldiv@divisor+1,w,c
  4708  002FA4  5817               	subwfb	___lldiv@dividend+1,w,c
  4709  002FA6  501C               	movf	___lldiv@divisor+2,w,c
  4710  002FA8  5818               	subwfb	___lldiv@dividend+2,w,c
  4711  002FAA  501D               	movf	___lldiv@divisor+3,w,c
  4712  002FAC  5819               	subwfb	___lldiv@dividend+3,w,c
  4713  002FAE  A0D8               	btfss	status,0,c
  4714  002FB0  D009               	goto	l1334
  4715  002FB2  501A               	movf	___lldiv@divisor,w,c
  4716  002FB4  5E16               	subwf	___lldiv@dividend,f,c
  4717  002FB6  501B               	movf	___lldiv@divisor+1,w,c
  4718  002FB8  5A17               	subwfb	___lldiv@dividend+1,f,c
  4719  002FBA  501C               	movf	___lldiv@divisor+2,w,c
  4720  002FBC  5A18               	subwfb	___lldiv@dividend+2,f,c
  4721  002FBE  501D               	movf	___lldiv@divisor+3,w,c
  4722  002FC0  5A19               	subwfb	___lldiv@dividend+3,f,c
  4723  002FC2  801E               	bsf	___lldiv@quotient,0,c
  4724  002FC4                     l1334:
  4725  002FC4  90D8               	bcf	status,0,c
  4726  002FC6  321D               	rrcf	___lldiv@divisor+3,f,c
  4727  002FC8  321C               	rrcf	___lldiv@divisor+2,f,c
  4728  002FCA  321B               	rrcf	___lldiv@divisor+1,f,c
  4729  002FCC  321A               	rrcf	___lldiv@divisor,f,c
  4730  002FCE  2E22               	decfsz	___lldiv@counter,f,c
  4731  002FD0  D7E1               	goto	u5720
  4732  002FD2                     l1335:
  4733  002FD2  C01E  F016         	movff	___lldiv@quotient,?___lldiv
  4734  002FD6  C01F  F017         	movff	___lldiv@quotient+1,?___lldiv+1
  4735  002FDA  C020  F018         	movff	___lldiv@quotient+2,?___lldiv+2
  4736  002FDE  C021  F019         	movff	___lldiv@quotient+3,?___lldiv+3
  4737  002FE2  0012               	return		;funcret
  4738  002FE4                     __end_of___lldiv:
  4739                           	opt stack 0
  4740                           tblptru	equ	0xFF8
  4741                           tblptrh	equ	0xFF7
  4742                           tblptrl	equ	0xFF6
  4743                           tablat	equ	0xFF5
  4744                           prodh	equ	0xFF4
  4745                           prodl	equ	0xFF3
  4746                           intcon	equ	0xFF2
  4747                           postinc0	equ	0xFEE
  4748                           wreg	equ	0xFE8
  4749                           postdec1	equ	0xFE5
  4750                           fsr1l	equ	0xFE1
  4751                           indf2	equ	0xFDF
  4752                           postinc2	equ	0xFDE
  4753                           postdec2	equ	0xFDD
  4754                           fsr2h	equ	0xFDA
  4755                           fsr2l	equ	0xFD9
  4756                           status	equ	0xFD8
  4757                           
  4758 ;; *************** function ___fttol *****************
  4759 ;; Defined at:
  4760 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;  f1              3    7[BANK0 ] float 
  4763 ;; Auto vars:     Size  Location     Type
  4764 ;;  lval            4   17[BANK0 ] unsigned long 
  4765 ;;  exp1            1   21[BANK0 ] unsigned char 
  4766 ;;  sign1           1   16[BANK0 ] unsigned char 
  4767 ;; Return value:  Size  Location     Type
  4768 ;;                  4    7[BANK0 ] long 
  4769 ;; Registers used:
  4770 ;;		wreg, status,2, status,0
  4771 ;; Tracked objects:
  4772 ;;		On entry : 0/0
  4773 ;;		On exit  : 0/0
  4774 ;;		Unchanged: 0/0
  4775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4776 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4777 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4778 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4779 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4780 ;;Total ram usage:       15 bytes
  4781 ;; Hardware stack levels used:    1
  4782 ;; Hardware stack levels required when called:    6
  4783 ;; This function calls:
  4784 ;;		Nothing
  4785 ;; This function is called by:
  4786 ;;		_sprintf
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790                           	psect	text12
  4791  0025FE                     __ptext12:
  4792                           	opt stack 0
  4793  0025FE                     ___fttol:
  4794                           	opt stack 23
  4795                           
  4796                           ;incstack = 0
  4797  0025FE  C069  F06B         	movff	___fttol@f1+2,??___fttol
  4798  002602  0100               	movlb	0	; () banked
  4799  002604  6B6C               	clrf	(??___fttol+1)& (0+255),b
  4800  002606  6B6D               	clrf	(??___fttol+2)& (0+255),b
  4801  002608  3568               	rlcf	(___fttol@f1+1)& (0+255),w,b
  4802  00260A  376B               	rlcf	??___fttol& (0+255),f,b
  4803  00260C  E301               	bnc	u5631
  4804  00260E  816C               	bsf	(??___fttol+1)& (0+255),0,b
  4805  002610                     u5631:
  4806  002610  516B               	movf	??___fttol& (0+255),w,b
  4807  002612  6F75               	movwf	___fttol@exp1& (0+255),b
  4808  002614  5175               	movf	___fttol@exp1& (0+255),w,b
  4809  002616  A4D8               	btfss	status,2,c
  4810  002618  D009               	goto	l1289
  4811                           
  4812                           ; BSR set to: 0
  4813  00261A  0E00               	movlw	0
  4814  00261C  6F67               	movwf	?___fttol& (0+255),b
  4815  00261E  0E00               	movlw	0
  4816  002620  6F68               	movwf	(?___fttol+1)& (0+255),b
  4817  002622  0E00               	movlw	0
  4818  002624  6F69               	movwf	(?___fttol+2)& (0+255),b
  4819  002626  0E00               	movlw	0
  4820  002628  6F6A               	movwf	(?___fttol+3)& (0+255),b
  4821                           
  4822                           ; BSR set to: 0
  4823  00262A  0012               	return	
  4824  00262C                     l1289:
  4825                           
  4826                           ; BSR set to: 0
  4827                           
  4828                           ; BSR set to: 0
  4829  00262C  0E17               	movlw	23
  4830  00262E  6F6B               	movwf	??___fttol& (0+255),b
  4831  002630  C067  F06C         	movff	___fttol@f1,??___fttol+1
  4832  002634  C068  F06D         	movff	___fttol@f1+1,??___fttol+2
  4833  002638  C069  F06E         	movff	___fttol@f1+2,??___fttol+3
  4834  00263C  296B               	incf	??___fttol& (0+255),w,b
  4835  00263E  6F6F               	movwf	(??___fttol+4)& (0+255),b
  4836  002640  D004               	goto	u5650
  4837  002642                     u5655:
  4838  002642  90D8               	bcf	status,0,c
  4839  002644  336E               	rrcf	(??___fttol+3)& (0+255),f,b
  4840  002646  336D               	rrcf	(??___fttol+2)& (0+255),f,b
  4841  002648  336C               	rrcf	(??___fttol+1)& (0+255),f,b
  4842  00264A                     u5650:
  4843  00264A  2F6F               	decfsz	(??___fttol+4)& (0+255),f,b
  4844  00264C  D7FA               	goto	u5655
  4845  00264E  0100               	movlb	0	; () banked
  4846  002650  516C               	movf	(??___fttol+1)& (0+255),w,b
  4847  002652  6F70               	movwf	___fttol@sign1& (0+255),b
  4848                           
  4849                           ; BSR set to: 0
  4850  002654  8F68               	bsf	(___fttol@f1+1)& (0+255),7,b
  4851                           
  4852                           ; BSR set to: 0
  4853  002656  0EFF               	movlw	255
  4854  002658  1767               	andwf	___fttol@f1& (0+255),f,b
  4855  00265A  0EFF               	movlw	255
  4856  00265C  1768               	andwf	(___fttol@f1+1)& (0+255),f,b
  4857  00265E  0E00               	movlw	0
  4858  002660  1769               	andwf	(___fttol@f1+2)& (0+255),f,b
  4859                           
  4860                           ; BSR set to: 0
  4861  002662  5167               	movf	___fttol@f1& (0+255),w,b
  4862  002664  6F71               	movwf	___fttol@lval& (0+255),b
  4863  002666  5168               	movf	(___fttol@f1+1)& (0+255),w,b
  4864  002668  6F72               	movwf	(___fttol@lval+1)& (0+255),b
  4865  00266A  5169               	movf	(___fttol@f1+2)& (0+255),w,b
  4866  00266C  6F73               	movwf	(___fttol@lval+2)& (0+255),b
  4867  00266E  6B74               	clrf	(___fttol@lval+3)& (0+255),b
  4868                           
  4869                           ; BSR set to: 0
  4870  002670  0E8E               	movlw	142
  4871  002672  5F75               	subwf	___fttol@exp1& (0+255),f,b
  4872                           
  4873                           ; BSR set to: 0
  4874  002674  AF75               	btfss	___fttol@exp1& (0+255),7,b
  4875  002676  D016               	goto	l1291
  4876                           
  4877                           ; BSR set to: 0
  4878  002678  5175               	movf	___fttol@exp1& (0+255),w,b
  4879  00267A  0A80               	xorlw	128
  4880  00267C  0F8F               	addlw	143
  4881  00267E  B0D8               	btfsc	status,0,c
  4882  002680  D009               	goto	l1292
  4883                           
  4884                           ; BSR set to: 0
  4885  002682  0E00               	movlw	0
  4886  002684  6F67               	movwf	?___fttol& (0+255),b
  4887  002686  0E00               	movlw	0
  4888  002688  6F68               	movwf	(?___fttol+1)& (0+255),b
  4889  00268A  0E00               	movlw	0
  4890  00268C  6F69               	movwf	(?___fttol+2)& (0+255),b
  4891  00268E  0E00               	movlw	0
  4892  002690  6F6A               	movwf	(?___fttol+3)& (0+255),b
  4893                           
  4894                           ; BSR set to: 0
  4895  002692  0012               	return	
  4896  002694                     l1292:
  4897                           
  4898                           ; BSR set to: 0
  4899                           
  4900                           ; BSR set to: 0
  4901                           
  4902                           ; BSR set to: 0
  4903  002694  90D8               	bcf	status,0,c
  4904  002696  3374               	rrcf	(___fttol@lval+3)& (0+255),f,b
  4905  002698  3373               	rrcf	(___fttol@lval+2)& (0+255),f,b
  4906  00269A  3372               	rrcf	(___fttol@lval+1)& (0+255),f,b
  4907  00269C  3371               	rrcf	___fttol@lval& (0+255),f,b
  4908                           
  4909                           ; BSR set to: 0
  4910  00269E  3F75               	incfsz	___fttol@exp1& (0+255),f,b
  4911  0026A0  D7F9               	goto	l1292
  4912                           
  4913                           ; BSR set to: 0
  4914  0026A2  D015               	goto	u5690
  4915  0026A4                     l1291:
  4916                           
  4917                           ; BSR set to: 0
  4918                           
  4919                           ; BSR set to: 0
  4920  0026A4  0E17               	movlw	23
  4921  0026A6  6575               	cpfsgt	___fttol@exp1& (0+255),b
  4922  0026A8  D00F               	goto	l1297
  4923                           
  4924                           ; BSR set to: 0
  4925  0026AA  0E00               	movlw	0
  4926  0026AC  6F67               	movwf	?___fttol& (0+255),b
  4927  0026AE  0E00               	movlw	0
  4928  0026B0  6F68               	movwf	(?___fttol+1)& (0+255),b
  4929  0026B2  0E00               	movlw	0
  4930  0026B4  6F69               	movwf	(?___fttol+2)& (0+255),b
  4931  0026B6  0E00               	movlw	0
  4932  0026B8  6F6A               	movwf	(?___fttol+3)& (0+255),b
  4933                           
  4934                           ; BSR set to: 0
  4935  0026BA  0012               	return	
  4936  0026BC                     
  4937                           ; BSR set to: 0
  4938                           
  4939                           ; BSR set to: 0
  4940  0026BC  90D8               	bcf	status,0,c
  4941  0026BE  3771               	rlcf	___fttol@lval& (0+255),f,b
  4942  0026C0  3772               	rlcf	(___fttol@lval+1)& (0+255),f,b
  4943  0026C2  3773               	rlcf	(___fttol@lval+2)& (0+255),f,b
  4944  0026C4  3774               	rlcf	(___fttol@lval+3)& (0+255),f,b
  4945  0026C6  0775               	decf	___fttol@exp1& (0+255),f,b
  4946  0026C8                     l1297:
  4947                           
  4948                           ; BSR set to: 0
  4949                           
  4950                           ; BSR set to: 0
  4951  0026C8  5175               	movf	___fttol@exp1& (0+255),w,b
  4952  0026CA  A4D8               	btfss	status,2,c
  4953  0026CC  D7F7               	goto	l1298
  4954  0026CE                     u5690:
  4955                           
  4956                           ; BSR set to: 0
  4957                           
  4958                           ; BSR set to: 0
  4959                           
  4960                           ; BSR set to: 0
  4961  0026CE  5170               	movf	___fttol@sign1& (0+255),w,b
  4962  0026D0  B4D8               	btfsc	status,2,c
  4963  0026D2  D008               	goto	l1300
  4964                           
  4965                           ; BSR set to: 0
  4966  0026D4  1F74               	comf	(___fttol@lval+3)& (0+255),f,b
  4967  0026D6  1F73               	comf	(___fttol@lval+2)& (0+255),f,b
  4968  0026D8  1F72               	comf	(___fttol@lval+1)& (0+255),f,b
  4969  0026DA  6D71               	negf	___fttol@lval& (0+255),b
  4970  0026DC  0E00               	movlw	0
  4971  0026DE  2372               	addwfc	(___fttol@lval+1)& (0+255),f,b
  4972  0026E0  2373               	addwfc	(___fttol@lval+2)& (0+255),f,b
  4973  0026E2  2374               	addwfc	(___fttol@lval+3)& (0+255),f,b
  4974  0026E4                     l1300:
  4975                           
  4976                           ; BSR set to: 0
  4977                           
  4978                           ; BSR set to: 0
  4979  0026E4  C071  F067         	movff	___fttol@lval,?___fttol
  4980  0026E8  C072  F068         	movff	___fttol@lval+1,?___fttol+1
  4981  0026EC  C073  F069         	movff	___fttol@lval+2,?___fttol+2
  4982  0026F0  C074  F06A         	movff	___fttol@lval+3,?___fttol+3
  4983  0026F4  0012               	return	
  4984  0026F6                     __end_of___fttol:
  4985                           	opt stack 0
  4986                           tblptru	equ	0xFF8
  4987                           tblptrh	equ	0xFF7
  4988                           tblptrl	equ	0xFF6
  4989                           tablat	equ	0xFF5
  4990                           prodh	equ	0xFF4
  4991                           prodl	equ	0xFF3
  4992                           intcon	equ	0xFF2
  4993                           postinc0	equ	0xFEE
  4994                           wreg	equ	0xFE8
  4995                           postdec1	equ	0xFE5
  4996                           fsr1l	equ	0xFE1
  4997                           indf2	equ	0xFDF
  4998                           postinc2	equ	0xFDE
  4999                           postdec2	equ	0xFDD
  5000                           fsr2h	equ	0xFDA
  5001                           fsr2l	equ	0xFD9
  5002                           status	equ	0xFD8
  5003                           
  5004 ;; *************** function _XYZ_azimuth *****************
  5005 ;; Defined at:
  5006 ;;		line 39 in file "drv_qmc5883l.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;  a               2   71[BANK0 ] PTR int 
  5009 ;;		 -> main@y(2), 
  5010 ;;  b               2   73[BANK0 ] PTR int 
  5011 ;;		 -> main@x(2), 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  azimuth         3   78[BANK0 ] float 
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  3   71[BANK0 ] float 
  5016 ;; Registers used:
  5017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5023 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5024 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5026 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5027 ;;Total ram usage:       10 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:   11
  5030 ;; This function calls:
  5031 ;;		___awtoft
  5032 ;;		___ftadd
  5033 ;;		___ftdiv
  5034 ;;		___ftmul
  5035 ;;		_atan2
  5036 ;; This function is called by:
  5037 ;;		_main
  5038 ;; This function uses a non-reentrant model
  5039 ;;
  5040                           
  5041                           	psect	text13
  5042  0029B0                     __ptext13:
  5043                           	opt stack 0
  5044  0029B0                     _XYZ_azimuth:
  5045                           	opt stack 19
  5046                           
  5047                           ;drv_qmc5883l.c: 41: float azimuth = atan2((int) *a, (int) *b) * 180.0 / 3.1415;
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;incstack = 0
  5051  0029B0  C0A9  FFD9         	movff	XYZ_azimuth@b,fsr2l
  5052  0029B4  C0AA  FFDA         	movff	XYZ_azimuth@b+1,fsr2h
  5053  0029B8  CFDE F01E          	movff	postinc2,___awtoft@c
  5054  0029BC  CFDD F01F          	movff	postdec2,___awtoft@c+1
  5055  0029C0  ECE2  F01B         	call	___awtoft	;wreg free
  5056  0029C4  C01E  F09B         	movff	?___awtoft,atan2@x
  5057  0029C8  C01F  F09C         	movff	?___awtoft+1,atan2@x+1
  5058  0029CC  C020  F09D         	movff	?___awtoft+2,atan2@x+2
  5059  0029D0  C0A7  FFD9         	movff	XYZ_azimuth@a,fsr2l
  5060  0029D4  C0A8  FFDA         	movff	XYZ_azimuth@a+1,fsr2h
  5061  0029D8  CFDE F01E          	movff	postinc2,___awtoft@c
  5062  0029DC  CFDD F01F          	movff	postdec2,___awtoft@c+1
  5063  0029E0  ECE2  F01B         	call	___awtoft	;wreg free
  5064  0029E4  C01E  F098         	movff	?___awtoft,atan2@y
  5065  0029E8  C01F  F099         	movff	?___awtoft+1,atan2@y+1
  5066  0029EC  C020  F09A         	movff	?___awtoft+2,atan2@y+2
  5067  0029F0  ECE0  F00E         	call	_atan2	;wreg free
  5068  0029F4  C098  F0AB         	movff	?_atan2,_XYZ_azimuth$2290
  5069  0029F8  C099  F0AC         	movff	?_atan2+1,_XYZ_azimuth$2290+1
  5070  0029FC  C09A  F0AD         	movff	?_atan2+2,_XYZ_azimuth$2290+2
  5071                           
  5072                           ;drv_qmc5883l.c: 41: float azimuth = atan2((int) *a, (int) *b) * 180.0 / 3.1415;
  5073  002A00  0E00               	movlw	0
  5074  002A02  6E2D               	movwf	___ftmul@f2,c
  5075  002A04  0E34               	movlw	52
  5076  002A06  6E2E               	movwf	___ftmul@f2+1,c
  5077  002A08  0E43               	movlw	67
  5078  002A0A  6E2F               	movwf	___ftmul@f2+2,c
  5079  002A0C  C0AB  F02A         	movff	_XYZ_azimuth$2290,___ftmul@f1
  5080  002A10  C0AC  F02B         	movff	_XYZ_azimuth$2290+1,___ftmul@f1+1
  5081  002A14  C0AD  F02C         	movff	_XYZ_azimuth$2290+2,___ftmul@f1+2
  5082  002A18  EC7B  F013         	call	___ftmul	;wreg free
  5083  002A1C  C02A  F060         	movff	?___ftmul,___ftdiv@f1
  5084  002A20  C02B  F061         	movff	?___ftmul+1,___ftdiv@f1+1
  5085  002A24  C02C  F062         	movff	?___ftmul+2,___ftdiv@f1+2
  5086  002A28  0E0E               	movlw	14
  5087  002A2A  0100               	movlb	0	; () banked
  5088  002A2C  6F63               	movwf	___ftdiv@f2& (0+255),b
  5089  002A2E  0E49               	movlw	73
  5090  002A30  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  5091  002A32  0E40               	movlw	64
  5092  002A34  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  5093  002A36  ECF5  F013         	call	___ftdiv	;wreg free
  5094  002A3A  C060  F0AE         	movff	?___ftdiv,XYZ_azimuth@azimuth
  5095  002A3E  C061  F0AF         	movff	?___ftdiv+1,XYZ_azimuth@azimuth+1
  5096  002A42  C062  F0B0         	movff	?___ftdiv+2,XYZ_azimuth@azimuth+2
  5097                           
  5098                           ;drv_qmc5883l.c: 42: return azimuth < 0 ? 360 + azimuth : azimuth;
  5099  002A46  0100               	movlb	0	; () banked
  5100  002A48  BFB0               	btfsc	(XYZ_azimuth@azimuth+2)& (0+255),7,b
  5101  002A4A  D007               	goto	l806
  5102                           
  5103                           ; BSR set to: 0
  5104  002A4C  C0AE  F0A7         	movff	XYZ_azimuth@azimuth,?_XYZ_azimuth
  5105  002A50  C0AF  F0A8         	movff	XYZ_azimuth@azimuth+1,?_XYZ_azimuth+1
  5106  002A54  C0B0  F0A9         	movff	XYZ_azimuth@azimuth+2,?_XYZ_azimuth+2
  5107  002A58  0012               	return	
  5108  002A5A                     l806:
  5109                           
  5110                           ; BSR set to: 0
  5111                           
  5112                           ; BSR set to: 0
  5113  002A5A  C0AE  F072         	movff	XYZ_azimuth@azimuth,___ftadd@f1
  5114  002A5E  C0AF  F073         	movff	XYZ_azimuth@azimuth+1,___ftadd@f1+1
  5115  002A62  C0B0  F074         	movff	XYZ_azimuth@azimuth+2,___ftadd@f1+2
  5116  002A66  0E00               	movlw	0
  5117  002A68  6F75               	movwf	___ftadd@f2& (0+255),b
  5118  002A6A  0EB4               	movlw	180
  5119  002A6C  6F76               	movwf	(___ftadd@f2+1)& (0+255),b
  5120  002A6E  0E43               	movlw	67
  5121  002A70  6F77               	movwf	(___ftadd@f2+2)& (0+255),b
  5122  002A72  ECFB  F010         	call	___ftadd	;wreg free
  5123  002A76  C072  F0A7         	movff	?___ftadd,?_XYZ_azimuth
  5124  002A7A  C073  F0A8         	movff	?___ftadd+1,?_XYZ_azimuth+1
  5125  002A7E  C074  F0A9         	movff	?___ftadd+2,?_XYZ_azimuth+2
  5126  002A82  0012               	return	
  5127  002A84                     __end_of_XYZ_azimuth:
  5128                           	opt stack 0
  5129                           tblptru	equ	0xFF8
  5130                           tblptrh	equ	0xFF7
  5131                           tblptrl	equ	0xFF6
  5132                           tablat	equ	0xFF5
  5133                           prodh	equ	0xFF4
  5134                           prodl	equ	0xFF3
  5135                           intcon	equ	0xFF2
  5136                           postinc0	equ	0xFEE
  5137                           wreg	equ	0xFE8
  5138                           postdec1	equ	0xFE5
  5139                           fsr1l	equ	0xFE1
  5140                           indf2	equ	0xFDF
  5141                           postinc2	equ	0xFDE
  5142                           postdec2	equ	0xFDD
  5143                           fsr2h	equ	0xFDA
  5144                           fsr2l	equ	0xFD9
  5145                           status	equ	0xFD8
  5146                           
  5147 ;; *************** function _atan2 *****************
  5148 ;; Defined at:
  5149 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\atan2.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;  y               3   56[BANK0 ] float 
  5152 ;;  x               3   59[BANK0 ] float 
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;  v               3   68[BANK0 ] float 
  5155 ;; Return value:  Size  Location     Type
  5156 ;;                  3   56[BANK0 ] float 
  5157 ;; Registers used:
  5158 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5159 ;; Tracked objects:
  5160 ;;		On entry : 0/0
  5161 ;;		On exit  : 0/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5164 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5165 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5167 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5168 ;;Total ram usage:       15 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; Hardware stack levels required when called:   10
  5171 ;; This function calls:
  5172 ;;		___ftadd
  5173 ;;		___ftdiv
  5174 ;;		___ftge
  5175 ;;		___ftneg
  5176 ;;		___ftsub
  5177 ;;		_atan
  5178 ;;		_fabs
  5179 ;; This function is called by:
  5180 ;;		_XYZ_azimuth
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           	psect	text14
  5185  001DC0                     __ptext14:
  5186                           	opt stack 0
  5187  001DC0                     _atan2:
  5188                           	opt stack 19
  5189                           
  5190                           ;incstack = 0
  5191  001DC0  0100               	movlb	0	; () banked
  5192  001DC2  519B               	movf	atan2@x& (0+255),w,b
  5193  001DC4  119C               	iorwf	(atan2@x+1)& (0+255),w,b
  5194  001DC6  119D               	iorwf	(atan2@x+2)& (0+255),w,b
  5195  001DC8  A4D8               	btfss	status,2,c
  5196  001DCA  D02F               	goto	l1058
  5197                           
  5198                           ; BSR set to: 0
  5199  001DCC  5198               	movf	atan2@y& (0+255),w,b
  5200  001DCE  1199               	iorwf	(atan2@y+1)& (0+255),w,b
  5201  001DD0  119A               	iorwf	(atan2@y+2)& (0+255),w,b
  5202  001DD2  A4D8               	btfss	status,2,c
  5203  001DD4  D00B               	goto	l1055
  5204                           
  5205                           ; BSR set to: 0
  5206  001DD6  0E00               	movlw	0
  5207  001DD8  6FDD               	movwf	(_errno+1)& (0+255),b
  5208  001DDA  0E21               	movlw	33
  5209  001DDC  6FDC               	movwf	_errno& (0+255),b
  5210  001DDE  0E00               	movlw	0
  5211  001DE0  6F98               	movwf	?_atan2& (0+255),b
  5212  001DE2  0E00               	movlw	0
  5213  001DE4  6F99               	movwf	(?_atan2+1)& (0+255),b
  5214  001DE6  0E00               	movlw	0
  5215  001DE8  6F9A               	movwf	(?_atan2+2)& (0+255),b
  5216                           
  5217                           ; BSR set to: 0
  5218  001DEA  0012               	return	
  5219  001DEC                     l1055:
  5220                           
  5221                           ; BSR set to: 0
  5222                           
  5223                           ; BSR set to: 0
  5224  001DEC  0E00               	movlw	0
  5225  001DEE  6F75               	movwf	___ftge@ff1& (0+255),b
  5226  001DF0  0E00               	movlw	0
  5227  001DF2  6F76               	movwf	(___ftge@ff1+1)& (0+255),b
  5228  001DF4  0E00               	movlw	0
  5229  001DF6  6F77               	movwf	(___ftge@ff1+2)& (0+255),b
  5230  001DF8  C098  F078         	movff	atan2@y,___ftge@ff2
  5231  001DFC  C099  F079         	movff	atan2@y+1,___ftge@ff2+1
  5232  001E00  C09A  F07A         	movff	atan2@y+2,___ftge@ff2+2
  5233  001E04  ECDE  F016         	call	___ftge	;wreg free
  5234  001E08  0100               	movlb	0	; () banked
  5235  001E0A  B0D8               	btfsc	status,0,c
  5236  001E0C  D007               	goto	l1057
  5237                           
  5238                           ; BSR set to: 0
  5239  001E0E  0E10               	movlw	16
  5240  001E10  6F98               	movwf	?_atan2& (0+255),b
  5241  001E12  0EC9               	movlw	201
  5242  001E14  6F99               	movwf	(?_atan2+1)& (0+255),b
  5243  001E16  0E3F               	movlw	63
  5244  001E18  6F9A               	movwf	(?_atan2+2)& (0+255),b
  5245                           
  5246                           ; BSR set to: 0
  5247  001E1A  0012               	return	
  5248  001E1C                     l1057:
  5249                           
  5250                           ; BSR set to: 0
  5251                           
  5252                           ; BSR set to: 0
  5253  001E1C  0E10               	movlw	16
  5254  001E1E  6F98               	movwf	?_atan2& (0+255),b
  5255  001E20  0EC9               	movlw	201
  5256  001E22  6F99               	movwf	(?_atan2+1)& (0+255),b
  5257  001E24  0EBF               	movlw	191
  5258  001E26  6F9A               	movwf	(?_atan2+2)& (0+255),b
  5259                           
  5260                           ; BSR set to: 0
  5261  001E28  0012               	return	
  5262  001E2A                     l1058:
  5263                           
  5264                           ; BSR set to: 0
  5265                           
  5266                           ; BSR set to: 0
  5267                           
  5268                           ; BSR set to: 0
  5269  001E2A  5198               	movf	atan2@y& (0+255),w,b
  5270  001E2C  1199               	iorwf	(atan2@y+1)& (0+255),w,b
  5271  001E2E  119A               	iorwf	(atan2@y+2)& (0+255),w,b
  5272  001E30  A4D8               	btfss	status,2,c
  5273  001E32  D01F               	goto	l1061
  5274                           
  5275                           ; BSR set to: 0
  5276  001E34  0E00               	movlw	0
  5277  001E36  6F75               	movwf	___ftge@ff1& (0+255),b
  5278  001E38  0E00               	movlw	0
  5279  001E3A  6F76               	movwf	(___ftge@ff1+1)& (0+255),b
  5280  001E3C  0E00               	movlw	0
  5281  001E3E  6F77               	movwf	(___ftge@ff1+2)& (0+255),b
  5282  001E40  C09B  F078         	movff	atan2@x,___ftge@ff2
  5283  001E44  C09C  F079         	movff	atan2@x+1,___ftge@ff2+1
  5284  001E48  C09D  F07A         	movff	atan2@x+2,___ftge@ff2+2
  5285  001E4C  ECDE  F016         	call	___ftge	;wreg free
  5286  001E50  0100               	movlb	0	; () banked
  5287  001E52  B0D8               	btfsc	status,0,c
  5288  001E54  D007               	goto	l1060
  5289                           
  5290                           ; BSR set to: 0
  5291  001E56  0E00               	movlw	0
  5292  001E58  6F98               	movwf	?_atan2& (0+255),b
  5293  001E5A  0E00               	movlw	0
  5294  001E5C  6F99               	movwf	(?_atan2+1)& (0+255),b
  5295  001E5E  0E00               	movlw	0
  5296  001E60  6F9A               	movwf	(?_atan2+2)& (0+255),b
  5297                           
  5298                           ; BSR set to: 0
  5299  001E62  0012               	return	
  5300  001E64                     l1060:
  5301                           
  5302                           ; BSR set to: 0
  5303                           
  5304                           ; BSR set to: 0
  5305  001E64  0E10               	movlw	16
  5306  001E66  6F98               	movwf	?_atan2& (0+255),b
  5307  001E68  0E49               	movlw	73
  5308  001E6A  6F99               	movwf	(?_atan2+1)& (0+255),b
  5309  001E6C  0E40               	movlw	64
  5310  001E6E  6F9A               	movwf	(?_atan2+2)& (0+255),b
  5311                           
  5312                           ; BSR set to: 0
  5313  001E70  0012               	return	
  5314  001E72                     l1061:
  5315                           
  5316                           ; BSR set to: 0
  5317                           
  5318                           ; BSR set to: 0
  5319                           
  5320                           ; BSR set to: 0
  5321  001E72  C09B  F072         	movff	atan2@x,fabs@d
  5322  001E76  C09C  F073         	movff	atan2@x+1,fabs@d+1
  5323  001E7A  C09D  F074         	movff	atan2@x+2,fabs@d+2
  5324  001E7E  EC6A  F01C         	call	_fabs	;wreg free
  5325  001E82  C072  F075         	movff	?_fabs,___ftge@ff1
  5326  001E86  C073  F076         	movff	?_fabs+1,___ftge@ff1+1
  5327  001E8A  C074  F077         	movff	?_fabs+2,___ftge@ff1+2
  5328  001E8E  C098  F072         	movff	atan2@y,fabs@d
  5329  001E92  C099  F073         	movff	atan2@y+1,fabs@d+1
  5330  001E96  C09A  F074         	movff	atan2@y+2,fabs@d+2
  5331  001E9A  EC6A  F01C         	call	_fabs	;wreg free
  5332  001E9E  C072  F078         	movff	?_fabs,___ftge@ff2
  5333  001EA2  C073  F079         	movff	?_fabs+1,___ftge@ff2+1
  5334  001EA6  C074  F07A         	movff	?_fabs+2,___ftge@ff2+2
  5335  001EAA  ECDE  F016         	call	___ftge	;wreg free
  5336  001EAE  0100               	movlb	0	; () banked
  5337  001EB0  A0D8               	btfss	status,0,c
  5338  001EB2  D058               	goto	l1062
  5339                           
  5340                           ; BSR set to: 0
  5341  001EB4  C098  F060         	movff	atan2@y,___ftdiv@f1
  5342  001EB8  C099  F061         	movff	atan2@y+1,___ftdiv@f1+1
  5343  001EBC  C09A  F062         	movff	atan2@y+2,___ftdiv@f1+2
  5344  001EC0  C09B  F063         	movff	atan2@x,___ftdiv@f2
  5345  001EC4  C09C  F064         	movff	atan2@x+1,___ftdiv@f2+1
  5346  001EC8  C09D  F065         	movff	atan2@x+2,___ftdiv@f2+2
  5347  001ECC  ECF5  F013         	call	___ftdiv	;wreg free
  5348  001ED0  C060  F0A1         	movff	?___ftdiv,_atan2$2295
  5349  001ED4  C061  F0A2         	movff	?___ftdiv+1,_atan2$2295+1
  5350  001ED8  C062  F0A3         	movff	?___ftdiv+2,_atan2$2295+2
  5351  001EDC  C0A1  F088         	movff	_atan2$2295,atan@f
  5352  001EE0  C0A2  F089         	movff	_atan2$2295+1,atan@f+1
  5353  001EE4  C0A3  F08A         	movff	_atan2$2295+2,atan@f+2
  5354  001EE8  EC16  F010         	call	_atan	;wreg free
  5355  001EEC  C088  F0A4         	movff	?_atan,atan2@v
  5356  001EF0  C089  F0A5         	movff	?_atan+1,atan2@v+1
  5357  001EF4  C08A  F0A6         	movff	?_atan+2,atan2@v+2
  5358  001EF8  0100               	movlb	0	; () banked
  5359  001EFA  AF9D               	btfss	(atan2@x+2)& (0+255),7,b
  5360  001EFC  D02C               	goto	l1065
  5361                           
  5362                           ; BSR set to: 0
  5363  001EFE  BF9A               	btfsc	(atan2@y+2)& (0+255),7,b
  5364  001F00  D015               	goto	l1064
  5365                           
  5366                           ; BSR set to: 0
  5367  001F02  C0A4  F072         	movff	atan2@v,___ftadd@f1
  5368  001F06  C0A5  F073         	movff	atan2@v+1,___ftadd@f1+1
  5369  001F0A  C0A6  F074         	movff	atan2@v+2,___ftadd@f1+2
  5370  001F0E  0E10               	movlw	16
  5371  001F10  6F75               	movwf	___ftadd@f2& (0+255),b
  5372  001F12  0E49               	movlw	73
  5373  001F14  6F76               	movwf	(___ftadd@f2+1)& (0+255),b
  5374  001F16  0E40               	movlw	64
  5375  001F18  6F77               	movwf	(___ftadd@f2+2)& (0+255),b
  5376  001F1A  ECFB  F010         	call	___ftadd	;wreg free
  5377  001F1E  C072  F0A4         	movff	?___ftadd,atan2@v
  5378  001F22  C073  F0A5         	movff	?___ftadd+1,atan2@v+1
  5379  001F26  C074  F0A6         	movff	?___ftadd+2,atan2@v+2
  5380  001F2A  D015               	goto	l1065
  5381  001F2C                     l1064:
  5382  001F2C  C0A4  F07E         	movff	atan2@v,___ftsub@f1
  5383  001F30  C0A5  F07F         	movff	atan2@v+1,___ftsub@f1+1
  5384  001F34  C0A6  F080         	movff	atan2@v+2,___ftsub@f1+2
  5385  001F38  0E10               	movlw	16
  5386  001F3A  0100               	movlb	0	; () banked
  5387  001F3C  6F81               	movwf	___ftsub@f2& (0+255),b
  5388  001F3E  0E49               	movlw	73
  5389  001F40  6F82               	movwf	(___ftsub@f2+1)& (0+255),b
  5390  001F42  0E40               	movlw	64
  5391  001F44  6F83               	movwf	(___ftsub@f2+2)& (0+255),b
  5392  001F46  ECC1  F01B         	call	___ftsub	;wreg free
  5393  001F4A  C07E  F0A4         	movff	?___ftsub,atan2@v
  5394  001F4E  C07F  F0A5         	movff	?___ftsub+1,atan2@v+1
  5395  001F52  C080  F0A6         	movff	?___ftsub+2,atan2@v+2
  5396  001F56                     l1065:
  5397  001F56  C0A4  F098         	movff	atan2@v,?_atan2
  5398  001F5A  C0A5  F099         	movff	atan2@v+1,?_atan2+1
  5399  001F5E  C0A6  F09A         	movff	atan2@v+2,?_atan2+2
  5400  001F62  0012               	return	
  5401  001F64                     l1062:
  5402  001F64  C098  F063         	movff	atan2@y,___ftdiv@f2
  5403  001F68  C099  F064         	movff	atan2@y+1,___ftdiv@f2+1
  5404  001F6C  C09A  F065         	movff	atan2@y+2,___ftdiv@f2+2
  5405  001F70  C09B  F060         	movff	atan2@x,___ftdiv@f1
  5406  001F74  C09C  F061         	movff	atan2@x+1,___ftdiv@f1+1
  5407  001F78  C09D  F062         	movff	atan2@x+2,___ftdiv@f1+2
  5408  001F7C  ECF5  F013         	call	___ftdiv	;wreg free
  5409  001F80  C060  F0A1         	movff	?___ftdiv,_atan2$2295
  5410  001F84  C061  F0A2         	movff	?___ftdiv+1,_atan2$2295+1
  5411  001F88  C062  F0A3         	movff	?___ftdiv+2,_atan2$2295+2
  5412  001F8C  C0A1  F088         	movff	_atan2$2295,atan@f
  5413  001F90  C0A2  F089         	movff	_atan2$2295+1,atan@f+1
  5414  001F94  C0A3  F08A         	movff	_atan2$2295+2,atan@f+2
  5415  001F98  EC16  F010         	call	_atan	;wreg free
  5416  001F9C  C088  F09E         	movff	?_atan,_atan2$2296
  5417  001FA0  C089  F09F         	movff	?_atan+1,_atan2$2296+1
  5418  001FA4  C08A  F0A0         	movff	?_atan+2,_atan2$2296+2
  5419  001FA8  C09E  F06F         	movff	_atan2$2296,___ftneg@f1
  5420  001FAC  C09F  F070         	movff	_atan2$2296+1,___ftneg@f1+1
  5421  001FB0  C0A0  F071         	movff	_atan2$2296+2,___ftneg@f1+2
  5422  001FB4  EC2D  F01D         	call	___ftneg	;wreg free
  5423  001FB8  C06F  F0A4         	movff	?___ftneg,atan2@v
  5424  001FBC  C070  F0A5         	movff	?___ftneg+1,atan2@v+1
  5425  001FC0  C071  F0A6         	movff	?___ftneg+2,atan2@v+2
  5426  001FC4  0100               	movlb	0	; () banked
  5427  001FC6  AF9A               	btfss	(atan2@y+2)& (0+255),7,b
  5428  001FC8  D015               	goto	l1066
  5429                           
  5430                           ; BSR set to: 0
  5431  001FCA  C0A4  F07E         	movff	atan2@v,___ftsub@f1
  5432  001FCE  C0A5  F07F         	movff	atan2@v+1,___ftsub@f1+1
  5433  001FD2  C0A6  F080         	movff	atan2@v+2,___ftsub@f1+2
  5434  001FD6  0E10               	movlw	16
  5435  001FD8  6F81               	movwf	___ftsub@f2& (0+255),b
  5436  001FDA  0EC9               	movlw	201
  5437  001FDC  6F82               	movwf	(___ftsub@f2+1)& (0+255),b
  5438  001FDE  0E3F               	movlw	63
  5439  001FE0  6F83               	movwf	(___ftsub@f2+2)& (0+255),b
  5440  001FE2  ECC1  F01B         	call	___ftsub	;wreg free
  5441  001FE6  C07E  F0A4         	movff	?___ftsub,atan2@v
  5442  001FEA  C07F  F0A5         	movff	?___ftsub+1,atan2@v+1
  5443  001FEE  C080  F0A6         	movff	?___ftsub+2,atan2@v+2
  5444  001FF2  D015               	goto	l1067
  5445  001FF4                     l1066:
  5446  001FF4  C0A4  F072         	movff	atan2@v,___ftadd@f1
  5447  001FF8  C0A5  F073         	movff	atan2@v+1,___ftadd@f1+1
  5448  001FFC  C0A6  F074         	movff	atan2@v+2,___ftadd@f1+2
  5449  002000  0E10               	movlw	16
  5450  002002  0100               	movlb	0	; () banked
  5451  002004  6F75               	movwf	___ftadd@f2& (0+255),b
  5452  002006  0EC9               	movlw	201
  5453  002008  6F76               	movwf	(___ftadd@f2+1)& (0+255),b
  5454  00200A  0E3F               	movlw	63
  5455  00200C  6F77               	movwf	(___ftadd@f2+2)& (0+255),b
  5456  00200E  ECFB  F010         	call	___ftadd	;wreg free
  5457  002012  C072  F0A4         	movff	?___ftadd,atan2@v
  5458  002016  C073  F0A5         	movff	?___ftadd+1,atan2@v+1
  5459  00201A  C074  F0A6         	movff	?___ftadd+2,atan2@v+2
  5460  00201E                     l1067:
  5461  00201E  C0A4  F098         	movff	atan2@v,?_atan2
  5462  002022  C0A5  F099         	movff	atan2@v+1,?_atan2+1
  5463  002026  C0A6  F09A         	movff	atan2@v+2,?_atan2+2
  5464  00202A  0012               	return	
  5465  00202C                     __end_of_atan2:
  5466                           	opt stack 0
  5467                           tblptru	equ	0xFF8
  5468                           tblptrh	equ	0xFF7
  5469                           tblptrl	equ	0xFF6
  5470                           tablat	equ	0xFF5
  5471                           prodh	equ	0xFF4
  5472                           prodl	equ	0xFF3
  5473                           intcon	equ	0xFF2
  5474                           postinc0	equ	0xFEE
  5475                           wreg	equ	0xFE8
  5476                           postdec1	equ	0xFE5
  5477                           fsr1l	equ	0xFE1
  5478                           indf2	equ	0xFDF
  5479                           postinc2	equ	0xFDE
  5480                           postdec2	equ	0xFDD
  5481                           fsr2h	equ	0xFDA
  5482                           fsr2l	equ	0xFD9
  5483                           status	equ	0xFD8
  5484                           
  5485 ;; *************** function _atan *****************
  5486 ;; Defined at:
  5487 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\atan.c"
  5488 ;; Parameters:    Size  Location     Type
  5489 ;;  f               3   40[BANK0 ] float 
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;  val             3   53[BANK0 ] float 
  5492 ;;  val_squared     3   50[BANK0 ] float 
  5493 ;;  x               3   46[BANK0 ] float 
  5494 ;;  y               3   43[BANK0 ] float 
  5495 ;;  recip           1   49[BANK0 ] unsigned char 
  5496 ;; Return value:  Size  Location     Type
  5497 ;;                  3   40[BANK0 ] unsigned char 
  5498 ;; Registers used:
  5499 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5505 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5506 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5508 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5509 ;;Total ram usage:       16 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    9
  5512 ;; This function calls:
  5513 ;;		___ftadd
  5514 ;;		___ftdiv
  5515 ;;		___ftge
  5516 ;;		___ftmul
  5517 ;;		___ftneg
  5518 ;;		_eval_poly
  5519 ;;		_fabs
  5520 ;; This function is called by:
  5521 ;;		_atan2
  5522 ;; This function uses a non-reentrant model
  5523 ;;
  5524                           
  5525                           	psect	text15
  5526  00202C                     __ptext15:
  5527                           	opt stack 0
  5528  00202C                     _atan:
  5529                           	opt stack 19
  5530                           
  5531                           ;incstack = 0
  5532  00202C  C088  F072         	movff	atan@f,fabs@d
  5533  002030  C089  F073         	movff	atan@f+1,fabs@d+1
  5534  002034  C08A  F074         	movff	atan@f+2,fabs@d+2
  5535  002038  EC6A  F01C         	call	_fabs	;wreg free
  5536  00203C  C072  F095         	movff	?_fabs,atan@val
  5537  002040  C073  F096         	movff	?_fabs+1,atan@val+1
  5538  002044  C074  F097         	movff	?_fabs+2,atan@val+2
  5539  002048  0100               	movlb	0	; () banked
  5540  00204A  5195               	movf	atan@val& (0+255),w,b
  5541  00204C  1196               	iorwf	(atan@val+1)& (0+255),w,b
  5542  00204E  1197               	iorwf	(atan@val+2)& (0+255),w,b
  5543  002050  A4D8               	btfss	status,2,c
  5544  002052  D007               	goto	l1558
  5545                           
  5546                           ; BSR set to: 0
  5547  002054  0E00               	movlw	0
  5548  002056  6F88               	movwf	?_atan& (0+255),b
  5549  002058  0E00               	movlw	0
  5550  00205A  6F89               	movwf	(?_atan+1)& (0+255),b
  5551  00205C  0E00               	movlw	0
  5552  00205E  6F8A               	movwf	(?_atan+2)& (0+255),b
  5553                           
  5554                           ; BSR set to: 0
  5555  002060  0012               	return	
  5556  002062                     l1558:
  5557                           
  5558                           ; BSR set to: 0
  5559                           
  5560                           ; BSR set to: 0
  5561  002062  0E00               	movlw	0
  5562  002064  6F75               	movwf	___ftge@ff1& (0+255),b
  5563  002066  0E80               	movlw	128
  5564  002068  6F76               	movwf	(___ftge@ff1+1)& (0+255),b
  5565  00206A  0E3F               	movlw	63
  5566  00206C  6F77               	movwf	(___ftge@ff1+2)& (0+255),b
  5567  00206E  C095  F078         	movff	atan@val,___ftge@ff2
  5568  002072  C096  F079         	movff	atan@val+1,___ftge@ff2+1
  5569  002076  C097  F07A         	movff	atan@val+2,___ftge@ff2+2
  5570  00207A  ECDE  F016         	call	___ftge	;wreg free
  5571  00207E  0100               	movlb	0	; () banked
  5572  002080  B0D8               	btfsc	status,0,c
  5573  002082  D002               	goto	u5080
  5574  002084  0E01               	movlw	1
  5575  002086  D001               	goto	u5090
  5576  002088                     u5080:
  5577  002088  0E00               	movlw	0
  5578  00208A                     u5090:
  5579  00208A  6F91               	movwf	atan@recip& (0+255),b
  5580  00208C  5191               	movf	atan@recip& (0+255),w,b
  5581  00208E  B4D8               	btfsc	status,2,c
  5582  002090  D014               	goto	l1560
  5583                           
  5584                           ; BSR set to: 0
  5585  002092  0E00               	movlw	0
  5586  002094  6F60               	movwf	___ftdiv@f1& (0+255),b
  5587  002096  0E80               	movlw	128
  5588  002098  6F61               	movwf	(___ftdiv@f1+1)& (0+255),b
  5589  00209A  0E3F               	movlw	63
  5590  00209C  6F62               	movwf	(___ftdiv@f1+2)& (0+255),b
  5591  00209E  C095  F063         	movff	atan@val,___ftdiv@f2
  5592  0020A2  C096  F064         	movff	atan@val+1,___ftdiv@f2+1
  5593  0020A6  C097  F065         	movff	atan@val+2,___ftdiv@f2+2
  5594  0020AA  ECF5  F013         	call	___ftdiv	;wreg free
  5595  0020AE  C060  F095         	movff	?___ftdiv,atan@val
  5596  0020B2  C061  F096         	movff	?___ftdiv+1,atan@val+1
  5597  0020B6  C062  F097         	movff	?___ftdiv+2,atan@val+2
  5598  0020BA                     l1560:
  5599  0020BA  C095  F02A         	movff	atan@val,___ftmul@f1
  5600  0020BE  C096  F02B         	movff	atan@val+1,___ftmul@f1+1
  5601  0020C2  C097  F02C         	movff	atan@val+2,___ftmul@f1+2
  5602  0020C6  C095  F02D         	movff	atan@val,___ftmul@f2
  5603  0020CA  C096  F02E         	movff	atan@val+1,___ftmul@f2+1
  5604  0020CE  C097  F02F         	movff	atan@val+2,___ftmul@f2+2
  5605  0020D2  EC7B  F013         	call	___ftmul	;wreg free
  5606  0020D6  C02A  F092         	movff	?___ftmul,atan@val_squared
  5607  0020DA  C02B  F093         	movff	?___ftmul+1,atan@val_squared+1
  5608  0020DE  C02C  F094         	movff	?___ftmul+2,atan@val_squared+2
  5609  0020E2  C092  F07E         	movff	atan@val_squared,eval_poly@x
  5610  0020E6  C093  F07F         	movff	atan@val_squared+1,eval_poly@x+1
  5611  0020EA  C094  F080         	movff	atan@val_squared+2,eval_poly@x+2
  5612  0020EE  0E89               	movlw	low atan@coeff_b
  5613  0020F0  0100               	movlb	0	; () banked
  5614  0020F2  6F81               	movwf	eval_poly@d& (0+255),b
  5615  0020F4  0E0F               	movlw	high atan@coeff_b
  5616  0020F6  6F82               	movwf	(eval_poly@d+1)& (0+255),b
  5617  0020F8  0E00               	movlw	0
  5618  0020FA  6F84               	movwf	(eval_poly@n+1)& (0+255),b
  5619  0020FC  0E04               	movlw	4
  5620  0020FE  6F83               	movwf	eval_poly@n& (0+255),b
  5621  002100  EC69  F014         	call	_eval_poly	;wreg free
  5622  002104  C07E  F08B         	movff	?_eval_poly,atan@y
  5623  002108  C07F  F08C         	movff	?_eval_poly+1,atan@y+1
  5624  00210C  C080  F08D         	movff	?_eval_poly+2,atan@y+2
  5625  002110  C092  F07E         	movff	atan@val_squared,eval_poly@x
  5626  002114  C093  F07F         	movff	atan@val_squared+1,eval_poly@x+1
  5627  002118  C094  F080         	movff	atan@val_squared+2,eval_poly@x+2
  5628  00211C  0E77               	movlw	low atan@coeff_a
  5629  00211E  0100               	movlb	0	; () banked
  5630  002120  6F81               	movwf	eval_poly@d& (0+255),b
  5631  002122  0E0F               	movlw	high atan@coeff_a
  5632  002124  6F82               	movwf	(eval_poly@d+1)& (0+255),b
  5633  002126  0E00               	movlw	0
  5634  002128  6F84               	movwf	(eval_poly@n+1)& (0+255),b
  5635  00212A  0E05               	movlw	5
  5636  00212C  6F83               	movwf	eval_poly@n& (0+255),b
  5637  00212E  EC69  F014         	call	_eval_poly	;wreg free
  5638  002132  C07E  F08E         	movff	?_eval_poly,atan@x
  5639  002136  C07F  F08F         	movff	?_eval_poly+1,atan@x+1
  5640  00213A  C080  F090         	movff	?_eval_poly+2,atan@x+2
  5641  00213E  C095  F02A         	movff	atan@val,___ftmul@f1
  5642  002142  C096  F02B         	movff	atan@val+1,___ftmul@f1+1
  5643  002146  C097  F02C         	movff	atan@val+2,___ftmul@f1+2
  5644  00214A  C08B  F063         	movff	atan@y,___ftdiv@f2
  5645  00214E  C08C  F064         	movff	atan@y+1,___ftdiv@f2+1
  5646  002152  C08D  F065         	movff	atan@y+2,___ftdiv@f2+2
  5647  002156  C08E  F060         	movff	atan@x,___ftdiv@f1
  5648  00215A  C08F  F061         	movff	atan@x+1,___ftdiv@f1+1
  5649  00215E  C090  F062         	movff	atan@x+2,___ftdiv@f1+2
  5650  002162  ECF5  F013         	call	___ftdiv	;wreg free
  5651  002166  C060  F02D         	movff	?___ftdiv,___ftmul@f2
  5652  00216A  C061  F02E         	movff	?___ftdiv+1,___ftmul@f2+1
  5653  00216E  C062  F02F         	movff	?___ftdiv+2,___ftmul@f2+2
  5654  002172  EC7B  F013         	call	___ftmul	;wreg free
  5655  002176  C02A  F095         	movff	?___ftmul,atan@val
  5656  00217A  C02B  F096         	movff	?___ftmul+1,atan@val+1
  5657  00217E  C02C  F097         	movff	?___ftmul+2,atan@val+2
  5658  002182  0100               	movlb	0	; () banked
  5659  002184  5191               	movf	atan@recip& (0+255),w,b
  5660  002186  B4D8               	btfsc	status,2,c
  5661  002188  D01D               	goto	l1561
  5662                           
  5663                           ; BSR set to: 0
  5664  00218A  C095  F06F         	movff	atan@val,___ftneg@f1
  5665  00218E  C096  F070         	movff	atan@val+1,___ftneg@f1+1
  5666  002192  C097  F071         	movff	atan@val+2,___ftneg@f1+2
  5667  002196  EC2D  F01D         	call	___ftneg	;wreg free
  5668  00219A  C06F  F072         	movff	?___ftneg,___ftadd@f1
  5669  00219E  C070  F073         	movff	?___ftneg+1,___ftadd@f1+1
  5670  0021A2  C071  F074         	movff	?___ftneg+2,___ftadd@f1+2
  5671  0021A6  0E10               	movlw	16
  5672  0021A8  0100               	movlb	0	; () banked
  5673  0021AA  6F75               	movwf	___ftadd@f2& (0+255),b
  5674  0021AC  0EC9               	movlw	201
  5675  0021AE  6F76               	movwf	(___ftadd@f2+1)& (0+255),b
  5676  0021B0  0E3F               	movlw	63
  5677  0021B2  6F77               	movwf	(___ftadd@f2+2)& (0+255),b
  5678  0021B4  ECFB  F010         	call	___ftadd	;wreg free
  5679  0021B8  C072  F095         	movff	?___ftadd,atan@val
  5680  0021BC  C073  F096         	movff	?___ftadd+1,atan@val+1
  5681  0021C0  C074  F097         	movff	?___ftadd+2,atan@val+2
  5682  0021C4                     l1561:
  5683  0021C4  0100               	movlb	0	; () banked
  5684  0021C6  BF8A               	btfsc	(atan@f+2)& (0+255),7,b
  5685  0021C8  D007               	goto	l1563
  5686                           
  5687                           ; BSR set to: 0
  5688  0021CA  C095  F088         	movff	atan@val,?_atan
  5689  0021CE  C096  F089         	movff	atan@val+1,?_atan+1
  5690  0021D2  C097  F08A         	movff	atan@val+2,?_atan+2
  5691  0021D6  0012               	return	
  5692  0021D8                     l1563:
  5693                           
  5694                           ; BSR set to: 0
  5695                           
  5696                           ; BSR set to: 0
  5697  0021D8  C095  F06F         	movff	atan@val,___ftneg@f1
  5698  0021DC  C096  F070         	movff	atan@val+1,___ftneg@f1+1
  5699  0021E0  C097  F071         	movff	atan@val+2,___ftneg@f1+2
  5700  0021E4  EC2D  F01D         	call	___ftneg	;wreg free
  5701  0021E8  C06F  F088         	movff	?___ftneg,?_atan
  5702  0021EC  C070  F089         	movff	?___ftneg+1,?_atan+1
  5703  0021F0  C071  F08A         	movff	?___ftneg+2,?_atan+2
  5704  0021F4  0012               	return	
  5705  0021F6                     __end_of_atan:
  5706                           	opt stack 0
  5707                           tblptru	equ	0xFF8
  5708                           tblptrh	equ	0xFF7
  5709                           tblptrl	equ	0xFF6
  5710                           tablat	equ	0xFF5
  5711                           prodh	equ	0xFF4
  5712                           prodl	equ	0xFF3
  5713                           intcon	equ	0xFF2
  5714                           postinc0	equ	0xFEE
  5715                           wreg	equ	0xFE8
  5716                           postdec1	equ	0xFE5
  5717                           fsr1l	equ	0xFE1
  5718                           indf2	equ	0xFDF
  5719                           postinc2	equ	0xFDE
  5720                           postdec2	equ	0xFDD
  5721                           fsr2h	equ	0xFDA
  5722                           fsr2l	equ	0xFD9
  5723                           status	equ	0xFD8
  5724                           
  5725 ;; *************** function _fabs *****************
  5726 ;; Defined at:
  5727 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fabs.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;  d               3   18[BANK0 ] unsigned char 
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;		None
  5732 ;; Return value:  Size  Location     Type
  5733 ;;                  3   18[BANK0 ] unsigned char 
  5734 ;; Registers used:
  5735 ;;		wreg, status,2, status,0, cstack
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5741 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5744 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5745 ;;Total ram usage:        3 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:    7
  5748 ;; This function calls:
  5749 ;;		___ftneg
  5750 ;; This function is called by:
  5751 ;;		_atan2
  5752 ;;		_atan
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           	psect	text16
  5757  0038D4                     __ptext16:
  5758                           	opt stack 0
  5759  0038D4                     _fabs:
  5760                           	opt stack 21
  5761                           
  5762                           ;incstack = 0
  5763  0038D4  0100               	movlb	0	; () banked
  5764  0038D6  AF74               	btfss	(fabs@d+2)& (0+255),7,b
  5765  0038D8  D00F               	goto	l1136
  5766                           
  5767                           ; BSR set to: 0
  5768  0038DA  C072  F06F         	movff	fabs@d,___ftneg@f1
  5769  0038DE  C073  F070         	movff	fabs@d+1,___ftneg@f1+1
  5770  0038E2  C074  F071         	movff	fabs@d+2,___ftneg@f1+2
  5771  0038E6  EC2D  F01D         	call	___ftneg	;wreg free
  5772  0038EA  C06F  F072         	movff	?___ftneg,?_fabs
  5773  0038EE  C070  F073         	movff	?___ftneg+1,?_fabs+1
  5774  0038F2  C071  F074         	movff	?___ftneg+2,?_fabs+2
  5775  0038F6  0012               	return	
  5776  0038F8                     l1136:
  5777                           
  5778                           ; BSR set to: 0
  5779  0038F8  C072  F072         	movff	fabs@d,?_fabs
  5780  0038FC  C073  F073         	movff	fabs@d+1,?_fabs+1
  5781  003900  C074  F074         	movff	fabs@d+2,?_fabs+2
  5782  003904  0012               	return		;funcret
  5783  003906                     __end_of_fabs:
  5784                           	opt stack 0
  5785                           tblptru	equ	0xFF8
  5786                           tblptrh	equ	0xFF7
  5787                           tblptrl	equ	0xFF6
  5788                           tablat	equ	0xFF5
  5789                           prodh	equ	0xFF4
  5790                           prodl	equ	0xFF3
  5791                           intcon	equ	0xFF2
  5792                           postinc0	equ	0xFEE
  5793                           wreg	equ	0xFE8
  5794                           postdec1	equ	0xFE5
  5795                           fsr1l	equ	0xFE1
  5796                           indf2	equ	0xFDF
  5797                           postinc2	equ	0xFDE
  5798                           postdec2	equ	0xFDD
  5799                           fsr2h	equ	0xFDA
  5800                           fsr2l	equ	0xFD9
  5801                           status	equ	0xFD8
  5802                           
  5803 ;; *************** function ___ftneg *****************
  5804 ;; Defined at:
  5805 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;  f1              3   15[BANK0 ] float 
  5808 ;; Auto vars:     Size  Location     Type
  5809 ;;		None
  5810 ;; Return value:  Size  Location     Type
  5811 ;;                  3   15[BANK0 ] float 
  5812 ;; Registers used:
  5813 ;;		wreg, status,2, status,0
  5814 ;; Tracked objects:
  5815 ;;		On entry : 0/0
  5816 ;;		On exit  : 0/0
  5817 ;;		Unchanged: 0/0
  5818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5819 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5822 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5823 ;;Total ram usage:        3 bytes
  5824 ;; Hardware stack levels used:    1
  5825 ;; Hardware stack levels required when called:    6
  5826 ;; This function calls:
  5827 ;;		Nothing
  5828 ;; This function is called by:
  5829 ;;		_sprintf
  5830 ;;		_atan2
  5831 ;;		_fabs
  5832 ;;		_atan
  5833 ;; This function uses a non-reentrant model
  5834 ;;
  5835                           
  5836                           	psect	text17
  5837  003A5A                     __ptext17:
  5838                           	opt stack 0
  5839  003A5A                     ___ftneg:
  5840                           	opt stack 23
  5841                           
  5842                           ;incstack = 0
  5843  003A5A  0100               	movlb	0	; () banked
  5844  003A5C  516F               	movf	___ftneg@f1& (0+255),w,b
  5845  003A5E  1170               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  5846  003A60  1171               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  5847  003A62  B4D8               	btfsc	status,2,c
  5848  003A64  D006               	goto	l1279
  5849                           
  5850                           ; BSR set to: 0
  5851  003A66  0E00               	movlw	0
  5852  003A68  1B6F               	xorwf	___ftneg@f1& (0+255),f,b
  5853  003A6A  0E00               	movlw	0
  5854  003A6C  1B70               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  5855  003A6E  0E80               	movlw	128
  5856  003A70  1B71               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  5857  003A72                     l1279:
  5858                           
  5859                           ; BSR set to: 0
  5860  003A72  C06F  F06F         	movff	___ftneg@f1,?___ftneg
  5861  003A76  C070  F070         	movff	___ftneg@f1+1,?___ftneg+1
  5862  003A7A  C071  F071         	movff	___ftneg@f1+2,?___ftneg+2
  5863                           
  5864                           ; BSR set to: 0
  5865  003A7E  0012               	return		;funcret
  5866  003A80                     __end_of___ftneg:
  5867                           	opt stack 0
  5868                           tblptru	equ	0xFF8
  5869                           tblptrh	equ	0xFF7
  5870                           tblptrl	equ	0xFF6
  5871                           tablat	equ	0xFF5
  5872                           prodh	equ	0xFF4
  5873                           prodl	equ	0xFF3
  5874                           intcon	equ	0xFF2
  5875                           postinc0	equ	0xFEE
  5876                           wreg	equ	0xFE8
  5877                           postdec1	equ	0xFE5
  5878                           fsr1l	equ	0xFE1
  5879                           indf2	equ	0xFDF
  5880                           postinc2	equ	0xFDE
  5881                           postdec2	equ	0xFDD
  5882                           fsr2h	equ	0xFDA
  5883                           fsr2l	equ	0xFD9
  5884                           status	equ	0xFD8
  5885                           
  5886 ;; *************** function _eval_poly *****************
  5887 ;; Defined at:
  5888 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
  5889 ;; Parameters:    Size  Location     Type
  5890 ;;  x               3   30[BANK0 ] float 
  5891 ;;  d               2   33[BANK0 ] PTR const 
  5892 ;;		 -> atan@coeff_a(18), atan@coeff_b(15), 
  5893 ;;  n               2   35[BANK0 ] int 
  5894 ;; Auto vars:     Size  Location     Type
  5895 ;;  res             3   37[BANK0 ] int 
  5896 ;; Return value:  Size  Location     Type
  5897 ;;                  3   30[BANK0 ] int 
  5898 ;; Registers used:
  5899 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5900 ;; Tracked objects:
  5901 ;;		On entry : 0/0
  5902 ;;		On exit  : 0/0
  5903 ;;		Unchanged: 0/0
  5904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5905 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5906 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5907 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5908 ;;      Totals:         2      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5909 ;;Total ram usage:       12 bytes
  5910 ;; Hardware stack levels used:    1
  5911 ;; Hardware stack levels required when called:    8
  5912 ;; This function calls:
  5913 ;;		___ftadd
  5914 ;;		___ftmul
  5915 ;;		___wmul
  5916 ;; This function is called by:
  5917 ;;		_atan
  5918 ;; This function uses a non-reentrant model
  5919 ;;
  5920                           
  5921                           	psect	text18
  5922  0028D2                     __ptext18:
  5923                           	opt stack 0
  5924  0028D2                     _eval_poly:
  5925                           	opt stack 19
  5926                           
  5927                           ; BSR set to: 0
  5928                           ;incstack = 0
  5929  0028D2  C083  F024         	movff	eval_poly@n,___wmul@multiplier
  5930  0028D6  C084  F025         	movff	eval_poly@n+1,___wmul@multiplier+1
  5931  0028DA  0E00               	movlw	0
  5932  0028DC  6E27               	movwf	___wmul@multiplicand+1,c
  5933  0028DE  0E03               	movlw	3
  5934  0028E0  6E26               	movwf	___wmul@multiplicand,c
  5935  0028E2  EC40  F01D         	call	___wmul	;wreg free
  5936  0028E6  C081  F039         	movff	eval_poly@d,??_eval_poly
  5937  0028EA  C082  F03A         	movff	eval_poly@d+1,??_eval_poly+1
  5938  0028EE  5024               	movf	?___wmul,w,c
  5939  0028F0  2639               	addwf	??_eval_poly,f,c
  5940  0028F2  5025               	movf	?___wmul+1,w,c
  5941  0028F4  223A               	addwfc	??_eval_poly+1,f,c
  5942  0028F6  C039  FFF6         	movff	??_eval_poly,tblptrl
  5943  0028FA  C03A  FFF7         	movff	??_eval_poly+1,tblptrh
  5944  0028FE                     	if	0	;tblptru may be non-zero
  5945  0028FE                     	endif
  5946  0028FE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5947  0028FE  0E00               	movlw	low (__mediumconst shr (0+16))
  5948  002900  6EF8               	movwf	tblptru,c
  5949  002902                     	endif
  5950  002902  0009               	tblrd		*+
  5951  002904  CFF5 F085          	movff	tablat,eval_poly@res
  5952  002908  0009               	tblrd		*+
  5953  00290A  CFF5 F086          	movff	tablat,eval_poly@res+1
  5954  00290E  000A               	tblrd		*-
  5955  002910  CFF5 F087          	movff	tablat,eval_poly@res+2
  5956  002914  D041               	goto	l1568
  5957  002916  C085  F02D         	movff	eval_poly@res,___ftmul@f2
  5958  00291A  C086  F02E         	movff	eval_poly@res+1,___ftmul@f2+1
  5959  00291E  C087  F02F         	movff	eval_poly@res+2,___ftmul@f2+2
  5960  002922  C07E  F02A         	movff	eval_poly@x,___ftmul@f1
  5961  002926  C07F  F02B         	movff	eval_poly@x+1,___ftmul@f1+1
  5962  00292A  C080  F02C         	movff	eval_poly@x+2,___ftmul@f1+2
  5963  00292E  EC7B  F013         	call	___ftmul	;wreg free
  5964  002932  C02A  F072         	movff	?___ftmul,___ftadd@f1
  5965  002936  C02B  F073         	movff	?___ftmul+1,___ftadd@f1+1
  5966  00293A  C02C  F074         	movff	?___ftmul+2,___ftadd@f1+2
  5967  00293E  0E00               	movlw	0
  5968  002940  6E27               	movwf	___wmul@multiplicand+1,c
  5969  002942  0E03               	movlw	3
  5970  002944  6E26               	movwf	___wmul@multiplicand,c
  5971  002946  0100               	movlb	0	; () banked
  5972  002948  0783               	decf	eval_poly@n& (0+255),f,b
  5973  00294A  A0D8               	btfss	status,0,c
  5974  00294C  0784               	decf	(eval_poly@n+1)& (0+255),f,b
  5975  00294E  C083  F024         	movff	eval_poly@n,___wmul@multiplier
  5976  002952  C084  F025         	movff	eval_poly@n+1,___wmul@multiplier+1
  5977  002956  EC40  F01D         	call	___wmul	;wreg free
  5978  00295A  C081  F039         	movff	eval_poly@d,??_eval_poly
  5979  00295E  C082  F03A         	movff	eval_poly@d+1,??_eval_poly+1
  5980  002962  5024               	movf	?___wmul,w,c
  5981  002964  2639               	addwf	??_eval_poly,f,c
  5982  002966  5025               	movf	?___wmul+1,w,c
  5983  002968  223A               	addwfc	??_eval_poly+1,f,c
  5984  00296A  C039  FFF6         	movff	??_eval_poly,tblptrl
  5985  00296E  C03A  FFF7         	movff	??_eval_poly+1,tblptrh
  5986  002972                     	if	0	;tblptru may be non-zero
  5987  002972                     	endif
  5988  002972                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5989  002972  0E00               	movlw	low (__mediumconst shr (0+16))
  5990  002974  6EF8               	movwf	tblptru,c
  5991  002976                     	endif
  5992  002976  0009               	tblrd		*+
  5993  002978  CFF5 F075          	movff	tablat,___ftadd@f2
  5994  00297C  0009               	tblrd		*+
  5995  00297E  CFF5 F076          	movff	tablat,___ftadd@f2+1
  5996  002982  000A               	tblrd		*-
  5997  002984  CFF5 F077          	movff	tablat,___ftadd@f2+2
  5998  002988  ECFB  F010         	call	___ftadd	;wreg free
  5999  00298C  C072  F085         	movff	?___ftadd,eval_poly@res
  6000  002990  C073  F086         	movff	?___ftadd+1,eval_poly@res+1
  6001  002994  C074  F087         	movff	?___ftadd+2,eval_poly@res+2
  6002  002998                     l1568:
  6003  002998  0100               	movlb	0	; () banked
  6004  00299A  5183               	movf	eval_poly@n& (0+255),w,b
  6005  00299C  1184               	iorwf	(eval_poly@n+1)& (0+255),w,b
  6006  00299E  A4D8               	btfss	status,2,c
  6007  0029A0  D7BA               	goto	l1569
  6008                           
  6009                           ; BSR set to: 0
  6010  0029A2  C085  F07E         	movff	eval_poly@res,?_eval_poly
  6011  0029A6  C086  F07F         	movff	eval_poly@res+1,?_eval_poly+1
  6012  0029AA  C087  F080         	movff	eval_poly@res+2,?_eval_poly+2
  6013                           
  6014                           ; BSR set to: 0
  6015  0029AE  0012               	return		;funcret
  6016  0029B0                     __end_of_eval_poly:
  6017                           	opt stack 0
  6018                           tblptru	equ	0xFF8
  6019                           tblptrh	equ	0xFF7
  6020                           tblptrl	equ	0xFF6
  6021                           tablat	equ	0xFF5
  6022                           prodh	equ	0xFF4
  6023                           prodl	equ	0xFF3
  6024                           intcon	equ	0xFF2
  6025                           postinc0	equ	0xFEE
  6026                           wreg	equ	0xFE8
  6027                           postdec1	equ	0xFE5
  6028                           fsr1l	equ	0xFE1
  6029                           indf2	equ	0xFDF
  6030                           postinc2	equ	0xFDE
  6031                           postdec2	equ	0xFDD
  6032                           fsr2h	equ	0xFDA
  6033                           fsr2l	equ	0xFD9
  6034                           status	equ	0xFD8
  6035                           
  6036 ;; *************** function ___wmul *****************
  6037 ;; Defined at:
  6038 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  6039 ;; Parameters:    Size  Location     Type
  6040 ;;  multiplier      2   35[COMRAM] unsigned int 
  6041 ;;  multiplicand    2   37[COMRAM] unsigned int 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;  product         2   39[COMRAM] unsigned int 
  6044 ;; Return value:  Size  Location     Type
  6045 ;;                  2   35[COMRAM] unsigned int 
  6046 ;; Registers used:
  6047 ;;		wreg, status,2, status,0, prodl, prodh
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6053 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6054 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6056 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6057 ;;Total ram usage:        6 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; Hardware stack levels required when called:    6
  6060 ;; This function calls:
  6061 ;;		Nothing
  6062 ;; This function is called by:
  6063 ;;		_fround
  6064 ;;		_scale
  6065 ;;		_sprintf
  6066 ;;		_eval_poly
  6067 ;; This function uses a non-reentrant model
  6068 ;;
  6069                           
  6070                           	psect	text19
  6071  003A80                     __ptext19:
  6072                           	opt stack 0
  6073  003A80                     ___wmul:
  6074                           	opt stack 22
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;incstack = 0
  6078  003A80  5024               	movf	___wmul@multiplier,w,c
  6079  003A82  0226               	mulwf	___wmul@multiplicand,c
  6080  003A84  CFF3 F028          	movff	prodl,___wmul@product
  6081  003A88  CFF4 F029          	movff	prodh,___wmul@product+1
  6082  003A8C  5024               	movf	___wmul@multiplier,w,c
  6083  003A8E  0227               	mulwf	___wmul@multiplicand+1,c
  6084  003A90  50F3               	movf	prodl,w,c
  6085  003A92  2629               	addwf	___wmul@product+1,f,c
  6086  003A94  5025               	movf	___wmul@multiplier+1,w,c
  6087  003A96  0226               	mulwf	___wmul@multiplicand,c
  6088  003A98  50F3               	movf	prodl,w,c
  6089  003A9A  2629               	addwf	___wmul@product+1,f,c
  6090  003A9C  C028  F024         	movff	___wmul@product,?___wmul
  6091  003AA0  C029  F025         	movff	___wmul@product+1,?___wmul+1
  6092  003AA4  0012               	return	
  6093  003AA6                     __end_of___wmul:
  6094                           	opt stack 0
  6095                           tblptru	equ	0xFF8
  6096                           tblptrh	equ	0xFF7
  6097                           tblptrl	equ	0xFF6
  6098                           tablat	equ	0xFF5
  6099                           prodh	equ	0xFF4
  6100                           prodl	equ	0xFF3
  6101                           intcon	equ	0xFF2
  6102                           postinc0	equ	0xFEE
  6103                           wreg	equ	0xFE8
  6104                           postdec1	equ	0xFE5
  6105                           fsr1l	equ	0xFE1
  6106                           indf2	equ	0xFDF
  6107                           postinc2	equ	0xFDE
  6108                           postdec2	equ	0xFDD
  6109                           fsr2h	equ	0xFDA
  6110                           fsr2l	equ	0xFD9
  6111                           status	equ	0xFD8
  6112                           
  6113 ;; *************** function ___ftmul *****************
  6114 ;; Defined at:
  6115 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;  f1              3   41[COMRAM] float 
  6118 ;;  f2              3   44[COMRAM] float 
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;  f3_as_produc    3   51[COMRAM] unsigned um
  6121 ;;  sign            1   55[COMRAM] unsigned char 
  6122 ;;  cntr            1   54[COMRAM] unsigned char 
  6123 ;;  exp             1   50[COMRAM] unsigned char 
  6124 ;; Return value:  Size  Location     Type
  6125 ;;                  3   41[COMRAM] float 
  6126 ;; Registers used:
  6127 ;;		wreg, status,2, status,0, cstack
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6133 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6134 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6135 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6136 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6137 ;;Total ram usage:       15 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    7
  6140 ;; This function calls:
  6141 ;;		___ftpack
  6142 ;; This function is called by:
  6143 ;;		_XYZ_azimuth
  6144 ;;		_fround
  6145 ;;		_scale
  6146 ;;		_sprintf
  6147 ;;		_atan
  6148 ;;		_eval_poly
  6149 ;; This function uses a non-reentrant model
  6150 ;;
  6151                           
  6152                           	psect	text20
  6153  0026F6                     __ptext20:
  6154                           	opt stack 0
  6155  0026F6                     ___ftmul:
  6156                           	opt stack 21
  6157                           
  6158                           ;incstack = 0
  6159  0026F6  C02C  F030         	movff	___ftmul@f1+2,??___ftmul
  6160  0026FA  6A31               	clrf	(??___ftmul+1)& (0+255),c
  6161  0026FC  6A32               	clrf	(??___ftmul+2)& (0+255),c
  6162  0026FE  342B               	rlcf	___ftmul@f1+1,w,c
  6163  002700  3630               	rlcf	??___ftmul& (0+255),f,c
  6164  002702  E301               	bnc	u4891
  6165  002704  8031               	bsf	(??___ftmul+1)& (0+255),0,c
  6166  002706                     u4891:
  6167  002706  5030               	movf	??___ftmul,w,c
  6168  002708  6E33               	movwf	___ftmul@exp,c
  6169  00270A  5033               	movf	___ftmul@exp,w,c
  6170  00270C  A4D8               	btfss	status,2,c
  6171  00270E  D007               	goto	l1268
  6172  002710  0E00               	movlw	0
  6173  002712  6E2A               	movwf	?___ftmul,c
  6174  002714  0E00               	movlw	0
  6175  002716  6E2B               	movwf	?___ftmul+1,c
  6176  002718  0E00               	movlw	0
  6177  00271A  6E2C               	movwf	?___ftmul+2,c
  6178  00271C  0012               	return	
  6179  00271E                     l1268:
  6180  00271E  C02F  F030         	movff	___ftmul@f2+2,??___ftmul
  6181  002722  6A31               	clrf	(??___ftmul+1)& (0+255),c
  6182  002724  6A32               	clrf	(??___ftmul+2)& (0+255),c
  6183  002726  342E               	rlcf	___ftmul@f2+1,w,c
  6184  002728  3630               	rlcf	??___ftmul& (0+255),f,c
  6185  00272A  E301               	bnc	u4911
  6186  00272C  8031               	bsf	(??___ftmul+1)& (0+255),0,c
  6187  00272E                     u4911:
  6188  00272E  5030               	movf	??___ftmul,w,c
  6189  002730  6E38               	movwf	___ftmul@sign,c
  6190  002732  5038               	movf	___ftmul@sign,w,c
  6191  002734  A4D8               	btfss	status,2,c
  6192  002736  D007               	goto	l1270
  6193  002738  0E00               	movlw	0
  6194  00273A  6E2A               	movwf	?___ftmul,c
  6195  00273C  0E00               	movlw	0
  6196  00273E  6E2B               	movwf	?___ftmul+1,c
  6197  002740  0E00               	movlw	0
  6198  002742  6E2C               	movwf	?___ftmul+2,c
  6199  002744  0012               	return	
  6200  002746                     l1270:
  6201  002746  5038               	movf	___ftmul@sign,w,c
  6202  002748  0F7B               	addlw	123
  6203  00274A  2633               	addwf	___ftmul@exp,f,c
  6204  00274C  C02C  F038         	movff	___ftmul@f1+2,___ftmul@sign
  6205  002750  502F               	movf	___ftmul@f2+2,w,c
  6206  002752  1A38               	xorwf	___ftmul@sign,f,c
  6207  002754  0E80               	movlw	128
  6208  002756  1638               	andwf	___ftmul@sign,f,c
  6209  002758  8E2B               	bsf	___ftmul@f1+1,7,c
  6210  00275A  8E2E               	bsf	___ftmul@f2+1,7,c
  6211  00275C  0EFF               	movlw	255
  6212  00275E  162D               	andwf	___ftmul@f2,f,c
  6213  002760  0EFF               	movlw	255
  6214  002762  162E               	andwf	___ftmul@f2+1,f,c
  6215  002764  0E00               	movlw	0
  6216  002766  162F               	andwf	___ftmul@f2+2,f,c
  6217  002768  0E00               	movlw	0
  6218  00276A  6E34               	movwf	___ftmul@f3_as_product,c
  6219  00276C  0E00               	movlw	0
  6220  00276E  6E35               	movwf	___ftmul@f3_as_product+1,c
  6221  002770  0E00               	movlw	0
  6222  002772  6E36               	movwf	___ftmul@f3_as_product+2,c
  6223  002774  0E07               	movlw	7
  6224  002776  6E37               	movwf	___ftmul@cntr,c
  6225  002778  A02A               	btfss	___ftmul@f1,0,c
  6226  00277A  D006               	goto	l1272
  6227  00277C  502D               	movf	___ftmul@f2,w,c
  6228  00277E  2634               	addwf	___ftmul@f3_as_product,f,c
  6229  002780  502E               	movf	___ftmul@f2+1,w,c
  6230  002782  2235               	addwfc	___ftmul@f3_as_product+1,f,c
  6231  002784  502F               	movf	___ftmul@f2+2,w,c
  6232  002786  2236               	addwfc	___ftmul@f3_as_product+2,f,c
  6233  002788                     l1272:
  6234  002788  90D8               	bcf	status,0,c
  6235  00278A  322C               	rrcf	___ftmul@f1+2,f,c
  6236  00278C  322B               	rrcf	___ftmul@f1+1,f,c
  6237  00278E  322A               	rrcf	___ftmul@f1,f,c
  6238  002790  90D8               	bcf	status,0,c
  6239  002792  362D               	rlcf	___ftmul@f2,f,c
  6240  002794  362E               	rlcf	___ftmul@f2+1,f,c
  6241  002796  362F               	rlcf	___ftmul@f2+2,f,c
  6242  002798  2E37               	decfsz	___ftmul@cntr,f,c
  6243  00279A  D7EE               	goto	l1271
  6244  00279C  0E09               	movlw	9
  6245  00279E  6E37               	movwf	___ftmul@cntr,c
  6246  0027A0  A02A               	btfss	___ftmul@f1,0,c
  6247  0027A2  D006               	goto	l1275
  6248  0027A4  502D               	movf	___ftmul@f2,w,c
  6249  0027A6  2634               	addwf	___ftmul@f3_as_product,f,c
  6250  0027A8  502E               	movf	___ftmul@f2+1,w,c
  6251  0027AA  2235               	addwfc	___ftmul@f3_as_product+1,f,c
  6252  0027AC  502F               	movf	___ftmul@f2+2,w,c
  6253  0027AE  2236               	addwfc	___ftmul@f3_as_product+2,f,c
  6254  0027B0                     l1275:
  6255  0027B0  90D8               	bcf	status,0,c
  6256  0027B2  322C               	rrcf	___ftmul@f1+2,f,c
  6257  0027B4  322B               	rrcf	___ftmul@f1+1,f,c
  6258  0027B6  322A               	rrcf	___ftmul@f1,f,c
  6259  0027B8  90D8               	bcf	status,0,c
  6260  0027BA  3236               	rrcf	___ftmul@f3_as_product+2,f,c
  6261  0027BC  3235               	rrcf	___ftmul@f3_as_product+1,f,c
  6262  0027BE  3234               	rrcf	___ftmul@f3_as_product,f,c
  6263  0027C0  2E37               	decfsz	___ftmul@cntr,f,c
  6264  0027C2  D7EE               	goto	l1274
  6265  0027C4  C034  F016         	movff	___ftmul@f3_as_product,___ftpack@arg
  6266  0027C8  C035  F017         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6267  0027CC  C036  F018         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6268  0027D0  C033  F019         	movff	___ftmul@exp,___ftpack@exp
  6269  0027D4  C038  F01A         	movff	___ftmul@sign,___ftpack@sign
  6270  0027D8  EC9A  F015         	call	___ftpack	;wreg free
  6271  0027DC  C016  F02A         	movff	?___ftpack,?___ftmul
  6272  0027E0  C017  F02B         	movff	?___ftpack+1,?___ftmul+1
  6273  0027E4  C018  F02C         	movff	?___ftpack+2,?___ftmul+2
  6274  0027E8  0012               	return	
  6275  0027EA                     __end_of___ftmul:
  6276                           	opt stack 0
  6277                           tblptru	equ	0xFF8
  6278                           tblptrh	equ	0xFF7
  6279                           tblptrl	equ	0xFF6
  6280                           tablat	equ	0xFF5
  6281                           prodh	equ	0xFF4
  6282                           prodl	equ	0xFF3
  6283                           intcon	equ	0xFF2
  6284                           postinc0	equ	0xFEE
  6285                           wreg	equ	0xFE8
  6286                           postdec1	equ	0xFE5
  6287                           fsr1l	equ	0xFE1
  6288                           indf2	equ	0xFDF
  6289                           postinc2	equ	0xFDE
  6290                           postdec2	equ	0xFDD
  6291                           fsr2h	equ	0xFDA
  6292                           fsr2l	equ	0xFD9
  6293                           status	equ	0xFD8
  6294                           
  6295 ;; *************** function ___ftge *****************
  6296 ;; Defined at:
  6297 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  6298 ;; Parameters:    Size  Location     Type
  6299 ;;  ff1             3   21[BANK0 ] float 
  6300 ;;  ff2             3   24[BANK0 ] float 
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;		None
  6303 ;; Return value:  Size  Location     Type
  6304 ;;		None               void
  6305 ;; Registers used:
  6306 ;;		wreg, status,2, status,0
  6307 ;; Tracked objects:
  6308 ;;		On entry : 0/0
  6309 ;;		On exit  : 0/0
  6310 ;;		Unchanged: 0/0
  6311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6312 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6314 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6315 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6316 ;;Total ram usage:        9 bytes
  6317 ;; Hardware stack levels used:    1
  6318 ;; Hardware stack levels required when called:    6
  6319 ;; This function calls:
  6320 ;;		Nothing
  6321 ;; This function is called by:
  6322 ;;		_sprintf
  6323 ;;		_atan2
  6324 ;;		_atan
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           	psect	text21
  6329  002DBC                     __ptext21:
  6330                           	opt stack 0
  6331  002DBC                     ___ftge:
  6332                           	opt stack 23
  6333                           
  6334                           ;incstack = 0
  6335  002DBC  0100               	movlb	0	; () banked
  6336  002DBE  AF77               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6337  002DC0  D016               	goto	l1261
  6338                           
  6339                           ; BSR set to: 0
  6340  002DC2  C075  F07B         	movff	___ftge@ff1,??___ftge
  6341  002DC6  C076  F07C         	movff	___ftge@ff1+1,??___ftge+1
  6342  002DCA  C077  F07D         	movff	___ftge@ff1+2,??___ftge+2
  6343  002DCE  1F7B               	comf	??___ftge& (0+255),f,b
  6344  002DD0  1F7C               	comf	(??___ftge+1)& (0+255),f,b
  6345  002DD2  1F7D               	comf	(??___ftge+2)& (0+255),f,b
  6346  002DD4  2B7B               	incf	??___ftge& (0+255),f,b
  6347  002DD6  0E00               	movlw	0
  6348  002DD8  237C               	addwfc	(??___ftge+1)& (0+255),f,b
  6349  002DDA  237D               	addwfc	(??___ftge+2)& (0+255),f,b
  6350  002DDC  0E00               	movlw	0
  6351  002DDE  257B               	addwf	??___ftge& (0+255),w,b
  6352  002DE0  6F75               	movwf	___ftge@ff1& (0+255),b
  6353  002DE2  0E00               	movlw	0
  6354  002DE4  217C               	addwfc	(??___ftge+1)& (0+255),w,b
  6355  002DE6  6F76               	movwf	(___ftge@ff1+1)& (0+255),b
  6356  002DE8  0E80               	movlw	128
  6357  002DEA  217D               	addwfc	(??___ftge+2)& (0+255),w,b
  6358  002DEC  6F77               	movwf	(___ftge@ff1+2)& (0+255),b
  6359  002DEE                     l1261:
  6360                           
  6361                           ; BSR set to: 0
  6362                           
  6363                           ; BSR set to: 0
  6364  002DEE  AF7A               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6365  002DF0  D016               	goto	l1262
  6366                           
  6367                           ; BSR set to: 0
  6368  002DF2  C078  F07B         	movff	___ftge@ff2,??___ftge
  6369  002DF6  C079  F07C         	movff	___ftge@ff2+1,??___ftge+1
  6370  002DFA  C07A  F07D         	movff	___ftge@ff2+2,??___ftge+2
  6371  002DFE  1F7B               	comf	??___ftge& (0+255),f,b
  6372  002E00  1F7C               	comf	(??___ftge+1)& (0+255),f,b
  6373  002E02  1F7D               	comf	(??___ftge+2)& (0+255),f,b
  6374  002E04  2B7B               	incf	??___ftge& (0+255),f,b
  6375  002E06  0E00               	movlw	0
  6376  002E08  237C               	addwfc	(??___ftge+1)& (0+255),f,b
  6377  002E0A  237D               	addwfc	(??___ftge+2)& (0+255),f,b
  6378  002E0C  0E00               	movlw	0
  6379  002E0E  257B               	addwf	??___ftge& (0+255),w,b
  6380  002E10  6F78               	movwf	___ftge@ff2& (0+255),b
  6381  002E12  0E00               	movlw	0
  6382  002E14  217C               	addwfc	(??___ftge+1)& (0+255),w,b
  6383  002E16  6F79               	movwf	(___ftge@ff2+1)& (0+255),b
  6384  002E18  0E80               	movlw	128
  6385  002E1A  217D               	addwfc	(??___ftge+2)& (0+255),w,b
  6386  002E1C  6F7A               	movwf	(___ftge@ff2+2)& (0+255),b
  6387  002E1E                     l1262:
  6388                           
  6389                           ; BSR set to: 0
  6390                           
  6391                           ; BSR set to: 0
  6392  002E1E  0E00               	movlw	0
  6393  002E20  1B75               	xorwf	___ftge@ff1& (0+255),f,b
  6394  002E22  0E00               	movlw	0
  6395  002E24  1B76               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6396  002E26  0E80               	movlw	128
  6397  002E28  1B77               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6398                           
  6399                           ; BSR set to: 0
  6400  002E2A  0E00               	movlw	0
  6401  002E2C  1B78               	xorwf	___ftge@ff2& (0+255),f,b
  6402  002E2E  0E00               	movlw	0
  6403  002E30  1B79               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6404  002E32  0E80               	movlw	128
  6405  002E34  1B7A               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6406  002E36  5178               	movf	___ftge@ff2& (0+255),w,b
  6407  002E38  5D75               	subwf	___ftge@ff1& (0+255),w,b
  6408  002E3A  5179               	movf	(___ftge@ff2+1)& (0+255),w,b
  6409  002E3C  5976               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6410  002E3E  517A               	movf	(___ftge@ff2+2)& (0+255),w,b
  6411  002E40  5977               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6412  002E42  B0D8               	btfsc	status,0,c
  6413  002E44  D002               	goto	l5785
  6414                           
  6415                           ; BSR set to: 0
  6416  002E46  90D8               	bcf	status,0,c
  6417  002E48  0012               	return	
  6418  002E4A                     l5785:
  6419                           
  6420                           ; BSR set to: 0
  6421                           
  6422                           ; BSR set to: 0
  6423  002E4A  80D8               	bsf	status,0,c
  6424                           
  6425                           ; BSR set to: 0
  6426  002E4C  0012               	return	
  6427  002E4E                     __end_of___ftge:
  6428                           	opt stack 0
  6429                           tblptru	equ	0xFF8
  6430                           tblptrh	equ	0xFF7
  6431                           tblptrl	equ	0xFF6
  6432                           tablat	equ	0xFF5
  6433                           prodh	equ	0xFF4
  6434                           prodl	equ	0xFF3
  6435                           intcon	equ	0xFF2
  6436                           postinc0	equ	0xFEE
  6437                           wreg	equ	0xFE8
  6438                           postdec1	equ	0xFE5
  6439                           fsr1l	equ	0xFE1
  6440                           indf2	equ	0xFDF
  6441                           postinc2	equ	0xFDE
  6442                           postdec2	equ	0xFDD
  6443                           fsr2h	equ	0xFDA
  6444                           fsr2l	equ	0xFD9
  6445                           status	equ	0xFD8
  6446                           
  6447 ;; *************** function ___ftdiv *****************
  6448 ;; Defined at:
  6449 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  6450 ;; Parameters:    Size  Location     Type
  6451 ;;  f1              3    0[BANK0 ] float 
  6452 ;;  f2              3    3[BANK0 ] float 
  6453 ;; Auto vars:     Size  Location     Type
  6454 ;;  f3              3   10[BANK0 ] float 
  6455 ;;  sign            1   14[BANK0 ] unsigned char 
  6456 ;;  exp             1   13[BANK0 ] unsigned char 
  6457 ;;  cntr            1    9[BANK0 ] unsigned char 
  6458 ;; Return value:  Size  Location     Type
  6459 ;;                  3    0[BANK0 ] float 
  6460 ;; Registers used:
  6461 ;;		wreg, status,2, status,0, cstack
  6462 ;; Tracked objects:
  6463 ;;		On entry : 0/0
  6464 ;;		On exit  : 0/0
  6465 ;;		Unchanged: 0/0
  6466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6467 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6468 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6469 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6470 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6471 ;;Total ram usage:       15 bytes
  6472 ;; Hardware stack levels used:    1
  6473 ;; Hardware stack levels required when called:    7
  6474 ;; This function calls:
  6475 ;;		___ftpack
  6476 ;; This function is called by:
  6477 ;;		_XYZ_azimuth
  6478 ;;		_atan2
  6479 ;;		_atan
  6480 ;;		_XYZ_ReadTemp
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484                           	psect	text22
  6485  0027EA                     __ptext22:
  6486                           	opt stack 0
  6487  0027EA                     ___ftdiv:
  6488                           	opt stack 20
  6489                           
  6490                           ; BSR set to: 0
  6491                           ;incstack = 0
  6492  0027EA  C062  F066         	movff	___ftdiv@f1+2,??___ftdiv
  6493  0027EE  0100               	movlb	0	; () banked
  6494  0027F0  6B67               	clrf	(??___ftdiv+1)& (0+255),b
  6495  0027F2  6B68               	clrf	(??___ftdiv+2)& (0+255),b
  6496  0027F4  3561               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  6497  0027F6  3766               	rlcf	??___ftdiv& (0+255),f,b
  6498  0027F8  E301               	bnc	u4961
  6499  0027FA  8167               	bsf	(??___ftdiv+1)& (0+255),0,b
  6500  0027FC                     u4961:
  6501  0027FC  5166               	movf	??___ftdiv& (0+255),w,b
  6502  0027FE  6F6D               	movwf	___ftdiv@exp& (0+255),b
  6503  002800  516D               	movf	___ftdiv@exp& (0+255),w,b
  6504  002802  A4D8               	btfss	status,2,c
  6505  002804  D007               	goto	l1236
  6506                           
  6507                           ; BSR set to: 0
  6508  002806  0E00               	movlw	0
  6509  002808  6F60               	movwf	?___ftdiv& (0+255),b
  6510  00280A  0E00               	movlw	0
  6511  00280C  6F61               	movwf	(?___ftdiv+1)& (0+255),b
  6512  00280E  0E00               	movlw	0
  6513  002810  6F62               	movwf	(?___ftdiv+2)& (0+255),b
  6514                           
  6515                           ; BSR set to: 0
  6516  002812  0012               	return	
  6517  002814                     l1236:
  6518                           
  6519                           ; BSR set to: 0
  6520                           
  6521                           ; BSR set to: 0
  6522  002814  C065  F066         	movff	___ftdiv@f2+2,??___ftdiv
  6523  002818  6B67               	clrf	(??___ftdiv+1)& (0+255),b
  6524  00281A  6B68               	clrf	(??___ftdiv+2)& (0+255),b
  6525  00281C  3564               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  6526  00281E  3766               	rlcf	??___ftdiv& (0+255),f,b
  6527  002820  E301               	bnc	u4981
  6528  002822  8167               	bsf	(??___ftdiv+1)& (0+255),0,b
  6529  002824                     u4981:
  6530  002824  5166               	movf	??___ftdiv& (0+255),w,b
  6531  002826  6F6E               	movwf	___ftdiv@sign& (0+255),b
  6532  002828  516E               	movf	___ftdiv@sign& (0+255),w,b
  6533  00282A  A4D8               	btfss	status,2,c
  6534  00282C  D007               	goto	l1238
  6535                           
  6536                           ; BSR set to: 0
  6537  00282E  0E00               	movlw	0
  6538  002830  6F60               	movwf	?___ftdiv& (0+255),b
  6539  002832  0E00               	movlw	0
  6540  002834  6F61               	movwf	(?___ftdiv+1)& (0+255),b
  6541  002836  0E00               	movlw	0
  6542  002838  6F62               	movwf	(?___ftdiv+2)& (0+255),b
  6543                           
  6544                           ; BSR set to: 0
  6545  00283A  0012               	return	
  6546  00283C                     l1238:
  6547                           
  6548                           ; BSR set to: 0
  6549                           
  6550                           ; BSR set to: 0
  6551  00283C  0E00               	movlw	0
  6552  00283E  6F6A               	movwf	___ftdiv@f3& (0+255),b
  6553  002840  0E00               	movlw	0
  6554  002842  6F6B               	movwf	(___ftdiv@f3+1)& (0+255),b
  6555  002844  0E00               	movlw	0
  6556  002846  6F6C               	movwf	(___ftdiv@f3+2)& (0+255),b
  6557                           
  6558                           ; BSR set to: 0
  6559  002848  516E               	movf	___ftdiv@sign& (0+255),w,b
  6560  00284A  0F89               	addlw	137
  6561  00284C  5F6D               	subwf	___ftdiv@exp& (0+255),f,b
  6562                           
  6563                           ; BSR set to: 0
  6564  00284E  C062  F06E         	movff	___ftdiv@f1+2,___ftdiv@sign
  6565                           
  6566                           ; BSR set to: 0
  6567  002852  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  6568  002854  1B6E               	xorwf	___ftdiv@sign& (0+255),f,b
  6569                           
  6570                           ; BSR set to: 0
  6571  002856  0E80               	movlw	128
  6572  002858  176E               	andwf	___ftdiv@sign& (0+255),f,b
  6573                           
  6574                           ; BSR set to: 0
  6575  00285A  8F61               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  6576                           
  6577                           ; BSR set to: 0
  6578  00285C  0EFF               	movlw	255
  6579  00285E  1760               	andwf	___ftdiv@f1& (0+255),f,b
  6580  002860  0EFF               	movlw	255
  6581  002862  1761               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  6582  002864  0E00               	movlw	0
  6583  002866  1762               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  6584                           
  6585                           ; BSR set to: 0
  6586  002868  8F64               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  6587                           
  6588                           ; BSR set to: 0
  6589  00286A  0EFF               	movlw	255
  6590  00286C  1763               	andwf	___ftdiv@f2& (0+255),f,b
  6591  00286E  0EFF               	movlw	255
  6592  002870  1764               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  6593  002872  0E00               	movlw	0
  6594  002874  1765               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  6595                           
  6596                           ; BSR set to: 0
  6597  002876  0E18               	movlw	24
  6598  002878  6F69               	movwf	___ftdiv@cntr& (0+255),b
  6599  00287A                     
  6600                           ; BSR set to: 0
  6601                           
  6602                           ; BSR set to: 0
  6603  00287A  90D8               	bcf	status,0,c
  6604  00287C  376A               	rlcf	___ftdiv@f3& (0+255),f,b
  6605  00287E  376B               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  6606  002880  376C               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  6607                           
  6608                           ; BSR set to: 0
  6609  002882  5163               	movf	___ftdiv@f2& (0+255),w,b
  6610  002884  5D60               	subwf	___ftdiv@f1& (0+255),w,b
  6611  002886  5164               	movf	(___ftdiv@f2+1)& (0+255),w,b
  6612  002888  5961               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  6613  00288A  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  6614  00288C  5962               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  6615  00288E  A0D8               	btfss	status,0,c
  6616  002890  D007               	goto	l1240
  6617                           
  6618                           ; BSR set to: 0
  6619  002892  5163               	movf	___ftdiv@f2& (0+255),w,b
  6620  002894  5F60               	subwf	___ftdiv@f1& (0+255),f,b
  6621  002896  5164               	movf	(___ftdiv@f2+1)& (0+255),w,b
  6622  002898  5B61               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  6623  00289A  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  6624  00289C  5B62               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  6625                           
  6626                           ; BSR set to: 0
  6627  00289E  816A               	bsf	___ftdiv@f3& (0+255),0,b
  6628  0028A0                     l1240:
  6629                           
  6630                           ; BSR set to: 0
  6631  0028A0  90D8               	bcf	status,0,c
  6632  0028A2  3760               	rlcf	___ftdiv@f1& (0+255),f,b
  6633  0028A4  3761               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  6634  0028A6  3762               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  6635                           
  6636                           ; BSR set to: 0
  6637  0028A8  2F69               	decfsz	___ftdiv@cntr& (0+255),f,b
  6638  0028AA  D7E7               	goto	l1239
  6639                           
  6640                           ; BSR set to: 0
  6641                           
  6642                           ; BSR set to: 0
  6643  0028AC  C06A  F016         	movff	___ftdiv@f3,___ftpack@arg
  6644  0028B0  C06B  F017         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6645  0028B4  C06C  F018         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6646  0028B8  C06D  F019         	movff	___ftdiv@exp,___ftpack@exp
  6647  0028BC  C06E  F01A         	movff	___ftdiv@sign,___ftpack@sign
  6648  0028C0  EC9A  F015         	call	___ftpack	;wreg free
  6649  0028C4  C016  F060         	movff	?___ftpack,?___ftdiv
  6650  0028C8  C017  F061         	movff	?___ftpack+1,?___ftdiv+1
  6651  0028CC  C018  F062         	movff	?___ftpack+2,?___ftdiv+2
  6652  0028D0  0012               	return	
  6653  0028D2                     __end_of___ftdiv:
  6654                           	opt stack 0
  6655                           tblptru	equ	0xFF8
  6656                           tblptrh	equ	0xFF7
  6657                           tblptrl	equ	0xFF6
  6658                           tablat	equ	0xFF5
  6659                           prodh	equ	0xFF4
  6660                           prodl	equ	0xFF3
  6661                           intcon	equ	0xFF2
  6662                           postinc0	equ	0xFEE
  6663                           wreg	equ	0xFE8
  6664                           postdec1	equ	0xFE5
  6665                           fsr1l	equ	0xFE1
  6666                           indf2	equ	0xFDF
  6667                           postinc2	equ	0xFDE
  6668                           postdec2	equ	0xFDD
  6669                           fsr2h	equ	0xFDA
  6670                           fsr2l	equ	0xFD9
  6671                           status	equ	0xFD8
  6672                           
  6673 ;; *************** function ___ftsub *****************
  6674 ;; Defined at:
  6675 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;  f1              3   30[BANK0 ] float 
  6678 ;;  f2              3   33[BANK0 ] float 
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;		None
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  3   30[BANK0 ] float 
  6683 ;; Registers used:
  6684 ;;		wreg, status,2, status,0, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6690 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6693 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6694 ;;Total ram usage:        6 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:    8
  6697 ;; This function calls:
  6698 ;;		___ftadd
  6699 ;; This function is called by:
  6700 ;;		_sprintf
  6701 ;;		_atan2
  6702 ;; This function uses a non-reentrant model
  6703 ;;
  6704                           
  6705                           	psect	text23
  6706  003782                     __ptext23:
  6707                           	opt stack 0
  6708  003782                     ___ftsub:
  6709                           	opt stack 21
  6710                           
  6711                           ;incstack = 0
  6712  003782  0100               	movlb	0	; () banked
  6713  003784  5181               	movf	___ftsub@f2& (0+255),w,b
  6714  003786  1182               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  6715  003788  1183               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  6716  00378A  B4D8               	btfsc	status,2,c
  6717  00378C  D006               	goto	l1285
  6718                           
  6719                           ; BSR set to: 0
  6720  00378E  0E00               	movlw	0
  6721  003790  1B81               	xorwf	___ftsub@f2& (0+255),f,b
  6722  003792  0E00               	movlw	0
  6723  003794  1B82               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  6724  003796  0E80               	movlw	128
  6725  003798  1B83               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  6726  00379A                     l1285:
  6727                           
  6728                           ; BSR set to: 0
  6729                           
  6730                           ; BSR set to: 0
  6731  00379A  C07E  F072         	movff	___ftsub@f1,___ftadd@f1
  6732  00379E  C07F  F073         	movff	___ftsub@f1+1,___ftadd@f1+1
  6733  0037A2  C080  F074         	movff	___ftsub@f1+2,___ftadd@f1+2
  6734  0037A6  C081  F075         	movff	___ftsub@f2,___ftadd@f2
  6735  0037AA  C082  F076         	movff	___ftsub@f2+1,___ftadd@f2+1
  6736  0037AE  C083  F077         	movff	___ftsub@f2+2,___ftadd@f2+2
  6737  0037B2  ECFB  F010         	call	___ftadd	;wreg free
  6738  0037B6  C072  F07E         	movff	?___ftadd,?___ftsub
  6739  0037BA  C073  F07F         	movff	?___ftadd+1,?___ftsub+1
  6740  0037BE  C074  F080         	movff	?___ftadd+2,?___ftsub+2
  6741  0037C2  0012               	return	
  6742  0037C4                     __end_of___ftsub:
  6743                           	opt stack 0
  6744                           tblptru	equ	0xFF8
  6745                           tblptrh	equ	0xFF7
  6746                           tblptrl	equ	0xFF6
  6747                           tablat	equ	0xFF5
  6748                           prodh	equ	0xFF4
  6749                           prodl	equ	0xFF3
  6750                           intcon	equ	0xFF2
  6751                           postinc0	equ	0xFEE
  6752                           wreg	equ	0xFE8
  6753                           postdec1	equ	0xFE5
  6754                           fsr1l	equ	0xFE1
  6755                           indf2	equ	0xFDF
  6756                           postinc2	equ	0xFDE
  6757                           postdec2	equ	0xFDD
  6758                           fsr2h	equ	0xFDA
  6759                           fsr2l	equ	0xFD9
  6760                           status	equ	0xFD8
  6761                           
  6762 ;; *************** function ___ftadd *****************
  6763 ;; Defined at:
  6764 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  6765 ;; Parameters:    Size  Location     Type
  6766 ;;  f1              3   18[BANK0 ] float 
  6767 ;;  f2              3   21[BANK0 ] float 
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;  exp1            1   29[BANK0 ] unsigned char 
  6770 ;;  exp2            1   28[BANK0 ] unsigned char 
  6771 ;;  sign            1   27[BANK0 ] unsigned char 
  6772 ;; Return value:  Size  Location     Type
  6773 ;;                  3   18[BANK0 ] float 
  6774 ;; Registers used:
  6775 ;;		wreg, status,2, status,0, cstack
  6776 ;; Tracked objects:
  6777 ;;		On entry : 0/0
  6778 ;;		On exit  : 0/0
  6779 ;;		Unchanged: 0/0
  6780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6781 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6782 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6783 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6784 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6785 ;;Total ram usage:       12 bytes
  6786 ;; Hardware stack levels used:    1
  6787 ;; Hardware stack levels required when called:    7
  6788 ;; This function calls:
  6789 ;;		___ftpack
  6790 ;; This function is called by:
  6791 ;;		_XYZ_azimuth
  6792 ;;		_sprintf
  6793 ;;		_atan2
  6794 ;;		___ftsub
  6795 ;;		_atan
  6796 ;;		_eval_poly
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           	psect	text24
  6801  0021F6                     __ptext24:
  6802                           	opt stack 0
  6803  0021F6                     ___ftadd:
  6804                           	opt stack 21
  6805                           
  6806                           ;incstack = 0
  6807  0021F6  C074  F078         	movff	___ftadd@f1+2,??___ftadd
  6808  0021FA  0100               	movlb	0	; () banked
  6809  0021FC  6B79               	clrf	(??___ftadd+1)& (0+255),b
  6810  0021FE  6B7A               	clrf	(??___ftadd+2)& (0+255),b
  6811  002200  3573               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  6812  002202  3778               	rlcf	??___ftadd& (0+255),f,b
  6813  002204  E301               	bnc	u4681
  6814  002206  8179               	bsf	(??___ftadd+1)& (0+255),0,b
  6815  002208                     u4681:
  6816  002208  5178               	movf	??___ftadd& (0+255),w,b
  6817  00220A  6F7D               	movwf	___ftadd@exp1& (0+255),b
  6818  00220C  C077  F078         	movff	___ftadd@f2+2,??___ftadd
  6819  002210  6B79               	clrf	(??___ftadd+1)& (0+255),b
  6820  002212  6B7A               	clrf	(??___ftadd+2)& (0+255),b
  6821  002214  3576               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  6822  002216  3778               	rlcf	??___ftadd& (0+255),f,b
  6823  002218  E301               	bnc	u4691
  6824  00221A  8179               	bsf	(??___ftadd+1)& (0+255),0,b
  6825  00221C                     u4691:
  6826  00221C  5178               	movf	??___ftadd& (0+255),w,b
  6827  00221E  6F7C               	movwf	___ftadd@exp2& (0+255),b
  6828                           
  6829                           ; BSR set to: 0
  6830  002220  517D               	movf	___ftadd@exp1& (0+255),w,b
  6831  002222  B4D8               	btfsc	status,2,c
  6832  002224  D00B               	goto	u4720
  6833                           
  6834                           ; BSR set to: 0
  6835  002226  517C               	movf	___ftadd@exp2& (0+255),w,b
  6836  002228  5D7D               	subwf	___ftadd@exp1& (0+255),w,b
  6837  00222A  B0D8               	btfsc	status,0,c
  6838  00222C  D00E               	goto	l1203
  6839                           
  6840                           ; BSR set to: 0
  6841  00222E  517D               	movf	___ftadd@exp1& (0+255),w,b
  6842  002230  0800               	sublw	0
  6843  002232  257C               	addwf	___ftadd@exp2& (0+255),w,b
  6844  002234  6F78               	movwf	??___ftadd& (0+255),b
  6845  002236  0E18               	movlw	24
  6846  002238  6578               	cpfsgt	??___ftadd& (0+255),b
  6847  00223A  D007               	goto	l1203
  6848  00223C                     u4720:
  6849                           
  6850                           ; BSR set to: 0
  6851  00223C  C075  F072         	movff	___ftadd@f2,?___ftadd
  6852  002240  C076  F073         	movff	___ftadd@f2+1,?___ftadd+1
  6853  002244  C077  F074         	movff	___ftadd@f2+2,?___ftadd+2
  6854  002248  0012               	return	
  6855  00224A                     l1203:
  6856                           
  6857                           ; BSR set to: 0
  6858                           
  6859                           ; BSR set to: 0
  6860  00224A  517C               	movf	___ftadd@exp2& (0+255),w,b
  6861  00224C  B4D8               	btfsc	status,2,c
  6862  00224E  D00B               	goto	u4750
  6863                           
  6864                           ; BSR set to: 0
  6865  002250  517D               	movf	___ftadd@exp1& (0+255),w,b
  6866  002252  5D7C               	subwf	___ftadd@exp2& (0+255),w,b
  6867  002254  B0D8               	btfsc	status,0,c
  6868  002256  D00E               	goto	l1207
  6869                           
  6870                           ; BSR set to: 0
  6871  002258  517C               	movf	___ftadd@exp2& (0+255),w,b
  6872  00225A  0800               	sublw	0
  6873  00225C  257D               	addwf	___ftadd@exp1& (0+255),w,b
  6874  00225E  6F78               	movwf	??___ftadd& (0+255),b
  6875  002260  0E18               	movlw	24
  6876  002262  6578               	cpfsgt	??___ftadd& (0+255),b
  6877  002264  D007               	goto	l1207
  6878  002266                     u4750:
  6879                           
  6880                           ; BSR set to: 0
  6881  002266  C072  F072         	movff	___ftadd@f1,?___ftadd
  6882  00226A  C073  F073         	movff	___ftadd@f1+1,?___ftadd+1
  6883  00226E  C074  F074         	movff	___ftadd@f1+2,?___ftadd+2
  6884  002272  0012               	return	
  6885  002274                     l1207:
  6886                           
  6887                           ; BSR set to: 0
  6888                           
  6889                           ; BSR set to: 0
  6890  002274  0E06               	movlw	6
  6891  002276  6F7B               	movwf	___ftadd@sign& (0+255),b
  6892                           
  6893                           ; BSR set to: 0
  6894  002278  BF74               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  6895                           
  6896                           ; BSR set to: 0
  6897  00227A  8F7B               	bsf	___ftadd@sign& (0+255),7,b
  6898                           
  6899                           ; BSR set to: 0
  6900                           
  6901                           ; BSR set to: 0
  6902  00227C  BF77               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  6903                           
  6904                           ; BSR set to: 0
  6905  00227E  8D7B               	bsf	___ftadd@sign& (0+255),6,b
  6906                           
  6907                           ; BSR set to: 0
  6908  002280  8F73               	bsf	(___ftadd@f1+1)& (0+255),7,b
  6909                           
  6910                           ; BSR set to: 0
  6911  002282  0EFF               	movlw	255
  6912  002284  1772               	andwf	___ftadd@f1& (0+255),f,b
  6913  002286  0EFF               	movlw	255
  6914  002288  1773               	andwf	(___ftadd@f1+1)& (0+255),f,b
  6915  00228A  0E00               	movlw	0
  6916  00228C  1774               	andwf	(___ftadd@f1+2)& (0+255),f,b
  6917  00228E  8F76               	bsf	(___ftadd@f2+1)& (0+255),7,b
  6918                           
  6919                           ; BSR set to: 0
  6920  002290  0EFF               	movlw	255
  6921  002292  1775               	andwf	___ftadd@f2& (0+255),f,b
  6922  002294  0EFF               	movlw	255
  6923  002296  1776               	andwf	(___ftadd@f2+1)& (0+255),f,b
  6924  002298  0E00               	movlw	0
  6925  00229A  1777               	andwf	(___ftadd@f2+2)& (0+255),f,b
  6926                           
  6927                           ; BSR set to: 0
  6928  00229C  517C               	movf	___ftadd@exp2& (0+255),w,b
  6929  00229E  5D7D               	subwf	___ftadd@exp1& (0+255),w,b
  6930  0022A0  B0D8               	btfsc	status,0,c
  6931  0022A2  D01B               	goto	l1212
  6932  0022A4                     u4780:
  6933                           
  6934                           ; BSR set to: 0
  6935                           
  6936                           ; BSR set to: 0
  6937  0022A4  90D8               	bcf	status,0,c
  6938  0022A6  3775               	rlcf	___ftadd@f2& (0+255),f,b
  6939  0022A8  3776               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  6940  0022AA  3777               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  6941  0022AC  077C               	decf	___ftadd@exp2& (0+255),f,b
  6942                           
  6943                           ; BSR set to: 0
  6944  0022AE  517D               	movf	___ftadd@exp1& (0+255),w,b
  6945  0022B0  197C               	xorwf	___ftadd@exp2& (0+255),w,b
  6946  0022B2  B4D8               	btfsc	status,2,c
  6947  0022B4  D00D               	goto	l1217
  6948                           
  6949                           ; BSR set to: 0
  6950  0022B6  077B               	decf	___ftadd@sign& (0+255),f,b
  6951  0022B8  C07B  F078         	movff	___ftadd@sign,??___ftadd
  6952  0022BC  0E07               	movlw	7
  6953  0022BE  1778               	andwf	??___ftadd& (0+255),f,b
  6954  0022C0  B4D8               	btfsc	status,2,c
  6955  0022C2  D006               	goto	l1217
  6956  0022C4  D7EF               	goto	u4780
  6957  0022C6                     
  6958                           ; BSR set to: 0
  6959                           
  6960                           ; BSR set to: 0
  6961  0022C6  90D8               	bcf	status,0,c
  6962  0022C8  3374               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  6963  0022CA  3373               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  6964  0022CC  3372               	rrcf	___ftadd@f1& (0+255),f,b
  6965  0022CE  2B7D               	incf	___ftadd@exp1& (0+255),f,b
  6966  0022D0                     l1217:
  6967                           
  6968                           ; BSR set to: 0
  6969                           
  6970                           ; BSR set to: 0
  6971  0022D0  517C               	movf	___ftadd@exp2& (0+255),w,b
  6972  0022D2  197D               	xorwf	___ftadd@exp1& (0+255),w,b
  6973  0022D4  B4D8               	btfsc	status,2,c
  6974  0022D6  D01F               	goto	u4850
  6975  0022D8  D7F6               	goto	l1218
  6976  0022DA                     l1212:
  6977                           
  6978                           ; BSR set to: 0
  6979                           
  6980                           ; BSR set to: 0
  6981  0022DA  517D               	movf	___ftadd@exp1& (0+255),w,b
  6982  0022DC  5D7C               	subwf	___ftadd@exp2& (0+255),w,b
  6983  0022DE  B0D8               	btfsc	status,0,c
  6984  0022E0  D01A               	goto	u4850
  6985  0022E2                     u4820:
  6986                           
  6987                           ; BSR set to: 0
  6988                           
  6989                           ; BSR set to: 0
  6990  0022E2  90D8               	bcf	status,0,c
  6991  0022E4  3772               	rlcf	___ftadd@f1& (0+255),f,b
  6992  0022E6  3773               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  6993  0022E8  3774               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  6994  0022EA  077D               	decf	___ftadd@exp1& (0+255),f,b
  6995                           
  6996                           ; BSR set to: 0
  6997  0022EC  517D               	movf	___ftadd@exp1& (0+255),w,b
  6998  0022EE  197C               	xorwf	___ftadd@exp2& (0+255),w,b
  6999  0022F0  B4D8               	btfsc	status,2,c
  7000  0022F2  D00D               	goto	l1226
  7001                           
  7002                           ; BSR set to: 0
  7003  0022F4  077B               	decf	___ftadd@sign& (0+255),f,b
  7004  0022F6  C07B  F078         	movff	___ftadd@sign,??___ftadd
  7005  0022FA  0E07               	movlw	7
  7006  0022FC  1778               	andwf	??___ftadd& (0+255),f,b
  7007  0022FE  B4D8               	btfsc	status,2,c
  7008  002300  D006               	goto	l1226
  7009  002302  D7EF               	goto	u4820
  7010  002304                     
  7011                           ; BSR set to: 0
  7012                           
  7013                           ; BSR set to: 0
  7014  002304  90D8               	bcf	status,0,c
  7015  002306  3377               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  7016  002308  3376               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  7017  00230A  3375               	rrcf	___ftadd@f2& (0+255),f,b
  7018  00230C  2B7C               	incf	___ftadd@exp2& (0+255),f,b
  7019  00230E                     l1226:
  7020                           
  7021                           ; BSR set to: 0
  7022                           
  7023                           ; BSR set to: 0
  7024  00230E  517C               	movf	___ftadd@exp2& (0+255),w,b
  7025  002310  197D               	xorwf	___ftadd@exp1& (0+255),w,b
  7026  002312  A4D8               	btfss	status,2,c
  7027  002314  D7F7               	goto	l1227
  7028  002316                     u4850:
  7029                           
  7030                           ; BSR set to: 0
  7031                           
  7032                           ; BSR set to: 0
  7033                           
  7034                           ; BSR set to: 0
  7035  002316  AF7B               	btfss	___ftadd@sign& (0+255),7,b
  7036  002318  D00C               	goto	l1229
  7037                           
  7038                           ; BSR set to: 0
  7039  00231A  0EFF               	movlw	255
  7040  00231C  1B72               	xorwf	___ftadd@f1& (0+255),f,b
  7041  00231E  0EFF               	movlw	255
  7042  002320  1B73               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  7043  002322  0EFF               	movlw	255
  7044  002324  1B74               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  7045  002326  0E01               	movlw	1
  7046  002328  2772               	addwf	___ftadd@f1& (0+255),f,b
  7047  00232A  0E00               	movlw	0
  7048  00232C  2373               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  7049  00232E  0E00               	movlw	0
  7050  002330  2374               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  7051  002332                     l1229:
  7052                           
  7053                           ; BSR set to: 0
  7054  002332  AD7B               	btfss	___ftadd@sign& (0+255),6,b
  7055  002334  D00C               	goto	l1230
  7056                           
  7057                           ; BSR set to: 0
  7058  002336  0EFF               	movlw	255
  7059  002338  1B75               	xorwf	___ftadd@f2& (0+255),f,b
  7060  00233A  0EFF               	movlw	255
  7061  00233C  1B76               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7062  00233E  0EFF               	movlw	255
  7063  002340  1B77               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7064  002342  0E01               	movlw	1
  7065  002344  2775               	addwf	___ftadd@f2& (0+255),f,b
  7066  002346  0E00               	movlw	0
  7067  002348  2376               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7068  00234A  0E00               	movlw	0
  7069  00234C  2377               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7070  00234E                     l1230:
  7071                           
  7072                           ; BSR set to: 0
  7073                           
  7074                           ; BSR set to: 0
  7075  00234E  0E00               	movlw	0
  7076  002350  6F7B               	movwf	___ftadd@sign& (0+255),b
  7077                           
  7078                           ; BSR set to: 0
  7079  002352  5172               	movf	___ftadd@f1& (0+255),w,b
  7080  002354  2775               	addwf	___ftadd@f2& (0+255),f,b
  7081  002356  5173               	movf	(___ftadd@f1+1)& (0+255),w,b
  7082  002358  2376               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7083  00235A  5174               	movf	(___ftadd@f1+2)& (0+255),w,b
  7084  00235C  2377               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7085                           
  7086                           ; BSR set to: 0
  7087  00235E  AF77               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7088  002360  D00E               	goto	l1231
  7089                           
  7090                           ; BSR set to: 0
  7091  002362  0EFF               	movlw	255
  7092  002364  1B75               	xorwf	___ftadd@f2& (0+255),f,b
  7093  002366  0EFF               	movlw	255
  7094  002368  1B76               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7095  00236A  0EFF               	movlw	255
  7096  00236C  1B77               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7097  00236E  0E01               	movlw	1
  7098  002370  2775               	addwf	___ftadd@f2& (0+255),f,b
  7099  002372  0E00               	movlw	0
  7100  002374  2376               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7101  002376  0E00               	movlw	0
  7102  002378  2377               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7103                           
  7104                           ; BSR set to: 0
  7105  00237A  0E01               	movlw	1
  7106  00237C  6F7B               	movwf	___ftadd@sign& (0+255),b
  7107  00237E                     l1231:
  7108                           
  7109                           ; BSR set to: 0
  7110                           
  7111                           ; BSR set to: 0
  7112  00237E  C075  F016         	movff	___ftadd@f2,___ftpack@arg
  7113  002382  C076  F017         	movff	___ftadd@f2+1,___ftpack@arg+1
  7114  002386  C077  F018         	movff	___ftadd@f2+2,___ftpack@arg+2
  7115  00238A  C07D  F019         	movff	___ftadd@exp1,___ftpack@exp
  7116  00238E  C07B  F01A         	movff	___ftadd@sign,___ftpack@sign
  7117  002392  EC9A  F015         	call	___ftpack	;wreg free
  7118  002396  C016  F072         	movff	?___ftpack,?___ftadd
  7119  00239A  C017  F073         	movff	?___ftpack+1,?___ftadd+1
  7120  00239E  C018  F074         	movff	?___ftpack+2,?___ftadd+2
  7121  0023A2  0012               	return	
  7122  0023A4                     __end_of___ftadd:
  7123                           	opt stack 0
  7124                           tblptru	equ	0xFF8
  7125                           tblptrh	equ	0xFF7
  7126                           tblptrl	equ	0xFF6
  7127                           tablat	equ	0xFF5
  7128                           prodh	equ	0xFF4
  7129                           prodl	equ	0xFF3
  7130                           intcon	equ	0xFF2
  7131                           postinc0	equ	0xFEE
  7132                           wreg	equ	0xFE8
  7133                           postdec1	equ	0xFE5
  7134                           fsr1l	equ	0xFE1
  7135                           indf2	equ	0xFDF
  7136                           postinc2	equ	0xFDE
  7137                           postdec2	equ	0xFDD
  7138                           fsr2h	equ	0xFDA
  7139                           fsr2l	equ	0xFD9
  7140                           status	equ	0xFD8
  7141                           
  7142 ;; *************** function ___awtoft *****************
  7143 ;; Defined at:
  7144 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  7145 ;; Parameters:    Size  Location     Type
  7146 ;;  c               2   29[COMRAM] int 
  7147 ;; Auto vars:     Size  Location     Type
  7148 ;;  sign            1   32[COMRAM] unsigned char 
  7149 ;; Return value:  Size  Location     Type
  7150 ;;                  3   29[COMRAM] float 
  7151 ;; Registers used:
  7152 ;;		wreg, status,2, status,0, cstack
  7153 ;; Tracked objects:
  7154 ;;		On entry : 0/0
  7155 ;;		On exit  : 0/0
  7156 ;;		Unchanged: 0/0
  7157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7158 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7159 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7161 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7162 ;;Total ram usage:        4 bytes
  7163 ;; Hardware stack levels used:    1
  7164 ;; Hardware stack levels required when called:    7
  7165 ;; This function calls:
  7166 ;;		___ftpack
  7167 ;; This function is called by:
  7168 ;;		_XYZ_azimuth
  7169 ;;		_XYZ_ReadTemp
  7170 ;; This function uses a non-reentrant model
  7171 ;;
  7172                           
  7173                           	psect	text25
  7174  0037C4                     __ptext25:
  7175                           	opt stack 0
  7176  0037C4                     ___awtoft:
  7177                           	opt stack 22
  7178                           
  7179                           ;incstack = 0
  7180  0037C4  0E00               	movlw	0
  7181  0037C6  6E21               	movwf	___awtoft@sign,c
  7182  0037C8  AE1F               	btfss	___awtoft@c+1,7,c
  7183  0037CA  D006               	goto	l1130
  7184  0037CC  6C1E               	negf	___awtoft@c,c
  7185  0037CE  1E1F               	comf	___awtoft@c+1,f,c
  7186  0037D0  B0D8               	btfsc	status,0,c
  7187  0037D2  2A1F               	incf	___awtoft@c+1,f,c
  7188  0037D4  0E01               	movlw	1
  7189  0037D6  6E21               	movwf	___awtoft@sign,c
  7190  0037D8                     l1130:
  7191  0037D8  C01E  F016         	movff	___awtoft@c,___ftpack@arg
  7192  0037DC  C01F  F017         	movff	___awtoft@c+1,___ftpack@arg+1
  7193  0037E0  6A18               	clrf	___ftpack@arg+2,c
  7194  0037E2  0E8E               	movlw	142
  7195  0037E4  6E19               	movwf	___ftpack@exp,c
  7196  0037E6  C021  F01A         	movff	___awtoft@sign,___ftpack@sign
  7197  0037EA  EC9A  F015         	call	___ftpack	;wreg free
  7198  0037EE  C016  F01E         	movff	?___ftpack,?___awtoft
  7199  0037F2  C017  F01F         	movff	?___ftpack+1,?___awtoft+1
  7200  0037F6  C018  F020         	movff	?___ftpack+2,?___awtoft+2
  7201  0037FA  0012               	return	
  7202  0037FC                     __end_of___awtoft:
  7203                           	opt stack 0
  7204                           tblptru	equ	0xFF8
  7205                           tblptrh	equ	0xFF7
  7206                           tblptrl	equ	0xFF6
  7207                           tablat	equ	0xFF5
  7208                           prodh	equ	0xFF4
  7209                           prodl	equ	0xFF3
  7210                           intcon	equ	0xFF2
  7211                           postinc0	equ	0xFEE
  7212                           wreg	equ	0xFE8
  7213                           postdec1	equ	0xFE5
  7214                           fsr1l	equ	0xFE1
  7215                           indf2	equ	0xFDF
  7216                           postinc2	equ	0xFDE
  7217                           postdec2	equ	0xFDD
  7218                           fsr2h	equ	0xFDA
  7219                           fsr2l	equ	0xFD9
  7220                           status	equ	0xFD8
  7221                           
  7222 ;; *************** function ___ftpack *****************
  7223 ;; Defined at:
  7224 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  7225 ;; Parameters:    Size  Location     Type
  7226 ;;  arg             3   21[COMRAM] unsigned um
  7227 ;;  exp             1   24[COMRAM] unsigned char 
  7228 ;;  sign            1   25[COMRAM] unsigned char 
  7229 ;; Auto vars:     Size  Location     Type
  7230 ;;		None
  7231 ;; Return value:  Size  Location     Type
  7232 ;;                  3   21[COMRAM] float 
  7233 ;; Registers used:
  7234 ;;		wreg, status,2, status,0
  7235 ;; Tracked objects:
  7236 ;;		On entry : 0/0
  7237 ;;		On exit  : 0/0
  7238 ;;		Unchanged: 0/0
  7239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7240 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7242 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7243 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7244 ;;Total ram usage:        8 bytes
  7245 ;; Hardware stack levels used:    1
  7246 ;; Hardware stack levels required when called:    6
  7247 ;; This function calls:
  7248 ;;		Nothing
  7249 ;; This function is called by:
  7250 ;;		___awtoft
  7251 ;;		___ftadd
  7252 ;;		___ftdiv
  7253 ;;		___ftmul
  7254 ;;		___lltoft
  7255 ;; This function uses a non-reentrant model
  7256 ;;
  7257                           
  7258                           	psect	text26
  7259  002B34                     __ptext26:
  7260                           	opt stack 0
  7261  002B34                     ___ftpack:
  7262                           	opt stack 21
  7263                           
  7264                           ;incstack = 0
  7265  002B34  5019               	movf	___ftpack@exp,w,c
  7266  002B36  B4D8               	btfsc	status,2,c
  7267  002B38  D005               	goto	u4600
  7268  002B3A  5016               	movf	___ftpack@arg,w,c
  7269  002B3C  1017               	iorwf	___ftpack@arg+1,w,c
  7270  002B3E  1018               	iorwf	___ftpack@arg+2,w,c
  7271  002B40  A4D8               	btfss	status,2,c
  7272  002B42  D00C               	goto	l1172
  7273  002B44                     u4600:
  7274  002B44  0E00               	movlw	0
  7275  002B46  6E16               	movwf	?___ftpack,c
  7276  002B48  0E00               	movlw	0
  7277  002B4A  6E17               	movwf	?___ftpack+1,c
  7278  002B4C  0E00               	movlw	0
  7279  002B4E  6E18               	movwf	?___ftpack+2,c
  7280  002B50  0012               	return	
  7281  002B52  2A19               	incf	___ftpack@exp,f,c
  7282  002B54  90D8               	bcf	status,0,c
  7283  002B56  3218               	rrcf	___ftpack@arg+2,f,c
  7284  002B58  3217               	rrcf	___ftpack@arg+1,f,c
  7285  002B5A  3216               	rrcf	___ftpack@arg,f,c
  7286  002B5C                     l1172:
  7287  002B5C  0E00               	movlw	0
  7288  002B5E  1416               	andwf	___ftpack@arg,w,c
  7289  002B60  6E1B               	movwf	??___ftpack& (0+255),c
  7290  002B62  0E00               	movlw	0
  7291  002B64  1417               	andwf	___ftpack@arg+1,w,c
  7292  002B66  6E1C               	movwf	(??___ftpack+1)& (0+255),c
  7293  002B68  0EFE               	movlw	254
  7294  002B6A  1418               	andwf	___ftpack@arg+2,w,c
  7295  002B6C  6E1D               	movwf	(??___ftpack+2)& (0+255),c
  7296  002B6E  501B               	movf	??___ftpack,w,c
  7297  002B70  101C               	iorwf	??___ftpack+1,w,c
  7298  002B72  101D               	iorwf	??___ftpack+2,w,c
  7299  002B74  B4D8               	btfsc	status,2,c
  7300  002B76  D00C               	goto	l1175
  7301  002B78  D7EC               	goto	l1173
  7302  002B7A  2A19               	incf	___ftpack@exp,f,c
  7303  002B7C  0E01               	movlw	1
  7304  002B7E  2616               	addwf	___ftpack@arg,f,c
  7305  002B80  0E00               	movlw	0
  7306  002B82  2217               	addwfc	___ftpack@arg+1,f,c
  7307  002B84  0E00               	movlw	0
  7308  002B86  2218               	addwfc	___ftpack@arg+2,f,c
  7309  002B88  90D8               	bcf	status,0,c
  7310  002B8A  3218               	rrcf	___ftpack@arg+2,f,c
  7311  002B8C  3217               	rrcf	___ftpack@arg+1,f,c
  7312  002B8E  3216               	rrcf	___ftpack@arg,f,c
  7313  002B90                     l1175:
  7314  002B90  0E00               	movlw	0
  7315  002B92  1416               	andwf	___ftpack@arg,w,c
  7316  002B94  6E1B               	movwf	??___ftpack& (0+255),c
  7317  002B96  0E00               	movlw	0
  7318  002B98  1417               	andwf	___ftpack@arg+1,w,c
  7319  002B9A  6E1C               	movwf	(??___ftpack+1)& (0+255),c
  7320  002B9C  0EFF               	movlw	255
  7321  002B9E  1418               	andwf	___ftpack@arg+2,w,c
  7322  002BA0  6E1D               	movwf	(??___ftpack+2)& (0+255),c
  7323  002BA2  501B               	movf	??___ftpack,w,c
  7324  002BA4  101C               	iorwf	??___ftpack+1,w,c
  7325  002BA6  101D               	iorwf	??___ftpack+2,w,c
  7326  002BA8  B4D8               	btfsc	status,2,c
  7327  002BAA  D006               	goto	l1178
  7328  002BAC  D7E6               	goto	l1176
  7329  002BAE  0619               	decf	___ftpack@exp,f,c
  7330  002BB0  90D8               	bcf	status,0,c
  7331  002BB2  3616               	rlcf	___ftpack@arg,f,c
  7332  002BB4  3617               	rlcf	___ftpack@arg+1,f,c
  7333  002BB6  3618               	rlcf	___ftpack@arg+2,f,c
  7334  002BB8                     l1178:
  7335  002BB8  BE17               	btfsc	___ftpack@arg+1,7,c
  7336  002BBA  D003               	goto	u4640
  7337  002BBC  0E02               	movlw	2
  7338  002BBE  6019               	cpfslt	___ftpack@exp,c
  7339  002BC0  D7F6               	goto	l1179
  7340  002BC2                     u4640:
  7341  002BC2  A019               	btfss	___ftpack@exp,0,c
  7342  002BC4  9E17               	bcf	___ftpack@arg+1,7,c
  7343  002BC6  90D8               	bcf	status,0,c
  7344  002BC8  3219               	rrcf	___ftpack@exp,f,c
  7345  002BCA  5019               	movf	___ftpack@exp,w,c
  7346  002BCC  1218               	iorwf	___ftpack@arg+2,f,c
  7347  002BCE  501A               	movf	___ftpack@sign,w,c
  7348  002BD0  A4D8               	btfss	status,2,c
  7349  002BD2  8E18               	bsf	___ftpack@arg+2,7,c
  7350  002BD4  C016  F016         	movff	___ftpack@arg,?___ftpack
  7351  002BD8  C017  F017         	movff	___ftpack@arg+1,?___ftpack+1
  7352  002BDC  C018  F018         	movff	___ftpack@arg+2,?___ftpack+2
  7353  002BE0  0012               	return	
  7354  002BE2                     __end_of___ftpack:
  7355                           	opt stack 0
  7356                           tblptru	equ	0xFF8
  7357                           tblptrh	equ	0xFF7
  7358                           tblptrl	equ	0xFF6
  7359                           tablat	equ	0xFF5
  7360                           prodh	equ	0xFF4
  7361                           prodl	equ	0xFF3
  7362                           intcon	equ	0xFF2
  7363                           postinc0	equ	0xFEE
  7364                           wreg	equ	0xFE8
  7365                           postdec1	equ	0xFE5
  7366                           fsr1l	equ	0xFE1
  7367                           indf2	equ	0xFDF
  7368                           postinc2	equ	0xFDE
  7369                           postdec2	equ	0xFDD
  7370                           fsr2h	equ	0xFDA
  7371                           fsr2l	equ	0xFD9
  7372                           status	equ	0xFD8
  7373                           
  7374 ;; *************** function _XYZ_Read *****************
  7375 ;; Defined at:
  7376 ;;		line 45 in file "drv_qmc5883l.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;  x               2   37[COMRAM] PTR int 
  7379 ;;		 -> main@x(2), 
  7380 ;;  y               2   39[COMRAM] PTR int 
  7381 ;;		 -> main@y(2), 
  7382 ;;  z               2   41[COMRAM] PTR int 
  7383 ;;		 -> main@z(2), 
  7384 ;; Auto vars:     Size  Location     Type
  7385 ;;  readBuffer      6   47[COMRAM] unsigned char [6]
  7386 ;; Return value:  Size  Location     Type
  7387 ;;                  1    wreg      void 
  7388 ;; Registers used:
  7389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7390 ;; Tracked objects:
  7391 ;;		On entry : 0/0
  7392 ;;		On exit  : 0/0
  7393 ;;		Unchanged: 0/0
  7394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7395 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7396 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7397 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7398 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7399 ;;Total ram usage:       16 bytes
  7400 ;; Hardware stack levels used:    1
  7401 ;; Hardware stack levels required when called:   15
  7402 ;; This function calls:
  7403 ;;		_i2c_readNBytes
  7404 ;;		_i2c_writeNBytes
  7405 ;; This function is called by:
  7406 ;;		_main
  7407 ;; This function uses a non-reentrant model
  7408 ;;
  7409                           
  7410                           	psect	text27
  7411  002C88                     __ptext27:
  7412                           	opt stack 0
  7413  002C88                     _XYZ_Read:
  7414                           	opt stack 15
  7415                           
  7416                           ;drv_qmc5883l.c: 47: static unsigned char wrtBuffer[1];
  7417                           ;drv_qmc5883l.c: 48: wrtBuffer[0] = (0x00);
  7418                           
  7419                           ;incstack = 0
  7420  002C88  0E00               	movlw	0
  7421  002C8A  6E47               	movwf	XYZ_Read@wrtBuffer,c
  7422                           
  7423                           ;drv_qmc5883l.c: 49: i2c_writeNBytes(0x0D, wrtBuffer, 1);
  7424  002C8C  0E47               	movlw	low XYZ_Read@wrtBuffer
  7425  002C8E  6E21               	movwf	i2c_writeNBytes@data,c
  7426  002C90  0E00               	movlw	high XYZ_Read@wrtBuffer
  7427  002C92  6E22               	movwf	i2c_writeNBytes@data+1,c
  7428  002C94  0E00               	movlw	0
  7429  002C96  6E24               	movwf	i2c_writeNBytes@len+1,c
  7430  002C98  0E01               	movlw	1
  7431  002C9A  6E23               	movwf	i2c_writeNBytes@len,c
  7432  002C9C  0E0D               	movlw	13
  7433  002C9E  ECC8  F01A         	call	_i2c_writeNBytes
  7434                           
  7435                           ;drv_qmc5883l.c: 50: unsigned char readBuffer[6];
  7436                           ;drv_qmc5883l.c: 51: i2c_readNBytes(0x0D, readBuffer, 6);
  7437  002CA2  0E30               	movlw	low XYZ_Read@readBuffer
  7438  002CA4  6E1B               	movwf	i2c_readNBytes@data,c
  7439  002CA6  0E00               	movlw	high XYZ_Read@readBuffer
  7440  002CA8  6E1C               	movwf	i2c_readNBytes@data+1,c
  7441  002CAA  0E00               	movlw	0
  7442  002CAC  6E1E               	movwf	i2c_readNBytes@len+1,c
  7443  002CAE  0E06               	movlw	6
  7444  002CB0  6E1D               	movwf	i2c_readNBytes@len,c
  7445  002CB2  0E0D               	movlw	13
  7446  002CB4  EC83  F01C         	call	_i2c_readNBytes
  7447                           
  7448                           ;drv_qmc5883l.c: 52: *x = readBuffer[0] | (readBuffer[1] << 8);
  7449  002CB8  5031               	movf	XYZ_Read@readBuffer+1,w,c
  7450  002CBA  6E2D               	movwf	(??_XYZ_Read+1)& (0+255),c
  7451  002CBC  6A2C               	clrf	??_XYZ_Read& (0+255),c
  7452  002CBE  5030               	movf	XYZ_Read@readBuffer,w,c
  7453  002CC0  6E2E               	movwf	(??_XYZ_Read+2)& (0+255),c
  7454  002CC2  6A2F               	clrf	(??_XYZ_Read+3)& (0+255),c
  7455  002CC4  502C               	movf	??_XYZ_Read,w,c
  7456  002CC6  122E               	iorwf	??_XYZ_Read+2,f,c
  7457  002CC8  502D               	movf	??_XYZ_Read+1,w,c
  7458  002CCA  122F               	iorwf	??_XYZ_Read+3,f,c
  7459  002CCC  C026  FFD9         	movff	XYZ_Read@x,fsr2l
  7460  002CD0  C027  FFDA         	movff	XYZ_Read@x+1,fsr2h
  7461  002CD4  C02E  FFDE         	movff	??_XYZ_Read+2,postinc2
  7462  002CD8  C02F  FFDD         	movff	??_XYZ_Read+3,postdec2
  7463                           
  7464                           ;drv_qmc5883l.c: 53: *y = readBuffer[2] | (readBuffer[3] << 8);
  7465  002CDC  5033               	movf	XYZ_Read@readBuffer+3,w,c
  7466  002CDE  6E2D               	movwf	(??_XYZ_Read+1)& (0+255),c
  7467  002CE0  6A2C               	clrf	??_XYZ_Read& (0+255),c
  7468  002CE2  5032               	movf	XYZ_Read@readBuffer+2,w,c
  7469  002CE4  6E2E               	movwf	(??_XYZ_Read+2)& (0+255),c
  7470  002CE6  6A2F               	clrf	(??_XYZ_Read+3)& (0+255),c
  7471  002CE8  502C               	movf	??_XYZ_Read,w,c
  7472  002CEA  122E               	iorwf	??_XYZ_Read+2,f,c
  7473  002CEC  502D               	movf	??_XYZ_Read+1,w,c
  7474  002CEE  122F               	iorwf	??_XYZ_Read+3,f,c
  7475  002CF0  C028  FFD9         	movff	XYZ_Read@y,fsr2l
  7476  002CF4  C029  FFDA         	movff	XYZ_Read@y+1,fsr2h
  7477  002CF8  C02E  FFDE         	movff	??_XYZ_Read+2,postinc2
  7478  002CFC  C02F  FFDD         	movff	??_XYZ_Read+3,postdec2
  7479                           
  7480                           ;drv_qmc5883l.c: 54: *z = readBuffer[4] | (readBuffer[5] << 8);
  7481  002D00  5035               	movf	XYZ_Read@readBuffer+5,w,c
  7482  002D02  6E2D               	movwf	(??_XYZ_Read+1)& (0+255),c
  7483  002D04  6A2C               	clrf	??_XYZ_Read& (0+255),c
  7484  002D06  5034               	movf	XYZ_Read@readBuffer+4,w,c
  7485  002D08  6E2E               	movwf	(??_XYZ_Read+2)& (0+255),c
  7486  002D0A  6A2F               	clrf	(??_XYZ_Read+3)& (0+255),c
  7487  002D0C  502C               	movf	??_XYZ_Read,w,c
  7488  002D0E  122E               	iorwf	??_XYZ_Read+2,f,c
  7489  002D10  502D               	movf	??_XYZ_Read+1,w,c
  7490  002D12  122F               	iorwf	??_XYZ_Read+3,f,c
  7491  002D14  C02A  FFD9         	movff	XYZ_Read@z,fsr2l
  7492  002D18  C02B  FFDA         	movff	XYZ_Read@z+1,fsr2h
  7493  002D1C  C02E  FFDE         	movff	??_XYZ_Read+2,postinc2
  7494  002D20  C02F  FFDD         	movff	??_XYZ_Read+3,postdec2
  7495  002D24  0012               	return		;funcret
  7496  002D26                     __end_of_XYZ_Read:
  7497                           	opt stack 0
  7498                           tblptru	equ	0xFF8
  7499                           tblptrh	equ	0xFF7
  7500                           tblptrl	equ	0xFF6
  7501                           tablat	equ	0xFF5
  7502                           prodh	equ	0xFF4
  7503                           prodl	equ	0xFF3
  7504                           intcon	equ	0xFF2
  7505                           postinc0	equ	0xFEE
  7506                           wreg	equ	0xFE8
  7507                           postdec1	equ	0xFE5
  7508                           fsr1l	equ	0xFE1
  7509                           indf2	equ	0xFDF
  7510                           postinc2	equ	0xFDE
  7511                           postdec2	equ	0xFDD
  7512                           fsr2h	equ	0xFDA
  7513                           fsr2l	equ	0xFD9
  7514                           status	equ	0xFD8
  7515                           
  7516 ;; *************** function _i2c_readNBytes *****************
  7517 ;; Defined at:
  7518 ;;		line 156 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  7519 ;; Parameters:    Size  Location     Type
  7520 ;;  address         1    wreg     unsigned char 
  7521 ;;  data            2   26[COMRAM] PTR void 
  7522 ;;		 -> XYZ_ReadTemp@readBuffer(2), XYZ_Read@readBuffer(6), 
  7523 ;;  len             2   28[COMRAM] unsigned int 
  7524 ;; Auto vars:     Size  Location     Type
  7525 ;;  address         1   30[COMRAM] unsigned char 
  7526 ;; Return value:  Size  Location     Type
  7527 ;;                  1    wreg      void 
  7528 ;; Registers used:
  7529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7530 ;; Tracked objects:
  7531 ;;		On entry : 0/0
  7532 ;;		On exit  : 0/0
  7533 ;;		Unchanged: 0/0
  7534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7535 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7536 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7538 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7539 ;;Total ram usage:        5 bytes
  7540 ;; Hardware stack levels used:    1
  7541 ;; Hardware stack levels required when called:   14
  7542 ;; This function calls:
  7543 ;;		_i2c_close
  7544 ;;		_i2c_masterRead
  7545 ;;		_i2c_open
  7546 ;;		_i2c_setBuffer
  7547 ;; This function is called by:
  7548 ;;		_XYZ_Read
  7549 ;;		_XYZ_ReadTemp
  7550 ;; This function uses a non-reentrant model
  7551 ;;
  7552                           
  7553                           	psect	text28
  7554  003906                     __ptext28:
  7555                           	opt stack 0
  7556  003906                     _i2c_readNBytes:
  7557                           	opt stack 15
  7558                           
  7559                           ;incstack = 0
  7560                           ;i2c_readNBytes@address stored from wreg
  7561  003906  6E1F               	movwf	i2c_readNBytes@address,c
  7562  003908                     
  7563                           ;i2c_simple_master.c: 158: while(!i2c_open(address));
  7564  003908  501F               	movf	i2c_readNBytes@address,w,c
  7565  00390A  EC42  F015         	call	_i2c_open
  7566  00390E  0900               	iorlw	0
  7567  003910  B4D8               	btfsc	status,2,c
  7568  003912  D7FA               	goto	l6629
  7569                           
  7570                           ;i2c_simple_master.c: 159: i2c_setBuffer(data,len);
  7571  003914  C01B  F016         	movff	i2c_readNBytes@data,i2c_setBuffer@buffer
  7572  003918  C01C  F017         	movff	i2c_readNBytes@data+1,i2c_setBuffer@buffer+1
  7573  00391C  C01D  F018         	movff	i2c_readNBytes@len,i2c_setBuffer@bufferSize
  7574  003920  C01E  F019         	movff	i2c_readNBytes@len+1,i2c_setBuffer@bufferSize+1
  7575  003924  ECF2  F01D         	call	_i2c_setBuffer	;wreg free
  7576                           
  7577                           ;i2c_simple_master.c: 160: i2c_masterRead();
  7578  003928  EC57  F01F         	call	_i2c_masterRead	;wreg free
  7579  00392C  EC82  F01D         	call	_i2c_close	;wreg free
  7580  003930  06E8               	decf	wreg,f,c
  7581  003932  A4D8               	btfss	status,2,c
  7582  003934  0012               	return	
  7583  003936  D7FA               	goto	l591
  7584  003938                     __end_of_i2c_readNBytes:
  7585                           	opt stack 0
  7586                           tblptru	equ	0xFF8
  7587                           tblptrh	equ	0xFF7
  7588                           tblptrl	equ	0xFF6
  7589                           tablat	equ	0xFF5
  7590                           prodh	equ	0xFF4
  7591                           prodl	equ	0xFF3
  7592                           intcon	equ	0xFF2
  7593                           postinc0	equ	0xFEE
  7594                           wreg	equ	0xFE8
  7595                           postdec1	equ	0xFE5
  7596                           fsr1l	equ	0xFE1
  7597                           indf2	equ	0xFDF
  7598                           postinc2	equ	0xFDE
  7599                           postdec2	equ	0xFDD
  7600                           fsr2h	equ	0xFDA
  7601                           fsr2l	equ	0xFD9
  7602                           status	equ	0xFD8
  7603                           
  7604 ;; *************** function _i2c_masterRead *****************
  7605 ;; Defined at:
  7606 ;;		line 217 in file "mcc_generated_files/drivers/i2c_master.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;		None
  7609 ;; Auto vars:     Size  Location     Type
  7610 ;;		None
  7611 ;; Return value:  Size  Location     Type
  7612 ;;                  1    wreg      enum E11811
  7613 ;; Registers used:
  7614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7615 ;; Tracked objects:
  7616 ;;		On entry : 0/0
  7617 ;;		On exit  : 0/0
  7618 ;;		Unchanged: 0/0
  7619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7624 ;;Total ram usage:        0 bytes
  7625 ;; Hardware stack levels used:    1
  7626 ;; Hardware stack levels required when called:   13
  7627 ;; This function calls:
  7628 ;;		_i2c_masterOperation
  7629 ;; This function is called by:
  7630 ;;		_i2c_readNBytes
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634                           	psect	text29
  7635  003EAE                     __ptext29:
  7636                           	opt stack 0
  7637  003EAE                     _i2c_masterRead:
  7638                           	opt stack 15
  7639                           
  7640                           ;i2c_master.c: 219: return i2c_masterOperation(1);
  7641                           ;	Return value of _i2c_masterRead is never used
  7642                           
  7643                           ;incstack = 0
  7644  003EAE  0E01               	movlw	1
  7645  003EB0  EC9C  F01C         	call	_i2c_masterOperation
  7646  003EB4  0012               	return	
  7647  003EB6                     __end_of_i2c_masterRead:
  7648                           	opt stack 0
  7649                           tblptru	equ	0xFF8
  7650                           tblptrh	equ	0xFF7
  7651                           tblptrl	equ	0xFF6
  7652                           tablat	equ	0xFF5
  7653                           prodh	equ	0xFF4
  7654                           prodl	equ	0xFF3
  7655                           intcon	equ	0xFF2
  7656                           postinc0	equ	0xFEE
  7657                           wreg	equ	0xFE8
  7658                           postdec1	equ	0xFE5
  7659                           fsr1l	equ	0xFE1
  7660                           indf2	equ	0xFDF
  7661                           postinc2	equ	0xFDE
  7662                           postdec2	equ	0xFDD
  7663                           fsr2h	equ	0xFDA
  7664                           fsr2l	equ	0xFD9
  7665                           status	equ	0xFD8
  7666                           
  7667 ;; *************** function _XYZ_Init *****************
  7668 ;; Defined at:
  7669 ;;		line 7 in file "drv_qmc5883l.c"
  7670 ;; Parameters:    Size  Location     Type
  7671 ;;		None
  7672 ;; Auto vars:     Size  Location     Type
  7673 ;;		None
  7674 ;; Return value:  Size  Location     Type
  7675 ;;                  1    wreg      void 
  7676 ;; Registers used:
  7677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7678 ;; Tracked objects:
  7679 ;;		On entry : 0/0
  7680 ;;		On exit  : 0/0
  7681 ;;		Unchanged: 0/0
  7682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7687 ;;Total ram usage:        0 bytes
  7688 ;; Hardware stack levels used:    1
  7689 ;; Hardware stack levels required when called:   17
  7690 ;; This function calls:
  7691 ;;		_XYZ_WriteReg
  7692 ;;		_XYZ_setMode
  7693 ;; This function is called by:
  7694 ;;		_main
  7695 ;; This function uses a non-reentrant model
  7696 ;;
  7697                           
  7698                           	psect	text30
  7699  003AE6                     __ptext30:
  7700                           	opt stack 0
  7701  003AE6                     _XYZ_Init:
  7702                           	opt stack 13
  7703                           
  7704                           ;drv_qmc5883l.c: 9: XYZ_WriteReg(0x0B, 0x01);
  7705                           
  7706                           ;incstack = 0
  7707  003AE6  0E01               	movlw	1
  7708  003AE8  6E26               	movwf	XYZ_WriteReg@val,c
  7709  003AEA  0E0B               	movlw	11
  7710  003AEC  EC53  F01D         	call	_XYZ_WriteReg
  7711                           
  7712                           ;drv_qmc5883l.c: 11: XYZ_setMode(0x01, 0x0C, 0x10, 0x00);
  7713  003AF0  0E0C               	movlw	12
  7714  003AF2  6E28               	movwf	XYZ_setMode@odr,c
  7715  003AF4  0E10               	movlw	16
  7716  003AF6  6E29               	movwf	XYZ_setMode@rng,c
  7717  003AF8  0E00               	movlw	0
  7718  003AFA  6E2A               	movwf	XYZ_setMode@osr,c
  7719  003AFC  0E01               	movlw	1
  7720  003AFE  EC7D  F01E         	call	_XYZ_setMode
  7721  003B02  0012               	return		;funcret
  7722  003B04                     __end_of_XYZ_Init:
  7723                           	opt stack 0
  7724                           tblptru	equ	0xFF8
  7725                           tblptrh	equ	0xFF7
  7726                           tblptrl	equ	0xFF6
  7727                           tablat	equ	0xFF5
  7728                           prodh	equ	0xFF4
  7729                           prodl	equ	0xFF3
  7730                           intcon	equ	0xFF2
  7731                           postinc0	equ	0xFEE
  7732                           wreg	equ	0xFE8
  7733                           postdec1	equ	0xFE5
  7734                           fsr1l	equ	0xFE1
  7735                           indf2	equ	0xFDF
  7736                           postinc2	equ	0xFDE
  7737                           postdec2	equ	0xFDD
  7738                           fsr2h	equ	0xFDA
  7739                           fsr2l	equ	0xFD9
  7740                           status	equ	0xFD8
  7741                           
  7742 ;; *************** function _XYZ_setMode *****************
  7743 ;; Defined at:
  7744 ;;		line 29 in file "drv_qmc5883l.c"
  7745 ;; Parameters:    Size  Location     Type
  7746 ;;  mode            1    wreg     unsigned char 
  7747 ;;  odr             1   39[COMRAM] unsigned char 
  7748 ;;  rng             1   40[COMRAM] unsigned char 
  7749 ;;  osr             1   41[COMRAM] unsigned char 
  7750 ;; Auto vars:     Size  Location     Type
  7751 ;;  mode            1   42[COMRAM] unsigned char 
  7752 ;; Return value:  Size  Location     Type
  7753 ;;                  1    wreg      void 
  7754 ;; Registers used:
  7755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7756 ;; Tracked objects:
  7757 ;;		On entry : 0/0
  7758 ;;		On exit  : 0/0
  7759 ;;		Unchanged: 0/0
  7760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7761 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7762 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7764 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7765 ;;Total ram usage:        4 bytes
  7766 ;; Hardware stack levels used:    1
  7767 ;; Hardware stack levels required when called:   16
  7768 ;; This function calls:
  7769 ;;		_XYZ_WriteReg
  7770 ;; This function is called by:
  7771 ;;		_XYZ_Init
  7772 ;; This function uses a non-reentrant model
  7773 ;;
  7774                           
  7775                           	psect	text31
  7776  003CFA                     __ptext31:
  7777                           	opt stack 0
  7778  003CFA                     _XYZ_setMode:
  7779                           	opt stack 13
  7780                           
  7781                           ;incstack = 0
  7782                           ;XYZ_setMode@mode stored from wreg
  7783  003CFA  6E2B               	movwf	XYZ_setMode@mode,c
  7784                           
  7785                           ;drv_qmc5883l.c: 31: XYZ_WriteReg(0x09, mode | odr | rng | osr);
  7786  003CFC  502B               	movf	XYZ_setMode@mode,w,c
  7787  003CFE  1028               	iorwf	XYZ_setMode@odr,w,c
  7788  003D00  1029               	iorwf	XYZ_setMode@rng,w,c
  7789  003D02  102A               	iorwf	XYZ_setMode@osr,w,c
  7790  003D04  6E26               	movwf	XYZ_WriteReg@val,c
  7791  003D06  0E09               	movlw	9
  7792  003D08  EC53  F01D         	call	_XYZ_WriteReg
  7793  003D0C  0012               	return		;funcret
  7794  003D0E                     __end_of_XYZ_setMode:
  7795                           	opt stack 0
  7796                           tblptru	equ	0xFF8
  7797                           tblptrh	equ	0xFF7
  7798                           tblptrl	equ	0xFF6
  7799                           tablat	equ	0xFF5
  7800                           prodh	equ	0xFF4
  7801                           prodl	equ	0xFF3
  7802                           intcon	equ	0xFF2
  7803                           postinc0	equ	0xFEE
  7804                           wreg	equ	0xFE8
  7805                           postdec1	equ	0xFE5
  7806                           fsr1l	equ	0xFE1
  7807                           indf2	equ	0xFDF
  7808                           postinc2	equ	0xFDE
  7809                           postdec2	equ	0xFDD
  7810                           fsr2h	equ	0xFDA
  7811                           fsr2l	equ	0xFD9
  7812                           status	equ	0xFD8
  7813                           
  7814 ;; *************** function _XYZ_WriteReg *****************
  7815 ;; Defined at:
  7816 ;;		line 21 in file "drv_qmc5883l.c"
  7817 ;; Parameters:    Size  Location     Type
  7818 ;;  reg             1    wreg     unsigned char 
  7819 ;;  val             1   37[COMRAM] unsigned char 
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;  reg             1   38[COMRAM] unsigned char 
  7822 ;; Return value:  Size  Location     Type
  7823 ;;                  1    wreg      void 
  7824 ;; Registers used:
  7825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7831 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7832 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7834 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7835 ;;Total ram usage:        2 bytes
  7836 ;; Hardware stack levels used:    1
  7837 ;; Hardware stack levels required when called:   15
  7838 ;; This function calls:
  7839 ;;		_i2c_writeNBytes
  7840 ;; This function is called by:
  7841 ;;		_XYZ_Init
  7842 ;;		_XYZ_setMode
  7843 ;;		_XYZ_softReset
  7844 ;; This function uses a non-reentrant model
  7845 ;;
  7846                           
  7847                           	psect	text32
  7848  003AA6                     __ptext32:
  7849                           	opt stack 0
  7850  003AA6                     _XYZ_WriteReg:
  7851                           	opt stack 13
  7852                           
  7853                           ;incstack = 0
  7854                           ;XYZ_WriteReg@reg stored from wreg
  7855  003AA6  6E27               	movwf	XYZ_WriteReg@reg,c
  7856                           
  7857                           ;drv_qmc5883l.c: 23: static unsigned char wrtBuffer[2];
  7858                           ;drv_qmc5883l.c: 24: wrtBuffer[0] = (reg);
  7859  003AA8  C027  F044         	movff	XYZ_WriteReg@reg,XYZ_WriteReg@wrtBuffer
  7860                           
  7861                           ;drv_qmc5883l.c: 25: wrtBuffer[1] = (val);
  7862  003AAC  C026  F045         	movff	XYZ_WriteReg@val,XYZ_WriteReg@wrtBuffer+1
  7863                           
  7864                           ;drv_qmc5883l.c: 26: i2c_writeNBytes(0x0D, wrtBuffer, 2);
  7865  003AB0  0E44               	movlw	low XYZ_WriteReg@wrtBuffer
  7866  003AB2  6E21               	movwf	i2c_writeNBytes@data,c
  7867  003AB4  0E00               	movlw	high XYZ_WriteReg@wrtBuffer
  7868  003AB6  6E22               	movwf	i2c_writeNBytes@data+1,c
  7869  003AB8  0E00               	movlw	0
  7870  003ABA  6E24               	movwf	i2c_writeNBytes@len+1,c
  7871  003ABC  0E02               	movlw	2
  7872  003ABE  6E23               	movwf	i2c_writeNBytes@len,c
  7873  003AC0  0E0D               	movlw	13
  7874  003AC2  ECC8  F01A         	call	_i2c_writeNBytes
  7875  003AC6  0012               	return		;funcret
  7876  003AC8                     __end_of_XYZ_WriteReg:
  7877                           	opt stack 0
  7878                           tblptru	equ	0xFF8
  7879                           tblptrh	equ	0xFF7
  7880                           tblptrl	equ	0xFF6
  7881                           tablat	equ	0xFF5
  7882                           prodh	equ	0xFF4
  7883                           prodl	equ	0xFF3
  7884                           intcon	equ	0xFF2
  7885                           postinc0	equ	0xFEE
  7886                           wreg	equ	0xFE8
  7887                           postdec1	equ	0xFE5
  7888                           fsr1l	equ	0xFE1
  7889                           indf2	equ	0xFDF
  7890                           postinc2	equ	0xFDE
  7891                           postdec2	equ	0xFDD
  7892                           fsr2h	equ	0xFDA
  7893                           fsr2l	equ	0xFD9
  7894                           status	equ	0xFD8
  7895                           
  7896 ;; *************** function _SYSTEM_Initialize *****************
  7897 ;; Defined at:
  7898 ;;		line 50 in file "mcc_generated_files/mcc.c"
  7899 ;; Parameters:    Size  Location     Type
  7900 ;;		None
  7901 ;; Auto vars:     Size  Location     Type
  7902 ;;		None
  7903 ;; Return value:  Size  Location     Type
  7904 ;;                  1    wreg      void 
  7905 ;; Registers used:
  7906 ;;		wreg, status,2, cstack
  7907 ;; Tracked objects:
  7908 ;;		On entry : 0/0
  7909 ;;		On exit  : 0/0
  7910 ;;		Unchanged: 0/0
  7911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7916 ;;Total ram usage:        0 bytes
  7917 ;; Hardware stack levels used:    1
  7918 ;; Hardware stack levels required when called:    7
  7919 ;; This function calls:
  7920 ;;		_INTERRUPT_Initialize
  7921 ;;		_OSCILLATOR_Initialize
  7922 ;;		_PIN_MANAGER_Initialize
  7923 ;;		_PMD_Initialize
  7924 ;; This function is called by:
  7925 ;;		_main
  7926 ;; This function uses a non-reentrant model
  7927 ;;
  7928                           
  7929                           	psect	text33
  7930  003D4A                     __ptext33:
  7931                           	opt stack 0
  7932  003D4A                     _SYSTEM_Initialize:
  7933                           	opt stack 23
  7934                           
  7935                           ;mcc.c: 52: INTERRUPT_Initialize();
  7936                           
  7937                           ;incstack = 0
  7938  003D4A  ECA4  F01F         	call	_INTERRUPT_Initialize	;wreg free
  7939                           
  7940                           ;mcc.c: 53: PMD_Initialize();
  7941  003D4E  EC91  F01D         	call	_PMD_Initialize	;wreg free
  7942                           
  7943                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  7944  003D52  ECF2  F017         	call	_PIN_MANAGER_Initialize	;wreg free
  7945                           
  7946                           ;mcc.c: 55: OSCILLATOR_Initialize();
  7947  003D56  EC0C  F01E         	call	_OSCILLATOR_Initialize	;wreg free
  7948  003D5A  0012               	return		;funcret
  7949  003D5C                     __end_of_SYSTEM_Initialize:
  7950                           	opt stack 0
  7951                           tblptru	equ	0xFF8
  7952                           tblptrh	equ	0xFF7
  7953                           tblptrl	equ	0xFF6
  7954                           tablat	equ	0xFF5
  7955                           prodh	equ	0xFF4
  7956                           prodl	equ	0xFF3
  7957                           intcon	equ	0xFF2
  7958                           postinc0	equ	0xFEE
  7959                           wreg	equ	0xFE8
  7960                           postdec1	equ	0xFE5
  7961                           fsr1l	equ	0xFE1
  7962                           indf2	equ	0xFDF
  7963                           postinc2	equ	0xFDE
  7964                           postdec2	equ	0xFDD
  7965                           fsr2h	equ	0xFDA
  7966                           fsr2l	equ	0xFD9
  7967                           status	equ	0xFD8
  7968                           
  7969 ;; *************** function _PMD_Initialize *****************
  7970 ;; Defined at:
  7971 ;;		line 72 in file "mcc_generated_files/mcc.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;		None
  7974 ;; Auto vars:     Size  Location     Type
  7975 ;;		None
  7976 ;; Return value:  Size  Location     Type
  7977 ;;                  1    wreg      void 
  7978 ;; Registers used:
  7979 ;;		wreg, status,2
  7980 ;; Tracked objects:
  7981 ;;		On entry : 0/0
  7982 ;;		On exit  : 0/0
  7983 ;;		Unchanged: 0/0
  7984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7989 ;;Total ram usage:        0 bytes
  7990 ;; Hardware stack levels used:    1
  7991 ;; Hardware stack levels required when called:    6
  7992 ;; This function calls:
  7993 ;;		Nothing
  7994 ;; This function is called by:
  7995 ;;		_SYSTEM_Initialize
  7996 ;; This function uses a non-reentrant model
  7997 ;;
  7998                           
  7999                           	psect	text34
  8000  003B22                     __ptext34:
  8001                           	opt stack 0
  8002  003B22                     _PMD_Initialize:
  8003                           	opt stack 23
  8004                           
  8005                           ;mcc.c: 75: PMD0 = 0x00;
  8006                           
  8007                           ;incstack = 0
  8008  003B22  0E00               	movlw	0
  8009  003B24  010E               	movlb	14	; () banked
  8010  003B26  6FE1               	movwf	225,b	;volatile
  8011                           
  8012                           ;mcc.c: 77: PMD1 = 0x00;
  8013  003B28  0E00               	movlw	0
  8014  003B2A  6FE2               	movwf	226,b	;volatile
  8015                           
  8016                           ;mcc.c: 79: PMD2 = 0x00;
  8017  003B2C  0E00               	movlw	0
  8018  003B2E  6FE3               	movwf	227,b	;volatile
  8019                           
  8020                           ;mcc.c: 81: PMD3 = 0x00;
  8021  003B30  0E00               	movlw	0
  8022  003B32  6FE4               	movwf	228,b	;volatile
  8023                           
  8024                           ;mcc.c: 83: PMD4 = 0x00;
  8025  003B34  0E00               	movlw	0
  8026  003B36  6FE5               	movwf	229,b	;volatile
  8027                           
  8028                           ;mcc.c: 85: PMD5 = 0x00;
  8029  003B38  0E00               	movlw	0
  8030  003B3A  6FE6               	movwf	230,b	;volatile
  8031                           
  8032                           ; BSR set to: 14
  8033  003B3C  0012               	return		;funcret
  8034  003B3E                     __end_of_PMD_Initialize:
  8035                           	opt stack 0
  8036                           tblptru	equ	0xFF8
  8037                           tblptrh	equ	0xFF7
  8038                           tblptrl	equ	0xFF6
  8039                           tablat	equ	0xFF5
  8040                           prodh	equ	0xFF4
  8041                           prodl	equ	0xFF3
  8042                           intcon	equ	0xFF2
  8043                           postinc0	equ	0xFEE
  8044                           wreg	equ	0xFE8
  8045                           postdec1	equ	0xFE5
  8046                           fsr1l	equ	0xFE1
  8047                           indf2	equ	0xFDF
  8048                           postinc2	equ	0xFDE
  8049                           postdec2	equ	0xFDD
  8050                           fsr2h	equ	0xFDA
  8051                           fsr2l	equ	0xFD9
  8052                           status	equ	0xFD8
  8053                           
  8054 ;; *************** function _PIN_MANAGER_Initialize *****************
  8055 ;; Defined at:
  8056 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;		None
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;		None
  8061 ;; Return value:  Size  Location     Type
  8062 ;;                  1    wreg      void 
  8063 ;; Registers used:
  8064 ;;		wreg, status,2
  8065 ;; Tracked objects:
  8066 ;;		On entry : 0/0
  8067 ;;		On exit  : 0/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8074 ;;Total ram usage:        0 bytes
  8075 ;; Hardware stack levels used:    1
  8076 ;; Hardware stack levels required when called:    6
  8077 ;; This function calls:
  8078 ;;		Nothing
  8079 ;; This function is called by:
  8080 ;;		_SYSTEM_Initialize
  8081 ;; This function uses a non-reentrant model
  8082 ;;
  8083                           
  8084                           	psect	text35
  8085  002FE4                     __ptext35:
  8086                           	opt stack 0
  8087  002FE4                     _PIN_MANAGER_Initialize:
  8088                           	opt stack 23
  8089                           
  8090                           ;pin_manager.c: 62: LATE = 0x00;
  8091                           
  8092                           ; BSR set to: 14
  8093                           ;incstack = 0
  8094  002FE4  0E00               	movlw	0
  8095  002FE6  6E87               	movwf	3975,c	;volatile
  8096                           
  8097                           ;pin_manager.c: 63: LATD = 0x00;
  8098  002FE8  0E00               	movlw	0
  8099  002FEA  6E86               	movwf	3974,c	;volatile
  8100                           
  8101                           ;pin_manager.c: 64: LATA = 0x00;
  8102  002FEC  0E00               	movlw	0
  8103  002FEE  6E83               	movwf	3971,c	;volatile
  8104                           
  8105                           ;pin_manager.c: 65: LATB = 0x00;
  8106  002FF0  0E00               	movlw	0
  8107  002FF2  6E84               	movwf	3972,c	;volatile
  8108                           
  8109                           ;pin_manager.c: 66: LATC = 0x00;
  8110  002FF4  0E00               	movlw	0
  8111  002FF6  6E85               	movwf	3973,c	;volatile
  8112                           
  8113                           ;pin_manager.c: 71: TRISE = 0x04;
  8114  002FF8  0E04               	movlw	4
  8115  002FFA  6E8C               	movwf	3980,c	;volatile
  8116                           
  8117                           ;pin_manager.c: 72: TRISA = 0xFF;
  8118  002FFC  6888               	setf	3976,c	;volatile
  8119                           
  8120                           ;pin_manager.c: 73: TRISB = 0xFF;
  8121  002FFE  6889               	setf	3977,c	;volatile
  8122                           
  8123                           ;pin_manager.c: 74: TRISC = 0xFF;
  8124  003000  688A               	setf	3978,c	;volatile
  8125                           
  8126                           ;pin_manager.c: 75: TRISD = 0x00;
  8127  003002  0E00               	movlw	0
  8128  003004  6E8B               	movwf	3979,c	;volatile
  8129                           
  8130                           ;pin_manager.c: 80: ANSELD = 0x00;
  8131  003006  0E00               	movlw	0
  8132  003008  010F               	movlb	15	; () banked
  8133  00300A  6F26               	movwf	38,b	;volatile
  8134                           
  8135                           ;pin_manager.c: 81: ANSELC = 0xE7;
  8136  00300C  0EE7               	movlw	231
  8137  00300E  6F21               	movwf	33,b	;volatile
  8138                           
  8139                           ;pin_manager.c: 82: ANSELB = 0xF8;
  8140  003010  0EF8               	movlw	248
  8141  003012  6F19               	movwf	25,b	;volatile
  8142                           
  8143                           ;pin_manager.c: 83: ANSELE = 0x04;
  8144  003014  0E04               	movlw	4
  8145  003016  6F2E               	movwf	46,b	;volatile
  8146                           
  8147                           ; BSR set to: 15
  8148                           ;pin_manager.c: 84: ANSELA = 0xFF;
  8149  003018  6911               	setf	17,b	;volatile
  8150                           
  8151                           ;pin_manager.c: 89: WPUD = 0x00;
  8152  00301A  0E00               	movlw	0
  8153  00301C  6F25               	movwf	37,b	;volatile
  8154                           
  8155                           ;pin_manager.c: 90: WPUE = 0x00;
  8156  00301E  0E00               	movlw	0
  8157  003020  6F2D               	movwf	45,b	;volatile
  8158                           
  8159                           ;pin_manager.c: 91: WPUB = 0x00;
  8160  003022  0E00               	movlw	0
  8161  003024  6F18               	movwf	24,b	;volatile
  8162                           
  8163                           ;pin_manager.c: 92: WPUA = 0x00;
  8164  003026  0E00               	movlw	0
  8165  003028  6F10               	movwf	16,b	;volatile
  8166                           
  8167                           ;pin_manager.c: 93: WPUC = 0x00;
  8168  00302A  0E00               	movlw	0
  8169  00302C  6F20               	movwf	32,b	;volatile
  8170                           
  8171                           ;pin_manager.c: 98: ODCONE = 0x00;
  8172  00302E  0E00               	movlw	0
  8173  003030  6F2C               	movwf	44,b	;volatile
  8174                           
  8175                           ;pin_manager.c: 99: ODCONA = 0x00;
  8176  003032  0E00               	movlw	0
  8177  003034  6F0F               	movwf	15,b	;volatile
  8178                           
  8179                           ;pin_manager.c: 100: ODCONB = 0x00;
  8180  003036  0E00               	movlw	0
  8181  003038  6F17               	movwf	23,b	;volatile
  8182                           
  8183                           ;pin_manager.c: 101: ODCONC = 0x00;
  8184  00303A  0E00               	movlw	0
  8185  00303C  6F1F               	movwf	31,b	;volatile
  8186                           
  8187                           ;pin_manager.c: 102: ODCOND = 0x00;
  8188  00303E  0E00               	movlw	0
  8189  003040  6F24               	movwf	36,b	;volatile
  8190                           
  8191                           ;pin_manager.c: 111: RC3PPS = 0x0F;
  8192  003042  0E0F               	movlw	15
  8193  003044  010E               	movlb	14	; () banked
  8194  003046  6FFA               	movwf	250,b	;volatile
  8195                           
  8196                           ;pin_manager.c: 112: RC4PPS = 0x10;
  8197  003048  0E10               	movlw	16
  8198  00304A  6FFB               	movwf	251,b	;volatile
  8199                           
  8200                           ; BSR set to: 14
  8201                           ;pin_manager.c: 113: SSP1CLKPPSbits.SSPCLKPPS = 0x13;
  8202  00304C  81B7               	bsf	183,0,b	;volatile
  8203  00304E  83B7               	bsf	183,1,b	;volatile
  8204  003050  95B7               	bcf	183,2,b	;volatile
  8205  003052  97B7               	bcf	183,3,b	;volatile
  8206  003054  89B7               	bsf	183,4,b	;volatile
  8207                           
  8208                           ; BSR set to: 14
  8209                           ;pin_manager.c: 114: SSP1DATPPSbits.SSPDATPPS = 0x14;
  8210  003056  91B8               	bcf	184,0,b	;volatile
  8211  003058  93B8               	bcf	184,1,b	;volatile
  8212  00305A  85B8               	bsf	184,2,b	;volatile
  8213  00305C  97B8               	bcf	184,3,b	;volatile
  8214  00305E  89B8               	bsf	184,4,b	;volatile
  8215                           
  8216                           ; BSR set to: 14
  8217  003060  0012               	return		;funcret
  8218  003062                     __end_of_PIN_MANAGER_Initialize:
  8219                           	opt stack 0
  8220                           tblptru	equ	0xFF8
  8221                           tblptrh	equ	0xFF7
  8222                           tblptrl	equ	0xFF6
  8223                           tablat	equ	0xFF5
  8224                           prodh	equ	0xFF4
  8225                           prodl	equ	0xFF3
  8226                           intcon	equ	0xFF2
  8227                           postinc0	equ	0xFEE
  8228                           wreg	equ	0xFE8
  8229                           postdec1	equ	0xFE5
  8230                           fsr1l	equ	0xFE1
  8231                           indf2	equ	0xFDF
  8232                           postinc2	equ	0xFDE
  8233                           postdec2	equ	0xFDD
  8234                           fsr2h	equ	0xFDA
  8235                           fsr2l	equ	0xFD9
  8236                           status	equ	0xFD8
  8237                           
  8238 ;; *************** function _OSCILLATOR_Initialize *****************
  8239 ;; Defined at:
  8240 ;;		line 58 in file "mcc_generated_files/mcc.c"
  8241 ;; Parameters:    Size  Location     Type
  8242 ;;		None
  8243 ;; Auto vars:     Size  Location     Type
  8244 ;;		None
  8245 ;; Return value:  Size  Location     Type
  8246 ;;                  1    wreg      void 
  8247 ;; Registers used:
  8248 ;;		wreg, status,2
  8249 ;; Tracked objects:
  8250 ;;		On entry : 0/0
  8251 ;;		On exit  : 0/0
  8252 ;;		Unchanged: 0/0
  8253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8258 ;;Total ram usage:        0 bytes
  8259 ;; Hardware stack levels used:    1
  8260 ;; Hardware stack levels required when called:    6
  8261 ;; This function calls:
  8262 ;;		Nothing
  8263 ;; This function is called by:
  8264 ;;		_SYSTEM_Initialize
  8265 ;; This function uses a non-reentrant model
  8266 ;;
  8267                           
  8268                           	psect	text36
  8269  003C18                     __ptext36:
  8270                           	opt stack 0
  8271  003C18                     _OSCILLATOR_Initialize:
  8272                           	opt stack 23
  8273                           
  8274                           ;mcc.c: 61: OSCCON1 = 0x62;
  8275                           
  8276                           ; BSR set to: 14
  8277                           ;incstack = 0
  8278  003C18  0E62               	movlw	98
  8279  003C1A  010E               	movlb	14	; () banked
  8280  003C1C  6FD8               	movwf	216,b	;volatile
  8281                           
  8282                           ;mcc.c: 63: OSCCON3 = 0x00;
  8283  003C1E  0E00               	movlw	0
  8284  003C20  6FDA               	movwf	218,b	;volatile
  8285                           
  8286                           ;mcc.c: 65: OSCEN = 0x00;
  8287  003C22  0E00               	movlw	0
  8288  003C24  6FDC               	movwf	220,b	;volatile
  8289                           
  8290                           ;mcc.c: 67: OSCFRQ = 0x02;
  8291  003C26  0E02               	movlw	2
  8292  003C28  6FDE               	movwf	222,b	;volatile
  8293                           
  8294                           ;mcc.c: 69: OSCTUNE = 0x00;
  8295  003C2A  0E00               	movlw	0
  8296  003C2C  6FDD               	movwf	221,b	;volatile
  8297                           
  8298                           ; BSR set to: 14
  8299  003C2E  0012               	return		;funcret
  8300  003C30                     __end_of_OSCILLATOR_Initialize:
  8301                           	opt stack 0
  8302                           tblptru	equ	0xFF8
  8303                           tblptrh	equ	0xFF7
  8304                           tblptrl	equ	0xFF6
  8305                           tablat	equ	0xFF5
  8306                           prodh	equ	0xFF4
  8307                           prodl	equ	0xFF3
  8308                           intcon	equ	0xFF2
  8309                           postinc0	equ	0xFEE
  8310                           wreg	equ	0xFE8
  8311                           postdec1	equ	0xFE5
  8312                           fsr1l	equ	0xFE1
  8313                           indf2	equ	0xFDF
  8314                           postinc2	equ	0xFDE
  8315                           postdec2	equ	0xFDD
  8316                           fsr2h	equ	0xFDA
  8317                           fsr2l	equ	0xFD9
  8318                           status	equ	0xFD8
  8319                           
  8320 ;; *************** function _INTERRUPT_Initialize *****************
  8321 ;; Defined at:
  8322 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8323 ;; Parameters:    Size  Location     Type
  8324 ;;		None
  8325 ;; Auto vars:     Size  Location     Type
  8326 ;;		None
  8327 ;; Return value:  Size  Location     Type
  8328 ;;                  1    wreg      void 
  8329 ;; Registers used:
  8330 ;;		None
  8331 ;; Tracked objects:
  8332 ;;		On entry : 0/0
  8333 ;;		On exit  : 0/0
  8334 ;;		Unchanged: 0/0
  8335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8340 ;;Total ram usage:        0 bytes
  8341 ;; Hardware stack levels used:    1
  8342 ;; Hardware stack levels required when called:    6
  8343 ;; This function calls:
  8344 ;;		Nothing
  8345 ;; This function is called by:
  8346 ;;		_SYSTEM_Initialize
  8347 ;; This function uses a non-reentrant model
  8348 ;;
  8349                           
  8350                           	psect	text37
  8351  003F48                     __ptext37:
  8352                           	opt stack 0
  8353  003F48                     _INTERRUPT_Initialize:
  8354                           	opt stack 23
  8355                           
  8356                           ;interrupt_manager.c: 55: INTCONbits.IPEN = 0;
  8357                           
  8358                           ; BSR set to: 14
  8359                           ;incstack = 0
  8360  003F48  9AF2               	bcf	intcon,5,c	;volatile
  8361  003F4A  0012               	return		;funcret
  8362  003F4C                     __end_of_INTERRUPT_Initialize:
  8363                           	opt stack 0
  8364                           tblptru	equ	0xFF8
  8365                           tblptrh	equ	0xFF7
  8366                           tblptrl	equ	0xFF6
  8367                           tablat	equ	0xFF5
  8368                           prodh	equ	0xFF4
  8369                           prodl	equ	0xFF3
  8370                           intcon	equ	0xFF2
  8371                           postinc0	equ	0xFEE
  8372                           wreg	equ	0xFE8
  8373                           postdec1	equ	0xFE5
  8374                           fsr1l	equ	0xFE1
  8375                           indf2	equ	0xFDF
  8376                           postinc2	equ	0xFDE
  8377                           postdec2	equ	0xFDD
  8378                           fsr2h	equ	0xFDA
  8379                           fsr2l	equ	0xFD9
  8380                           status	equ	0xFD8
  8381                           
  8382 ;; *************** function _LCD_setCursor *****************
  8383 ;; Defined at:
  8384 ;;		line 92 in file "drv_lcd.c"
  8385 ;; Parameters:    Size  Location     Type
  8386 ;;  columna         1    wreg     unsigned char 
  8387 ;;  fila            1   43[COMRAM] unsigned char 
  8388 ;; Auto vars:     Size  Location     Type
  8389 ;;  columna         1   44[COMRAM] unsigned char 
  8390 ;; Return value:  Size  Location     Type
  8391 ;;                  1    wreg      void 
  8392 ;; Registers used:
  8393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8394 ;; Tracked objects:
  8395 ;;		On entry : 0/0
  8396 ;;		On exit  : 0/0
  8397 ;;		Unchanged: 0/0
  8398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8399 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8400 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8402 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8403 ;;Total ram usage:        2 bytes
  8404 ;; Hardware stack levels used:    1
  8405 ;; Hardware stack levels required when called:   21
  8406 ;; This function calls:
  8407 ;;		_LCD_command
  8408 ;; This function is called by:
  8409 ;;		_main
  8410 ;; This function uses a non-reentrant model
  8411 ;;
  8412                           
  8413                           	psect	text38
  8414  003624                     __ptext38:
  8415                           	opt stack 0
  8416  003624                     _LCD_setCursor:
  8417                           	opt stack 9
  8418                           
  8419                           ;incstack = 0
  8420                           ;LCD_setCursor@columna stored from wreg
  8421  003624  6E2D               	movwf	LCD_setCursor@columna,c
  8422                           
  8423                           ;drv_lcd.c: 94: switch (fila)
  8424  003626  D014               	goto	l681
  8425  003628                     
  8426                           ;drv_lcd.c: 97: LCD_command(0x80 + columna);
  8427  003628  502D               	movf	LCD_setCursor@columna,w,c
  8428  00362A  0F80               	addlw	128
  8429  00362C  ECF0  F01E         	call	_LCD_command
  8430                           
  8431                           ;drv_lcd.c: 98: break;
  8432  003630  0012               	return	
  8433  003632                     
  8434                           ;drv_lcd.c: 100: LCD_command(0xC0 + columna);
  8435  003632  502D               	movf	LCD_setCursor@columna,w,c
  8436  003634  0FC0               	addlw	192
  8437  003636  ECF0  F01E         	call	_LCD_command
  8438                           
  8439                           ;drv_lcd.c: 101: break;
  8440  00363A  0012               	return	
  8441  00363C                     
  8442                           ;drv_lcd.c: 103: LCD_command(0x94 + columna);
  8443  00363C  502D               	movf	LCD_setCursor@columna,w,c
  8444  00363E  0F94               	addlw	148
  8445  003640  ECF0  F01E         	call	_LCD_command
  8446                           
  8447                           ;drv_lcd.c: 104: break;
  8448  003644  0012               	return	
  8449  003646                     
  8450                           ;drv_lcd.c: 106: LCD_command(0xD4 + columna);
  8451  003646  502D               	movf	LCD_setCursor@columna,w,c
  8452  003648  0FD4               	addlw	212
  8453  00364A  ECF0  F01E         	call	_LCD_command
  8454                           
  8455                           ;drv_lcd.c: 108: }
  8456                           
  8457                           ;drv_lcd.c: 107: break;
  8458  00364E  0012               	return	
  8459  003650                     l681:
  8460  003650  502C               	movf	LCD_setCursor@fila,w,c
  8461                           
  8462                           ; Switch size 1, requested type "space"
  8463                           ; Number of cases is 4, Range of values is 0 to 3
  8464                           ; switch strategies available:
  8465                           ; Name         Instructions Cycles
  8466                           ; simple_byte           13     7 (average)
  8467                           ;	Chosen strategy is simple_byte
  8468  003652  0A00               	xorlw	0	; case 0
  8469  003654  B4D8               	btfsc	status,2,c
  8470  003656  D7E8               	goto	l682
  8471  003658  0A01               	xorlw	1	; case 1
  8472  00365A  B4D8               	btfsc	status,2,c
  8473  00365C  D7EA               	goto	l684
  8474  00365E  0A03               	xorlw	3	; case 2
  8475  003660  B4D8               	btfsc	status,2,c
  8476  003662  D7EC               	goto	l685
  8477  003664  0A01               	xorlw	1	; case 3
  8478  003666  A4D8               	btfss	status,2,c
  8479  003668  0012               	return	
  8480  00366A  D7ED               	goto	l686
  8481  00366C                     __end_of_LCD_setCursor:
  8482                           	opt stack 0
  8483                           tblptru	equ	0xFF8
  8484                           tblptrh	equ	0xFF7
  8485                           tblptrl	equ	0xFF6
  8486                           tablat	equ	0xFF5
  8487                           prodh	equ	0xFF4
  8488                           prodl	equ	0xFF3
  8489                           intcon	equ	0xFF2
  8490                           postinc0	equ	0xFEE
  8491                           wreg	equ	0xFE8
  8492                           postdec1	equ	0xFE5
  8493                           fsr1l	equ	0xFE1
  8494                           indf2	equ	0xFDF
  8495                           postinc2	equ	0xFDE
  8496                           postdec2	equ	0xFDD
  8497                           fsr2h	equ	0xFDA
  8498                           fsr2l	equ	0xFD9
  8499                           status	equ	0xFD8
  8500                           
  8501 ;; *************** function _LCD_print *****************
  8502 ;; Defined at:
  8503 ;;		line 111 in file "drv_lcd.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;  s               2   43[COMRAM] PTR const unsigned char 
  8506 ;;		 -> vectorString(32), STR_1(9), 
  8507 ;; Auto vars:     Size  Location     Type
  8508 ;;  cs              1   45[COMRAM] unsigned char 
  8509 ;; Return value:  Size  Location     Type
  8510 ;;                  1    wreg      unsigned char 
  8511 ;; Registers used:
  8512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8513 ;; Tracked objects:
  8514 ;;		On entry : 0/0
  8515 ;;		On exit  : 0/0
  8516 ;;		Unchanged: 0/0
  8517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8518 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8519 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8521 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8522 ;;Total ram usage:        3 bytes
  8523 ;; Hardware stack levels used:    1
  8524 ;; Hardware stack levels required when called:   21
  8525 ;; This function calls:
  8526 ;;		_LCD_write
  8527 ;; This function is called by:
  8528 ;;		_main
  8529 ;; This function uses a non-reentrant model
  8530 ;;
  8531                           
  8532                           	psect	text39
  8533  003440                     __ptext39:
  8534                           	opt stack 0
  8535  003440                     _LCD_print:
  8536                           	opt stack 9
  8537                           
  8538                           ;drv_lcd.c: 113: char cs = 0;
  8539                           
  8540                           ;incstack = 0
  8541  003440  0E00               	movlw	0
  8542  003442  6E2E               	movwf	LCD_print@cs,c
  8543                           
  8544                           ;drv_lcd.c: 114: while (*s)
  8545  003444  D016               	goto	l690
  8546  003446                     
  8547                           ;drv_lcd.c: 115: {
  8548                           ;drv_lcd.c: 116: LCD_write(*s++);
  8549  003446  C02C  FFF6         	movff	LCD_print@s,tblptrl
  8550  00344A  C02D  FFF7         	movff	LCD_print@s+1,tblptrh
  8551  00344E  0E00               	movlw	low (__smallconst shr (0+16))
  8552  003450  6EF8               	movwf	tblptru,c
  8553  003452  0E0E               	movlw	(high __ramtop+-1)
  8554  003454  64F7               	cpfsgt	tblptrh,c
  8555  003456  D003               	bra	u5857
  8556  003458  0008               	tblrd		*
  8557  00345A  50F5               	movf	tablat,w,c
  8558  00345C  D005               	bra	u5850
  8559  00345E                     u5857:
  8560  00345E  CFF6 FFD9          	movff	tblptrl,fsr2l
  8561  003462  CFF7 FFDA          	movff	tblptrh,fsr2h
  8562  003466  50DF               	movf	indf2,w,c
  8563  003468                     u5850:
  8564  003468  ECE9  F01E         	call	_LCD_write
  8565  00346C  4A2C               	infsnz	LCD_print@s,f,c
  8566  00346E  2A2D               	incf	LCD_print@s+1,f,c
  8567                           
  8568                           ;drv_lcd.c: 117: cs++;
  8569  003470  2A2E               	incf	LCD_print@cs,f,c
  8570  003472                     l690:
  8571  003472  C02C  FFF6         	movff	LCD_print@s,tblptrl
  8572  003476  C02D  FFF7         	movff	LCD_print@s+1,tblptrh
  8573  00347A  0E00               	movlw	low (__smallconst shr (0+16))
  8574  00347C  6EF8               	movwf	tblptru,c
  8575  00347E  0E0E               	movlw	(high __ramtop+-1)
  8576  003480  64F7               	cpfsgt	tblptrh,c
  8577  003482  D003               	bra	u5867
  8578  003484  0008               	tblrd		*
  8579  003486  50F5               	movf	tablat,w,c
  8580  003488  D005               	bra	u5860
  8581  00348A                     u5867:
  8582  00348A  CFF6 FFD9          	movff	tblptrl,fsr2l
  8583  00348E  CFF7 FFDA          	movff	tblptrh,fsr2h
  8584  003492  50DF               	movf	indf2,w,c
  8585  003494                     u5860:
  8586  003494  0900               	iorlw	0
  8587  003496  B4D8               	btfsc	status,2,c
  8588  003498  0012               	return	
  8589  00349A  D7D5               	goto	l691
  8590  00349C                     __end_of_LCD_print:
  8591                           	opt stack 0
  8592                           tblptru	equ	0xFF8
  8593                           tblptrh	equ	0xFF7
  8594                           tblptrl	equ	0xFF6
  8595                           tablat	equ	0xFF5
  8596                           prodh	equ	0xFF4
  8597                           prodl	equ	0xFF3
  8598                           intcon	equ	0xFF2
  8599                           postinc0	equ	0xFEE
  8600                           wreg	equ	0xFE8
  8601                           postdec1	equ	0xFE5
  8602                           fsr1l	equ	0xFE1
  8603                           indf2	equ	0xFDF
  8604                           postinc2	equ	0xFDE
  8605                           postdec2	equ	0xFDD
  8606                           fsr2h	equ	0xFDA
  8607                           fsr2l	equ	0xFD9
  8608                           status	equ	0xFD8
  8609                           
  8610 ;; *************** function _LCD_write *****************
  8611 ;; Defined at:
  8612 ;;		line 228 in file "drv_lcd.c"
  8613 ;; Parameters:    Size  Location     Type
  8614 ;;  value           1    wreg     unsigned char 
  8615 ;; Auto vars:     Size  Location     Type
  8616 ;;  value           1   42[COMRAM] unsigned char 
  8617 ;; Return value:  Size  Location     Type
  8618 ;;                  1    wreg      void 
  8619 ;; Registers used:
  8620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8621 ;; Tracked objects:
  8622 ;;		On entry : 0/0
  8623 ;;		On exit  : 0/0
  8624 ;;		Unchanged: 0/0
  8625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8627 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8629 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8630 ;;Total ram usage:        1 bytes
  8631 ;; Hardware stack levels used:    1
  8632 ;; Hardware stack levels required when called:   20
  8633 ;; This function calls:
  8634 ;;		_LCD_send
  8635 ;; This function is called by:
  8636 ;;		_LCD_print
  8637 ;;		_LCD_createChar
  8638 ;; This function uses a non-reentrant model
  8639 ;;
  8640                           
  8641                           	psect	text40
  8642  003DD2                     __ptext40:
  8643                           	opt stack 0
  8644  003DD2                     _LCD_write:
  8645                           	opt stack 9
  8646                           
  8647                           ;incstack = 0
  8648                           ;LCD_write@value stored from wreg
  8649  003DD2  6E2B               	movwf	LCD_write@value,c
  8650                           
  8651                           ;drv_lcd.c: 230: LCD_send(value, 1);
  8652  003DD4  0E01               	movlw	1
  8653  003DD6  6E29               	movwf	LCD_send@mode,c
  8654  003DD8  502B               	movf	LCD_write@value,w,c
  8655  003DDA  EC18  F01E         	call	_LCD_send
  8656  003DDE  0012               	return		;funcret
  8657  003DE0                     __end_of_LCD_write:
  8658                           	opt stack 0
  8659                           tblptru	equ	0xFF8
  8660                           tblptrh	equ	0xFF7
  8661                           tblptrl	equ	0xFF6
  8662                           tablat	equ	0xFF5
  8663                           prodh	equ	0xFF4
  8664                           prodl	equ	0xFF3
  8665                           intcon	equ	0xFF2
  8666                           postinc0	equ	0xFEE
  8667                           wreg	equ	0xFE8
  8668                           postdec1	equ	0xFE5
  8669                           fsr1l	equ	0xFE1
  8670                           indf2	equ	0xFDF
  8671                           postinc2	equ	0xFDE
  8672                           postdec2	equ	0xFDD
  8673                           fsr2h	equ	0xFDA
  8674                           fsr2l	equ	0xFD9
  8675                           status	equ	0xFD8
  8676                           
  8677 ;; *************** function _LCD_init *****************
  8678 ;; Defined at:
  8679 ;;		line 6 in file "drv_lcd.c"
  8680 ;; Parameters:    Size  Location     Type
  8681 ;;		None
  8682 ;; Auto vars:     Size  Location     Type
  8683 ;;		None
  8684 ;; Return value:  Size  Location     Type
  8685 ;;                  1    wreg      void 
  8686 ;; Registers used:
  8687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8688 ;; Tracked objects:
  8689 ;;		On entry : 0/0
  8690 ;;		On exit  : 0/0
  8691 ;;		Unchanged: 0/0
  8692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8695 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8696 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8697 ;;Total ram usage:        1 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:   22
  8700 ;; This function calls:
  8701 ;;		_LCD_BL_SET
  8702 ;;		_LCD_clear
  8703 ;;		_LCD_command
  8704 ;;		_LCD_display
  8705 ;;		_LCD_write4bits
  8706 ;; This function is called by:
  8707 ;;		_main
  8708 ;; This function uses a non-reentrant model
  8709 ;;
  8710                           
  8711                           	psect	text41
  8712  0032B0                     __ptext41:
  8713                           	opt stack 0
  8714  0032B0                     _LCD_init:
  8715                           	opt stack 8
  8716                           
  8717                           ;drv_lcd.c: 8: _displayfunction = (0x00 | 0x08);
  8718                           
  8719                           ;incstack = 0
  8720  0032B0  0E08               	movlw	8
  8721  0032B2  6E49               	movwf	__displayfunction,c
  8722                           
  8723                           ;drv_lcd.c: 25: _delay((unsigned long)((50)*(1000000/4000.0)));
  8724  0032B4  0E11               	movlw	17
  8725  0032B6  6E2C               	movwf	??_LCD_init& (0+255),c
  8726  0032B8  0E3A               	movlw	58
  8727  0032BA                     u6497:
  8728  0032BA  2EE8               	decfsz	wreg,f,c
  8729  0032BC  D7FE               	bra	u6497
  8730  0032BE  2E2C               	decfsz	??_LCD_init& (0+255),f,c
  8731  0032C0  D7FC               	bra	u6497
  8732  0032C2  D000               	nop2	
  8733                           
  8734                           ;drv_lcd.c: 38: LCD_I2C_BUFFER = 0x00;
  8735  0032C4  0E00               	movlw	0
  8736  0032C6  6E43               	movwf	_LCD_I2C_BUFFER,c
  8737                           
  8738                           ;drv_lcd.c: 39: LCD_BL_SET(1);
  8739  0032C8  0E01               	movlw	1
  8740  0032CA  EC9B  F01E         	call	_LCD_BL_SET
  8741                           
  8742                           ;drv_lcd.c: 48: LCD_write4bits(0x03);
  8743  0032CE  0E03               	movlw	3
  8744  0032D0  EC24  F01E         	call	_LCD_write4bits
  8745                           
  8746                           ;drv_lcd.c: 49: _delay((unsigned long)((4500)*(1000000/4000000.0)));
  8747  0032D4  0EE1               	movlw	225
  8748  0032D6                     u6507:
  8749  0032D6  D000               	nop2	
  8750  0032D8  2EE8               	decfsz	wreg,f,c
  8751  0032DA  D7FD               	bra	u6507
  8752                           
  8753                           ;drv_lcd.c: 52: LCD_write4bits(0x03);
  8754  0032DC  0E03               	movlw	3
  8755  0032DE  EC24  F01E         	call	_LCD_write4bits
  8756                           
  8757                           ;drv_lcd.c: 53: _delay((unsigned long)((4500)*(1000000/4000000.0)));
  8758  0032E2  0EE1               	movlw	225
  8759  0032E4                     u6517:
  8760  0032E4  D000               	nop2	
  8761  0032E6  2EE8               	decfsz	wreg,f,c
  8762  0032E8  D7FD               	bra	u6517
  8763                           
  8764                           ;drv_lcd.c: 56: LCD_write4bits(0x03);
  8765  0032EA  0E03               	movlw	3
  8766  0032EC  EC24  F01E         	call	_LCD_write4bits
  8767                           
  8768                           ;drv_lcd.c: 57: _delay((unsigned long)((150)*(1000000/4000000.0)));
  8769  0032F0  0E0C               	movlw	12
  8770  0032F2                     u6527:
  8771  0032F2  2EE8               	decfsz	wreg,f,c
  8772  0032F4  D7FE               	bra	u6527
  8773  0032F6  F000               	nop	
  8774                           
  8775                           ;drv_lcd.c: 60: LCD_write4bits(0x02);
  8776  0032F8  0E02               	movlw	2
  8777  0032FA  EC24  F01E         	call	_LCD_write4bits
  8778                           
  8779                           ;drv_lcd.c: 63: LCD_command(0x20 | _displayfunction);
  8780  0032FE  5049               	movf	__displayfunction,w,c
  8781  003300  0920               	iorlw	32
  8782  003302  ECF0  F01E         	call	_LCD_command
  8783                           
  8784                           ;drv_lcd.c: 66: _displaycontrol = 0x04 | 0x00 | 0x00;
  8785  003306  0E04               	movlw	4
  8786  003308  6E42               	movwf	__displaycontrol,c
  8787                           
  8788                           ;drv_lcd.c: 67: LCD_display();
  8789  00330A  EC36  F01F         	call	_LCD_display	;wreg free
  8790                           
  8791                           ;drv_lcd.c: 70: LCD_clear();
  8792  00330E  ECC9  F01E         	call	_LCD_clear	;wreg free
  8793                           
  8794                           ;drv_lcd.c: 73: _displaymode = 0x02 | 0x00;
  8795  003312  0E02               	movlw	2
  8796  003314  6E41               	movwf	__displaymode,c
  8797                           
  8798                           ;drv_lcd.c: 75: LCD_command(0x04 | _displaymode);
  8799  003316  5041               	movf	__displaymode,w,c
  8800  003318  0904               	iorlw	4
  8801  00331A  ECF0  F01E         	call	_LCD_command
  8802  00331E  0012               	return		;funcret
  8803  003320                     __end_of_LCD_init:
  8804                           	opt stack 0
  8805                           tblptru	equ	0xFF8
  8806                           tblptrh	equ	0xFF7
  8807                           tblptrl	equ	0xFF6
  8808                           tablat	equ	0xFF5
  8809                           prodh	equ	0xFF4
  8810                           prodl	equ	0xFF3
  8811                           intcon	equ	0xFF2
  8812                           postinc0	equ	0xFEE
  8813                           wreg	equ	0xFE8
  8814                           postdec1	equ	0xFE5
  8815                           fsr1l	equ	0xFE1
  8816                           indf2	equ	0xFDF
  8817                           postinc2	equ	0xFDE
  8818                           postdec2	equ	0xFDD
  8819                           fsr2h	equ	0xFDA
  8820                           fsr2l	equ	0xFD9
  8821                           status	equ	0xFD8
  8822                           
  8823 ;; *************** function _LCD_display *****************
  8824 ;; Defined at:
  8825 ;;		line 130 in file "drv_lcd.c"
  8826 ;; Parameters:    Size  Location     Type
  8827 ;;		None
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;		None
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  1    wreg      void 
  8832 ;; Registers used:
  8833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8834 ;; Tracked objects:
  8835 ;;		On entry : 0/0
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8843 ;;Total ram usage:        0 bytes
  8844 ;; Hardware stack levels used:    1
  8845 ;; Hardware stack levels required when called:   21
  8846 ;; This function calls:
  8847 ;;		_LCD_command
  8848 ;; This function is called by:
  8849 ;;		_LCD_init
  8850 ;; This function uses a non-reentrant model
  8851 ;;
  8852                           
  8853                           	psect	text42
  8854  003E6C                     __ptext42:
  8855                           	opt stack 0
  8856  003E6C                     _LCD_display:
  8857                           	opt stack 8
  8858                           
  8859                           ;drv_lcd.c: 132: _displaycontrol |= 0x04;
  8860                           
  8861                           ;incstack = 0
  8862  003E6C  8442               	bsf	__displaycontrol,2,c
  8863                           
  8864                           ;drv_lcd.c: 133: LCD_command(0x08 | _displaycontrol);
  8865  003E6E  5042               	movf	__displaycontrol,w,c
  8866  003E70  0908               	iorlw	8
  8867  003E72  ECF0  F01E         	call	_LCD_command
  8868  003E76  0012               	return		;funcret
  8869  003E78                     __end_of_LCD_display:
  8870                           	opt stack 0
  8871                           tblptru	equ	0xFF8
  8872                           tblptrh	equ	0xFF7
  8873                           tblptrl	equ	0xFF6
  8874                           tablat	equ	0xFF5
  8875                           prodh	equ	0xFF4
  8876                           prodl	equ	0xFF3
  8877                           intcon	equ	0xFF2
  8878                           postinc0	equ	0xFEE
  8879                           wreg	equ	0xFE8
  8880                           postdec1	equ	0xFE5
  8881                           fsr1l	equ	0xFE1
  8882                           indf2	equ	0xFDF
  8883                           postinc2	equ	0xFDE
  8884                           postdec2	equ	0xFDD
  8885                           fsr2h	equ	0xFDA
  8886                           fsr2l	equ	0xFD9
  8887                           status	equ	0xFD8
  8888                           
  8889 ;; *************** function _LCD_clear *****************
  8890 ;; Defined at:
  8891 ;;		line 80 in file "drv_lcd.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;		None
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;		None
  8896 ;; Return value:  Size  Location     Type
  8897 ;;                  1    wreg      void 
  8898 ;; Registers used:
  8899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8900 ;; Tracked objects:
  8901 ;;		On entry : 0/0
  8902 ;;		On exit  : 0/0
  8903 ;;		Unchanged: 0/0
  8904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8909 ;;Total ram usage:        0 bytes
  8910 ;; Hardware stack levels used:    1
  8911 ;; Hardware stack levels required when called:   21
  8912 ;; This function calls:
  8913 ;;		_LCD_command
  8914 ;; This function is called by:
  8915 ;;		_LCD_init
  8916 ;; This function uses a non-reentrant model
  8917 ;;
  8918                           
  8919                           	psect	text43
  8920  003D92                     __ptext43:
  8921                           	opt stack 0
  8922  003D92                     _LCD_clear:
  8923                           	opt stack 8
  8924                           
  8925                           ;drv_lcd.c: 82: LCD_command(0x01);
  8926                           
  8927                           ;incstack = 0
  8928  003D92  0E01               	movlw	1
  8929  003D94  ECF0  F01E         	call	_LCD_command
  8930                           
  8931                           ;drv_lcd.c: 83: _delay((unsigned long)((2)*(1000000/4000.0)));
  8932  003D98  0EA6               	movlw	166
  8933  003D9A                     u6537:
  8934  003D9A  2EE8               	decfsz	wreg,f,c
  8935  003D9C  D7FE               	bra	u6537
  8936  003D9E  D000               	nop2	
  8937  003DA0  0012               	return		;funcret
  8938  003DA2                     __end_of_LCD_clear:
  8939                           	opt stack 0
  8940                           tblptru	equ	0xFF8
  8941                           tblptrh	equ	0xFF7
  8942                           tblptrl	equ	0xFF6
  8943                           tablat	equ	0xFF5
  8944                           prodh	equ	0xFF4
  8945                           prodl	equ	0xFF3
  8946                           intcon	equ	0xFF2
  8947                           postinc0	equ	0xFEE
  8948                           wreg	equ	0xFE8
  8949                           postdec1	equ	0xFE5
  8950                           fsr1l	equ	0xFE1
  8951                           indf2	equ	0xFDF
  8952                           postinc2	equ	0xFDE
  8953                           postdec2	equ	0xFDD
  8954                           fsr2h	equ	0xFDA
  8955                           fsr2l	equ	0xFD9
  8956                           status	equ	0xFD8
  8957                           
  8958 ;; *************** function _LCD_command *****************
  8959 ;; Defined at:
  8960 ;;		line 223 in file "drv_lcd.c"
  8961 ;; Parameters:    Size  Location     Type
  8962 ;;  value           1    wreg     unsigned char 
  8963 ;; Auto vars:     Size  Location     Type
  8964 ;;  value           1   42[COMRAM] unsigned char 
  8965 ;; Return value:  Size  Location     Type
  8966 ;;                  1    wreg      void 
  8967 ;; Registers used:
  8968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8969 ;; Tracked objects:
  8970 ;;		On entry : 0/0
  8971 ;;		On exit  : 0/0
  8972 ;;		Unchanged: 0/0
  8973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8975 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8977 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8978 ;;Total ram usage:        1 bytes
  8979 ;; Hardware stack levels used:    1
  8980 ;; Hardware stack levels required when called:   20
  8981 ;; This function calls:
  8982 ;;		_LCD_send
  8983 ;; This function is called by:
  8984 ;;		_LCD_init
  8985 ;;		_LCD_clear
  8986 ;;		_LCD_setCursor
  8987 ;;		_LCD_display
  8988 ;;		_LCD_home
  8989 ;;		_LCD_noDisplay
  8990 ;;		_LCD_noCursor
  8991 ;;		_LCD_cursor
  8992 ;;		_LCD_noBlink
  8993 ;;		_LCD_blink
  8994 ;;		_LCD_scrollDisplayLeft
  8995 ;;		_LCD_scrollDisplayRight
  8996 ;;		_LCD_leftToRight
  8997 ;;		_LCD_rightToLeft
  8998 ;;		_LCD_autoscroll
  8999 ;;		_LCD_noAutoscroll
  9000 ;;		_LCD_createChar
  9001 ;; This function uses a non-reentrant model
  9002 ;;
  9003                           
  9004                           	psect	text44
  9005  003DE0                     __ptext44:
  9006                           	opt stack 0
  9007  003DE0                     _LCD_command:
  9008                           	opt stack 9
  9009                           
  9010                           ;incstack = 0
  9011                           ;LCD_command@value stored from wreg
  9012  003DE0  6E2B               	movwf	LCD_command@value,c
  9013                           
  9014                           ;drv_lcd.c: 225: LCD_send(value, 0);
  9015  003DE2  0E00               	movlw	0
  9016  003DE4  6E29               	movwf	LCD_send@mode,c
  9017  003DE6  502B               	movf	LCD_command@value,w,c
  9018  003DE8  EC18  F01E         	call	_LCD_send
  9019  003DEC  0012               	return		;funcret
  9020  003DEE                     __end_of_LCD_command:
  9021                           	opt stack 0
  9022                           tblptru	equ	0xFF8
  9023                           tblptrh	equ	0xFF7
  9024                           tblptrl	equ	0xFF6
  9025                           tablat	equ	0xFF5
  9026                           prodh	equ	0xFF4
  9027                           prodl	equ	0xFF3
  9028                           intcon	equ	0xFF2
  9029                           postinc0	equ	0xFEE
  9030                           wreg	equ	0xFE8
  9031                           postdec1	equ	0xFE5
  9032                           fsr1l	equ	0xFE1
  9033                           indf2	equ	0xFDF
  9034                           postinc2	equ	0xFDE
  9035                           postdec2	equ	0xFDD
  9036                           fsr2h	equ	0xFDA
  9037                           fsr2l	equ	0xFD9
  9038                           status	equ	0xFD8
  9039                           
  9040 ;; *************** function _LCD_send *****************
  9041 ;; Defined at:
  9042 ;;		line 239 in file "drv_lcd.c"
  9043 ;; Parameters:    Size  Location     Type
  9044 ;;  value           1    wreg     unsigned char 
  9045 ;;  mode            1   40[COMRAM] unsigned char 
  9046 ;; Auto vars:     Size  Location     Type
  9047 ;;  value           1   41[COMRAM] unsigned char 
  9048 ;; Return value:  Size  Location     Type
  9049 ;;                  1    wreg      void 
  9050 ;; Registers used:
  9051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9052 ;; Tracked objects:
  9053 ;;		On entry : 0/0
  9054 ;;		On exit  : 0/0
  9055 ;;		Unchanged: 0/0
  9056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9057 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9058 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9060 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9061 ;;Total ram usage:        2 bytes
  9062 ;; Hardware stack levels used:    1
  9063 ;; Hardware stack levels required when called:   19
  9064 ;; This function calls:
  9065 ;;		_LCD_RS_SET
  9066 ;;		_LCD_write4bits
  9067 ;; This function is called by:
  9068 ;;		_LCD_command
  9069 ;;		_LCD_write
  9070 ;; This function uses a non-reentrant model
  9071 ;;
  9072                           
  9073                           	psect	text45
  9074  003C30                     __ptext45:
  9075                           	opt stack 0
  9076  003C30                     _LCD_send:
  9077                           	opt stack 9
  9078                           
  9079                           ;incstack = 0
  9080                           ;LCD_send@value stored from wreg
  9081  003C30  6E2A               	movwf	LCD_send@value,c
  9082                           
  9083                           ;drv_lcd.c: 241: LCD_RS_SET(mode);
  9084  003C32  5029               	movf	LCD_send@mode,w,c
  9085  003C34  EC91  F01E         	call	_LCD_RS_SET
  9086                           
  9087                           ;drv_lcd.c: 242: LCD_write4bits(value >> 4);
  9088  003C38  382A               	swapf	LCD_send@value,w,c
  9089  003C3A  0B0F               	andlw	15
  9090  003C3C  EC24  F01E         	call	_LCD_write4bits
  9091                           
  9092                           ;drv_lcd.c: 243: LCD_write4bits(value);
  9093  003C40  502A               	movf	LCD_send@value,w,c
  9094  003C42  EC24  F01E         	call	_LCD_write4bits
  9095  003C46  0012               	return		;funcret
  9096  003C48                     __end_of_LCD_send:
  9097                           	opt stack 0
  9098                           tblptru	equ	0xFF8
  9099                           tblptrh	equ	0xFF7
  9100                           tblptrl	equ	0xFF6
  9101                           tablat	equ	0xFF5
  9102                           prodh	equ	0xFF4
  9103                           prodl	equ	0xFF3
  9104                           intcon	equ	0xFF2
  9105                           postinc0	equ	0xFEE
  9106                           wreg	equ	0xFE8
  9107                           postdec1	equ	0xFE5
  9108                           fsr1l	equ	0xFE1
  9109                           indf2	equ	0xFDF
  9110                           postinc2	equ	0xFDE
  9111                           postdec2	equ	0xFDD
  9112                           fsr2h	equ	0xFDA
  9113                           fsr2l	equ	0xFD9
  9114                           status	equ	0xFD8
  9115                           
  9116 ;; *************** function _LCD_write4bits *****************
  9117 ;; Defined at:
  9118 ;;		line 302 in file "drv_lcd.c"
  9119 ;; Parameters:    Size  Location     Type
  9120 ;;  a               1    wreg     unsigned char 
  9121 ;; Auto vars:     Size  Location     Type
  9122 ;;  a               1   39[COMRAM] unsigned char 
  9123 ;; Return value:  Size  Location     Type
  9124 ;;                  1    wreg      void 
  9125 ;; Registers used:
  9126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9127 ;; Tracked objects:
  9128 ;;		On entry : 0/0
  9129 ;;		On exit  : 0/0
  9130 ;;		Unchanged: 0/0
  9131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9133 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9134 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9135 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9136 ;;Total ram usage:        2 bytes
  9137 ;; Hardware stack levels used:    1
  9138 ;; Hardware stack levels required when called:   18
  9139 ;; This function calls:
  9140 ;;		_LCD_pulseEnable
  9141 ;; This function is called by:
  9142 ;;		_LCD_init
  9143 ;;		_LCD_send
  9144 ;; This function uses a non-reentrant model
  9145 ;;
  9146                           
  9147                           	psect	text46
  9148  003C48                     __ptext46:
  9149                           	opt stack 0
  9150  003C48                     _LCD_write4bits:
  9151                           	opt stack 9
  9152                           
  9153                           ;incstack = 0
  9154                           ;LCD_write4bits@a stored from wreg
  9155  003C48  6E28               	movwf	LCD_write4bits@a,c
  9156                           
  9157                           ;drv_lcd.c: 337: LCD_I2C_BUFFER = (a << 4) | (LCD_I2C_BUFFER & 0x0F);
  9158  003C4A  C043  F027         	movff	_LCD_I2C_BUFFER,??_LCD_write4bits
  9159  003C4E  0E0F               	movlw	15
  9160  003C50  1627               	andwf	??_LCD_write4bits,f,c
  9161  003C52  3828               	swapf	LCD_write4bits@a,w,c
  9162  003C54  0BF0               	andlw	240
  9163  003C56  1027               	iorwf	??_LCD_write4bits,w,c
  9164  003C58  6E43               	movwf	_LCD_I2C_BUFFER,c
  9165                           
  9166                           ;drv_lcd.c: 339: LCD_pulseEnable();
  9167  003C5A  EC9F  F01D         	call	_LCD_pulseEnable	;wreg free
  9168  003C5E  0012               	return		;funcret
  9169  003C60                     __end_of_LCD_write4bits:
  9170                           	opt stack 0
  9171                           tblptru	equ	0xFF8
  9172                           tblptrh	equ	0xFF7
  9173                           tblptrl	equ	0xFF6
  9174                           tablat	equ	0xFF5
  9175                           prodh	equ	0xFF4
  9176                           prodl	equ	0xFF3
  9177                           intcon	equ	0xFF2
  9178                           postinc0	equ	0xFEE
  9179                           wreg	equ	0xFE8
  9180                           postdec1	equ	0xFE5
  9181                           fsr1l	equ	0xFE1
  9182                           indf2	equ	0xFDF
  9183                           postinc2	equ	0xFDE
  9184                           postdec2	equ	0xFDD
  9185                           fsr2h	equ	0xFDA
  9186                           fsr2l	equ	0xFD9
  9187                           status	equ	0xFD8
  9188                           
  9189 ;; *************** function _LCD_pulseEnable *****************
  9190 ;; Defined at:
  9191 ;;		line 292 in file "drv_lcd.c"
  9192 ;; Parameters:    Size  Location     Type
  9193 ;;		None
  9194 ;; Auto vars:     Size  Location     Type
  9195 ;;		None
  9196 ;; Return value:  Size  Location     Type
  9197 ;;                  1    wreg      void 
  9198 ;; Registers used:
  9199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9200 ;; Tracked objects:
  9201 ;;		On entry : 0/0
  9202 ;;		On exit  : 0/0
  9203 ;;		Unchanged: 0/0
  9204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9209 ;;Total ram usage:        0 bytes
  9210 ;; Hardware stack levels used:    1
  9211 ;; Hardware stack levels required when called:   17
  9212 ;; This function calls:
  9213 ;;		_LCD_EN_SET
  9214 ;; This function is called by:
  9215 ;;		_LCD_write4bits
  9216 ;; This function uses a non-reentrant model
  9217 ;;
  9218                           
  9219                           	psect	text47
  9220  003B3E                     __ptext47:
  9221                           	opt stack 0
  9222  003B3E                     _LCD_pulseEnable:
  9223                           	opt stack 9
  9224                           
  9225                           ;drv_lcd.c: 294: LCD_EN_SET(0);
  9226                           
  9227                           ;incstack = 0
  9228  003B3E  0E00               	movlw	0
  9229  003B40  EC87  F01E         	call	_LCD_EN_SET
  9230                           
  9231                           ;drv_lcd.c: 295: _delay((unsigned long)((1)*(1000000/4000000.0)));
  9232                           ;drv_lcd.c: 296: LCD_EN_SET(1);
  9233  003B44  0E01               	movlw	1
  9234  003B46  EC87  F01E         	call	_LCD_EN_SET
  9235                           
  9236                           ;drv_lcd.c: 297: _delay((unsigned long)((1)*(1000000/4000000.0)));
  9237                           ;drv_lcd.c: 298: LCD_EN_SET(0);
  9238  003B4A  0E00               	movlw	0
  9239  003B4C  EC87  F01E         	call	_LCD_EN_SET
  9240                           
  9241                           ;drv_lcd.c: 299: _delay((unsigned long)((100)*(1000000/4000000.0)));
  9242  003B50  0E08               	movlw	8
  9243  003B52                     u6547:
  9244  003B52  2EE8               	decfsz	wreg,f,c
  9245  003B54  D7FE               	bra	u6547
  9246  003B56  F000               	nop	
  9247  003B58  0012               	return		;funcret
  9248  003B5A                     __end_of_LCD_pulseEnable:
  9249                           	opt stack 0
  9250                           tblptru	equ	0xFF8
  9251                           tblptrh	equ	0xFF7
  9252                           tblptrl	equ	0xFF6
  9253                           tablat	equ	0xFF5
  9254                           prodh	equ	0xFF4
  9255                           prodl	equ	0xFF3
  9256                           intcon	equ	0xFF2
  9257                           postinc0	equ	0xFEE
  9258                           wreg	equ	0xFE8
  9259                           postdec1	equ	0xFE5
  9260                           fsr1l	equ	0xFE1
  9261                           indf2	equ	0xFDF
  9262                           postinc2	equ	0xFDE
  9263                           postdec2	equ	0xFDD
  9264                           fsr2h	equ	0xFDA
  9265                           fsr2l	equ	0xFD9
  9266                           status	equ	0xFD8
  9267                           
  9268 ;; *************** function _LCD_EN_SET *****************
  9269 ;; Defined at:
  9270 ;;		line 259 in file "drv_lcd.c"
  9271 ;; Parameters:    Size  Location     Type
  9272 ;;  value           1    wreg     unsigned char 
  9273 ;; Auto vars:     Size  Location     Type
  9274 ;;  value           1   37[COMRAM] unsigned char 
  9275 ;; Return value:  Size  Location     Type
  9276 ;;                  1    wreg      void 
  9277 ;; Registers used:
  9278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9279 ;; Tracked objects:
  9280 ;;		On entry : 0/0
  9281 ;;		On exit  : 0/0
  9282 ;;		Unchanged: 0/0
  9283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9285 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9287 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9288 ;;Total ram usage:        1 bytes
  9289 ;; Hardware stack levels used:    1
  9290 ;; Hardware stack levels required when called:   16
  9291 ;; This function calls:
  9292 ;;		_LCD_writeI2C
  9293 ;; This function is called by:
  9294 ;;		_LCD_pulseEnable
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298                           	psect	text48
  9299  003D0E                     __ptext48:
  9300                           	opt stack 0
  9301  003D0E                     _LCD_EN_SET:
  9302                           	opt stack 9
  9303                           
  9304                           ;incstack = 0
  9305                           ;LCD_EN_SET@value stored from wreg
  9306  003D0E  6E26               	movwf	LCD_EN_SET@value,c
  9307                           
  9308                           ;drv_lcd.c: 264: if (value)
  9309  003D10  5026               	movf	LCD_EN_SET@value,w,c
  9310  003D12  B4D8               	btfsc	status,2,c
  9311  003D14  D002               	goto	l751
  9312                           
  9313                           ;drv_lcd.c: 265: LCD_I2C_BUFFER |= 4;
  9314  003D16  8443               	bsf	_LCD_I2C_BUFFER,2,c
  9315  003D18  D001               	goto	l752
  9316  003D1A                     l751:
  9317                           
  9318                           ;drv_lcd.c: 266: else
  9319                           ;drv_lcd.c: 267: LCD_I2C_BUFFER &= ~4;
  9320  003D1A  9443               	bcf	_LCD_I2C_BUFFER,2,c
  9321  003D1C                     l752:
  9322                           
  9323                           ;drv_lcd.c: 268: LCD_writeI2C();
  9324  003D1C  ECAD  F01D         	call	_LCD_writeI2C	;wreg free
  9325  003D20  0012               	return		;funcret
  9326  003D22                     __end_of_LCD_EN_SET:
  9327                           	opt stack 0
  9328                           tblptru	equ	0xFF8
  9329                           tblptrh	equ	0xFF7
  9330                           tblptrl	equ	0xFF6
  9331                           tablat	equ	0xFF5
  9332                           prodh	equ	0xFF4
  9333                           prodl	equ	0xFF3
  9334                           intcon	equ	0xFF2
  9335                           postinc0	equ	0xFEE
  9336                           wreg	equ	0xFE8
  9337                           postdec1	equ	0xFE5
  9338                           fsr1l	equ	0xFE1
  9339                           indf2	equ	0xFDF
  9340                           postinc2	equ	0xFDE
  9341                           postdec2	equ	0xFDD
  9342                           fsr2h	equ	0xFDA
  9343                           fsr2l	equ	0xFD9
  9344                           status	equ	0xFD8
  9345                           
  9346 ;; *************** function _LCD_RS_SET *****************
  9347 ;; Defined at:
  9348 ;;		line 246 in file "drv_lcd.c"
  9349 ;; Parameters:    Size  Location     Type
  9350 ;;  value           1    wreg     unsigned char 
  9351 ;; Auto vars:     Size  Location     Type
  9352 ;;  value           1   37[COMRAM] unsigned char 
  9353 ;; Return value:  Size  Location     Type
  9354 ;;                  1    wreg      void 
  9355 ;; Registers used:
  9356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9357 ;; Tracked objects:
  9358 ;;		On entry : 0/0
  9359 ;;		On exit  : 0/0
  9360 ;;		Unchanged: 0/0
  9361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9363 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9365 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9366 ;;Total ram usage:        1 bytes
  9367 ;; Hardware stack levels used:    1
  9368 ;; Hardware stack levels required when called:   16
  9369 ;; This function calls:
  9370 ;;		_LCD_writeI2C
  9371 ;; This function is called by:
  9372 ;;		_LCD_send
  9373 ;; This function uses a non-reentrant model
  9374 ;;
  9375                           
  9376                           	psect	text49
  9377  003D22                     __ptext49:
  9378                           	opt stack 0
  9379  003D22                     _LCD_RS_SET:
  9380                           	opt stack 11
  9381                           
  9382                           ;incstack = 0
  9383                           ;LCD_RS_SET@value stored from wreg
  9384  003D22  6E26               	movwf	LCD_RS_SET@value,c
  9385                           
  9386                           ;drv_lcd.c: 251: if (value)
  9387  003D24  5026               	movf	LCD_RS_SET@value,w,c
  9388  003D26  B4D8               	btfsc	status,2,c
  9389  003D28  D002               	goto	l746
  9390                           
  9391                           ;drv_lcd.c: 252: LCD_I2C_BUFFER |= 1;
  9392  003D2A  8043               	bsf	_LCD_I2C_BUFFER,0,c
  9393  003D2C  D001               	goto	l747
  9394  003D2E                     l746:
  9395                           
  9396                           ;drv_lcd.c: 253: else
  9397                           ;drv_lcd.c: 254: LCD_I2C_BUFFER &= ~1;
  9398  003D2E  9043               	bcf	_LCD_I2C_BUFFER,0,c
  9399  003D30                     l747:
  9400                           
  9401                           ;drv_lcd.c: 255: LCD_writeI2C();
  9402  003D30  ECAD  F01D         	call	_LCD_writeI2C	;wreg free
  9403  003D34  0012               	return		;funcret
  9404  003D36                     __end_of_LCD_RS_SET:
  9405                           	opt stack 0
  9406                           tblptru	equ	0xFF8
  9407                           tblptrh	equ	0xFF7
  9408                           tblptrl	equ	0xFF6
  9409                           tablat	equ	0xFF5
  9410                           prodh	equ	0xFF4
  9411                           prodl	equ	0xFF3
  9412                           intcon	equ	0xFF2
  9413                           postinc0	equ	0xFEE
  9414                           wreg	equ	0xFE8
  9415                           postdec1	equ	0xFE5
  9416                           fsr1l	equ	0xFE1
  9417                           indf2	equ	0xFDF
  9418                           postinc2	equ	0xFDE
  9419                           postdec2	equ	0xFDD
  9420                           fsr2h	equ	0xFDA
  9421                           fsr2l	equ	0xFD9
  9422                           status	equ	0xFD8
  9423                           
  9424 ;; *************** function _LCD_BL_SET *****************
  9425 ;; Defined at:
  9426 ;;		line 273 in file "drv_lcd.c"
  9427 ;; Parameters:    Size  Location     Type
  9428 ;;  value           1    wreg     unsigned char 
  9429 ;; Auto vars:     Size  Location     Type
  9430 ;;  value           1   37[COMRAM] unsigned char 
  9431 ;; Return value:  Size  Location     Type
  9432 ;;                  1    wreg      void 
  9433 ;; Registers used:
  9434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9435 ;; Tracked objects:
  9436 ;;		On entry : 0/0
  9437 ;;		On exit  : 0/0
  9438 ;;		Unchanged: 0/0
  9439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9441 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9443 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9444 ;;Total ram usage:        1 bytes
  9445 ;; Hardware stack levels used:    1
  9446 ;; Hardware stack levels required when called:   16
  9447 ;; This function calls:
  9448 ;;		_LCD_writeI2C
  9449 ;; This function is called by:
  9450 ;;		_LCD_init
  9451 ;; This function uses a non-reentrant model
  9452 ;;
  9453                           
  9454                           	psect	text50
  9455  003D36                     __ptext50:
  9456                           	opt stack 0
  9457  003D36                     _LCD_BL_SET:
  9458                           	opt stack 13
  9459                           
  9460                           ;incstack = 0
  9461                           ;LCD_BL_SET@value stored from wreg
  9462  003D36  6E26               	movwf	LCD_BL_SET@value,c
  9463                           
  9464                           ;drv_lcd.c: 275: if (value)
  9465  003D38  5026               	movf	LCD_BL_SET@value,w,c
  9466  003D3A  B4D8               	btfsc	status,2,c
  9467  003D3C  D002               	goto	l756
  9468                           
  9469                           ;drv_lcd.c: 276: LCD_I2C_BUFFER |= 8;
  9470  003D3E  8643               	bsf	_LCD_I2C_BUFFER,3,c
  9471  003D40  D001               	goto	l757
  9472  003D42                     l756:
  9473                           
  9474                           ;drv_lcd.c: 277: else
  9475                           ;drv_lcd.c: 278: LCD_I2C_BUFFER &= ~8;
  9476  003D42  9643               	bcf	_LCD_I2C_BUFFER,3,c
  9477  003D44                     l757:
  9478                           
  9479                           ;drv_lcd.c: 279: LCD_writeI2C();
  9480  003D44  ECAD  F01D         	call	_LCD_writeI2C	;wreg free
  9481  003D48  0012               	return		;funcret
  9482  003D4A                     __end_of_LCD_BL_SET:
  9483                           	opt stack 0
  9484                           tblptru	equ	0xFF8
  9485                           tblptrh	equ	0xFF7
  9486                           tblptrl	equ	0xFF6
  9487                           tablat	equ	0xFF5
  9488                           prodh	equ	0xFF4
  9489                           prodl	equ	0xFF3
  9490                           intcon	equ	0xFF2
  9491                           postinc0	equ	0xFEE
  9492                           wreg	equ	0xFE8
  9493                           postdec1	equ	0xFE5
  9494                           fsr1l	equ	0xFE1
  9495                           indf2	equ	0xFDF
  9496                           postinc2	equ	0xFDE
  9497                           postdec2	equ	0xFDD
  9498                           fsr2h	equ	0xFDA
  9499                           fsr2l	equ	0xFD9
  9500                           status	equ	0xFD8
  9501                           
  9502 ;; *************** function _LCD_writeI2C *****************
  9503 ;; Defined at:
  9504 ;;		line 344 in file "drv_lcd.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;		None
  9507 ;; Auto vars:     Size  Location     Type
  9508 ;;		None
  9509 ;; Return value:  Size  Location     Type
  9510 ;;                  1    wreg      void 
  9511 ;; Registers used:
  9512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9513 ;; Tracked objects:
  9514 ;;		On entry : 0/0
  9515 ;;		On exit  : 0/0
  9516 ;;		Unchanged: 0/0
  9517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9522 ;;Total ram usage:        0 bytes
  9523 ;; Hardware stack levels used:    1
  9524 ;; Hardware stack levels required when called:   15
  9525 ;; This function calls:
  9526 ;;		_i2c_writeNBytes
  9527 ;; This function is called by:
  9528 ;;		_LCD_RS_SET
  9529 ;;		_LCD_EN_SET
  9530 ;;		_LCD_BL_SET
  9531 ;;		_LCD_RW_SET
  9532 ;; This function uses a non-reentrant model
  9533 ;;
  9534                           
  9535                           	psect	text51
  9536  003B5A                     __ptext51:
  9537                           	opt stack 0
  9538  003B5A                     _LCD_writeI2C:
  9539                           	opt stack 9
  9540                           
  9541                           ;drv_lcd.c: 346: static unsigned char wrtBuffer[1];
  9542                           ;drv_lcd.c: 347: wrtBuffer[0] = (LCD_I2C_BUFFER);
  9543                           
  9544                           ;incstack = 0
  9545  003B5A  C043  F048         	movff	_LCD_I2C_BUFFER,LCD_writeI2C@wrtBuffer
  9546                           
  9547                           ;drv_lcd.c: 348: i2c_writeNBytes(0x27, wrtBuffer, 1);
  9548  003B5E  0E48               	movlw	low LCD_writeI2C@wrtBuffer
  9549  003B60  6E21               	movwf	i2c_writeNBytes@data,c
  9550  003B62  0E00               	movlw	high LCD_writeI2C@wrtBuffer
  9551  003B64  6E22               	movwf	i2c_writeNBytes@data+1,c
  9552  003B66  0E00               	movlw	0
  9553  003B68  6E24               	movwf	i2c_writeNBytes@len+1,c
  9554  003B6A  0E01               	movlw	1
  9555  003B6C  6E23               	movwf	i2c_writeNBytes@len,c
  9556  003B6E  0E27               	movlw	39
  9557  003B70  ECC8  F01A         	call	_i2c_writeNBytes
  9558  003B74  0012               	return		;funcret
  9559  003B76                     __end_of_LCD_writeI2C:
  9560                           	opt stack 0
  9561                           tblptru	equ	0xFF8
  9562                           tblptrh	equ	0xFF7
  9563                           tblptrl	equ	0xFF6
  9564                           tablat	equ	0xFF5
  9565                           prodh	equ	0xFF4
  9566                           prodl	equ	0xFF3
  9567                           intcon	equ	0xFF2
  9568                           postinc0	equ	0xFEE
  9569                           wreg	equ	0xFE8
  9570                           postdec1	equ	0xFE5
  9571                           fsr1l	equ	0xFE1
  9572                           indf2	equ	0xFDF
  9573                           postinc2	equ	0xFDE
  9574                           postdec2	equ	0xFDD
  9575                           fsr2h	equ	0xFDA
  9576                           fsr2l	equ	0xFD9
  9577                           status	equ	0xFD8
  9578                           
  9579 ;; *************** function _i2c_writeNBytes *****************
  9580 ;; Defined at:
  9581 ;;		line 48 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  9582 ;; Parameters:    Size  Location     Type
  9583 ;;  address         1    wreg     unsigned char 
  9584 ;;  data            2   32[COMRAM] PTR void 
  9585 ;;		 -> XYZ_ReadTemp@wrtBuffer(1), XYZ_Read@wrtBuffer(1), XYZ_WriteReg@wrtBuffer(2), LCD_writeI2C@wrtBuffer(1), 
  9586 ;;  len             2   34[COMRAM] unsigned int 
  9587 ;; Auto vars:     Size  Location     Type
  9588 ;;  address         1   36[COMRAM] unsigned char 
  9589 ;; Return value:  Size  Location     Type
  9590 ;;                  1    wreg      void 
  9591 ;; Registers used:
  9592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9593 ;; Tracked objects:
  9594 ;;		On entry : 0/0
  9595 ;;		On exit  : 0/0
  9596 ;;		Unchanged: 0/0
  9597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9598 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9599 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9601 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9602 ;;Total ram usage:        5 bytes
  9603 ;; Hardware stack levels used:    1
  9604 ;; Hardware stack levels required when called:   14
  9605 ;; This function calls:
  9606 ;;		_i2c_close
  9607 ;;		_i2c_masterWrite
  9608 ;;		_i2c_open
  9609 ;;		_i2c_setAddressNACKCallback
  9610 ;;		_i2c_setBuffer
  9611 ;; This function is called by:
  9612 ;;		_LCD_writeI2C
  9613 ;;		_XYZ_WriteReg
  9614 ;;		_XYZ_Read
  9615 ;;		_XYZ_ReadTemp
  9616 ;; This function uses a non-reentrant model
  9617 ;;
  9618                           
  9619                           	psect	text52
  9620  003590                     __ptext52:
  9621                           	opt stack 0
  9622  003590                     _i2c_writeNBytes:
  9623                           	opt stack 15
  9624                           
  9625                           ;incstack = 0
  9626                           ;i2c_writeNBytes@address stored from wreg
  9627  003590  6E25               	movwf	i2c_writeNBytes@address,c
  9628  003592                     
  9629                           ;i2c_simple_master.c: 50: while(!i2c_open(address));
  9630  003592  5025               	movf	i2c_writeNBytes@address,w,c
  9631  003594  EC42  F015         	call	_i2c_open
  9632  003598  0900               	iorlw	0
  9633  00359A  B4D8               	btfsc	status,2,c
  9634  00359C  D7FA               	goto	l6197
  9635                           
  9636                           ;i2c_simple_master.c: 51: i2c_setBuffer(data,len);
  9637  00359E  C021  F016         	movff	i2c_writeNBytes@data,i2c_setBuffer@buffer
  9638  0035A2  C022  F017         	movff	i2c_writeNBytes@data+1,i2c_setBuffer@buffer+1
  9639  0035A6  C023  F018         	movff	i2c_writeNBytes@len,i2c_setBuffer@bufferSize
  9640  0035AA  C024  F019         	movff	i2c_writeNBytes@len+1,i2c_setBuffer@bufferSize+1
  9641  0035AE  ECF2  F01D         	call	_i2c_setBuffer	;wreg free
  9642                           
  9643                           ;i2c_simple_master.c: 52: i2c_setAddressNACKCallback(i2c_restartWrite,(0));
  9644  0035B2  0E90               	movlw	low _i2c_restartWrite
  9645  0035B4  6E1C               	movwf	i2c_setAddressNACKCallback@cb,c
  9646  0035B6  0E3E               	movlw	high _i2c_restartWrite
  9647  0035B8  6E1D               	movwf	i2c_setAddressNACKCallback@cb+1,c
  9648  0035BA  0E00               	movlw	low (_i2c_restartWrite shr (0+16))
  9649  0035BC  6E1E               	movwf	i2c_setAddressNACKCallback@cb+2,c
  9650  0035BE  0E00               	movlw	0
  9651  0035C0  6E1F               	movwf	i2c_setAddressNACKCallback@p,c
  9652  0035C2  0E00               	movlw	0
  9653  0035C4  6E20               	movwf	i2c_setAddressNACKCallback@p+1,c
  9654  0035C6  ECBB  F01D         	call	_i2c_setAddressNACKCallback	;wreg free
  9655                           
  9656                           ;i2c_simple_master.c: 53: i2c_masterWrite();
  9657  0035CA  EC5B  F01F         	call	_i2c_masterWrite	;wreg free
  9658  0035CE  EC82  F01D         	call	_i2c_close	;wreg free
  9659  0035D2  06E8               	decf	wreg,f,c
  9660  0035D4  A4D8               	btfss	status,2,c
  9661  0035D6  0012               	return	
  9662  0035D8  D7FA               	goto	l531
  9663  0035DA                     __end_of_i2c_writeNBytes:
  9664                           	opt stack 0
  9665                           tblptru	equ	0xFF8
  9666                           tblptrh	equ	0xFF7
  9667                           tblptrl	equ	0xFF6
  9668                           tablat	equ	0xFF5
  9669                           prodh	equ	0xFF4
  9670                           prodl	equ	0xFF3
  9671                           intcon	equ	0xFF2
  9672                           postinc0	equ	0xFEE
  9673                           wreg	equ	0xFE8
  9674                           postdec1	equ	0xFE5
  9675                           fsr1l	equ	0xFE1
  9676                           indf2	equ	0xFDF
  9677                           postinc2	equ	0xFDE
  9678                           postdec2	equ	0xFDD
  9679                           fsr2h	equ	0xFDA
  9680                           fsr2l	equ	0xFD9
  9681                           status	equ	0xFD8
  9682                           
  9683 ;; *************** function _i2c_setAddressNACKCallback *****************
  9684 ;; Defined at:
  9685 ;;		line 99 in file "mcc_generated_files/drivers/i2c_master.c"
  9686 ;; Parameters:    Size  Location     Type
  9687 ;;  cb              3   27[COMRAM] PTR FTN(PTR void ,)enum 
  9688 ;;		 -> i2c_restartWrite(1), 
  9689 ;;  p               2   30[COMRAM] PTR void 
  9690 ;;		 -> NULL(0), 
  9691 ;; Auto vars:     Size  Location     Type
  9692 ;;		None
  9693 ;; Return value:  Size  Location     Type
  9694 ;;                  1    wreg      void 
  9695 ;; Registers used:
  9696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9697 ;; Tracked objects:
  9698 ;;		On entry : 0/0
  9699 ;;		On exit  : 0/0
  9700 ;;		Unchanged: 0/0
  9701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9702 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9705 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9706 ;;Total ram usage:        5 bytes
  9707 ;; Hardware stack levels used:    1
  9708 ;; Hardware stack levels required when called:    7
  9709 ;; This function calls:
  9710 ;;		_setCallBack
  9711 ;; This function is called by:
  9712 ;;		_i2c_writeNBytes
  9713 ;;		_i2c_write1ByteRegister
  9714 ;;		_i2c_read1ByteRegister
  9715 ;;		_i2c_read2ByteRegister
  9716 ;;		_i2c_write2ByteRegister
  9717 ;;		_i2c_readDataBlock
  9718 ;; This function uses a non-reentrant model
  9719 ;;
  9720                           
  9721                           	psect	text53
  9722  003B76                     __ptext53:
  9723                           	opt stack 0
  9724  003B76                     _i2c_setAddressNACKCallback:
  9725                           	opt stack 21
  9726                           
  9727                           ;i2c_master.c: 101: setCallBack(i2c_addressNACK,cb,p);
  9728                           
  9729                           ;incstack = 0
  9730  003B76  C01C  F016         	movff	i2c_setAddressNACKCallback@cb,setCallBack@cb
  9731  003B7A  C01D  F017         	movff	i2c_setAddressNACKCallback@cb+1,setCallBack@cb+1
  9732  003B7E  C01E  F018         	movff	i2c_setAddressNACKCallback@cb+2,setCallBack@cb+2
  9733  003B82  C01F  F019         	movff	i2c_setAddressNACKCallback@p,setCallBack@p
  9734  003B86  C020  F01A         	movff	i2c_setAddressNACKCallback@p+1,setCallBack@p+1
  9735  003B8A  0E02               	movlw	2
  9736  003B8C  EC6E  F018         	call	_setCallBack
  9737  003B90  0012               	return		;funcret
  9738  003B92                     __end_of_i2c_setAddressNACKCallback:
  9739                           	opt stack 0
  9740                           tblptru	equ	0xFF8
  9741                           tblptrh	equ	0xFF7
  9742                           tblptrl	equ	0xFF6
  9743                           tablat	equ	0xFF5
  9744                           prodh	equ	0xFF4
  9745                           prodl	equ	0xFF3
  9746                           intcon	equ	0xFF2
  9747                           postinc0	equ	0xFEE
  9748                           wreg	equ	0xFE8
  9749                           postdec1	equ	0xFE5
  9750                           fsr1l	equ	0xFE1
  9751                           indf2	equ	0xFDF
  9752                           postinc2	equ	0xFDE
  9753                           postdec2	equ	0xFDD
  9754                           fsr2h	equ	0xFDA
  9755                           fsr2l	equ	0xFD9
  9756                           status	equ	0xFD8
  9757                           
  9758 ;; *************** function _i2c_open *****************
  9759 ;; Defined at:
  9760 ;;		line 116 in file "mcc_generated_files/drivers/i2c_master.c"
  9761 ;; Parameters:    Size  Location     Type
  9762 ;;  address         1    wreg     unsigned char 
  9763 ;; Auto vars:     Size  Location     Type
  9764 ;;  address         1   24[COMRAM] unsigned char 
  9765 ;;  ret             1   25[COMRAM] enum E11811
  9766 ;; Return value:  Size  Location     Type
  9767 ;;                  1    wreg      enum E11811
  9768 ;; Registers used:
  9769 ;;		wreg, status,2, status,0, cstack
  9770 ;; Tracked objects:
  9771 ;;		On entry : 0/0
  9772 ;;		On exit  : 0/0
  9773 ;;		Unchanged: 0/0
  9774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9776 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9778 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9779 ;;Total ram usage:        2 bytes
  9780 ;; Hardware stack levels used:    1
  9781 ;; Hardware stack levels required when called:    7
  9782 ;; This function calls:
  9783 ;;		_i2c1_driver_open
  9784 ;;		_i2c1_driver_setBusCollisionISR
  9785 ;;		_i2c1_driver_setI2cISR
  9786 ;;		_mssp1_clearIRQ
  9787 ;; This function is called by:
  9788 ;;		_i2c_writeNBytes
  9789 ;;		_i2c_readNBytes
  9790 ;;		_i2c_write1ByteRegister
  9791 ;;		_i2c_read1ByteRegister
  9792 ;;		_i2c_read2ByteRegister
  9793 ;;		_i2c_write2ByteRegister
  9794 ;;		_i2c_readDataBlock
  9795 ;; This function uses a non-reentrant model
  9796 ;;
  9797                           
  9798                           	psect	text54
  9799  002A84                     __ptext54:
  9800                           	opt stack 0
  9801  002A84                     _i2c_open:
  9802                           	opt stack 21
  9803                           
  9804                           ;incstack = 0
  9805                           ;i2c_open@address stored from wreg
  9806  002A84  6E19               	movwf	i2c_open@address,c
  9807                           
  9808                           ;i2c_master.c: 118: i2c_error_t ret = I2C_BUSY;
  9809  002A86  0E01               	movlw	1
  9810  002A88  6E1A               	movwf	i2c_open@ret,c
  9811                           
  9812                           ;i2c_master.c: 120: if(!i2c_status.inUse)
  9813  002A8A  0100               	movlb	0	; () banked
  9814  002A8C  B3B2               	btfsc	_i2c_status& (0+255),1,b
  9815  002A8E  D050               	goto	l348
  9816                           
  9817                           ; BSR set to: 0
  9818                           ;i2c_master.c: 121: {
  9819                           ;i2c_master.c: 122: i2c_status.address = address;
  9820  002A90  C019  F0B3         	movff	i2c_open@address,_i2c_status+1
  9821                           
  9822                           ; BSR set to: 0
  9823                           ;i2c_master.c: 123: i2c_status.busy = 0;
  9824  002A94  91B2               	bcf	_i2c_status& (0+255),0,b
  9825                           
  9826                           ; BSR set to: 0
  9827                           ;i2c_master.c: 124: i2c_status.inUse = 1;
  9828  002A96  83B2               	bsf	_i2c_status& (0+255),1,b
  9829                           
  9830                           ; BSR set to: 0
  9831                           ;i2c_master.c: 125: i2c_status.addressNACKCheck = 0;
  9832  002A98  97B2               	bcf	_i2c_status& (0+255),3,b
  9833                           
  9834                           ; BSR set to: 0
  9835                           ;i2c_master.c: 126: i2c_status.state = I2C_RESET;
  9836  002A9A  0E0E               	movlw	14
  9837  002A9C  6FBC               	movwf	(_i2c_status+10)& (0+255),b
  9838                           
  9839                           ; BSR set to: 0
  9840                           ;i2c_master.c: 127: i2c_status.time_out_value = 500;
  9841  002A9E  0E01               	movlw	1
  9842  002AA0  6FBB               	movwf	(_i2c_status+9)& (0+255),b
  9843  002AA2  0EF4               	movlw	244
  9844  002AA4  6FBA               	movwf	(_i2c_status+8)& (0+255),b
  9845                           
  9846                           ; BSR set to: 0
  9847                           ;i2c_master.c: 128: i2c_status.bufferFree = 1;
  9848  002AA6  85B2               	bsf	_i2c_status& (0+255),2,b
  9849                           
  9850                           ; BSR set to: 0
  9851                           ;i2c_master.c: 131: i2c_status.callbackTable[i2c_dataComplete]=returnStop;
  9852  002AA8  0EA4               	movlw	low _returnStop
  9853  002AAA  6FBE               	movwf	(_i2c_status+12)& (0+255),b
  9854  002AAC  0E3E               	movlw	high _returnStop
  9855  002AAE  6FBF               	movwf	(_i2c_status+13)& (0+255),b
  9856  002AB0  0E00               	movlw	low (_returnStop shr (0+16))
  9857  002AB2  6FC0               	movwf	(_i2c_status+14)& (0+255),b
  9858                           
  9859                           ; BSR set to: 0
  9860                           ;i2c_master.c: 132: i2c_status.callbackPayload[i2c_dataComplete] = (0);
  9861  002AB4  0E00               	movlw	0
  9862  002AB6  6FD0               	movwf	(_i2c_status+30)& (0+255),b
  9863  002AB8  0E00               	movlw	0
  9864  002ABA  6FD1               	movwf	(_i2c_status+31)& (0+255),b
  9865                           
  9866                           ; BSR set to: 0
  9867                           ;i2c_master.c: 133: i2c_status.callbackTable[i2c_writeCollision]=returnStop;
  9868  002ABC  0EA4               	movlw	low _returnStop
  9869  002ABE  6FC1               	movwf	(_i2c_status+15)& (0+255),b
  9870  002AC0  0E3E               	movlw	high _returnStop
  9871  002AC2  6FC2               	movwf	(_i2c_status+16)& (0+255),b
  9872  002AC4  0E00               	movlw	low (_returnStop shr (0+16))
  9873  002AC6  6FC3               	movwf	(_i2c_status+17)& (0+255),b
  9874                           
  9875                           ; BSR set to: 0
  9876                           ;i2c_master.c: 134: i2c_status.callbackPayload[i2c_writeCollision] = (0);
  9877  002AC8  0E00               	movlw	0
  9878  002ACA  6FD2               	movwf	(_i2c_status+32)& (0+255),b
  9879  002ACC  0E00               	movlw	0
  9880  002ACE  6FD3               	movwf	(_i2c_status+33)& (0+255),b
  9881                           
  9882                           ; BSR set to: 0
  9883                           ;i2c_master.c: 135: i2c_status.callbackTable[i2c_addressNACK]=returnStop;
  9884  002AD0  0EA4               	movlw	low _returnStop
  9885  002AD2  6FC4               	movwf	(_i2c_status+18)& (0+255),b
  9886  002AD4  0E3E               	movlw	high _returnStop
  9887  002AD6  6FC5               	movwf	(_i2c_status+19)& (0+255),b
  9888  002AD8  0E00               	movlw	low (_returnStop shr (0+16))
  9889  002ADA  6FC6               	movwf	(_i2c_status+20)& (0+255),b
  9890                           
  9891                           ; BSR set to: 0
  9892                           ;i2c_master.c: 136: i2c_status.callbackPayload[i2c_addressNACK] = (0);
  9893  002ADC  0E00               	movlw	0
  9894  002ADE  6FD4               	movwf	(_i2c_status+34)& (0+255),b
  9895  002AE0  0E00               	movlw	0
  9896  002AE2  6FD5               	movwf	(_i2c_status+35)& (0+255),b
  9897                           
  9898                           ; BSR set to: 0
  9899                           ;i2c_master.c: 137: i2c_status.callbackTable[i2c_dataNACK]=returnStop;
  9900  002AE4  0EA4               	movlw	low _returnStop
  9901  002AE6  6FC7               	movwf	(_i2c_status+21)& (0+255),b
  9902  002AE8  0E3E               	movlw	high _returnStop
  9903  002AEA  6FC8               	movwf	(_i2c_status+22)& (0+255),b
  9904  002AEC  0E00               	movlw	low (_returnStop shr (0+16))
  9905  002AEE  6FC9               	movwf	(_i2c_status+23)& (0+255),b
  9906                           
  9907                           ; BSR set to: 0
  9908                           ;i2c_master.c: 138: i2c_status.callbackPayload[i2c_dataNACK] = (0);
  9909  002AF0  0E00               	movlw	0
  9910  002AF2  6FD6               	movwf	(_i2c_status+36)& (0+255),b
  9911  002AF4  0E00               	movlw	0
  9912  002AF6  6FD7               	movwf	(_i2c_status+37)& (0+255),b
  9913                           
  9914                           ; BSR set to: 0
  9915                           ;i2c_master.c: 139: i2c_status.callbackTable[i2c_timeOut]=returnReset;
  9916  002AF8  0E9A               	movlw	low _returnReset
  9917  002AFA  6FCA               	movwf	(_i2c_status+24)& (0+255),b
  9918  002AFC  0E3E               	movlw	high _returnReset
  9919  002AFE  6FCB               	movwf	(_i2c_status+25)& (0+255),b
  9920  002B00  0E00               	movlw	low (_returnReset shr (0+16))
  9921  002B02  6FCC               	movwf	(_i2c_status+26)& (0+255),b
  9922                           
  9923                           ; BSR set to: 0
  9924                           ;i2c_master.c: 140: i2c_status.callbackPayload[i2c_timeOut] = (0);
  9925  002B04  0E00               	movlw	0
  9926  002B06  6FD8               	movwf	(_i2c_status+38)& (0+255),b
  9927  002B08  0E00               	movlw	0
  9928  002B0A  6FD9               	movwf	(_i2c_status+39)& (0+255),b
  9929                           
  9930                           ; BSR set to: 0
  9931                           ;i2c_master.c: 142: i2c1_driver_open();
  9932  002B0C  EC30  F01E         	call	_i2c1_driver_open	;wreg free
  9933                           
  9934                           ;i2c_master.c: 143: mssp1_clearIRQ();
  9935  002B10  EC8F  F01F         	call	_mssp1_clearIRQ	;wreg free
  9936                           
  9937                           ;i2c_master.c: 145: i2c1_driver_setBusCollisionISR(i2c_busCollisionISR);
  9938  002B14  0E3C               	movlw	low _i2c_busCollisionISR
  9939  002B16  6E16               	movwf	i2c1_driver_setBusCollisionISR@f,c
  9940  002B18  0E3F               	movlw	high _i2c_busCollisionISR
  9941  002B1A  6E17               	movwf	i2c1_driver_setBusCollisionISR@f+1,c
  9942  002B1C  ECFE  F01E         	call	_i2c1_driver_setBusCollisionISR	;wreg free
  9943                           
  9944                           ;i2c_master.c: 146: i2c1_driver_setI2cISR(i2c_ISR);
  9945  002B20  0EF4               	movlw	low _i2c_ISR
  9946  002B22  6E16               	movwf	i2c1_driver_setI2cISR@f,c
  9947  002B24  0E34               	movlw	high _i2c_ISR
  9948  002B26  6E17               	movwf	i2c1_driver_setI2cISR@f+1,c
  9949  002B28  ECF7  F01E         	call	_i2c1_driver_setI2cISR	;wreg free
  9950                           
  9951                           ;i2c_master.c: 151: ret = I2C_NOERR;
  9952  002B2C  0E00               	movlw	0
  9953  002B2E  6E1A               	movwf	i2c_open@ret,c
  9954  002B30                     l348:
  9955                           
  9956                           ;i2c_master.c: 152: }
  9957                           ;i2c_master.c: 153: return ret;
  9958  002B30  501A               	movf	i2c_open@ret,w,c
  9959  002B32  0012               	return	
  9960  002B34                     __end_of_i2c_open:
  9961                           	opt stack 0
  9962                           tblptru	equ	0xFF8
  9963                           tblptrh	equ	0xFF7
  9964                           tblptrl	equ	0xFF6
  9965                           tablat	equ	0xFF5
  9966                           prodh	equ	0xFF4
  9967                           prodl	equ	0xFF3
  9968                           intcon	equ	0xFF2
  9969                           postinc0	equ	0xFEE
  9970                           wreg	equ	0xFE8
  9971                           postdec1	equ	0xFE5
  9972                           fsr1l	equ	0xFE1
  9973                           indf2	equ	0xFDF
  9974                           postinc2	equ	0xFDE
  9975                           postdec2	equ	0xFDD
  9976                           fsr2h	equ	0xFDA
  9977                           fsr2l	equ	0xFD9
  9978                           status	equ	0xFD8
  9979                           
  9980 ;; *************** function _i2c1_driver_setI2cISR *****************
  9981 ;; Defined at:
  9982 ;;		line 262 in file "mcc_generated_files/i2c1_driver.c"
  9983 ;; Parameters:    Size  Location     Type
  9984 ;;  f               3   21[COMRAM] PTR void 
  9985 ;;		 -> i2c_ISR(1), 
  9986 ;; Auto vars:     Size  Location     Type
  9987 ;;		None
  9988 ;; Return value:  Size  Location     Type
  9989 ;;                  1    wreg      void 
  9990 ;; Registers used:
  9991 ;;		wreg, status,2, status,0
  9992 ;; Tracked objects:
  9993 ;;		On entry : 0/0
  9994 ;;		On exit  : 0/0
  9995 ;;		Unchanged: 0/0
  9996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9997 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10000 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10001 ;;Total ram usage:        3 bytes
 10002 ;; Hardware stack levels used:    1
 10003 ;; Hardware stack levels required when called:    6
 10004 ;; This function calls:
 10005 ;;		Nothing
 10006 ;; This function is called by:
 10007 ;;		_i2c_open
 10008 ;; This function uses a non-reentrant model
 10009 ;;
 10010                           
 10011                           	psect	text55
 10012  003DEE                     __ptext55:
 10013                           	opt stack 0
 10014  003DEE                     _i2c1_driver_setI2cISR:
 10015                           	opt stack 21
 10016                           
 10017                           ;i2c1_driver.c: 263: i2c1_driver_i2cISR = f;
 10018                           
 10019                           ;incstack = 0
 10020  003DEE  C016  F03B         	movff	i2c1_driver_setI2cISR@f,_i2c1_driver_i2cISR
 10021  003DF2  C017  F03C         	movff	i2c1_driver_setI2cISR@f+1,_i2c1_driver_i2cISR+1
 10022  003DF6  C018  F03D         	movff	i2c1_driver_setI2cISR@f+2,_i2c1_driver_i2cISR+2
 10023  003DFA  0012               	return		;funcret
 10024  003DFC                     __end_of_i2c1_driver_setI2cISR:
 10025                           	opt stack 0
 10026                           tblptru	equ	0xFF8
 10027                           tblptrh	equ	0xFF7
 10028                           tblptrl	equ	0xFF6
 10029                           tablat	equ	0xFF5
 10030                           prodh	equ	0xFF4
 10031                           prodl	equ	0xFF3
 10032                           intcon	equ	0xFF2
 10033                           postinc0	equ	0xFEE
 10034                           wreg	equ	0xFE8
 10035                           postdec1	equ	0xFE5
 10036                           fsr1l	equ	0xFE1
 10037                           indf2	equ	0xFDF
 10038                           postinc2	equ	0xFDE
 10039                           postdec2	equ	0xFDD
 10040                           fsr2h	equ	0xFDA
 10041                           fsr2l	equ	0xFD9
 10042                           status	equ	0xFD8
 10043                           
 10044 ;; *************** function _i2c1_driver_setBusCollisionISR *****************
 10045 ;; Defined at:
 10046 ;;		line 258 in file "mcc_generated_files/i2c1_driver.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;  f               3   21[COMRAM] PTR void 
 10049 ;;		 -> i2c_busCollisionISR(1), 
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;		None
 10052 ;; Return value:  Size  Location     Type
 10053 ;;                  1    wreg      void 
 10054 ;; Registers used:
 10055 ;;		wreg, status,2, status,0
 10056 ;; Tracked objects:
 10057 ;;		On entry : 0/0
 10058 ;;		On exit  : 0/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10061 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10064 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10065 ;;Total ram usage:        3 bytes
 10066 ;; Hardware stack levels used:    1
 10067 ;; Hardware stack levels required when called:    6
 10068 ;; This function calls:
 10069 ;;		Nothing
 10070 ;; This function is called by:
 10071 ;;		_i2c_open
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           	psect	text56
 10076  003DFC                     __ptext56:
 10077                           	opt stack 0
 10078  003DFC                     _i2c1_driver_setBusCollisionISR:
 10079                           	opt stack 21
 10080                           
 10081                           ;i2c1_driver.c: 259: i2c1_driver_busCollisionISR = f;
 10082                           
 10083                           ;incstack = 0
 10084  003DFC  C016  F03E         	movff	i2c1_driver_setBusCollisionISR@f,_i2c1_driver_busCollisionISR
 10085  003E00  C017  F03F         	movff	i2c1_driver_setBusCollisionISR@f+1,_i2c1_driver_busCollisionISR+1
 10086  003E04  C018  F040         	movff	i2c1_driver_setBusCollisionISR@f+2,_i2c1_driver_busCollisionISR+2
 10087  003E08  0012               	return		;funcret
 10088  003E0A                     __end_of_i2c1_driver_setBusCollisionISR:
 10089                           	opt stack 0
 10090                           tblptru	equ	0xFF8
 10091                           tblptrh	equ	0xFF7
 10092                           tblptrl	equ	0xFF6
 10093                           tablat	equ	0xFF5
 10094                           prodh	equ	0xFF4
 10095                           prodl	equ	0xFF3
 10096                           intcon	equ	0xFF2
 10097                           postinc0	equ	0xFEE
 10098                           wreg	equ	0xFE8
 10099                           postdec1	equ	0xFE5
 10100                           fsr1l	equ	0xFE1
 10101                           indf2	equ	0xFDF
 10102                           postinc2	equ	0xFDE
 10103                           postdec2	equ	0xFDD
 10104                           fsr2h	equ	0xFDA
 10105                           fsr2l	equ	0xFD9
 10106                           status	equ	0xFD8
 10107                           
 10108 ;; *************** function _i2c1_driver_open *****************
 10109 ;; Defined at:
 10110 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
 10111 ;; Parameters:    Size  Location     Type
 10112 ;;		None
 10113 ;; Auto vars:     Size  Location     Type
 10114 ;;		None
 10115 ;; Return value:  Size  Location     Type
 10116 ;;		None               void
 10117 ;; Registers used:
 10118 ;;		wreg, status,2
 10119 ;; Tracked objects:
 10120 ;;		On entry : 0/0
 10121 ;;		On exit  : 0/0
 10122 ;;		Unchanged: 0/0
 10123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10128 ;;Total ram usage:        0 bytes
 10129 ;; Hardware stack levels used:    1
 10130 ;; Hardware stack levels required when called:    6
 10131 ;; This function calls:
 10132 ;;		Nothing
 10133 ;; This function is called by:
 10134 ;;		_i2c_open
 10135 ;; This function uses a non-reentrant model
 10136 ;;
 10137                           
 10138                           	psect	text57
 10139  003C60                     __ptext57:
 10140                           	opt stack 0
 10141  003C60                     _i2c1_driver_open:
 10142                           	opt stack 21
 10143                           
 10144                           ;i2c1_driver.c: 85: if(!SSP1CON1bits.SSPEN)
 10145                           
 10146                           ;incstack = 0
 10147  003C60  BA96               	btfsc	3990,5,c	;volatile
 10148  003C62  0012               	return	
 10149                           
 10150                           ;i2c1_driver.c: 86: {
 10151                           ;i2c1_driver.c: 87: SSP1STAT = 0x00;
 10152  003C64  0E00               	movlw	0
 10153  003C66  6E95               	movwf	3989,c	;volatile
 10154                           
 10155                           ;i2c1_driver.c: 88: SSP1CON1 = 0x28;
 10156  003C68  0E28               	movlw	40
 10157  003C6A  6E96               	movwf	3990,c	;volatile
 10158                           
 10159                           ;i2c1_driver.c: 89: SSP1CON2 = 0x00;
 10160  003C6C  0E00               	movlw	0
 10161  003C6E  6E97               	movwf	3991,c	;volatile
 10162                           
 10163                           ;i2c1_driver.c: 90: SSP1ADD = 0x3;
 10164  003C70  0E03               	movlw	3
 10165  003C72  6E93               	movwf	3987,c	;volatile
 10166                           
 10167                           ;i2c1_driver.c: 93: else
 10168                           ;i2c1_driver.c: 94: return 0;
 10169                           ;	Return value of _i2c1_driver_open is never used
 10170                           
 10171                           ;i2c1_driver.c: 92: }
 10172                           
 10173                           ;i2c1_driver.c: 91: return 1;
 10174                           ;	Return value of _i2c1_driver_open is never used
 10175  003C74  0012               	return	
 10176  003C76                     __end_of_i2c1_driver_open:
 10177                           	opt stack 0
 10178                           tblptru	equ	0xFF8
 10179                           tblptrh	equ	0xFF7
 10180                           tblptrl	equ	0xFF6
 10181                           tablat	equ	0xFF5
 10182                           prodh	equ	0xFF4
 10183                           prodl	equ	0xFF3
 10184                           intcon	equ	0xFF2
 10185                           postinc0	equ	0xFEE
 10186                           wreg	equ	0xFE8
 10187                           postdec1	equ	0xFE5
 10188                           fsr1l	equ	0xFE1
 10189                           indf2	equ	0xFDF
 10190                           postinc2	equ	0xFDE
 10191                           postdec2	equ	0xFDD
 10192                           fsr2h	equ	0xFDA
 10193                           fsr2l	equ	0xFD9
 10194                           status	equ	0xFD8
 10195                           
 10196 ;; *************** function _i2c_masterWrite *****************
 10197 ;; Defined at:
 10198 ;;		line 222 in file "mcc_generated_files/drivers/i2c_master.c"
 10199 ;; Parameters:    Size  Location     Type
 10200 ;;		None
 10201 ;; Auto vars:     Size  Location     Type
 10202 ;;		None
 10203 ;; Return value:  Size  Location     Type
 10204 ;;                  1    wreg      enum E11811
 10205 ;; Registers used:
 10206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 10207 ;; Tracked objects:
 10208 ;;		On entry : 0/0
 10209 ;;		On exit  : 0/0
 10210 ;;		Unchanged: 0/0
 10211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10216 ;;Total ram usage:        0 bytes
 10217 ;; Hardware stack levels used:    1
 10218 ;; Hardware stack levels required when called:   13
 10219 ;; This function calls:
 10220 ;;		_i2c_masterOperation
 10221 ;; This function is called by:
 10222 ;;		_i2c_writeNBytes
 10223 ;;		_i2c_write1ByteRegister
 10224 ;;		_i2c_read1ByteRegister
 10225 ;;		_i2c_read2ByteRegister
 10226 ;;		_i2c_write2ByteRegister
 10227 ;;		_i2c_readDataBlock
 10228 ;; This function uses a non-reentrant model
 10229 ;;
 10230                           
 10231                           	psect	text58
 10232  003EB6                     __ptext58:
 10233                           	opt stack 0
 10234  003EB6                     _i2c_masterWrite:
 10235                           	opt stack 15
 10236                           
 10237                           ;i2c_master.c: 224: return i2c_masterOperation(0);
 10238                           ;	Return value of _i2c_masterWrite is never used
 10239                           
 10240                           ;incstack = 0
 10241  003EB6  0E00               	movlw	0
 10242  003EB8  EC9C  F01C         	call	_i2c_masterOperation
 10243  003EBC  0012               	return	
 10244  003EBE                     __end_of_i2c_masterWrite:
 10245                           	opt stack 0
 10246                           tblptru	equ	0xFF8
 10247                           tblptrh	equ	0xFF7
 10248                           tblptrl	equ	0xFF6
 10249                           tablat	equ	0xFF5
 10250                           prodh	equ	0xFF4
 10251                           prodl	equ	0xFF3
 10252                           intcon	equ	0xFF2
 10253                           postinc0	equ	0xFEE
 10254                           wreg	equ	0xFE8
 10255                           postdec1	equ	0xFE5
 10256                           fsr1l	equ	0xFE1
 10257                           indf2	equ	0xFDF
 10258                           postinc2	equ	0xFDE
 10259                           postdec2	equ	0xFDD
 10260                           fsr2h	equ	0xFDA
 10261                           fsr2l	equ	0xFD9
 10262                           status	equ	0xFD8
 10263                           
 10264 ;; *************** function _i2c_masterOperation *****************
 10265 ;; Defined at:
 10266 ;;		line 193 in file "mcc_generated_files/drivers/i2c_master.c"
 10267 ;; Parameters:    Size  Location     Type
 10268 ;;  read            1    wreg     unsigned char 
 10269 ;; Auto vars:     Size  Location     Type
 10270 ;;  read            1   24[COMRAM] unsigned char 
 10271 ;;  ret             1   25[COMRAM] enum E11811
 10272 ;; Return value:  Size  Location     Type
 10273 ;;                  1    wreg      enum E11811
 10274 ;; Registers used:
 10275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 10276 ;; Tracked objects:
 10277 ;;		On entry : 0/0
 10278 ;;		On exit  : 0/0
 10279 ;;		Unchanged: 0/0
 10280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10282 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10284 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10285 ;;Total ram usage:        2 bytes
 10286 ;; Hardware stack levels used:    1
 10287 ;; Hardware stack levels required when called:   12
 10288 ;; This function calls:
 10289 ;;		_i2c1_driver_start
 10290 ;;		_i2c_poller
 10291 ;;		_mssp1_IRQisEnabled
 10292 ;; This function is called by:
 10293 ;;		_i2c_masterRead
 10294 ;;		_i2c_masterWrite
 10295 ;; This function uses a non-reentrant model
 10296 ;;
 10297                           
 10298                           	psect	text59
 10299  003938                     __ptext59:
 10300                           	opt stack 0
 10301  003938                     _i2c_masterOperation:
 10302                           	opt stack 15
 10303                           
 10304                           ;incstack = 0
 10305                           ;i2c_masterOperation@read stored from wreg
 10306  003938  6E19               	movwf	i2c_masterOperation@read,c
 10307                           
 10308                           ;i2c_master.c: 195: i2c_error_t ret = I2C_BUSY;
 10309  00393A  0E01               	movlw	1
 10310  00393C  6E1A               	movwf	i2c_masterOperation@ret,c
 10311                           
 10312                           ;i2c_master.c: 196: if(!i2c_status.busy)
 10313  00393E  0100               	movlb	0	; () banked
 10314  003940  B1B2               	btfsc	_i2c_status& (0+255),0,b
 10315  003942  D011               	goto	l369
 10316                           
 10317                           ; BSR set to: 0
 10318                           ;i2c_master.c: 197: {
 10319                           ;i2c_master.c: 198: i2c_status.busy = 1;
 10320  003944  81B2               	bsf	_i2c_status& (0+255),0,b
 10321                           
 10322                           ; BSR set to: 0
 10323                           ;i2c_master.c: 199: ret = I2C_NOERR;
 10324  003946  0E00               	movlw	0
 10325  003948  6E1A               	movwf	i2c_masterOperation@ret,c
 10326                           
 10327                           ; BSR set to: 0
 10328                           ;i2c_master.c: 201: if(read)
 10329  00394A  5019               	movf	i2c_masterOperation@read,w,c
 10330  00394C  B4D8               	btfsc	status,2,c
 10331  00394E  D002               	goto	l367
 10332                           
 10333                           ; BSR set to: 0
 10334                           ;i2c_master.c: 202: {
 10335                           ;i2c_master.c: 203: i2c_status.state = I2C_SEND_ADR_READ;
 10336  003950  0E01               	movlw	1
 10337  003952  D001               	goto	L3
 10338  003954                     l367:
 10339                           
 10340                           ; BSR set to: 0
 10341                           ;i2c_master.c: 205: else
 10342                           ;i2c_master.c: 206: {
 10343                           ;i2c_master.c: 207: i2c_status.state = I2C_SEND_ADR_WRITE;
 10344                           
 10345                           ; BSR set to: 0
 10346  003954  0E02               	movlw	2
 10347  003956                     L3:
 10348  003956  6FBC               	movwf	(_i2c_status+10)& (0+255),b
 10349                           
 10350                           ; BSR set to: 0
 10351                           ;i2c_master.c: 208: }
 10352                           ;i2c_master.c: 209: i2c1_driver_start();
 10353                           
 10354                           ; BSR set to: 0
 10355  003958  ECAE  F01F         	call	_i2c1_driver_start	;wreg free
 10356                           
 10357                           ;i2c_master.c: 211: if(! mssp1_IRQisEnabled())
 10358  00395C  ECAE  F01E         	call	_mssp1_IRQisEnabled	;wreg free
 10359  003960  A0D8               	btfss	status,0,c
 10360                           
 10361                           ;i2c_master.c: 212: i2c_poller();
 10362  003962  ECE5  F01D         	call	_i2c_poller	;wreg free
 10363  003966                     l369:
 10364                           
 10365                           ;i2c_master.c: 213: }
 10366                           ;i2c_master.c: 214: return ret;
 10367  003966  501A               	movf	i2c_masterOperation@ret,w,c
 10368  003968  0012               	return	
 10369  00396A                     __end_of_i2c_masterOperation:
 10370                           	opt stack 0
 10371                           tblptru	equ	0xFF8
 10372                           tblptrh	equ	0xFF7
 10373                           tblptrl	equ	0xFF6
 10374                           tablat	equ	0xFF5
 10375                           prodh	equ	0xFF4
 10376                           prodl	equ	0xFF3
 10377                           intcon	equ	0xFF2
 10378                           postinc0	equ	0xFEE
 10379                           wreg	equ	0xFE8
 10380                           postdec1	equ	0xFE5
 10381                           fsr1l	equ	0xFE1
 10382                           indf2	equ	0xFDF
 10383                           postinc2	equ	0xFDE
 10384                           postdec2	equ	0xFDD
 10385                           fsr2h	equ	0xFDA
 10386                           fsr2l	equ	0xFD9
 10387                           status	equ	0xFD8
 10388                           
 10389 ;; *************** function _mssp1_IRQisEnabled *****************
 10390 ;; Defined at:
 10391 ;;		line 43 in file "mcc_generated_files/i2c1_driver.c"
 10392 ;; Parameters:    Size  Location     Type
 10393 ;;		None
 10394 ;; Auto vars:     Size  Location     Type
 10395 ;;		None
 10396 ;; Return value:  Size  Location     Type
 10397 ;;		None               void
 10398 ;; Registers used:
 10399 ;;		wreg, status,0
 10400 ;; Tracked objects:
 10401 ;;		On entry : 0/0
 10402 ;;		On exit  : 0/0
 10403 ;;		Unchanged: 0/0
 10404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10407 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10408 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10409 ;;Total ram usage:        1 bytes
 10410 ;; Hardware stack levels used:    1
 10411 ;; Hardware stack levels required when called:    6
 10412 ;; This function calls:
 10413 ;;		Nothing
 10414 ;; This function is called by:
 10415 ;;		_i2c_masterOperation
 10416 ;; This function uses a non-reentrant model
 10417 ;;
 10418                           
 10419                           	psect	text60
 10420  003D5C                     __ptext60:
 10421                           	opt stack 0
 10422  003D5C                     _mssp1_IRQisEnabled:
 10423                           	opt stack 20
 10424                           
 10425                           ;i2c1_driver.c: 45: return PIE3bits.SSP1IE;
 10426                           
 10427                           ;incstack = 0
 10428  003D5C  010E               	movlb	14	; () banked
 10429  003D5E  A1C5               	btfss	197,0,b	;volatile
 10430  003D60  D003               	goto	u4480
 10431  003D62  6A16               	clrf	??_mssp1_IRQisEnabled& (0+255),c
 10432  003D64  2A16               	incf	??_mssp1_IRQisEnabled& (0+255),f,c
 10433  003D66  D001               	goto	u4488
 10434  003D68                     u4480:
 10435  003D68  6A16               	clrf	??_mssp1_IRQisEnabled& (0+255),c
 10436  003D6A                     u4488:
 10437  003D6A  3016               	rrcf	??_mssp1_IRQisEnabled,w,c
 10438  003D6C  0012               	return	
 10439  003D6E                     __end_of_mssp1_IRQisEnabled:
 10440                           	opt stack 0
 10441                           tblptru	equ	0xFF8
 10442                           tblptrh	equ	0xFF7
 10443                           tblptrl	equ	0xFF6
 10444                           tablat	equ	0xFF5
 10445                           prodh	equ	0xFF4
 10446                           prodl	equ	0xFF3
 10447                           intcon	equ	0xFF2
 10448                           postinc0	equ	0xFEE
 10449                           wreg	equ	0xFE8
 10450                           postdec1	equ	0xFE5
 10451                           fsr1l	equ	0xFE1
 10452                           indf2	equ	0xFDF
 10453                           postinc2	equ	0xFDE
 10454                           postdec2	equ	0xFDD
 10455                           fsr2h	equ	0xFDA
 10456                           fsr2l	equ	0xFD9
 10457                           status	equ	0xFD8
 10458                           
 10459 ;; *************** function _i2c_poller *****************
 10460 ;; Defined at:
 10461 ;;		line 230 in file "mcc_generated_files/drivers/i2c_master.c"
 10462 ;; Parameters:    Size  Location     Type
 10463 ;;		None
 10464 ;; Auto vars:     Size  Location     Type
 10465 ;;		None
 10466 ;; Return value:  Size  Location     Type
 10467 ;;                  1    wreg      void 
 10468 ;; Registers used:
 10469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 10470 ;; Tracked objects:
 10471 ;;		On entry : 0/0
 10472 ;;		On exit  : 0/0
 10473 ;;		Unchanged: 0/0
 10474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10479 ;;Total ram usage:        0 bytes
 10480 ;; Hardware stack levels used:    1
 10481 ;; Hardware stack levels required when called:   11
 10482 ;; This function calls:
 10483 ;;		_i2c_ISR
 10484 ;;		_mssp1_waitForEvent
 10485 ;; This function is called by:
 10486 ;;		_i2c_masterOperation
 10487 ;; This function uses a non-reentrant model
 10488 ;;
 10489                           
 10490                           	psect	text61
 10491  003BCA                     __ptext61:
 10492                           	opt stack 0
 10493  003BCA                     _i2c_poller:
 10494                           	opt stack 15
 10495                           
 10496                           ;i2c_master.c: 232: while(i2c_status.busy)
 10497                           
 10498                           ;incstack = 0
 10499  003BCA  D008               	goto	l379
 10500  003BCC                     
 10501                           ;i2c_master.c: 233: {
 10502                           ;i2c_master.c: 234: mssp1_waitForEvent((0));
 10503  003BCC  0E00               	movlw	0
 10504  003BCE  6E16               	movwf	mssp1_waitForEvent@timeout,c
 10505  003BD0  0E00               	movlw	0
 10506  003BD2  6E17               	movwf	mssp1_waitForEvent@timeout+1,c
 10507  003BD4  EC3B  F01E         	call	_mssp1_waitForEvent	;wreg free
 10508                           
 10509                           ;i2c_master.c: 235: i2c_ISR();
 10510  003BD8  EC7A  F01A         	call	_i2c_ISR	;wreg free
 10511  003BDC                     l379:
 10512  003BDC  0100               	movlb	0	; () banked
 10513  003BDE  A1B2               	btfss	_i2c_status& (0+255),0,b
 10514  003BE0  0012               	return	
 10515  003BE2  D7F4               	goto	l380
 10516  003BE4                     __end_of_i2c_poller:
 10517                           	opt stack 0
 10518                           tblptru	equ	0xFF8
 10519                           tblptrh	equ	0xFF7
 10520                           tblptrl	equ	0xFF6
 10521                           tablat	equ	0xFF5
 10522                           prodh	equ	0xFF4
 10523                           prodl	equ	0xFF3
 10524                           intcon	equ	0xFF2
 10525                           postinc0	equ	0xFEE
 10526                           wreg	equ	0xFE8
 10527                           postdec1	equ	0xFE5
 10528                           fsr1l	equ	0xFE1
 10529                           indf2	equ	0xFDF
 10530                           postinc2	equ	0xFDE
 10531                           postdec2	equ	0xFDD
 10532                           fsr2h	equ	0xFDA
 10533                           fsr2l	equ	0xFD9
 10534                           status	equ	0xFD8
 10535                           
 10536 ;; *************** function _mssp1_waitForEvent *****************
 10537 ;; Defined at:
 10538 ;;		line 68 in file "mcc_generated_files/i2c1_driver.c"
 10539 ;; Parameters:    Size  Location     Type
 10540 ;;  timeout         2   21[COMRAM] PTR unsigned int 
 10541 ;;		 -> NULL(0), 
 10542 ;; Auto vars:     Size  Location     Type
 10543 ;;		None
 10544 ;; Return value:  Size  Location     Type
 10545 ;;                  1    wreg      void 
 10546 ;; Registers used:
 10547 ;;		wreg
 10548 ;; Tracked objects:
 10549 ;;		On entry : 0/0
 10550 ;;		On exit  : 0/0
 10551 ;;		Unchanged: 0/0
 10552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10553 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10556 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10557 ;;Total ram usage:        2 bytes
 10558 ;; Hardware stack levels used:    1
 10559 ;; Hardware stack levels required when called:    6
 10560 ;; This function calls:
 10561 ;;		Nothing
 10562 ;; This function is called by:
 10563 ;;		_i2c_poller
 10564 ;; This function uses a non-reentrant model
 10565 ;;
 10566                           
 10567                           	psect	text62
 10568  003C76                     __ptext62:
 10569                           	opt stack 0
 10570  003C76                     _mssp1_waitForEvent:
 10571                           	opt stack 19
 10572                           
 10573                           ;i2c1_driver.c: 73: if(PIR3bits.SSP1IF == 0)
 10574                           
 10575                           ; BSR set to: 0
 10576                           ;incstack = 0
 10577  003C76  010E               	movlb	14	; () banked
 10578  003C78  B1CD               	btfsc	205,0,b	;volatile
 10579  003C7A  0012               	return	
 10580  003C7C                     u4430:
 10581                           
 10582                           ;i2c1_driver.c: 76: {
 10583                           ;i2c1_driver.c: 77: if(PIR3bits.SSP1IF) break;
 10584                           
 10585                           ;i2c1_driver.c: 74: {
 10586                           ;i2c1_driver.c: 75: while(1)
 10587  003C7C  010E               	movlb	14	; () banked
 10588  003C7E  B1CD               	btfsc	205,0,b	;volatile
 10589  003C80  0012               	return	
 10590                           
 10591                           ; BSR set to: 14
 10592                           ;i2c1_driver.c: 78: _delay((unsigned long)((100)*(1000000/4000000.0)));
 10593                           
 10594                           ; BSR set to: 14
 10595                           
 10596                           ; BSR set to: 14
 10597  003C82  0E08               	movlw	8
 10598  003C84                     u6557:
 10599  003C84  2EE8               	decfsz	wreg,f,c
 10600  003C86  D7FE               	bra	u6557
 10601  003C88  F000               	nop	
 10602  003C8A  D7F8               	goto	u4430
 10603  003C8C                     __end_of_mssp1_waitForEvent:
 10604                           	opt stack 0
 10605                           tblptru	equ	0xFF8
 10606                           tblptrh	equ	0xFF7
 10607                           tblptrl	equ	0xFF6
 10608                           tablat	equ	0xFF5
 10609                           prodh	equ	0xFF4
 10610                           prodl	equ	0xFF3
 10611                           intcon	equ	0xFF2
 10612                           postinc0	equ	0xFEE
 10613                           wreg	equ	0xFE8
 10614                           postdec1	equ	0xFE5
 10615                           fsr1l	equ	0xFE1
 10616                           indf2	equ	0xFDF
 10617                           postinc2	equ	0xFDE
 10618                           postdec2	equ	0xFDD
 10619                           fsr2h	equ	0xFDA
 10620                           fsr2l	equ	0xFD9
 10621                           status	equ	0xFD8
 10622                           
 10623 ;; *************** function _i2c_ISR *****************
 10624 ;; Defined at:
 10625 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 10626 ;; Parameters:    Size  Location     Type
 10627 ;;		None
 10628 ;; Auto vars:     Size  Location     Type
 10629 ;;		None
 10630 ;; Return value:  Size  Location     Type
 10631 ;;                  1    wreg      void 
 10632 ;; Registers used:
 10633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 10634 ;; Tracked objects:
 10635 ;;		On entry : 0/0
 10636 ;;		On exit  : 0/0
 10637 ;;		Unchanged: 0/0
 10638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10643 ;;Total ram usage:        0 bytes
 10644 ;; Hardware stack levels used:    1
 10645 ;; Hardware stack levels required when called:   10
 10646 ;; This function calls:
 10647 ;;		_do_I2C_DO_ACK
 10648 ;;		_do_I2C_DO_ADDRESS_NACK
 10649 ;;		_do_I2C_DO_NACK_RESTART
 10650 ;;		_do_I2C_DO_NACK_STOP
 10651 ;;		_do_I2C_IDLE
 10652 ;;		_do_I2C_RCEN
 10653 ;;		_do_I2C_RESET
 10654 ;;		_do_I2C_RX
 10655 ;;		_do_I2C_SEND_ADR_READ
 10656 ;;		_do_I2C_SEND_ADR_WRITE
 10657 ;;		_do_I2C_SEND_RESTART
 10658 ;;		_do_I2C_SEND_RESTART_READ
 10659 ;;		_do_I2C_SEND_RESTART_WRITE
 10660 ;;		_do_I2C_SEND_STOP
 10661 ;;		_do_I2C_TX
 10662 ;;		_do_I2C_TX_EMPTY
 10663 ;;		_i2c1_driver_isNACK
 10664 ;;		_mssp1_clearIRQ
 10665 ;; This function is called by:
 10666 ;;		_i2c_open
 10667 ;;		_i2c_poller
 10668 ;;		_INTERRUPT_InterruptManager
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672                           	psect	text63
 10673  0034F4                     __ptext63:
 10674                           	opt stack 0
 10675  0034F4                     _i2c_ISR:
 10676                           	opt stack 0
 10677                           
 10678                           ;Skip over the trampoline to the duplicate function for level 2
 10679  0034F4  B24A               	btfsc	btemp,1,c
 10680  0034F6  EF36  F01B         	goto	i2_i2c_ISR
 10681  0034FA                     _i2c_ISR$intlevel0:
 10682                           	opt stack 15
 10683                           
 10684                           ;i2c_master.c: 421: mssp1_clearIRQ();
 10685                           
 10686                           ;incstack = 0
 10687  0034FA  EC8F  F01F         	call	_mssp1_clearIRQ	;wreg free
 10688                           
 10689                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
 10690  0034FE  0100               	movlb	0	; () banked
 10691  003500  A7B2               	btfss	_i2c_status& (0+255),3,b
 10692  003502  D007               	goto	l469
 10693                           
 10694                           ; BSR set to: 0
 10695  003504  EC67  F01E         	call	_i2c1_driver_isNACK	;wreg free
 10696  003508  A0D8               	btfss	status,0,c
 10697  00350A  D003               	goto	l469
 10698                           
 10699                           ;i2c_master.c: 428: {
 10700                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
 10701  00350C  0E0F               	movlw	15
 10702  00350E  0100               	movlb	0	; () banked
 10703  003510  6FBC               	movwf	(_i2c_status+10)& (0+255),b
 10704  003512                     l469:
 10705                           
 10706                           ;i2c_master.c: 430: }
 10707                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
 10708                           
 10709                           ; BSR set to: 0
 10710  003512  0100               	movlb	0	; () banked
 10711  003514  51BC               	movf	(_i2c_status+10)& (0+255),w,b
 10712  003516  0D03               	mullw	3
 10713  003518  0E00               	movlw	low _fsmStateTable
 10714  00351A  24F3               	addwf	prodl,w,c
 10715  00351C  6ED9               	movwf	fsr2l,c
 10716  00351E  0E01               	movlw	high _fsmStateTable
 10717  003520  20F4               	addwfc	prodh,w,c
 10718  003522  6EDA               	movwf	fsr2h,c
 10719  003524  D801               	call	u4478
 10720  003526  D00A               	goto	u4479
 10721  003528                     u4478:
 10722  003528  0005               	push	
 10723  00352A  6EFA               	movwf	pclath,c
 10724  00352C  50DE               	movf	postinc2,w,c
 10725  00352E  6EFD               	movwf	tosl,c
 10726  003530  50DE               	movf	postinc2,w,c
 10727  003532  6EFE               	movwf	tosh,c
 10728  003534  50DE               	movf	postinc2,w,c
 10729  003536  6EFF               	movwf	tosu,c
 10730  003538  50FA               	movf	pclath,w,c
 10731  00353A  0012               	return		;indir
 10732  00353C                     u4479:
 10733  00353C  0100               	movlb	0	; () banked
 10734  00353E  6FBC               	movwf	(_i2c_status+10)& (0+255),b
 10735                           
 10736                           ; BSR set to: 0
 10737  003540  0012               	return		;funcret
 10738  003542                     __end_of_i2c_ISR:
 10739                           	opt stack 0
 10740                           tosu	equ	0xFFF
 10741                           tosh	equ	0xFFE
 10742                           tosl	equ	0xFFD
 10743                           pclath	equ	0xFFA
 10744                           tblptru	equ	0xFF8
 10745                           tblptrh	equ	0xFF7
 10746                           tblptrl	equ	0xFF6
 10747                           tablat	equ	0xFF5
 10748                           prodh	equ	0xFF4
 10749                           prodl	equ	0xFF3
 10750                           intcon	equ	0xFF2
 10751                           postinc0	equ	0xFEE
 10752                           wreg	equ	0xFE8
 10753                           postdec1	equ	0xFE5
 10754                           fsr1l	equ	0xFE1
 10755                           indf2	equ	0xFDF
 10756                           postinc2	equ	0xFDE
 10757                           postdec2	equ	0xFDD
 10758                           fsr2h	equ	0xFDA
 10759                           fsr2l	equ	0xFD9
 10760                           status	equ	0xFD8
 10761                           
 10762 ;; *************** function _do_I2C_RX *****************
 10763 ;; Defined at:
 10764 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 10765 ;; Parameters:    Size  Location     Type
 10766 ;;		None
 10767 ;; Auto vars:     Size  Location     Type
 10768 ;;		None
 10769 ;; Return value:  Size  Location     Type
 10770 ;;                  1    wreg      enum E11982
 10771 ;; Registers used:
 10772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 10773 ;; Tracked objects:
 10774 ;;		On entry : 0/0
 10775 ;;		On exit  : 0/0
 10776 ;;		Unchanged: 0/0
 10777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10782 ;;Total ram usage:        0 bytes
 10783 ;; Hardware stack levels used:    1
 10784 ;; Hardware stack levels required when called:    9
 10785 ;; This function calls:
 10786 ;;		Absolute function
 10787 ;;		_do_I2C_DO_NACK_RESTART
 10788 ;;		_do_I2C_DO_NACK_STOP
 10789 ;;		_i2c1_driver_getRXData
 10790 ;;		_i2c1_driver_sendACK
 10791 ;;		_i2c_restartWrite
 10792 ;;		_rd1RegCompleteHandler
 10793 ;;		_rd2RegCompleteHandler
 10794 ;;		_rdBlkRegCompleteHandler
 10795 ;;		_returnReset
 10796 ;;		_returnStop
 10797 ;;		_wr1RegCompleteHandler
 10798 ;;		_wr2RegCompleteHandler
 10799 ;; This function is called by:
 10800 ;;		_i2c_ISR
 10801 ;;		i2_i2c_ISR
 10802 ;; This function uses a non-reentrant model
 10803 ;;
 10804                           
 10805                           	psect	text64
 10806  003062                     __ptext64:
 10807                           	opt stack 0
 10808  003062                     _do_I2C_RX:
 10809                           	opt stack 0
 10810                           
 10811                           ; BSR set to: 0
 10812                           ;Skip over the trampoline to the duplicate function for level 2
 10813  003062  B24A               	btfsc	btemp,1,c
 10814  003064  EFE6  F018         	goto	i2_do_I2C_RX
 10815  003068                     _do_I2C_RX$intlevel0:
 10816                           	opt stack 15
 10817                           
 10818                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
 10819                           
 10820                           ;incstack = 0
 10821  003068  ECA6  F01F         	call	_i2c1_driver_getRXData	;wreg free
 10822  00306C  C0B4  FFD9         	movff	_i2c_status+2,fsr2l
 10823  003070  C0B5  FFDA         	movff	_i2c_status+3,fsr2h
 10824  003074  6EDF               	movwf	indf2,c
 10825  003076  0100               	movlb	0	; () banked
 10826  003078  4BB4               	infsnz	(_i2c_status+2)& (0+255),f,b
 10827  00307A  2BB5               	incf	(_i2c_status+3)& (0+255),f,b
 10828                           
 10829                           ; BSR set to: 0
 10830                           ;i2c_master.c: 360: if(--i2c_status.data_length)
 10831  00307C  07B6               	decf	(_i2c_status+4)& (0+255),f,b
 10832  00307E  A0D8               	btfss	status,0,c
 10833  003080  07B7               	decf	(_i2c_status+5)& (0+255),f,b
 10834  003082  51B6               	movf	(_i2c_status+4)& (0+255),w,b
 10835  003084  11B7               	iorwf	(_i2c_status+5)& (0+255),w,b
 10836  003086  B4D8               	btfsc	status,2,c
 10837  003088  D004               	goto	l445
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;i2c_master.c: 361: {
 10841                           ;i2c_master.c: 362: i2c1_driver_sendACK();
 10842  00308A  EC89  F01F         	call	_i2c1_driver_sendACK	;wreg free
 10843                           
 10844                           ;i2c_master.c: 363: return I2C_RCEN;
 10845  00308E  0E05               	movlw	5
 10846                           
 10847                           ;i2c_master.c: 364: }
 10848  003090  0012               	return	
 10849  003092                     l445:
 10850                           
 10851                           ; BSR set to: 0
 10852                           ;i2c_master.c: 365: else
 10853                           ;i2c_master.c: 366: {
 10854                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
 10855  003092  85B2               	bsf	_i2c_status& (0+255),2,b
 10856                           
 10857                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 10858  003094  D006               	goto	l448
 10859  003096                     
 10860                           ;i2c_master.c: 371: case i2c_restart_read:
 10861                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
 10862                           
 10863                           ; BSR set to: 0
 10864                           
 10865                           ; BSR set to: 0
 10866  003096  EC05  F01F         	call	_do_I2C_DO_NACK_RESTART	;wreg free
 10867  00309A  0012               	return	
 10868  00309C                     
 10869                           ;i2c_master.c: 375: case i2c_stop:
 10870                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
 10871                           
 10872                           ;i2c_master.c: 374: case i2c_continue:
 10873  00309C  EC0C  F01F         	call	_do_I2C_DO_NACK_STOP	;wreg free
 10874                           
 10875                           ;i2c_master.c: 377: }
 10876  0030A0  0012               	return	
 10877  0030A2                     l448:
 10878  0030A2  C0D0  F021         	movff	_i2c_status+30,returnStop@p
 10879  0030A6  C0D1  F022         	movff	_i2c_status+31,returnStop@p+1
 10880  0030AA  EE20  F0BE         	lfsr	2,_i2c_status+12
 10881  0030AE  D801               	call	u4418
 10882  0030B0  D00A               	goto	u4419
 10883  0030B2                     u4418:
 10884  0030B2  0005               	push	
 10885  0030B4  6EFA               	movwf	pclath,c
 10886  0030B6  50DE               	movf	postinc2,w,c
 10887  0030B8  6EFD               	movwf	tosl,c
 10888  0030BA  50DE               	movf	postinc2,w,c
 10889  0030BC  6EFE               	movwf	tosh,c
 10890  0030BE  50DE               	movf	postinc2,w,c
 10891  0030C0  6EFF               	movwf	tosu,c
 10892  0030C2  50FA               	movf	pclath,w,c
 10893  0030C4  0012               	return		;indir
 10894  0030C6                     u4419:
 10895                           
 10896                           ; Switch size 1, requested type "space"
 10897                           ; Number of cases is 4, Range of values is 1 to 4
 10898                           ; switch strategies available:
 10899                           ; Name         Instructions Cycles
 10900                           ; simple_byte           13     7 (average)
 10901                           ;	Chosen strategy is simple_byte
 10902  0030C6  0A01               	xorlw	1	; case 1
 10903  0030C8  B4D8               	btfsc	status,2,c
 10904  0030CA  D7E8               	goto	l451
 10905  0030CC  0A03               	xorlw	3	; case 2
 10906  0030CE  B4D8               	btfsc	status,2,c
 10907  0030D0  D7E2               	goto	l449
 10908  0030D2  0A01               	xorlw	1	; case 3
 10909  0030D4  B4D8               	btfsc	status,2,c
 10910  0030D6  D7DF               	goto	l449
 10911  0030D8  0A07               	xorlw	7	; case 4
 10912  0030DA  D7E0               	goto	l451
 10913  0030DC                     __end_of_do_I2C_RX:
 10914                           	opt stack 0
 10915                           tosu	equ	0xFFF
 10916                           tosh	equ	0xFFE
 10917                           tosl	equ	0xFFD
 10918                           pclath	equ	0xFFA
 10919                           tblptru	equ	0xFF8
 10920                           tblptrh	equ	0xFF7
 10921                           tblptrl	equ	0xFF6
 10922                           tablat	equ	0xFF5
 10923                           prodh	equ	0xFF4
 10924                           prodl	equ	0xFF3
 10925                           intcon	equ	0xFF2
 10926                           postinc0	equ	0xFEE
 10927                           wreg	equ	0xFE8
 10928                           postdec1	equ	0xFE5
 10929                           fsr1l	equ	0xFE1
 10930                           indf2	equ	0xFDF
 10931                           postinc2	equ	0xFDE
 10932                           postdec2	equ	0xFDD
 10933                           fsr2h	equ	0xFDA
 10934                           fsr2l	equ	0xFD9
 10935                           status	equ	0xFD8
 10936                           
 10937 ;; *************** function _do_I2C_TX *****************
 10938 ;; Defined at:
 10939 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 10940 ;; Parameters:    Size  Location     Type
 10941 ;;		None
 10942 ;; Auto vars:     Size  Location     Type
 10943 ;;		None
 10944 ;; Return value:  Size  Location     Type
 10945 ;;                  1    wreg      enum E11982
 10946 ;; Registers used:
 10947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 10948 ;; Tracked objects:
 10949 ;;		On entry : 0/0
 10950 ;;		On exit  : 0/0
 10951 ;;		Unchanged: 0/0
 10952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10956 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10957 ;;Total ram usage:        2 bytes
 10958 ;; Hardware stack levels used:    1
 10959 ;; Hardware stack levels required when called:    9
 10960 ;; This function calls:
 10961 ;;		Absolute function
 10962 ;;		_do_I2C_SEND_RESTART_READ
 10963 ;;		_do_I2C_SEND_RESTART_WRITE
 10964 ;;		_do_I2C_SEND_STOP
 10965 ;;		_i2c1_driver_TXData
 10966 ;;		_i2c1_driver_isNACK
 10967 ;;		_i2c_restartWrite
 10968 ;;		_rd1RegCompleteHandler
 10969 ;;		_rd2RegCompleteHandler
 10970 ;;		_rdBlkRegCompleteHandler
 10971 ;;		_returnReset
 10972 ;;		_returnStop
 10973 ;;		_wr1RegCompleteHandler
 10974 ;;		_wr2RegCompleteHandler
 10975 ;; This function is called by:
 10976 ;;		_i2c_ISR
 10977 ;;		i2_i2c_ISR
 10978 ;; This function uses a non-reentrant model
 10979 ;;
 10980                           
 10981                           	psect	text65
 10982  002D26                     __ptext65:
 10983                           	opt stack 0
 10984  002D26                     _do_I2C_TX:
 10985                           	opt stack 0
 10986                           
 10987                           ;Skip over the trampoline to the duplicate function for level 2
 10988  002D26  B24A               	btfsc	btemp,1,c
 10989  002D28  EF27  F017         	goto	i2_do_I2C_TX
 10990  002D2C                     _do_I2C_TX$intlevel0:
 10991                           	opt stack 15
 10992                           
 10993                           ;i2c_master.c: 335: if(i2c1_driver_isNACK())
 10994                           
 10995                           ;incstack = 0
 10996  002D2C  EC67  F01E         	call	_i2c1_driver_isNACK	;wreg free
 10997  002D30  B0D8               	btfsc	status,0,c
 10998  002D32  D00A               	goto	l430
 10999  002D34  D026               	goto	l429
 11000  002D36                     
 11001                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
 11002  002D36  EC2F  F01F         	call	_do_I2C_SEND_RESTART_READ	;wreg free
 11003  002D3A  0012               	return	
 11004  002D3C                     
 11005                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
 11006  002D3C  EC28  F01F         	call	_do_I2C_SEND_RESTART_WRITE	;wreg free
 11007  002D40  0012               	return	
 11008  002D42                     
 11009                           ;i2c_master.c: 345: case i2c_stop:
 11010                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
 11011                           
 11012                           ;i2c_master.c: 344: case i2c_continue:
 11013  002D42  EC1A  F01F         	call	_do_I2C_SEND_STOP	;wreg free
 11014                           
 11015                           ;i2c_master.c: 347: }
 11016  002D46  0012               	return	
 11017  002D48                     l430:
 11018  002D48  C0D6  F021         	movff	_i2c_status+36,returnStop@p
 11019  002D4C  C0D7  F022         	movff	_i2c_status+37,returnStop@p+1
 11020  002D50  EE20  F0C7         	lfsr	2,_i2c_status+21
 11021  002D54  D801               	call	u4388
 11022  002D56  D00A               	goto	u4389
 11023  002D58                     u4388:
 11024  002D58  0005               	push	
 11025  002D5A  6EFA               	movwf	pclath,c
 11026  002D5C  50DE               	movf	postinc2,w,c
 11027  002D5E  6EFD               	movwf	tosl,c
 11028  002D60  50DE               	movf	postinc2,w,c
 11029  002D62  6EFE               	movwf	tosh,c
 11030  002D64  50DE               	movf	postinc2,w,c
 11031  002D66  6EFF               	movwf	tosu,c
 11032  002D68  50FA               	movf	pclath,w,c
 11033  002D6A  0012               	return		;indir
 11034  002D6C                     u4389:
 11035                           
 11036                           ; Switch size 1, requested type "space"
 11037                           ; Number of cases is 4, Range of values is 1 to 4
 11038                           ; switch strategies available:
 11039                           ; Name         Instructions Cycles
 11040                           ; simple_byte           13     7 (average)
 11041                           ;	Chosen strategy is simple_byte
 11042  002D6C  0A01               	xorlw	1	; case 1
 11043  002D6E  B4D8               	btfsc	status,2,c
 11044  002D70  D7E8               	goto	l434
 11045  002D72  0A03               	xorlw	3	; case 2
 11046  002D74  B4D8               	btfsc	status,2,c
 11047  002D76  D7DF               	goto	l431
 11048  002D78  0A01               	xorlw	1	; case 3
 11049  002D7A  B4D8               	btfsc	status,2,c
 11050  002D7C  D7DF               	goto	l433
 11051  002D7E  0A07               	xorlw	7	; case 4
 11052  002D80  D7E0               	goto	l434
 11053  002D82                     l429:
 11054                           
 11055                           ;i2c_master.c: 349: else
 11056                           ;i2c_master.c: 350: {
 11057                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
 11058  002D82  0100               	movlb	0	; () banked
 11059  002D84  97B2               	bcf	_i2c_status& (0+255),3,b
 11060                           
 11061                           ; BSR set to: 0
 11062                           ;i2c_master.c: 352: i2c1_driver_TXData(*i2c_status.data_ptr++);
 11063  002D86  C0B4  FFD9         	movff	_i2c_status+2,fsr2l
 11064  002D8A  C0B5  FFDA         	movff	_i2c_status+3,fsr2h
 11065  002D8E  4BB4               	infsnz	(_i2c_status+2)& (0+255),f,b
 11066  002D90  2BB5               	incf	(_i2c_status+3)& (0+255),f,b
 11067  002D92  50DF               	movf	indf2,w,c
 11068  002D94  EC5F  F01F         	call	_i2c1_driver_TXData
 11069                           
 11070                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
 11071  002D98  0100               	movlb	0	; () banked
 11072  002D9A  07B6               	decf	(_i2c_status+4)& (0+255),f,b
 11073  002D9C  A0D8               	btfss	status,0,c
 11074  002D9E  07B7               	decf	(_i2c_status+5)& (0+255),f,b
 11075  002DA0  51B6               	movf	(_i2c_status+4)& (0+255),w,b
 11076  002DA2  11B7               	iorwf	(_i2c_status+5)& (0+255),w,b
 11077  002DA4  A4D8               	btfss	status,2,c
 11078  002DA6  D004               	goto	l440
 11079                           
 11080                           ; BSR set to: 0
 11081  002DA8  0E00               	movlw	0
 11082  002DAA  6E18               	movwf	_do_I2C_TX$1023+1,c
 11083  002DAC  0E06               	movlw	6
 11084  002DAE  D003               	goto	L4
 11085  002DB0                     l440:
 11086                           
 11087                           ; BSR set to: 0
 11088                           
 11089                           ; BSR set to: 0
 11090  002DB0  0E00               	movlw	0
 11091  002DB2  6E18               	movwf	_do_I2C_TX$1023+1,c
 11092  002DB4  0E03               	movlw	3
 11093  002DB6                     L4:
 11094  002DB6  6E17               	movwf	_do_I2C_TX$1023,c
 11095                           
 11096                           ; BSR set to: 0
 11097  002DB8  5017               	movf	_do_I2C_TX$1023,w,c
 11098                           
 11099                           ; BSR set to: 0
 11100  002DBA  0012               	return	
 11101  002DBC                     __end_of_do_I2C_TX:
 11102                           	opt stack 0
 11103                           tosu	equ	0xFFF
 11104                           tosh	equ	0xFFE
 11105                           tosl	equ	0xFFD
 11106                           pclath	equ	0xFFA
 11107                           tblptru	equ	0xFF8
 11108                           tblptrh	equ	0xFF7
 11109                           tblptrl	equ	0xFF6
 11110                           tablat	equ	0xFF5
 11111                           prodh	equ	0xFF4
 11112                           prodl	equ	0xFF3
 11113                           intcon	equ	0xFF2
 11114                           postinc0	equ	0xFEE
 11115                           wreg	equ	0xFE8
 11116                           postdec1	equ	0xFE5
 11117                           fsr1l	equ	0xFE1
 11118                           indf2	equ	0xFDF
 11119                           postinc2	equ	0xFDE
 11120                           postdec2	equ	0xFDD
 11121                           fsr2h	equ	0xFDA
 11122                           fsr2l	equ	0xFD9
 11123                           status	equ	0xFD8
 11124                           
 11125 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 11126 ;; Defined at:
 11127 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 11128 ;; Parameters:    Size  Location     Type
 11129 ;;		None
 11130 ;; Auto vars:     Size  Location     Type
 11131 ;;		None
 11132 ;; Return value:  Size  Location     Type
 11133 ;;                  1    wreg      enum E11982
 11134 ;; Registers used:
 11135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 11136 ;; Tracked objects:
 11137 ;;		On entry : 0/0
 11138 ;;		On exit  : 0/0
 11139 ;;		Unchanged: 0/0
 11140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11145 ;;Total ram usage:        0 bytes
 11146 ;; Hardware stack levels used:    1
 11147 ;; Hardware stack levels required when called:    9
 11148 ;; This function calls:
 11149 ;;		Absolute function
 11150 ;;		_do_I2C_SEND_RESTART
 11151 ;;		_do_I2C_SEND_STOP
 11152 ;;		_i2c_restartWrite
 11153 ;;		_rd1RegCompleteHandler
 11154 ;;		_rd2RegCompleteHandler
 11155 ;;		_rdBlkRegCompleteHandler
 11156 ;;		_returnReset
 11157 ;;		_returnStop
 11158 ;;		_wr1RegCompleteHandler
 11159 ;;		_wr2RegCompleteHandler
 11160 ;; This function is called by:
 11161 ;;		_i2c_ISR
 11162 ;;		i2_i2c_ISR
 11163 ;; This function uses a non-reentrant model
 11164 ;;
 11165                           
 11166                           	psect	text66
 11167  003542                     __ptext66:
 11168                           	opt stack 0
 11169  003542                     _do_I2C_DO_ADDRESS_NACK:
 11170                           	opt stack 0
 11171                           
 11172                           ;Skip over the trampoline to the duplicate function for level 2
 11173  003542  B24A               	btfsc	btemp,1,c
 11174  003544  EF5A  F01B         	goto	i2_do_I2C_DO_ADDRESS_NACK
 11175  003548                     _do_I2C_DO_ADDRESS_NACK$intlevel0:
 11176                           	opt stack 15
 11177                           
 11178                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
 11179                           
 11180                           ;incstack = 0
 11181  003548  0100               	movlb	0	; () banked
 11182  00354A  97B2               	bcf	_i2c_status& (0+255),3,b
 11183                           
 11184                           ; BSR set to: 0
 11185                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
 11186  00354C  0E02               	movlw	2
 11187  00354E  6FBD               	movwf	(_i2c_status+11)& (0+255),b
 11188                           
 11189                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
 11190  003550  D006               	goto	l421
 11191  003552                     
 11192                           ;i2c_master.c: 326: case i2c_restart_write:
 11193                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
 11194                           
 11195                           ; BSR set to: 0
 11196                           
 11197                           ; BSR set to: 0
 11198  003552  EC21  F01F         	call	_do_I2C_SEND_RESTART	;wreg free
 11199  003556  0012               	return	
 11200  003558                     
 11201                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
 11202  003558  EC1A  F01F         	call	_do_I2C_SEND_STOP	;wreg free
 11203                           
 11204                           ;i2c_master.c: 330: }
 11205  00355C  0012               	return	
 11206  00355E                     l421:
 11207  00355E  C0D4  F021         	movff	_i2c_status+34,returnStop@p
 11208  003562  C0D5  F022         	movff	_i2c_status+35,returnStop@p+1
 11209  003566  EE20  F0C4         	lfsr	2,_i2c_status+18
 11210  00356A  D801               	call	u4368
 11211  00356C  D00A               	goto	u4369
 11212  00356E                     u4368:
 11213  00356E  0005               	push	
 11214  003570  6EFA               	movwf	pclath,c
 11215  003572  50DE               	movf	postinc2,w,c
 11216  003574  6EFD               	movwf	tosl,c
 11217  003576  50DE               	movf	postinc2,w,c
 11218  003578  6EFE               	movwf	tosh,c
 11219  00357A  50DE               	movf	postinc2,w,c
 11220  00357C  6EFF               	movwf	tosu,c
 11221  00357E  50FA               	movf	pclath,w,c
 11222  003580  0012               	return		;indir
 11223  003582                     u4369:
 11224                           
 11225                           ; Switch size 1, requested type "space"
 11226                           ; Number of cases is 2, Range of values is 2 to 3
 11227                           ; switch strategies available:
 11228                           ; Name         Instructions Cycles
 11229                           ; simple_byte            7     4 (average)
 11230                           ;	Chosen strategy is simple_byte
 11231  003582  0A02               	xorlw	2	; case 2
 11232  003584  B4D8               	btfsc	status,2,c
 11233  003586  D7E5               	goto	l422
 11234  003588  0A01               	xorlw	1	; case 3
 11235  00358A  B4D8               	btfsc	status,2,c
 11236  00358C  D7E2               	goto	l422
 11237  00358E  D7E4               	goto	l425
 11238  003590                     __end_of_do_I2C_DO_ADDRESS_NACK:
 11239                           	opt stack 0
 11240                           tosu	equ	0xFFF
 11241                           tosh	equ	0xFFE
 11242                           tosl	equ	0xFFD
 11243                           pclath	equ	0xFFA
 11244                           tblptru	equ	0xFF8
 11245                           tblptrh	equ	0xFF7
 11246                           tblptrl	equ	0xFF6
 11247                           tablat	equ	0xFF5
 11248                           prodh	equ	0xFF4
 11249                           prodl	equ	0xFF3
 11250                           intcon	equ	0xFF2
 11251                           postinc0	equ	0xFEE
 11252                           wreg	equ	0xFE8
 11253                           postdec1	equ	0xFE5
 11254                           fsr1l	equ	0xFE1
 11255                           indf2	equ	0xFDF
 11256                           postinc2	equ	0xFDE
 11257                           postdec2	equ	0xFDD
 11258                           fsr2h	equ	0xFDA
 11259                           fsr2l	equ	0xFD9
 11260                           status	equ	0xFD8
 11261                           
 11262 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 11263 ;; Defined at:
 11264 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 11265 ;; Parameters:    Size  Location     Type
 11266 ;;		None
 11267 ;; Auto vars:     Size  Location     Type
 11268 ;;		None
 11269 ;; Return value:  Size  Location     Type
 11270 ;;                  1    wreg      enum E11982
 11271 ;; Registers used:
 11272 ;;		wreg, cstack
 11273 ;; Tracked objects:
 11274 ;;		On entry : 0/0
 11275 ;;		On exit  : 0/0
 11276 ;;		Unchanged: 0/0
 11277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11282 ;;Total ram usage:        0 bytes
 11283 ;; Hardware stack levels used:    1
 11284 ;; Hardware stack levels required when called:    7
 11285 ;; This function calls:
 11286 ;;		_i2c1_driver_sendNACK
 11287 ;; This function is called by:
 11288 ;;		_do_I2C_RX
 11289 ;;		_i2c_ISR
 11290 ;;		i2_i2c_ISR
 11291 ;; This function uses a non-reentrant model
 11292 ;;
 11293                           
 11294                           	psect	text67
 11295  003E0A                     __ptext67:
 11296                           	opt stack 0
 11297  003E0A                     _do_I2C_DO_NACK_RESTART:
 11298                           	opt stack 0
 11299                           
 11300                           ;Skip over the trampoline to the duplicate function for level 2
 11301  003E0A  B24A               	btfsc	btemp,1,c
 11302  003E0C  EF63  F01F         	goto	i2_do_I2C_DO_NACK_RESTART
 11303  003E10                     _do_I2C_DO_NACK_RESTART$intlevel0:
 11304                           	opt stack 16
 11305                           
 11306                           ;i2c_master.c: 313: i2c1_driver_sendNACK();
 11307                           
 11308                           ;incstack = 0
 11309  003E10  EC86  F01F         	call	_i2c1_driver_sendNACK	;wreg free
 11310                           
 11311                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
 11312  003E14  0E09               	movlw	9
 11313  003E16  0012               	return	
 11314  003E18                     __end_of_do_I2C_DO_NACK_RESTART:
 11315                           	opt stack 0
 11316                           tosu	equ	0xFFF
 11317                           tosh	equ	0xFFE
 11318                           tosl	equ	0xFFD
 11319                           pclath	equ	0xFFA
 11320                           tblptru	equ	0xFF8
 11321                           tblptrh	equ	0xFF7
 11322                           tblptrl	equ	0xFF6
 11323                           tablat	equ	0xFF5
 11324                           prodh	equ	0xFF4
 11325                           prodl	equ	0xFF3
 11326                           intcon	equ	0xFF2
 11327                           postinc0	equ	0xFEE
 11328                           wreg	equ	0xFE8
 11329                           postdec1	equ	0xFE5
 11330                           fsr1l	equ	0xFE1
 11331                           indf2	equ	0xFDF
 11332                           postinc2	equ	0xFDE
 11333                           postdec2	equ	0xFDD
 11334                           fsr2h	equ	0xFDA
 11335                           fsr2l	equ	0xFD9
 11336                           status	equ	0xFD8
 11337                           
 11338 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 11339 ;; Defined at:
 11340 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 11341 ;; Parameters:    Size  Location     Type
 11342 ;;		None
 11343 ;; Auto vars:     Size  Location     Type
 11344 ;;		None
 11345 ;; Return value:  Size  Location     Type
 11346 ;;                  1    wreg      enum E11982
 11347 ;; Registers used:
 11348 ;;		wreg, cstack
 11349 ;; Tracked objects:
 11350 ;;		On entry : 0/0
 11351 ;;		On exit  : 0/0
 11352 ;;		Unchanged: 0/0
 11353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11358 ;;Total ram usage:        0 bytes
 11359 ;; Hardware stack levels used:    1
 11360 ;; Hardware stack levels required when called:    7
 11361 ;; This function calls:
 11362 ;;		_i2c1_driver_sendNACK
 11363 ;; This function is called by:
 11364 ;;		_do_I2C_RX
 11365 ;;		_i2c_ISR
 11366 ;;		i2_i2c_ISR
 11367 ;; This function uses a non-reentrant model
 11368 ;;
 11369                           
 11370                           	psect	text68
 11371  003E18                     __ptext68:
 11372                           	opt stack 0
 11373  003E18                     _do_I2C_DO_NACK_STOP:
 11374                           	opt stack 0
 11375                           
 11376                           ;Skip over the trampoline to the duplicate function for level 2
 11377  003E18  B24A               	btfsc	btemp,1,c
 11378  003E1A  EF67  F01F         	goto	i2_do_I2C_DO_NACK_STOP
 11379  003E1E                     _do_I2C_DO_NACK_STOP$intlevel0:
 11380                           	opt stack 16
 11381                           
 11382                           ;i2c_master.c: 307: i2c1_driver_sendNACK();
 11383                           
 11384                           ;incstack = 0
 11385  003E1E  EC86  F01F         	call	_i2c1_driver_sendNACK	;wreg free
 11386                           
 11387                           ;i2c_master.c: 308: return I2C_SEND_STOP;
 11388  003E22  0E0A               	movlw	10
 11389  003E24  0012               	return	
 11390  003E26                     __end_of_do_I2C_DO_NACK_STOP:
 11391                           	opt stack 0
 11392                           tosu	equ	0xFFF
 11393                           tosh	equ	0xFFE
 11394                           tosl	equ	0xFFD
 11395                           pclath	equ	0xFFA
 11396                           tblptru	equ	0xFF8
 11397                           tblptrh	equ	0xFF7
 11398                           tblptrl	equ	0xFF6
 11399                           tablat	equ	0xFF5
 11400                           prodh	equ	0xFF4
 11401                           prodl	equ	0xFF3
 11402                           intcon	equ	0xFF2
 11403                           postinc0	equ	0xFEE
 11404                           wreg	equ	0xFE8
 11405                           postdec1	equ	0xFE5
 11406                           fsr1l	equ	0xFE1
 11407                           indf2	equ	0xFDF
 11408                           postinc2	equ	0xFDE
 11409                           postdec2	equ	0xFDD
 11410                           fsr2h	equ	0xFDA
 11411                           fsr2l	equ	0xFD9
 11412                           status	equ	0xFD8
 11413                           
 11414 ;; *************** function _do_I2C_DO_ACK *****************
 11415 ;; Defined at:
 11416 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 11417 ;; Parameters:    Size  Location     Type
 11418 ;;		None
 11419 ;; Auto vars:     Size  Location     Type
 11420 ;;		None
 11421 ;; Return value:  Size  Location     Type
 11422 ;;                  1    wreg      enum E11982
 11423 ;; Registers used:
 11424 ;;		wreg, cstack
 11425 ;; Tracked objects:
 11426 ;;		On entry : 0/0
 11427 ;;		On exit  : 0/0
 11428 ;;		Unchanged: 0/0
 11429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11434 ;;Total ram usage:        0 bytes
 11435 ;; Hardware stack levels used:    1
 11436 ;; Hardware stack levels required when called:    7
 11437 ;; This function calls:
 11438 ;;		_i2c1_driver_sendACK
 11439 ;; This function is called by:
 11440 ;;		_i2c_ISR
 11441 ;;		i2_i2c_ISR
 11442 ;; This function uses a non-reentrant model
 11443 ;;
 11444                           
 11445                           	psect	text69
 11446  003E26                     __ptext69:
 11447                           	opt stack 0
 11448  003E26                     _do_I2C_DO_ACK:
 11449                           	opt stack 0
 11450                           
 11451                           ;Skip over the trampoline to the duplicate function for level 2
 11452  003E26  B24A               	btfsc	btemp,1,c
 11453  003E28  EF6B  F01F         	goto	i2_do_I2C_DO_ACK
 11454  003E2C                     _do_I2C_DO_ACK$intlevel0:
 11455                           	opt stack 17
 11456                           
 11457                           ;i2c_master.c: 301: i2c1_driver_sendACK();
 11458                           
 11459                           ;incstack = 0
 11460  003E2C  EC89  F01F         	call	_i2c1_driver_sendACK	;wreg free
 11461                           
 11462                           ;i2c_master.c: 302: return I2C_RCEN;
 11463  003E30  0E05               	movlw	5
 11464  003E32  0012               	return	
 11465  003E34                     __end_of_do_I2C_DO_ACK:
 11466                           	opt stack 0
 11467                           tosu	equ	0xFFF
 11468                           tosh	equ	0xFFE
 11469                           tosl	equ	0xFFD
 11470                           pclath	equ	0xFFA
 11471                           tblptru	equ	0xFF8
 11472                           tblptrh	equ	0xFF7
 11473                           tblptrl	equ	0xFF6
 11474                           tablat	equ	0xFF5
 11475                           prodh	equ	0xFF4
 11476                           prodl	equ	0xFF3
 11477                           intcon	equ	0xFF2
 11478                           postinc0	equ	0xFEE
 11479                           wreg	equ	0xFE8
 11480                           postdec1	equ	0xFE5
 11481                           fsr1l	equ	0xFE1
 11482                           indf2	equ	0xFDF
 11483                           postinc2	equ	0xFDE
 11484                           postdec2	equ	0xFDD
 11485                           fsr2h	equ	0xFDA
 11486                           fsr2l	equ	0xFD9
 11487                           status	equ	0xFD8
 11488                           
 11489 ;; *************** function _do_I2C_RCEN *****************
 11490 ;; Defined at:
 11491 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 11492 ;; Parameters:    Size  Location     Type
 11493 ;;		None
 11494 ;; Auto vars:     Size  Location     Type
 11495 ;;		None
 11496 ;; Return value:  Size  Location     Type
 11497 ;;                  1    wreg      enum E11982
 11498 ;; Registers used:
 11499 ;;		wreg, cstack
 11500 ;; Tracked objects:
 11501 ;;		On entry : 0/0
 11502 ;;		On exit  : 0/0
 11503 ;;		Unchanged: 0/0
 11504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11509 ;;Total ram usage:        0 bytes
 11510 ;; Hardware stack levels used:    1
 11511 ;; Hardware stack levels required when called:    7
 11512 ;; This function calls:
 11513 ;;		_i2c1_driver_startRX
 11514 ;; This function is called by:
 11515 ;;		_i2c_ISR
 11516 ;;		i2_i2c_ISR
 11517 ;; This function uses a non-reentrant model
 11518 ;;
 11519                           
 11520                           	psect	text70
 11521  003D6E                     __ptext70:
 11522                           	opt stack 0
 11523  003D6E                     _do_I2C_RCEN:
 11524                           	opt stack 0
 11525                           
 11526                           ;Skip over the trampoline to the duplicate function for level 2
 11527  003D6E  B24A               	btfsc	btemp,1,c
 11528  003D70  EF3C  F01F         	goto	i2_do_I2C_RCEN
 11529  003D74                     _do_I2C_RCEN$intlevel0:
 11530                           	opt stack 17
 11531                           
 11532                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
 11533                           
 11534                           ;incstack = 0
 11535  003D74  0100               	movlb	0	; () banked
 11536  003D76  97B2               	bcf	_i2c_status& (0+255),3,b
 11537                           
 11538                           ; BSR set to: 0
 11539                           ;i2c_master.c: 295: i2c1_driver_startRX();
 11540  003D78  ECA8  F01F         	call	_i2c1_driver_startRX	;wreg free
 11541                           
 11542                           ;i2c_master.c: 296: return I2C_RX;
 11543  003D7C  0E04               	movlw	4
 11544  003D7E  0012               	return	
 11545  003D80                     __end_of_do_I2C_RCEN:
 11546                           	opt stack 0
 11547                           tosu	equ	0xFFF
 11548                           tosh	equ	0xFFE
 11549                           tosl	equ	0xFFD
 11550                           pclath	equ	0xFFA
 11551                           tblptru	equ	0xFF8
 11552                           tblptrh	equ	0xFF7
 11553                           tblptrl	equ	0xFF6
 11554                           tablat	equ	0xFF5
 11555                           prodh	equ	0xFF4
 11556                           prodl	equ	0xFF3
 11557                           intcon	equ	0xFF2
 11558                           postinc0	equ	0xFEE
 11559                           wreg	equ	0xFE8
 11560                           postdec1	equ	0xFE5
 11561                           fsr1l	equ	0xFE1
 11562                           indf2	equ	0xFDF
 11563                           postinc2	equ	0xFDE
 11564                           postdec2	equ	0xFDD
 11565                           fsr2h	equ	0xFDA
 11566                           fsr2l	equ	0xFD9
 11567                           status	equ	0xFD8
 11568                           
 11569 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 11570 ;; Defined at:
 11571 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 11572 ;; Parameters:    Size  Location     Type
 11573 ;;		None
 11574 ;; Auto vars:     Size  Location     Type
 11575 ;;		None
 11576 ;; Return value:  Size  Location     Type
 11577 ;;                  1    wreg      enum E11982
 11578 ;; Registers used:
 11579 ;;		wreg, status,2, status,0, cstack
 11580 ;; Tracked objects:
 11581 ;;		On entry : 0/0
 11582 ;;		On exit  : 0/0
 11583 ;;		Unchanged: 0/0
 11584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11589 ;;Total ram usage:        0 bytes
 11590 ;; Hardware stack levels used:    1
 11591 ;; Hardware stack levels required when called:    7
 11592 ;; This function calls:
 11593 ;;		_i2c1_driver_TXData
 11594 ;; This function is called by:
 11595 ;;		_i2c_ISR
 11596 ;;		i2_i2c_ISR
 11597 ;; This function uses a non-reentrant model
 11598 ;;
 11599                           
 11600                           	psect	text71
 11601  003C8C                     __ptext71:
 11602                           	opt stack 0
 11603  003C8C                     _do_I2C_SEND_ADR_WRITE:
 11604                           	opt stack 0
 11605                           
 11606                           ;Skip over the trampoline to the duplicate function for level 2
 11607  003C8C  B24A               	btfsc	btemp,1,c
 11608  003C8E  EFD1  F01E         	goto	i2_do_I2C_SEND_ADR_WRITE
 11609  003C92                     _do_I2C_SEND_ADR_WRITE$intlevel0:
 11610                           	opt stack 17
 11611                           
 11612                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
 11613                           
 11614                           ;incstack = 0
 11615  003C92  0100               	movlb	0	; () banked
 11616  003C94  87B2               	bsf	_i2c_status& (0+255),3,b
 11617                           
 11618                           ; BSR set to: 0
 11619                           ;i2c_master.c: 288: i2c1_driver_TXData(i2c_status.address << 1);
 11620  003C96  51B3               	movf	(_i2c_status+1)& (0+255),w,b
 11621  003C98  25B3               	addwf	(_i2c_status+1)& (0+255),w,b
 11622  003C9A  EC5F  F01F         	call	_i2c1_driver_TXData
 11623                           
 11624                           ;i2c_master.c: 289: return I2C_TX;
 11625  003C9E  0E03               	movlw	3
 11626  003CA0  0012               	return	
 11627  003CA2                     __end_of_do_I2C_SEND_ADR_WRITE:
 11628                           	opt stack 0
 11629                           tosu	equ	0xFFF
 11630                           tosh	equ	0xFFE
 11631                           tosl	equ	0xFFD
 11632                           pclath	equ	0xFFA
 11633                           tblptru	equ	0xFF8
 11634                           tblptrh	equ	0xFF7
 11635                           tblptrl	equ	0xFF6
 11636                           tablat	equ	0xFF5
 11637                           prodh	equ	0xFF4
 11638                           prodl	equ	0xFF3
 11639                           intcon	equ	0xFF2
 11640                           postinc0	equ	0xFEE
 11641                           wreg	equ	0xFE8
 11642                           postdec1	equ	0xFE5
 11643                           fsr1l	equ	0xFE1
 11644                           indf2	equ	0xFDF
 11645                           postinc2	equ	0xFDE
 11646                           postdec2	equ	0xFDD
 11647                           fsr2h	equ	0xFDA
 11648                           fsr2l	equ	0xFD9
 11649                           status	equ	0xFD8
 11650                           
 11651 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 11652 ;; Defined at:
 11653 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 11654 ;; Parameters:    Size  Location     Type
 11655 ;;		None
 11656 ;; Auto vars:     Size  Location     Type
 11657 ;;		None
 11658 ;; Return value:  Size  Location     Type
 11659 ;;                  1    wreg      enum E11982
 11660 ;; Registers used:
 11661 ;;		wreg, status,0, cstack
 11662 ;; Tracked objects:
 11663 ;;		On entry : 0/0
 11664 ;;		On exit  : 0/0
 11665 ;;		Unchanged: 0/0
 11666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11671 ;;Total ram usage:        0 bytes
 11672 ;; Hardware stack levels used:    1
 11673 ;; Hardware stack levels required when called:    7
 11674 ;; This function calls:
 11675 ;;		_i2c1_driver_TXData
 11676 ;; This function is called by:
 11677 ;;		_i2c_ISR
 11678 ;;		i2_i2c_ISR
 11679 ;; This function uses a non-reentrant model
 11680 ;;
 11681                           
 11682                           	psect	text72
 11683  003CA2                     __ptext72:
 11684                           	opt stack 0
 11685  003CA2                     _do_I2C_SEND_ADR_READ:
 11686                           	opt stack 0
 11687                           
 11688                           ;Skip over the trampoline to the duplicate function for level 2
 11689  003CA2  B24A               	btfsc	btemp,1,c
 11690  003CA4  EFD9  F01E         	goto	i2_do_I2C_SEND_ADR_READ
 11691  003CA8                     _do_I2C_SEND_ADR_READ$intlevel0:
 11692                           	opt stack 17
 11693                           
 11694                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
 11695                           
 11696                           ;incstack = 0
 11697  003CA8  0100               	movlb	0	; () banked
 11698  003CAA  87B2               	bsf	_i2c_status& (0+255),3,b
 11699                           
 11700                           ; BSR set to: 0
 11701                           ;i2c_master.c: 281: i2c1_driver_TXData(i2c_status.address << 1 | 1);
 11702  003CAC  80D8               	bsf	status,0,c
 11703  003CAE  35B3               	rlcf	(_i2c_status+1)& (0+255),w,b
 11704  003CB0  EC5F  F01F         	call	_i2c1_driver_TXData
 11705                           
 11706                           ;i2c_master.c: 282: return I2C_RCEN;
 11707  003CB4  0E05               	movlw	5
 11708  003CB6  0012               	return	
 11709  003CB8                     __end_of_do_I2C_SEND_ADR_READ:
 11710                           	opt stack 0
 11711                           tosu	equ	0xFFF
 11712                           tosh	equ	0xFFE
 11713                           tosl	equ	0xFFD
 11714                           pclath	equ	0xFFA
 11715                           tblptru	equ	0xFF8
 11716                           tblptrh	equ	0xFF7
 11717                           tblptrl	equ	0xFF6
 11718                           tablat	equ	0xFF5
 11719                           prodh	equ	0xFF4
 11720                           prodl	equ	0xFF3
 11721                           intcon	equ	0xFF2
 11722                           postinc0	equ	0xFEE
 11723                           wreg	equ	0xFE8
 11724                           postdec1	equ	0xFE5
 11725                           fsr1l	equ	0xFE1
 11726                           indf2	equ	0xFDF
 11727                           postinc2	equ	0xFDE
 11728                           postdec2	equ	0xFDD
 11729                           fsr2h	equ	0xFDA
 11730                           fsr2l	equ	0xFD9
 11731                           status	equ	0xFD8
 11732                           
 11733 ;; *************** function _do_I2C_SEND_STOP *****************
 11734 ;; Defined at:
 11735 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 11736 ;; Parameters:    Size  Location     Type
 11737 ;;		None
 11738 ;; Auto vars:     Size  Location     Type
 11739 ;;		None
 11740 ;; Return value:  Size  Location     Type
 11741 ;;                  1    wreg      enum E11982
 11742 ;; Registers used:
 11743 ;;		wreg, cstack
 11744 ;; Tracked objects:
 11745 ;;		On entry : 0/0
 11746 ;;		On exit  : 0/0
 11747 ;;		Unchanged: 0/0
 11748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11753 ;;Total ram usage:        0 bytes
 11754 ;; Hardware stack levels used:    1
 11755 ;; Hardware stack levels required when called:    7
 11756 ;; This function calls:
 11757 ;;		_i2c1_driver_stop
 11758 ;; This function is called by:
 11759 ;;		_do_I2C_DO_ADDRESS_NACK
 11760 ;;		_do_I2C_TX
 11761 ;;		_do_I2C_TX_EMPTY
 11762 ;;		_i2c_ISR
 11763 ;;		i2_i2c_ISR
 11764 ;; This function uses a non-reentrant model
 11765 ;;
 11766                           
 11767                           	psect	text73
 11768  003E34                     __ptext73:
 11769                           	opt stack 0
 11770  003E34                     _do_I2C_SEND_STOP:
 11771                           	opt stack 0
 11772                           
 11773                           ;Skip over the trampoline to the duplicate function for level 2
 11774  003E34  B24A               	btfsc	btemp,1,c
 11775  003E36  EF6F  F01F         	goto	i2_do_I2C_SEND_STOP
 11776  003E3A                     _do_I2C_SEND_STOP$intlevel0:
 11777                           	opt stack 16
 11778                           
 11779                           ;i2c_master.c: 274: i2c1_driver_stop();
 11780                           
 11781                           ;incstack = 0
 11782  003E3A  ECAA  F01F         	call	_i2c1_driver_stop	;wreg free
 11783                           
 11784                           ;i2c_master.c: 275: return I2C_IDLE;
 11785  003E3E  0E00               	movlw	0
 11786  003E40  0012               	return	
 11787  003E42                     __end_of_do_I2C_SEND_STOP:
 11788                           	opt stack 0
 11789                           tosu	equ	0xFFF
 11790                           tosh	equ	0xFFE
 11791                           tosl	equ	0xFFD
 11792                           pclath	equ	0xFFA
 11793                           tblptru	equ	0xFF8
 11794                           tblptrh	equ	0xFF7
 11795                           tblptrl	equ	0xFF6
 11796                           tablat	equ	0xFF5
 11797                           prodh	equ	0xFF4
 11798                           prodl	equ	0xFF3
 11799                           intcon	equ	0xFF2
 11800                           postinc0	equ	0xFEE
 11801                           wreg	equ	0xFE8
 11802                           postdec1	equ	0xFE5
 11803                           fsr1l	equ	0xFE1
 11804                           indf2	equ	0xFDF
 11805                           postinc2	equ	0xFDE
 11806                           postdec2	equ	0xFDD
 11807                           fsr2h	equ	0xFDA
 11808                           fsr2l	equ	0xFD9
 11809                           status	equ	0xFD8
 11810                           
 11811 ;; *************** function _do_I2C_SEND_RESTART *****************
 11812 ;; Defined at:
 11813 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 11814 ;; Parameters:    Size  Location     Type
 11815 ;;		None
 11816 ;; Auto vars:     Size  Location     Type
 11817 ;;		None
 11818 ;; Return value:  Size  Location     Type
 11819 ;;                  1    wreg      enum E11982
 11820 ;; Registers used:
 11821 ;;		wreg, cstack
 11822 ;; Tracked objects:
 11823 ;;		On entry : 0/0
 11824 ;;		On exit  : 0/0
 11825 ;;		Unchanged: 0/0
 11826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11831 ;;Total ram usage:        0 bytes
 11832 ;; Hardware stack levels used:    1
 11833 ;; Hardware stack levels required when called:    7
 11834 ;; This function calls:
 11835 ;;		_i2c1_driver_restart
 11836 ;; This function is called by:
 11837 ;;		_do_I2C_DO_ADDRESS_NACK
 11838 ;;		_do_I2C_TX_EMPTY
 11839 ;;		_i2c_ISR
 11840 ;;		i2_i2c_ISR
 11841 ;; This function uses a non-reentrant model
 11842 ;;
 11843                           
 11844                           	psect	text74
 11845  003E42                     __ptext74:
 11846                           	opt stack 0
 11847  003E42                     _do_I2C_SEND_RESTART:
 11848                           	opt stack 0
 11849                           
 11850                           ;Skip over the trampoline to the duplicate function for level 2
 11851  003E42  B24A               	btfsc	btemp,1,c
 11852  003E44  EF73  F01F         	goto	i2_do_I2C_SEND_RESTART
 11853  003E48                     _do_I2C_SEND_RESTART$intlevel0:
 11854                           	opt stack 16
 11855                           
 11856                           ;i2c_master.c: 268: i2c1_driver_restart();
 11857                           
 11858                           ;incstack = 0
 11859  003E48  ECAC  F01F         	call	_i2c1_driver_restart	;wreg free
 11860                           
 11861                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
 11862  003E4C  0E01               	movlw	1
 11863  003E4E  0012               	return	
 11864  003E50                     __end_of_do_I2C_SEND_RESTART:
 11865                           	opt stack 0
 11866                           tosu	equ	0xFFF
 11867                           tosh	equ	0xFFE
 11868                           tosl	equ	0xFFD
 11869                           pclath	equ	0xFFA
 11870                           tblptru	equ	0xFF8
 11871                           tblptrh	equ	0xFF7
 11872                           tblptrl	equ	0xFF6
 11873                           tablat	equ	0xFF5
 11874                           prodh	equ	0xFF4
 11875                           prodl	equ	0xFF3
 11876                           intcon	equ	0xFF2
 11877                           postinc0	equ	0xFEE
 11878                           wreg	equ	0xFE8
 11879                           postdec1	equ	0xFE5
 11880                           fsr1l	equ	0xFE1
 11881                           indf2	equ	0xFDF
 11882                           postinc2	equ	0xFDE
 11883                           postdec2	equ	0xFDD
 11884                           fsr2h	equ	0xFDA
 11885                           fsr2l	equ	0xFD9
 11886                           status	equ	0xFD8
 11887                           
 11888 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 11889 ;; Defined at:
 11890 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 11891 ;; Parameters:    Size  Location     Type
 11892 ;;		None
 11893 ;; Auto vars:     Size  Location     Type
 11894 ;;		None
 11895 ;; Return value:  Size  Location     Type
 11896 ;;                  1    wreg      enum E11982
 11897 ;; Registers used:
 11898 ;;		wreg, cstack
 11899 ;; Tracked objects:
 11900 ;;		On entry : 0/0
 11901 ;;		On exit  : 0/0
 11902 ;;		Unchanged: 0/0
 11903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11908 ;;Total ram usage:        0 bytes
 11909 ;; Hardware stack levels used:    1
 11910 ;; Hardware stack levels required when called:    7
 11911 ;; This function calls:
 11912 ;;		_i2c1_driver_restart
 11913 ;; This function is called by:
 11914 ;;		_do_I2C_TX
 11915 ;;		_i2c_ISR
 11916 ;;		i2_i2c_ISR
 11917 ;; This function uses a non-reentrant model
 11918 ;;
 11919                           
 11920                           	psect	text75
 11921  003E50                     __ptext75:
 11922                           	opt stack 0
 11923  003E50                     _do_I2C_SEND_RESTART_WRITE:
 11924                           	opt stack 0
 11925                           
 11926                           ;Skip over the trampoline to the duplicate function for level 2
 11927  003E50  B24A               	btfsc	btemp,1,c
 11928  003E52  EF77  F01F         	goto	i2_do_I2C_SEND_RESTART_WRITE
 11929  003E56                     _do_I2C_SEND_RESTART_WRITE$intlevel0:
 11930                           	opt stack 16
 11931                           
 11932                           ;i2c_master.c: 262: i2c1_driver_restart();
 11933                           
 11934                           ;incstack = 0
 11935  003E56  ECAC  F01F         	call	_i2c1_driver_restart	;wreg free
 11936                           
 11937                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
 11938  003E5A  0E02               	movlw	2
 11939  003E5C  0012               	return	
 11940  003E5E                     __end_of_do_I2C_SEND_RESTART_WRITE:
 11941                           	opt stack 0
 11942                           tosu	equ	0xFFF
 11943                           tosh	equ	0xFFE
 11944                           tosl	equ	0xFFD
 11945                           pclath	equ	0xFFA
 11946                           tblptru	equ	0xFF8
 11947                           tblptrh	equ	0xFF7
 11948                           tblptrl	equ	0xFF6
 11949                           tablat	equ	0xFF5
 11950                           prodh	equ	0xFF4
 11951                           prodl	equ	0xFF3
 11952                           intcon	equ	0xFF2
 11953                           postinc0	equ	0xFEE
 11954                           wreg	equ	0xFE8
 11955                           postdec1	equ	0xFE5
 11956                           fsr1l	equ	0xFE1
 11957                           indf2	equ	0xFDF
 11958                           postinc2	equ	0xFDE
 11959                           postdec2	equ	0xFDD
 11960                           fsr2h	equ	0xFDA
 11961                           fsr2l	equ	0xFD9
 11962                           status	equ	0xFD8
 11963                           
 11964 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 11965 ;; Defined at:
 11966 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 11967 ;; Parameters:    Size  Location     Type
 11968 ;;		None
 11969 ;; Auto vars:     Size  Location     Type
 11970 ;;		None
 11971 ;; Return value:  Size  Location     Type
 11972 ;;                  1    wreg      enum E11982
 11973 ;; Registers used:
 11974 ;;		wreg, cstack
 11975 ;; Tracked objects:
 11976 ;;		On entry : 0/0
 11977 ;;		On exit  : 0/0
 11978 ;;		Unchanged: 0/0
 11979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11984 ;;Total ram usage:        0 bytes
 11985 ;; Hardware stack levels used:    1
 11986 ;; Hardware stack levels required when called:    7
 11987 ;; This function calls:
 11988 ;;		_i2c1_driver_restart
 11989 ;; This function is called by:
 11990 ;;		_do_I2C_TX
 11991 ;;		_i2c_ISR
 11992 ;;		i2_i2c_ISR
 11993 ;; This function uses a non-reentrant model
 11994 ;;
 11995                           
 11996                           	psect	text76
 11997  003E5E                     __ptext76:
 11998                           	opt stack 0
 11999  003E5E                     _do_I2C_SEND_RESTART_READ:
 12000                           	opt stack 0
 12001                           
 12002                           ;Skip over the trampoline to the duplicate function for level 2
 12003  003E5E  B24A               	btfsc	btemp,1,c
 12004  003E60  EF7B  F01F         	goto	i2_do_I2C_SEND_RESTART_READ
 12005  003E64                     _do_I2C_SEND_RESTART_READ$intlevel0:
 12006                           	opt stack 16
 12007                           
 12008                           ;i2c_master.c: 256: i2c1_driver_restart();
 12009                           
 12010                           ;incstack = 0
 12011  003E64  ECAC  F01F         	call	_i2c1_driver_restart	;wreg free
 12012                           
 12013                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
 12014  003E68  0E01               	movlw	1
 12015  003E6A  0012               	return	
 12016  003E6C                     __end_of_do_I2C_SEND_RESTART_READ:
 12017                           	opt stack 0
 12018                           tosu	equ	0xFFF
 12019                           tosh	equ	0xFFE
 12020                           tosl	equ	0xFFD
 12021                           pclath	equ	0xFFA
 12022                           tblptru	equ	0xFF8
 12023                           tblptrh	equ	0xFF7
 12024                           tblptrl	equ	0xFF6
 12025                           tablat	equ	0xFF5
 12026                           prodh	equ	0xFF4
 12027                           prodl	equ	0xFF3
 12028                           intcon	equ	0xFF2
 12029                           postinc0	equ	0xFEE
 12030                           wreg	equ	0xFE8
 12031                           postdec1	equ	0xFE5
 12032                           fsr1l	equ	0xFE1
 12033                           indf2	equ	0xFDF
 12034                           postinc2	equ	0xFDE
 12035                           postdec2	equ	0xFDD
 12036                           fsr2h	equ	0xFDA
 12037                           fsr2l	equ	0xFD9
 12038                           status	equ	0xFD8
 12039                           
 12040 ;; *************** function _do_I2C_IDLE *****************
 12041 ;; Defined at:
 12042 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 12043 ;; Parameters:    Size  Location     Type
 12044 ;;		None
 12045 ;; Auto vars:     Size  Location     Type
 12046 ;;		None
 12047 ;; Return value:  Size  Location     Type
 12048 ;;                  1    wreg      enum E11982
 12049 ;; Registers used:
 12050 ;;		wreg, status,2
 12051 ;; Tracked objects:
 12052 ;;		On entry : 0/0
 12053 ;;		On exit  : 0/0
 12054 ;;		Unchanged: 0/0
 12055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12060 ;;Total ram usage:        0 bytes
 12061 ;; Hardware stack levels used:    1
 12062 ;; Hardware stack levels required when called:    6
 12063 ;; This function calls:
 12064 ;;		Nothing
 12065 ;; This function is called by:
 12066 ;;		_i2c_ISR
 12067 ;;		i2_i2c_ISR
 12068 ;; This function uses a non-reentrant model
 12069 ;;
 12070                           
 12071                           	psect	text77
 12072  003D80                     __ptext77:
 12073                           	opt stack 0
 12074  003D80                     _do_I2C_IDLE:
 12075                           	opt stack 0
 12076                           
 12077                           ;Skip over the trampoline to the duplicate function for level 2
 12078  003D80  B24A               	btfsc	btemp,1,c
 12079  003D82  EF42  F01F         	goto	i2_do_I2C_IDLE
 12080  003D86                     _do_I2C_IDLE$intlevel0:
 12081                           	opt stack 18
 12082                           
 12083                           ;i2c_master.c: 249: i2c_status.busy = 0;
 12084                           
 12085                           ;incstack = 0
 12086  003D86  0100               	movlb	0	; () banked
 12087  003D88  91B2               	bcf	_i2c_status& (0+255),0,b
 12088                           
 12089                           ; BSR set to: 0
 12090                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
 12091  003D8A  0E00               	movlw	0
 12092  003D8C  6FBD               	movwf	(_i2c_status+11)& (0+255),b
 12093                           
 12094                           ; BSR set to: 0
 12095                           ;i2c_master.c: 251: return I2C_RESET;
 12096  003D8E  0E0E               	movlw	14
 12097  003D90  0012               	return	
 12098  003D92                     __end_of_do_I2C_IDLE:
 12099                           	opt stack 0
 12100                           tosu	equ	0xFFF
 12101                           tosh	equ	0xFFE
 12102                           tosl	equ	0xFFD
 12103                           pclath	equ	0xFFA
 12104                           tblptru	equ	0xFF8
 12105                           tblptrh	equ	0xFF7
 12106                           tblptrl	equ	0xFF6
 12107                           tablat	equ	0xFF5
 12108                           prodh	equ	0xFF4
 12109                           prodl	equ	0xFF3
 12110                           intcon	equ	0xFF2
 12111                           postinc0	equ	0xFEE
 12112                           wreg	equ	0xFE8
 12113                           postdec1	equ	0xFE5
 12114                           fsr1l	equ	0xFE1
 12115                           indf2	equ	0xFDF
 12116                           postinc2	equ	0xFDE
 12117                           postdec2	equ	0xFDD
 12118                           fsr2h	equ	0xFDA
 12119                           fsr2l	equ	0xFD9
 12120                           status	equ	0xFD8
 12121                           
 12122 ;; *************** function _do_I2C_RESET *****************
 12123 ;; Defined at:
 12124 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 12125 ;; Parameters:    Size  Location     Type
 12126 ;;		None
 12127 ;; Auto vars:     Size  Location     Type
 12128 ;;		None
 12129 ;; Return value:  Size  Location     Type
 12130 ;;                  1    wreg      enum E11982
 12131 ;; Registers used:
 12132 ;;		wreg, status,2, cstack
 12133 ;; Tracked objects:
 12134 ;;		On entry : 0/0
 12135 ;;		On exit  : 0/0
 12136 ;;		Unchanged: 0/0
 12137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12142 ;;Total ram usage:        0 bytes
 12143 ;; Hardware stack levels used:    1
 12144 ;; Hardware stack levels required when called:    7
 12145 ;; This function calls:
 12146 ;;		_i2c1_driver_resetBus
 12147 ;; This function is called by:
 12148 ;;		_i2c_ISR
 12149 ;;		i2_i2c_ISR
 12150 ;; This function uses a non-reentrant model
 12151 ;;
 12152                           
 12153                           	psect	text78
 12154  003CB8                     __ptext78:
 12155                           	opt stack 0
 12156  003CB8                     _do_I2C_RESET:
 12157                           	opt stack 0
 12158                           
 12159                           ; BSR set to: 0
 12160                           ;Skip over the trampoline to the duplicate function for level 2
 12161  003CB8  B24A               	btfsc	btemp,1,c
 12162  003CBA  EFE1  F01E         	goto	i2_do_I2C_RESET
 12163  003CBE                     _do_I2C_RESET$intlevel0:
 12164                           	opt stack 17
 12165                           
 12166                           ;i2c_master.c: 241: i2c1_driver_resetBus();
 12167                           
 12168                           ;incstack = 0
 12169  003CBE  ECBE  F01F         	call	_i2c1_driver_resetBus	;wreg free
 12170                           
 12171                           ;i2c_master.c: 242: i2c_status.busy = 0;
 12172  003CC2  0100               	movlb	0	; () banked
 12173  003CC4  91B2               	bcf	_i2c_status& (0+255),0,b
 12174                           
 12175                           ; BSR set to: 0
 12176                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
 12177  003CC6  0E00               	movlw	0
 12178  003CC8  6FBD               	movwf	(_i2c_status+11)& (0+255),b
 12179                           
 12180                           ; BSR set to: 0
 12181                           ;i2c_master.c: 244: return I2C_RESET;
 12182  003CCA  0E0E               	movlw	14
 12183  003CCC  0012               	return	
 12184  003CCE                     __end_of_do_I2C_RESET:
 12185                           	opt stack 0
 12186                           tosu	equ	0xFFF
 12187                           tosh	equ	0xFFE
 12188                           tosl	equ	0xFFD
 12189                           pclath	equ	0xFFA
 12190                           tblptru	equ	0xFF8
 12191                           tblptrh	equ	0xFF7
 12192                           tblptrl	equ	0xFF6
 12193                           tablat	equ	0xFF5
 12194                           prodh	equ	0xFF4
 12195                           prodl	equ	0xFF3
 12196                           intcon	equ	0xFF2
 12197                           postinc0	equ	0xFEE
 12198                           wreg	equ	0xFE8
 12199                           postdec1	equ	0xFE5
 12200                           fsr1l	equ	0xFE1
 12201                           indf2	equ	0xFDF
 12202                           postinc2	equ	0xFDE
 12203                           postdec2	equ	0xFDD
 12204                           fsr2h	equ	0xFDA
 12205                           fsr2l	equ	0xFD9
 12206                           status	equ	0xFD8
 12207                           
 12208 ;; *************** function _do_I2C_TX_EMPTY *****************
 12209 ;; Defined at:
 12210 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 12211 ;; Parameters:    Size  Location     Type
 12212 ;;		None
 12213 ;; Auto vars:     Size  Location     Type
 12214 ;;		None
 12215 ;; Return value:  Size  Location     Type
 12216 ;;                  1    wreg      enum E11982
 12217 ;; Registers used:
 12218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 12219 ;; Tracked objects:
 12220 ;;		On entry : 0/0
 12221 ;;		On exit  : 0/0
 12222 ;;		Unchanged: 0/0
 12223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12228 ;;Total ram usage:        0 bytes
 12229 ;; Hardware stack levels used:    1
 12230 ;; Hardware stack levels required when called:    9
 12231 ;; This function calls:
 12232 ;;		Absolute function
 12233 ;;		_do_I2C_SEND_RESTART
 12234 ;;		_do_I2C_SEND_STOP
 12235 ;;		_i2c_restartWrite
 12236 ;;		_mssp1_setIRQ
 12237 ;;		_rd1RegCompleteHandler
 12238 ;;		_rd2RegCompleteHandler
 12239 ;;		_rdBlkRegCompleteHandler
 12240 ;;		_returnReset
 12241 ;;		_returnStop
 12242 ;;		_wr1RegCompleteHandler
 12243 ;;		_wr2RegCompleteHandler
 12244 ;; This function is called by:
 12245 ;;		_i2c_ISR
 12246 ;;		i2_i2c_ISR
 12247 ;; This function uses a non-reentrant model
 12248 ;;
 12249                           
 12250                           	psect	text79
 12251  003386                     __ptext79:
 12252                           	opt stack 0
 12253  003386                     _do_I2C_TX_EMPTY:
 12254                           	opt stack 0
 12255                           
 12256                           ; BSR set to: 0
 12257                           ;Skip over the trampoline to the duplicate function for level 2
 12258  003386  B24A               	btfsc	btemp,1,c
 12259  003388  EF4E  F01A         	goto	i2_do_I2C_TX_EMPTY
 12260  00338C                     _do_I2C_TX_EMPTY$intlevel0:
 12261                           	opt stack 15
 12262                           
 12263                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
 12264                           
 12265                           ;incstack = 0
 12266  00338C  0100               	movlb	0	; () banked
 12267  00338E  85B2               	bsf	_i2c_status& (0+255),2,b
 12268                           
 12269                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 12270  003390  D00A               	goto	l457
 12271  003392                     
 12272                           ;i2c_master.c: 388: case i2c_restart_write:
 12273                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
 12274                           
 12275                           ; BSR set to: 0
 12276                           
 12277                           ; BSR set to: 0
 12278  003392  EC21  F01F         	call	_do_I2C_SEND_RESTART	;wreg free
 12279  003396  0012               	return	
 12280  003398                     
 12281                           ;i2c_master.c: 391: mssp1_setIRQ();
 12282  003398  EC83  F01F         	call	_mssp1_setIRQ	;wreg free
 12283                           
 12284                           ;i2c_master.c: 392: return I2C_TX;
 12285  00339C  0E03               	movlw	3
 12286  00339E  0012               	return	
 12287  0033A0                     
 12288                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
 12289                           
 12290                           ;i2c_master.c: 394: case i2c_stop:
 12291  0033A0  EC1A  F01F         	call	_do_I2C_SEND_STOP	;wreg free
 12292                           
 12293                           ;i2c_master.c: 396: }
 12294  0033A4  0012               	return	
 12295  0033A6                     l457:
 12296  0033A6  C0D0  F021         	movff	_i2c_status+30,returnStop@p
 12297  0033AA  C0D1  F022         	movff	_i2c_status+31,returnStop@p+1
 12298  0033AE  EE20  F0BE         	lfsr	2,_i2c_status+12
 12299  0033B2  D801               	call	u4428
 12300  0033B4  D00A               	goto	u4429
 12301  0033B6                     u4428:
 12302  0033B6  0005               	push	
 12303  0033B8  6EFA               	movwf	pclath,c
 12304  0033BA  50DE               	movf	postinc2,w,c
 12305  0033BC  6EFD               	movwf	tosl,c
 12306  0033BE  50DE               	movf	postinc2,w,c
 12307  0033C0  6EFE               	movwf	tosh,c
 12308  0033C2  50DE               	movf	postinc2,w,c
 12309  0033C4  6EFF               	movwf	tosu,c
 12310  0033C6  50FA               	movf	pclath,w,c
 12311  0033C8  0012               	return		;indir
 12312  0033CA                     u4429:
 12313                           
 12314                           ; Switch size 1, requested type "space"
 12315                           ; Number of cases is 4, Range of values is 1 to 4
 12316                           ; switch strategies available:
 12317                           ; Name         Instructions Cycles
 12318                           ; simple_byte           13     7 (average)
 12319                           ;	Chosen strategy is simple_byte
 12320  0033CA  0A01               	xorlw	1	; case 1
 12321  0033CC  B4D8               	btfsc	status,2,c
 12322  0033CE  D7E8               	goto	l462
 12323  0033D0  0A03               	xorlw	3	; case 2
 12324  0033D2  B4D8               	btfsc	status,2,c
 12325  0033D4  D7DE               	goto	l458
 12326  0033D6  0A01               	xorlw	1	; case 3
 12327  0033D8  B4D8               	btfsc	status,2,c
 12328  0033DA  D7DB               	goto	l458
 12329  0033DC  0A07               	xorlw	7	; case 4
 12330  0033DE  B4D8               	btfsc	status,2,c
 12331  0033E0  D7DB               	goto	l461
 12332  0033E2  D7DE               	goto	l462
 12333  0033E4                     __end_of_do_I2C_TX_EMPTY:
 12334                           	opt stack 0
 12335                           tosu	equ	0xFFF
 12336                           tosh	equ	0xFFE
 12337                           tosl	equ	0xFFD
 12338                           pclath	equ	0xFFA
 12339                           tblptru	equ	0xFF8
 12340                           tblptrh	equ	0xFF7
 12341                           tblptrl	equ	0xFF6
 12342                           tablat	equ	0xFF5
 12343                           prodh	equ	0xFF4
 12344                           prodl	equ	0xFF3
 12345                           intcon	equ	0xFF2
 12346                           postinc0	equ	0xFEE
 12347                           wreg	equ	0xFE8
 12348                           postdec1	equ	0xFE5
 12349                           fsr1l	equ	0xFE1
 12350                           indf2	equ	0xFDF
 12351                           postinc2	equ	0xFDE
 12352                           postdec2	equ	0xFDD
 12353                           fsr2h	equ	0xFDA
 12354                           fsr2l	equ	0xFD9
 12355                           status	equ	0xFD8
 12356                           
 12357 ;; *************** function _mssp1_setIRQ *****************
 12358 ;; Defined at:
 12359 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 12360 ;; Parameters:    Size  Location     Type
 12361 ;;		None
 12362 ;; Auto vars:     Size  Location     Type
 12363 ;;		None
 12364 ;; Return value:  Size  Location     Type
 12365 ;;                  1    wreg      void 
 12366 ;; Registers used:
 12367 ;;		None
 12368 ;; Tracked objects:
 12369 ;;		On entry : 0/0
 12370 ;;		On exit  : 0/0
 12371 ;;		Unchanged: 0/0
 12372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12377 ;;Total ram usage:        0 bytes
 12378 ;; Hardware stack levels used:    1
 12379 ;; Hardware stack levels required when called:    6
 12380 ;; This function calls:
 12381 ;;		Nothing
 12382 ;; This function is called by:
 12383 ;;		_do_I2C_TX_EMPTY
 12384 ;; This function uses a non-reentrant model
 12385 ;;
 12386                           
 12387                           	psect	text80
 12388  003F06                     __ptext80:
 12389                           	opt stack 0
 12390  003F06                     _mssp1_setIRQ:
 12391                           	opt stack 17
 12392                           
 12393                           ;i2c1_driver.c: 60: PIR3bits.SSP1IF = 1;
 12394                           
 12395                           ;incstack = 0
 12396  003F06  010E               	movlb	14	; () banked
 12397  003F08  81CD               	bsf	205,0,b	;volatile
 12398                           
 12399                           ; BSR set to: 14
 12400  003F0A  0012               	return		;funcret
 12401  003F0C                     __end_of_mssp1_setIRQ:
 12402                           	opt stack 0
 12403                           tosu	equ	0xFFF
 12404                           tosh	equ	0xFFE
 12405                           tosl	equ	0xFFD
 12406                           pclath	equ	0xFFA
 12407                           tblptru	equ	0xFF8
 12408                           tblptrh	equ	0xFF7
 12409                           tblptrl	equ	0xFF6
 12410                           tablat	equ	0xFF5
 12411                           prodh	equ	0xFF4
 12412                           prodl	equ	0xFF3
 12413                           intcon	equ	0xFF2
 12414                           postinc0	equ	0xFEE
 12415                           wreg	equ	0xFE8
 12416                           postdec1	equ	0xFE5
 12417                           fsr1l	equ	0xFE1
 12418                           indf2	equ	0xFDF
 12419                           postinc2	equ	0xFDE
 12420                           postdec2	equ	0xFDD
 12421                           fsr2h	equ	0xFDA
 12422                           fsr2l	equ	0xFD9
 12423                           status	equ	0xFD8
 12424                           
 12425 ;; *************** function _i2c1_driver_isNACK *****************
 12426 ;; Defined at:
 12427 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 12428 ;; Parameters:    Size  Location     Type
 12429 ;;		None
 12430 ;; Auto vars:     Size  Location     Type
 12431 ;;		None
 12432 ;; Return value:  Size  Location     Type
 12433 ;;		None               void
 12434 ;; Registers used:
 12435 ;;		wreg, status,2, status,0
 12436 ;; Tracked objects:
 12437 ;;		On entry : 0/0
 12438 ;;		On exit  : 0/0
 12439 ;;		Unchanged: 0/0
 12440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12443 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12444 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12445 ;;Total ram usage:        1 bytes
 12446 ;; Hardware stack levels used:    1
 12447 ;; Hardware stack levels required when called:    6
 12448 ;; This function calls:
 12449 ;;		Nothing
 12450 ;; This function is called by:
 12451 ;;		_do_I2C_TX
 12452 ;;		_i2c_ISR
 12453 ;; This function uses a non-reentrant model
 12454 ;;
 12455                           
 12456                           	psect	text81
 12457  003CCE                     __ptext81:
 12458                           	opt stack 0
 12459  003CCE                     _i2c1_driver_isNACK:
 12460                           	opt stack 18
 12461                           
 12462                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
 12463                           
 12464                           ; BSR set to: 14
 12465                           ;incstack = 0
 12466  003CCE  5097               	movf	3991,w,c	;volatile
 12467  003CD0  0BBF               	andlw	-65
 12468  003CD2  0940               	iorlw	64
 12469  003CD4  6E97               	movwf	3991,c	;volatile
 12470  003CD6  3897               	swapf	3991,w,c	;volatile
 12471  003CD8  32E8               	rrcf	wreg,f,c
 12472  003CDA  32E8               	rrcf	wreg,f,c
 12473  003CDC  0B01               	andlw	1
 12474  003CDE  6E16               	movwf	??_i2c1_driver_isNACK& (0+255),c
 12475  003CE0  3016               	rrcf	??_i2c1_driver_isNACK,w,c
 12476  003CE2  0012               	return	
 12477  003CE4                     __end_of_i2c1_driver_isNACK:
 12478                           	opt stack 0
 12479                           tosu	equ	0xFFF
 12480                           tosh	equ	0xFFE
 12481                           tosl	equ	0xFFD
 12482                           pclath	equ	0xFFA
 12483                           tblptru	equ	0xFF8
 12484                           tblptrh	equ	0xFF7
 12485                           tblptrl	equ	0xFF6
 12486                           tablat	equ	0xFF5
 12487                           prodh	equ	0xFF4
 12488                           prodl	equ	0xFF3
 12489                           intcon	equ	0xFF2
 12490                           postinc0	equ	0xFEE
 12491                           wreg	equ	0xFE8
 12492                           postdec1	equ	0xFE5
 12493                           fsr1l	equ	0xFE1
 12494                           indf2	equ	0xFDF
 12495                           postinc2	equ	0xFDE
 12496                           postdec2	equ	0xFDD
 12497                           fsr2h	equ	0xFDA
 12498                           fsr2l	equ	0xFD9
 12499                           status	equ	0xFD8
 12500                           
 12501 ;; *************** function _i2c1_driver_TXData *****************
 12502 ;; Defined at:
 12503 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 12504 ;; Parameters:    Size  Location     Type
 12505 ;;  d               1    wreg     unsigned char 
 12506 ;; Auto vars:     Size  Location     Type
 12507 ;;  d               1   21[COMRAM] unsigned char 
 12508 ;; Return value:  Size  Location     Type
 12509 ;;                  1    wreg      void 
 12510 ;; Registers used:
 12511 ;;		wreg
 12512 ;; Tracked objects:
 12513 ;;		On entry : 0/0
 12514 ;;		On exit  : 0/0
 12515 ;;		Unchanged: 0/0
 12516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12518 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12520 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12521 ;;Total ram usage:        1 bytes
 12522 ;; Hardware stack levels used:    1
 12523 ;; Hardware stack levels required when called:    6
 12524 ;; This function calls:
 12525 ;;		Nothing
 12526 ;; This function is called by:
 12527 ;;		_do_I2C_SEND_ADR_READ
 12528 ;;		_do_I2C_SEND_ADR_WRITE
 12529 ;;		_do_I2C_TX
 12530 ;; This function uses a non-reentrant model
 12531 ;;
 12532                           
 12533                           	psect	text82
 12534  003EBE                     __ptext82:
 12535                           	opt stack 0
 12536  003EBE                     _i2c1_driver_TXData:
 12537                           	opt stack 17
 12538                           
 12539                           ;incstack = 0
 12540                           ;i2c1_driver_TXData@d stored from wreg
 12541  003EBE  6E16               	movwf	i2c1_driver_TXData@d,c
 12542                           
 12543                           ;i2c1_driver.c: 188: SSP1BUF = d;
 12544  003EC0  C016  FF92         	movff	i2c1_driver_TXData@d,3986	;volatile
 12545  003EC4  0012               	return		;funcret
 12546  003EC6                     __end_of_i2c1_driver_TXData:
 12547                           	opt stack 0
 12548                           tosu	equ	0xFFF
 12549                           tosh	equ	0xFFE
 12550                           tosl	equ	0xFFD
 12551                           pclath	equ	0xFFA
 12552                           tblptru	equ	0xFF8
 12553                           tblptrh	equ	0xFF7
 12554                           tblptrl	equ	0xFF6
 12555                           tablat	equ	0xFF5
 12556                           prodh	equ	0xFF4
 12557                           prodl	equ	0xFF3
 12558                           intcon	equ	0xFF2
 12559                           postinc0	equ	0xFEE
 12560                           wreg	equ	0xFE8
 12561                           postdec1	equ	0xFE5
 12562                           fsr1l	equ	0xFE1
 12563                           indf2	equ	0xFDF
 12564                           postinc2	equ	0xFDE
 12565                           postdec2	equ	0xFDD
 12566                           fsr2h	equ	0xFDA
 12567                           fsr2l	equ	0xFD9
 12568                           status	equ	0xFD8
 12569                           
 12570 ;; *************** function _i2c1_driver_getRXData *****************
 12571 ;; Defined at:
 12572 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 12573 ;; Parameters:    Size  Location     Type
 12574 ;;		None
 12575 ;; Auto vars:     Size  Location     Type
 12576 ;;		None
 12577 ;; Return value:  Size  Location     Type
 12578 ;;                  1    wreg      unsigned char 
 12579 ;; Registers used:
 12580 ;;		wreg, status,2
 12581 ;; Tracked objects:
 12582 ;;		On entry : 0/0
 12583 ;;		On exit  : 0/0
 12584 ;;		Unchanged: 0/0
 12585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12590 ;;Total ram usage:        0 bytes
 12591 ;; Hardware stack levels used:    1
 12592 ;; Hardware stack levels required when called:    6
 12593 ;; This function calls:
 12594 ;;		Nothing
 12595 ;; This function is called by:
 12596 ;;		_do_I2C_RX
 12597 ;; This function uses a non-reentrant model
 12598 ;;
 12599                           
 12600                           	psect	text83
 12601  003F4C                     __ptext83:
 12602                           	opt stack 0
 12603  003F4C                     _i2c1_driver_getRXData:
 12604                           	opt stack 17
 12605                           
 12606                           ;i2c1_driver.c: 173: return SSP1BUF;
 12607                           
 12608                           ;incstack = 0
 12609  003F4C  5092               	movf	3986,w,c	;volatile
 12610  003F4E  0012               	return	
 12611  003F50                     __end_of_i2c1_driver_getRXData:
 12612                           	opt stack 0
 12613                           tosu	equ	0xFFF
 12614                           tosh	equ	0xFFE
 12615                           tosl	equ	0xFFD
 12616                           pclath	equ	0xFFA
 12617                           tblptru	equ	0xFF8
 12618                           tblptrh	equ	0xFF7
 12619                           tblptrl	equ	0xFF6
 12620                           tablat	equ	0xFF5
 12621                           prodh	equ	0xFF4
 12622                           prodl	equ	0xFF3
 12623                           intcon	equ	0xFF2
 12624                           postinc0	equ	0xFEE
 12625                           wreg	equ	0xFE8
 12626                           postdec1	equ	0xFE5
 12627                           fsr1l	equ	0xFE1
 12628                           indf2	equ	0xFDF
 12629                           postinc2	equ	0xFDE
 12630                           postdec2	equ	0xFDD
 12631                           fsr2h	equ	0xFDA
 12632                           fsr2l	equ	0xFD9
 12633                           status	equ	0xFD8
 12634                           
 12635 ;; *************** function _i2c1_driver_sendNACK *****************
 12636 ;; Defined at:
 12637 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 12638 ;; Parameters:    Size  Location     Type
 12639 ;;		None
 12640 ;; Auto vars:     Size  Location     Type
 12641 ;;		None
 12642 ;; Return value:  Size  Location     Type
 12643 ;;                  1    wreg      void 
 12644 ;; Registers used:
 12645 ;;		None
 12646 ;; Tracked objects:
 12647 ;;		On entry : 0/0
 12648 ;;		On exit  : 0/0
 12649 ;;		Unchanged: 0/0
 12650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12655 ;;Total ram usage:        0 bytes
 12656 ;; Hardware stack levels used:    1
 12657 ;; Hardware stack levels required when called:    6
 12658 ;; This function calls:
 12659 ;;		Nothing
 12660 ;; This function is called by:
 12661 ;;		_do_I2C_DO_NACK_STOP
 12662 ;;		_do_I2C_DO_NACK_RESTART
 12663 ;; This function uses a non-reentrant model
 12664 ;;
 12665                           
 12666                           	psect	text84
 12667  003F0C                     __ptext84:
 12668                           	opt stack 0
 12669  003F0C                     _i2c1_driver_sendNACK:
 12670                           	opt stack 16
 12671                           
 12672                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
 12673                           
 12674                           ;incstack = 0
 12675  003F0C  8A97               	bsf	3991,5,c	;volatile
 12676                           
 12677                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
 12678  003F0E  8897               	bsf	3991,4,c	;volatile
 12679  003F10  0012               	return		;funcret
 12680  003F12                     __end_of_i2c1_driver_sendNACK:
 12681                           	opt stack 0
 12682                           tosu	equ	0xFFF
 12683                           tosh	equ	0xFFE
 12684                           tosl	equ	0xFFD
 12685                           pclath	equ	0xFFA
 12686                           tblptru	equ	0xFF8
 12687                           tblptrh	equ	0xFF7
 12688                           tblptrl	equ	0xFF6
 12689                           tablat	equ	0xFF5
 12690                           prodh	equ	0xFF4
 12691                           prodl	equ	0xFF3
 12692                           intcon	equ	0xFF2
 12693                           postinc0	equ	0xFEE
 12694                           wreg	equ	0xFE8
 12695                           postdec1	equ	0xFE5
 12696                           fsr1l	equ	0xFE1
 12697                           indf2	equ	0xFDF
 12698                           postinc2	equ	0xFDE
 12699                           postdec2	equ	0xFDD
 12700                           fsr2h	equ	0xFDA
 12701                           fsr2l	equ	0xFD9
 12702                           status	equ	0xFD8
 12703                           
 12704 ;; *************** function _i2c1_driver_resetBus *****************
 12705 ;; Defined at:
 12706 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 12707 ;; Parameters:    Size  Location     Type
 12708 ;;		None
 12709 ;; Auto vars:     Size  Location     Type
 12710 ;;		None
 12711 ;; Return value:  Size  Location     Type
 12712 ;;                  1    wreg      void 
 12713 ;; Registers used:
 12714 ;;		None
 12715 ;; Tracked objects:
 12716 ;;		On entry : 0/0
 12717 ;;		On exit  : 0/0
 12718 ;;		Unchanged: 0/0
 12719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12724 ;;Total ram usage:        0 bytes
 12725 ;; Hardware stack levels used:    1
 12726 ;; Hardware stack levels required when called:    6
 12727 ;; This function calls:
 12728 ;;		Nothing
 12729 ;; This function is called by:
 12730 ;;		_do_I2C_RESET
 12731 ;; This function uses a non-reentrant model
 12732 ;;
 12733                           
 12734                           	psect	text85
 12735  003F7C                     __ptext85:
 12736                           	opt stack 0
 12737  003F7C                     _i2c1_driver_resetBus:
 12738                           	opt stack 17
 12739                           
 12740                           ;incstack = 0
 12741  003F7C  0012               	return		;funcret
 12742  003F7E                     __end_of_i2c1_driver_resetBus:
 12743                           	opt stack 0
 12744                           tosu	equ	0xFFF
 12745                           tosh	equ	0xFFE
 12746                           tosl	equ	0xFFD
 12747                           pclath	equ	0xFFA
 12748                           tblptru	equ	0xFF8
 12749                           tblptrh	equ	0xFF7
 12750                           tblptrl	equ	0xFF6
 12751                           tablat	equ	0xFF5
 12752                           prodh	equ	0xFF4
 12753                           prodl	equ	0xFF3
 12754                           intcon	equ	0xFF2
 12755                           postinc0	equ	0xFEE
 12756                           wreg	equ	0xFE8
 12757                           postdec1	equ	0xFE5
 12758                           fsr1l	equ	0xFE1
 12759                           indf2	equ	0xFDF
 12760                           postinc2	equ	0xFDE
 12761                           postdec2	equ	0xFDD
 12762                           fsr2h	equ	0xFDA
 12763                           fsr2l	equ	0xFD9
 12764                           status	equ	0xFD8
 12765                           
 12766 ;; *************** function _i2c1_driver_startRX *****************
 12767 ;; Defined at:
 12768 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 12769 ;; Parameters:    Size  Location     Type
 12770 ;;		None
 12771 ;; Auto vars:     Size  Location     Type
 12772 ;;		None
 12773 ;; Return value:  Size  Location     Type
 12774 ;;                  1    wreg      void 
 12775 ;; Registers used:
 12776 ;;		None
 12777 ;; Tracked objects:
 12778 ;;		On entry : 0/0
 12779 ;;		On exit  : 0/0
 12780 ;;		Unchanged: 0/0
 12781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12786 ;;Total ram usage:        0 bytes
 12787 ;; Hardware stack levels used:    1
 12788 ;; Hardware stack levels required when called:    6
 12789 ;; This function calls:
 12790 ;;		Nothing
 12791 ;; This function is called by:
 12792 ;;		_do_I2C_RCEN
 12793 ;; This function uses a non-reentrant model
 12794 ;;
 12795                           
 12796                           	psect	text86
 12797  003F50                     __ptext86:
 12798                           	opt stack 0
 12799  003F50                     _i2c1_driver_startRX:
 12800                           	opt stack 17
 12801                           
 12802                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
 12803                           
 12804                           ;incstack = 0
 12805  003F50  8697               	bsf	3991,3,c	;volatile
 12806  003F52  0012               	return		;funcret
 12807  003F54                     __end_of_i2c1_driver_startRX:
 12808                           	opt stack 0
 12809                           tosu	equ	0xFFF
 12810                           tosh	equ	0xFFE
 12811                           tosl	equ	0xFFD
 12812                           pclath	equ	0xFFA
 12813                           tblptru	equ	0xFF8
 12814                           tblptrh	equ	0xFF7
 12815                           tblptrl	equ	0xFF6
 12816                           tablat	equ	0xFF5
 12817                           prodh	equ	0xFF4
 12818                           prodl	equ	0xFF3
 12819                           intcon	equ	0xFF2
 12820                           postinc0	equ	0xFEE
 12821                           wreg	equ	0xFE8
 12822                           postdec1	equ	0xFE5
 12823                           fsr1l	equ	0xFE1
 12824                           indf2	equ	0xFDF
 12825                           postinc2	equ	0xFDE
 12826                           postdec2	equ	0xFDD
 12827                           fsr2h	equ	0xFDA
 12828                           fsr2l	equ	0xFD9
 12829                           status	equ	0xFD8
 12830                           
 12831 ;; *************** function _rdBlkRegCompleteHandler *****************
 12832 ;; Defined at:
 12833 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 12834 ;; Parameters:    Size  Location     Type
 12835 ;;  p               2   32[COMRAM] PTR void 
 12836 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12837 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12838 ;; Auto vars:     Size  Location     Type
 12839 ;;		None
 12840 ;; Return value:  Size  Location     Type
 12841 ;;                  1    wreg      enum E97
 12842 ;; Registers used:
 12843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12844 ;; Tracked objects:
 12845 ;;		On entry : 0/0
 12846 ;;		On exit  : 0/0
 12847 ;;		Unchanged: 0/0
 12848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12849 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12852 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12853 ;;Total ram usage:        2 bytes
 12854 ;; Hardware stack levels used:    1
 12855 ;; Hardware stack levels required when called:    8
 12856 ;; This function calls:
 12857 ;;		_i2c_setBuffer
 12858 ;;		_i2c_setDataCompleteCallback
 12859 ;; This function is called by:
 12860 ;;		_i2c_readDataBlock
 12861 ;;		_do_I2C_DO_ADDRESS_NACK
 12862 ;;		_do_I2C_TX
 12863 ;;		_do_I2C_RX
 12864 ;;		_do_I2C_TX_EMPTY
 12865 ;;		i2_do_I2C_DO_ADDRESS_NACK
 12866 ;;		i2_do_I2C_TX
 12867 ;;		i2_do_I2C_RX
 12868 ;;		i2_do_I2C_TX_EMPTY
 12869 ;; This function uses a non-reentrant model
 12870 ;;
 12871                           
 12872                           	psect	text87
 12873  0035DA                     __ptext87:
 12874                           	opt stack 0
 12875  0035DA                     _rdBlkRegCompleteHandler:
 12876                           	opt stack 0
 12877                           
 12878                           ;Skip over the trampoline to the duplicate function for level 2
 12879  0035DA  B24A               	btfsc	btemp,1,c
 12880  0035DC  EF7E  F01B         	goto	i2_rdBlkRegCompleteHandler
 12881  0035E0                     _rdBlkRegCompleteHandler$intlevel0:
 12882                           	opt stack 15
 12883                           
 12884                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
 12885                           
 12886                           ;incstack = 0
 12887  0035E0  EE20 F002          	lfsr	2,2
 12888  0035E4  5021               	movf	rdBlkRegCompleteHandler@p,w,c
 12889  0035E6  26D9               	addwf	fsr2l,f,c
 12890  0035E8  5022               	movf	rdBlkRegCompleteHandler@p+1,w,c
 12891  0035EA  22DA               	addwfc	fsr2h,f,c
 12892  0035EC  CFDE F016          	movff	postinc2,i2c_setBuffer@buffer
 12893  0035F0  CFDD F017          	movff	postdec2,i2c_setBuffer@buffer+1
 12894  0035F4  C021  FFD9         	movff	rdBlkRegCompleteHandler@p,fsr2l
 12895  0035F8  C022  FFDA         	movff	rdBlkRegCompleteHandler@p+1,fsr2h
 12896  0035FC  CFDE F018          	movff	postinc2,i2c_setBuffer@bufferSize
 12897  003600  CFDD F019          	movff	postdec2,i2c_setBuffer@bufferSize+1
 12898  003604  ECF2  F01D         	call	_i2c_setBuffer	;wreg free
 12899                           
 12900                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
 12901  003608  0E00               	movlw	0
 12902  00360A  6E1C               	movwf	i2c_setDataCompleteCallback@cb,c
 12903  00360C  0E00               	movlw	0
 12904  00360E  6E1D               	movwf	i2c_setDataCompleteCallback@cb+1,c
 12905  003610  0E00               	movlw	0
 12906  003612  6E1E               	movwf	i2c_setDataCompleteCallback@cb+2,c
 12907  003614  0E00               	movlw	0
 12908  003616  6E1F               	movwf	i2c_setDataCompleteCallback@p,c
 12909  003618  0E00               	movlw	0
 12910  00361A  6E20               	movwf	i2c_setDataCompleteCallback@p+1,c
 12911  00361C  ECC9  F01D         	call	_i2c_setDataCompleteCallback	;wreg free
 12912                           
 12913                           ;i2c_simple_master.c: 138: return i2c_restart_read;
 12914  003620  0E02               	movlw	2
 12915  003622  0012               	return	
 12916  003624                     __end_of_rdBlkRegCompleteHandler:
 12917                           	opt stack 0
 12918                           tosu	equ	0xFFF
 12919                           tosh	equ	0xFFE
 12920                           tosl	equ	0xFFD
 12921                           pclath	equ	0xFFA
 12922                           tblptru	equ	0xFF8
 12923                           tblptrh	equ	0xFF7
 12924                           tblptrl	equ	0xFF6
 12925                           tablat	equ	0xFF5
 12926                           prodh	equ	0xFF4
 12927                           prodl	equ	0xFF3
 12928                           intcon	equ	0xFF2
 12929                           postinc0	equ	0xFEE
 12930                           wreg	equ	0xFE8
 12931                           postdec1	equ	0xFE5
 12932                           fsr1l	equ	0xFE1
 12933                           indf2	equ	0xFDF
 12934                           postinc2	equ	0xFDE
 12935                           postdec2	equ	0xFDD
 12936                           fsr2h	equ	0xFDA
 12937                           fsr2l	equ	0xFD9
 12938                           status	equ	0xFD8
 12939                           
 12940 ;; *************** function _rd2RegCompleteHandler *****************
 12941 ;; Defined at:
 12942 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 12943 ;; Parameters:    Size  Location     Type
 12944 ;;  p               2   32[COMRAM] PTR void 
 12945 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 12946 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 12947 ;; Auto vars:     Size  Location     Type
 12948 ;;		None
 12949 ;; Return value:  Size  Location     Type
 12950 ;;                  1    wreg      enum E97
 12951 ;; Registers used:
 12952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12953 ;; Tracked objects:
 12954 ;;		On entry : 0/0
 12955 ;;		On exit  : 0/0
 12956 ;;		Unchanged: 0/0
 12957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12958 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12961 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12962 ;;Total ram usage:        2 bytes
 12963 ;; Hardware stack levels used:    1
 12964 ;; Hardware stack levels required when called:    8
 12965 ;; This function calls:
 12966 ;;		_i2c_setBuffer
 12967 ;;		_i2c_setDataCompleteCallback
 12968 ;; This function is called by:
 12969 ;;		_i2c_read2ByteRegister
 12970 ;;		_do_I2C_DO_ADDRESS_NACK
 12971 ;;		_do_I2C_TX
 12972 ;;		_do_I2C_RX
 12973 ;;		_do_I2C_TX_EMPTY
 12974 ;;		i2_do_I2C_DO_ADDRESS_NACK
 12975 ;;		i2_do_I2C_TX
 12976 ;;		i2_do_I2C_RX
 12977 ;;		i2_do_I2C_TX_EMPTY
 12978 ;; This function uses a non-reentrant model
 12979 ;;
 12980                           
 12981                           	psect	text88
 12982  0037FC                     __ptext88:
 12983                           	opt stack 0
 12984  0037FC                     _rd2RegCompleteHandler:
 12985                           	opt stack 0
 12986                           
 12987                           ;Skip over the trampoline to the duplicate function for level 2
 12988  0037FC  B24A               	btfsc	btemp,1,c
 12989  0037FE  EFCD  F01C         	goto	i2_rd2RegCompleteHandler
 12990  003802                     _rd2RegCompleteHandler$intlevel0:
 12991                           	opt stack 15
 12992                           
 12993                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
 12994                           
 12995                           ;incstack = 0
 12996  003802  C021  F016         	movff	rd2RegCompleteHandler@p,i2c_setBuffer@buffer
 12997  003806  C022  F017         	movff	rd2RegCompleteHandler@p+1,i2c_setBuffer@buffer+1
 12998  00380A  0E00               	movlw	0
 12999  00380C  6E19               	movwf	i2c_setBuffer@bufferSize+1,c
 13000  00380E  0E02               	movlw	2
 13001  003810  6E18               	movwf	i2c_setBuffer@bufferSize,c
 13002  003812  ECF2  F01D         	call	_i2c_setBuffer	;wreg free
 13003                           
 13004                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
 13005  003816  0E00               	movlw	0
 13006  003818  6E1C               	movwf	i2c_setDataCompleteCallback@cb,c
 13007  00381A  0E00               	movlw	0
 13008  00381C  6E1D               	movwf	i2c_setDataCompleteCallback@cb+1,c
 13009  00381E  0E00               	movlw	0
 13010  003820  6E1E               	movwf	i2c_setDataCompleteCallback@cb+2,c
 13011  003822  0E00               	movlw	0
 13012  003824  6E1F               	movwf	i2c_setDataCompleteCallback@p,c
 13013  003826  0E00               	movlw	0
 13014  003828  6E20               	movwf	i2c_setDataCompleteCallback@p+1,c
 13015  00382A  ECC9  F01D         	call	_i2c_setDataCompleteCallback	;wreg free
 13016                           
 13017                           ;i2c_simple_master.c: 91: return i2c_restart_read;
 13018  00382E  0E02               	movlw	2
 13019  003830  0012               	return	
 13020  003832                     __end_of_rd2RegCompleteHandler:
 13021                           	opt stack 0
 13022                           tosu	equ	0xFFF
 13023                           tosh	equ	0xFFE
 13024                           tosl	equ	0xFFD
 13025                           pclath	equ	0xFFA
 13026                           tblptru	equ	0xFF8
 13027                           tblptrh	equ	0xFF7
 13028                           tblptrl	equ	0xFF6
 13029                           tablat	equ	0xFF5
 13030                           prodh	equ	0xFF4
 13031                           prodl	equ	0xFF3
 13032                           intcon	equ	0xFF2
 13033                           postinc0	equ	0xFEE
 13034                           wreg	equ	0xFE8
 13035                           postdec1	equ	0xFE5
 13036                           fsr1l	equ	0xFE1
 13037                           indf2	equ	0xFDF
 13038                           postinc2	equ	0xFDE
 13039                           postdec2	equ	0xFDD
 13040                           fsr2h	equ	0xFDA
 13041                           fsr2l	equ	0xFD9
 13042                           status	equ	0xFD8
 13043                           
 13044 ;; *************** function _rd1RegCompleteHandler *****************
 13045 ;; Defined at:
 13046 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 13047 ;; Parameters:    Size  Location     Type
 13048 ;;  p               2   32[COMRAM] PTR void 
 13049 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13050 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13051 ;; Auto vars:     Size  Location     Type
 13052 ;;		None
 13053 ;; Return value:  Size  Location     Type
 13054 ;;                  1    wreg      enum E97
 13055 ;; Registers used:
 13056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13057 ;; Tracked objects:
 13058 ;;		On entry : 0/0
 13059 ;;		On exit  : 0/0
 13060 ;;		Unchanged: 0/0
 13061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13062 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13065 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13066 ;;Total ram usage:        2 bytes
 13067 ;; Hardware stack levels used:    1
 13068 ;; Hardware stack levels required when called:    8
 13069 ;; This function calls:
 13070 ;;		_i2c_setBuffer
 13071 ;;		_i2c_setDataCompleteCallback
 13072 ;; This function is called by:
 13073 ;;		_i2c_read1ByteRegister
 13074 ;;		_do_I2C_DO_ADDRESS_NACK
 13075 ;;		_do_I2C_TX
 13076 ;;		_do_I2C_RX
 13077 ;;		_do_I2C_TX_EMPTY
 13078 ;;		i2_do_I2C_DO_ADDRESS_NACK
 13079 ;;		i2_do_I2C_TX
 13080 ;;		i2_do_I2C_RX
 13081 ;;		i2_do_I2C_TX_EMPTY
 13082 ;; This function uses a non-reentrant model
 13083 ;;
 13084                           
 13085                           	psect	text89
 13086  003832                     __ptext89:
 13087                           	opt stack 0
 13088  003832                     _rd1RegCompleteHandler:
 13089                           	opt stack 0
 13090                           
 13091                           ;Skip over the trampoline to the duplicate function for level 2
 13092  003832  B24A               	btfsc	btemp,1,c
 13093  003834  EFE5  F01C         	goto	i2_rd1RegCompleteHandler
 13094  003838                     _rd1RegCompleteHandler$intlevel0:
 13095                           	opt stack 15
 13096                           
 13097                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
 13098                           
 13099                           ;incstack = 0
 13100  003838  C021  F016         	movff	rd1RegCompleteHandler@p,i2c_setBuffer@buffer
 13101  00383C  C022  F017         	movff	rd1RegCompleteHandler@p+1,i2c_setBuffer@buffer+1
 13102  003840  0E00               	movlw	0
 13103  003842  6E19               	movwf	i2c_setBuffer@bufferSize+1,c
 13104  003844  0E01               	movlw	1
 13105  003846  6E18               	movwf	i2c_setBuffer@bufferSize,c
 13106  003848  ECF2  F01D         	call	_i2c_setBuffer	;wreg free
 13107                           
 13108                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
 13109  00384C  0E00               	movlw	0
 13110  00384E  6E1C               	movwf	i2c_setDataCompleteCallback@cb,c
 13111  003850  0E00               	movlw	0
 13112  003852  6E1D               	movwf	i2c_setDataCompleteCallback@cb+1,c
 13113  003854  0E00               	movlw	0
 13114  003856  6E1E               	movwf	i2c_setDataCompleteCallback@cb+2,c
 13115  003858  0E00               	movlw	0
 13116  00385A  6E1F               	movwf	i2c_setDataCompleteCallback@p,c
 13117  00385C  0E00               	movlw	0
 13118  00385E  6E20               	movwf	i2c_setDataCompleteCallback@p+1,c
 13119  003860  ECC9  F01D         	call	_i2c_setDataCompleteCallback	;wreg free
 13120                           
 13121                           ;i2c_simple_master.c: 62: return i2c_restart_read;
 13122  003864  0E02               	movlw	2
 13123  003866  0012               	return	
 13124  003868                     __end_of_rd1RegCompleteHandler:
 13125                           	opt stack 0
 13126                           tosu	equ	0xFFF
 13127                           tosh	equ	0xFFE
 13128                           tosl	equ	0xFFD
 13129                           pclath	equ	0xFFA
 13130                           tblptru	equ	0xFF8
 13131                           tblptrh	equ	0xFF7
 13132                           tblptrl	equ	0xFF6
 13133                           tablat	equ	0xFF5
 13134                           prodh	equ	0xFF4
 13135                           prodl	equ	0xFF3
 13136                           intcon	equ	0xFF2
 13137                           postinc0	equ	0xFEE
 13138                           wreg	equ	0xFE8
 13139                           postdec1	equ	0xFE5
 13140                           fsr1l	equ	0xFE1
 13141                           indf2	equ	0xFDF
 13142                           postinc2	equ	0xFDE
 13143                           postdec2	equ	0xFDD
 13144                           fsr2h	equ	0xFDA
 13145                           fsr2l	equ	0xFD9
 13146                           status	equ	0xFD8
 13147                           
 13148 ;; *************** function _wr1RegCompleteHandler *****************
 13149 ;; Defined at:
 13150 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 13151 ;; Parameters:    Size  Location     Type
 13152 ;;  p               2   32[COMRAM] PTR void 
 13153 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13154 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13155 ;; Auto vars:     Size  Location     Type
 13156 ;;		None
 13157 ;; Return value:  Size  Location     Type
 13158 ;;                  1    wreg      enum E97
 13159 ;; Registers used:
 13160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13161 ;; Tracked objects:
 13162 ;;		On entry : 0/0
 13163 ;;		On exit  : 0/0
 13164 ;;		Unchanged: 0/0
 13165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13166 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13169 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13170 ;;Total ram usage:        2 bytes
 13171 ;; Hardware stack levels used:    1
 13172 ;; Hardware stack levels required when called:    8
 13173 ;; This function calls:
 13174 ;;		_i2c_setBuffer
 13175 ;;		_i2c_setDataCompleteCallback
 13176 ;; This function is called by:
 13177 ;;		_i2c_write1ByteRegister
 13178 ;;		_do_I2C_DO_ADDRESS_NACK
 13179 ;;		_do_I2C_TX
 13180 ;;		_do_I2C_RX
 13181 ;;		_do_I2C_TX_EMPTY
 13182 ;;		i2_do_I2C_DO_ADDRESS_NACK
 13183 ;;		i2_do_I2C_TX
 13184 ;;		i2_do_I2C_RX
 13185 ;;		i2_do_I2C_TX_EMPTY
 13186 ;; This function uses a non-reentrant model
 13187 ;;
 13188                           
 13189                           	psect	text90
 13190  003868                     __ptext90:
 13191                           	opt stack 0
 13192  003868                     _wr1RegCompleteHandler:
 13193                           	opt stack 0
 13194                           
 13195                           ;Skip over the trampoline to the duplicate function for level 2
 13196  003868  B24A               	btfsc	btemp,1,c
 13197  00386A  EFFD  F01C         	goto	i2_wr1RegCompleteHandler
 13198  00386E                     _wr1RegCompleteHandler$intlevel0:
 13199                           	opt stack 15
 13200                           
 13201                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
 13202                           
 13203                           ;incstack = 0
 13204  00386E  C021  F016         	movff	wr1RegCompleteHandler@p,i2c_setBuffer@buffer
 13205  003872  C022  F017         	movff	wr1RegCompleteHandler@p+1,i2c_setBuffer@buffer+1
 13206  003876  0E00               	movlw	0
 13207  003878  6E19               	movwf	i2c_setBuffer@bufferSize+1,c
 13208  00387A  0E01               	movlw	1
 13209  00387C  6E18               	movwf	i2c_setBuffer@bufferSize,c
 13210  00387E  ECF2  F01D         	call	_i2c_setBuffer	;wreg free
 13211                           
 13212                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
 13213  003882  0E00               	movlw	0
 13214  003884  6E1C               	movwf	i2c_setDataCompleteCallback@cb,c
 13215  003886  0E00               	movlw	0
 13216  003888  6E1D               	movwf	i2c_setDataCompleteCallback@cb+1,c
 13217  00388A  0E00               	movlw	0
 13218  00388C  6E1E               	movwf	i2c_setDataCompleteCallback@cb+2,c
 13219  00388E  0E00               	movlw	0
 13220  003890  6E1F               	movwf	i2c_setDataCompleteCallback@p,c
 13221  003892  0E00               	movlw	0
 13222  003894  6E20               	movwf	i2c_setDataCompleteCallback@p+1,c
 13223  003896  ECC9  F01D         	call	_i2c_setDataCompleteCallback	;wreg free
 13224                           
 13225                           ;i2c_simple_master.c: 35: return i2c_continue;
 13226  00389A  0E04               	movlw	4
 13227  00389C  0012               	return	
 13228  00389E                     __end_of_wr1RegCompleteHandler:
 13229                           	opt stack 0
 13230                           tosu	equ	0xFFF
 13231                           tosh	equ	0xFFE
 13232                           tosl	equ	0xFFD
 13233                           pclath	equ	0xFFA
 13234                           tblptru	equ	0xFF8
 13235                           tblptrh	equ	0xFF7
 13236                           tblptrl	equ	0xFF6
 13237                           tablat	equ	0xFF5
 13238                           prodh	equ	0xFF4
 13239                           prodl	equ	0xFF3
 13240                           intcon	equ	0xFF2
 13241                           postinc0	equ	0xFEE
 13242                           wreg	equ	0xFE8
 13243                           postdec1	equ	0xFE5
 13244                           fsr1l	equ	0xFE1
 13245                           indf2	equ	0xFDF
 13246                           postinc2	equ	0xFDE
 13247                           postdec2	equ	0xFDD
 13248                           fsr2h	equ	0xFDA
 13249                           fsr2l	equ	0xFD9
 13250                           status	equ	0xFD8
 13251                           
 13252 ;; *************** function _i2c_restartWrite *****************
 13253 ;; Defined at:
 13254 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 13255 ;; Parameters:    Size  Location     Type
 13256 ;;  p               2   32[COMRAM] PTR void 
 13257 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13258 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13259 ;; Auto vars:     Size  Location     Type
 13260 ;;		None
 13261 ;; Return value:  Size  Location     Type
 13262 ;;                  1    wreg      enum E96
 13263 ;; Registers used:
 13264 ;;		wreg
 13265 ;; Tracked objects:
 13266 ;;		On entry : 0/0
 13267 ;;		On exit  : 0/0
 13268 ;;		Unchanged: 0/0
 13269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13270 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13274 ;;Total ram usage:        2 bytes
 13275 ;; Hardware stack levels used:    1
 13276 ;; Hardware stack levels required when called:    6
 13277 ;; This function calls:
 13278 ;;		Nothing
 13279 ;; This function is called by:
 13280 ;;		_i2c_writeNBytes
 13281 ;;		_i2c_write1ByteRegister
 13282 ;;		_i2c_read1ByteRegister
 13283 ;;		_i2c_read2ByteRegister
 13284 ;;		_i2c_write2ByteRegister
 13285 ;;		_i2c_readDataBlock
 13286 ;;		_do_I2C_DO_ADDRESS_NACK
 13287 ;;		_do_I2C_TX
 13288 ;;		_do_I2C_RX
 13289 ;;		_do_I2C_TX_EMPTY
 13290 ;;		i2_do_I2C_DO_ADDRESS_NACK
 13291 ;;		i2_do_I2C_TX
 13292 ;;		i2_do_I2C_RX
 13293 ;;		i2_do_I2C_TX_EMPTY
 13294 ;; This function uses a non-reentrant model
 13295 ;;
 13296                           
 13297                           	psect	text91
 13298  003E90                     __ptext91:
 13299                           	opt stack 0
 13300  003E90                     _i2c_restartWrite:
 13301                           	opt stack 0
 13302                           
 13303                           ;Skip over the trampoline to the duplicate function for level 2
 13304  003E90  B24A               	btfsc	btemp,1,c
 13305  003E92  EFB4  F01F         	goto	i2_i2c_restartWrite
 13306  003E96                     _i2c_restartWrite$intlevel0:
 13307                           	opt stack 17
 13308                           
 13309                           ;i2c_types.c: 37: return i2c_restart_write;
 13310                           
 13311                           ;incstack = 0
 13312  003E96  0E03               	movlw	3
 13313  003E98  0012               	return	
 13314  003E9A                     __end_of_i2c_restartWrite:
 13315                           	opt stack 0
 13316                           tosu	equ	0xFFF
 13317                           tosh	equ	0xFFE
 13318                           tosl	equ	0xFFD
 13319                           pclath	equ	0xFFA
 13320                           tblptru	equ	0xFF8
 13321                           tblptrh	equ	0xFF7
 13322                           tblptrl	equ	0xFF6
 13323                           tablat	equ	0xFF5
 13324                           prodh	equ	0xFF4
 13325                           prodl	equ	0xFF3
 13326                           intcon	equ	0xFF2
 13327                           postinc0	equ	0xFEE
 13328                           wreg	equ	0xFE8
 13329                           postdec1	equ	0xFE5
 13330                           fsr1l	equ	0xFE1
 13331                           indf2	equ	0xFDF
 13332                           postinc2	equ	0xFDE
 13333                           postdec2	equ	0xFDD
 13334                           fsr2h	equ	0xFDA
 13335                           fsr2l	equ	0xFD9
 13336                           status	equ	0xFD8
 13337                           
 13338 ;; *************** function _returnReset *****************
 13339 ;; Defined at:
 13340 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 13341 ;; Parameters:    Size  Location     Type
 13342 ;;  p               2   32[COMRAM] PTR void 
 13343 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13344 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13345 ;; Auto vars:     Size  Location     Type
 13346 ;;		None
 13347 ;; Return value:  Size  Location     Type
 13348 ;;                  1    wreg      enum E11816
 13349 ;; Registers used:
 13350 ;;		wreg
 13351 ;; Tracked objects:
 13352 ;;		On entry : 0/0
 13353 ;;		On exit  : 0/0
 13354 ;;		Unchanged: 0/0
 13355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13356 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13359 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13360 ;;Total ram usage:        2 bytes
 13361 ;; Hardware stack levels used:    1
 13362 ;; Hardware stack levels required when called:    6
 13363 ;; This function calls:
 13364 ;;		Nothing
 13365 ;; This function is called by:
 13366 ;;		_i2c_open
 13367 ;;		_do_I2C_DO_ADDRESS_NACK
 13368 ;;		_do_I2C_TX
 13369 ;;		_do_I2C_RX
 13370 ;;		_do_I2C_TX_EMPTY
 13371 ;;		i2_do_I2C_DO_ADDRESS_NACK
 13372 ;;		i2_do_I2C_TX
 13373 ;;		i2_do_I2C_RX
 13374 ;;		i2_do_I2C_TX_EMPTY
 13375 ;; This function uses a non-reentrant model
 13376 ;;
 13377                           
 13378                           	psect	text92
 13379  003E9A                     __ptext92:
 13380                           	opt stack 0
 13381  003E9A                     _returnReset:
 13382                           	opt stack 0
 13383                           
 13384                           ;Skip over the trampoline to the duplicate function for level 2
 13385  003E9A  B24A               	btfsc	btemp,1,c
 13386  003E9C  EFB6  F01F         	goto	i2_returnReset
 13387  003EA0                     _returnReset$intlevel0:
 13388                           	opt stack 17
 13389                           
 13390                           ;i2c_master.c: 450: return i2c_reset_link;
 13391                           
 13392                           ;incstack = 0
 13393  003EA0  0E05               	movlw	5
 13394  003EA2  0012               	return	
 13395  003EA4                     __end_of_returnReset:
 13396                           	opt stack 0
 13397                           tosu	equ	0xFFF
 13398                           tosh	equ	0xFFE
 13399                           tosl	equ	0xFFD
 13400                           pclath	equ	0xFFA
 13401                           tblptru	equ	0xFF8
 13402                           tblptrh	equ	0xFF7
 13403                           tblptrl	equ	0xFF6
 13404                           tablat	equ	0xFF5
 13405                           prodh	equ	0xFF4
 13406                           prodl	equ	0xFF3
 13407                           intcon	equ	0xFF2
 13408                           postinc0	equ	0xFEE
 13409                           wreg	equ	0xFE8
 13410                           postdec1	equ	0xFE5
 13411                           fsr1l	equ	0xFE1
 13412                           indf2	equ	0xFDF
 13413                           postinc2	equ	0xFDE
 13414                           postdec2	equ	0xFDD
 13415                           fsr2h	equ	0xFDA
 13416                           fsr2l	equ	0xFD9
 13417                           status	equ	0xFD8
 13418                           
 13419 ;; *************** function _returnStop *****************
 13420 ;; Defined at:
 13421 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 13422 ;; Parameters:    Size  Location     Type
 13423 ;;  p               2   32[COMRAM] PTR void 
 13424 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13425 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13426 ;; Auto vars:     Size  Location     Type
 13427 ;;		None
 13428 ;; Return value:  Size  Location     Type
 13429 ;;                  1    wreg      enum E11816
 13430 ;; Registers used:
 13431 ;;		wreg
 13432 ;; Tracked objects:
 13433 ;;		On entry : 0/0
 13434 ;;		On exit  : 0/0
 13435 ;;		Unchanged: 0/0
 13436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13437 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13440 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13441 ;;Total ram usage:        2 bytes
 13442 ;; Hardware stack levels used:    1
 13443 ;; Hardware stack levels required when called:    6
 13444 ;; This function calls:
 13445 ;;		Nothing
 13446 ;; This function is called by:
 13447 ;;		_i2c_open
 13448 ;;		_setCallBack
 13449 ;;		_do_I2C_DO_ADDRESS_NACK
 13450 ;;		_do_I2C_TX
 13451 ;;		_do_I2C_RX
 13452 ;;		_do_I2C_TX_EMPTY
 13453 ;;		i2_do_I2C_DO_ADDRESS_NACK
 13454 ;;		i2_do_I2C_TX
 13455 ;;		i2_do_I2C_RX
 13456 ;;		i2_do_I2C_TX_EMPTY
 13457 ;; This function uses a non-reentrant model
 13458 ;;
 13459                           
 13460                           	psect	text93
 13461  003EA4                     __ptext93:
 13462                           	opt stack 0
 13463  003EA4                     _returnStop:
 13464                           	opt stack 0
 13465                           
 13466                           ;Skip over the trampoline to the duplicate function for level 2
 13467  003EA4  B24A               	btfsc	btemp,1,c
 13468  003EA6  EFB8  F01F         	goto	i2_returnStop
 13469  003EAA                     _returnStop$intlevel0:
 13470                           	opt stack 17
 13471                           
 13472                           ;i2c_master.c: 445: return i2c_stop;
 13473                           
 13474                           ;incstack = 0
 13475  003EAA  0E01               	movlw	1
 13476  003EAC  0012               	return	
 13477  003EAE                     __end_of_returnStop:
 13478                           	opt stack 0
 13479                           tosu	equ	0xFFF
 13480                           tosh	equ	0xFFE
 13481                           tosl	equ	0xFFD
 13482                           pclath	equ	0xFFA
 13483                           tblptru	equ	0xFF8
 13484                           tblptrh	equ	0xFF7
 13485                           tblptrl	equ	0xFF6
 13486                           tablat	equ	0xFF5
 13487                           prodh	equ	0xFF4
 13488                           prodl	equ	0xFF3
 13489                           intcon	equ	0xFF2
 13490                           postinc0	equ	0xFEE
 13491                           wreg	equ	0xFE8
 13492                           postdec1	equ	0xFE5
 13493                           fsr1l	equ	0xFE1
 13494                           indf2	equ	0xFDF
 13495                           postinc2	equ	0xFDE
 13496                           postdec2	equ	0xFDD
 13497                           fsr2h	equ	0xFDA
 13498                           fsr2l	equ	0xFD9
 13499                           status	equ	0xFD8
 13500                           
 13501 ;; *************** function _wr2RegCompleteHandler *****************
 13502 ;; Defined at:
 13503 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 13504 ;; Parameters:    Size  Location     Type
 13505 ;;  p               2   32[COMRAM] PTR void 
 13506 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13507 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13508 ;; Auto vars:     Size  Location     Type
 13509 ;;		None
 13510 ;; Return value:  Size  Location     Type
 13511 ;;                  1    wreg      enum E97
 13512 ;; Registers used:
 13513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13514 ;; Tracked objects:
 13515 ;;		On entry : 0/0
 13516 ;;		On exit  : 0/0
 13517 ;;		Unchanged: 0/0
 13518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13519 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13522 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13523 ;;Total ram usage:        2 bytes
 13524 ;; Hardware stack levels used:    1
 13525 ;; Hardware stack levels required when called:    8
 13526 ;; This function calls:
 13527 ;;		_i2c_setBuffer
 13528 ;;		_i2c_setDataCompleteCallback
 13529 ;; This function is called by:
 13530 ;;		_i2c_write2ByteRegister
 13531 ;;		_do_I2C_DO_ADDRESS_NACK
 13532 ;;		_do_I2C_TX
 13533 ;;		_do_I2C_RX
 13534 ;;		_do_I2C_TX_EMPTY
 13535 ;;		i2_do_I2C_DO_ADDRESS_NACK
 13536 ;;		i2_do_I2C_TX
 13537 ;;		i2_do_I2C_RX
 13538 ;;		i2_do_I2C_TX_EMPTY
 13539 ;; This function uses a non-reentrant model
 13540 ;;
 13541                           
 13542                           	psect	text94
 13543  00389E                     __ptext94:
 13544                           	opt stack 0
 13545  00389E                     _wr2RegCompleteHandler:
 13546                           	opt stack 0
 13547                           
 13548                           ;Skip over the trampoline to the duplicate function for level 2
 13549  00389E  B24A               	btfsc	btemp,1,c
 13550  0038A0  EF15  F01D         	goto	i2_wr2RegCompleteHandler
 13551  0038A4                     _wr2RegCompleteHandler$intlevel0:
 13552                           	opt stack 15
 13553                           
 13554                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
 13555                           
 13556                           ;incstack = 0
 13557  0038A4  C021  F016         	movff	wr2RegCompleteHandler@p,i2c_setBuffer@buffer
 13558  0038A8  C022  F017         	movff	wr2RegCompleteHandler@p+1,i2c_setBuffer@buffer+1
 13559  0038AC  0E00               	movlw	0
 13560  0038AE  6E19               	movwf	i2c_setBuffer@bufferSize+1,c
 13561  0038B0  0E02               	movlw	2
 13562  0038B2  6E18               	movwf	i2c_setBuffer@bufferSize,c
 13563  0038B4  ECF2  F01D         	call	_i2c_setBuffer	;wreg free
 13564                           
 13565                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
 13566  0038B8  0E00               	movlw	0
 13567  0038BA  6E1C               	movwf	i2c_setDataCompleteCallback@cb,c
 13568  0038BC  0E00               	movlw	0
 13569  0038BE  6E1D               	movwf	i2c_setDataCompleteCallback@cb+1,c
 13570  0038C0  0E00               	movlw	0
 13571  0038C2  6E1E               	movwf	i2c_setDataCompleteCallback@cb+2,c
 13572  0038C4  0E00               	movlw	0
 13573  0038C6  6E1F               	movwf	i2c_setDataCompleteCallback@p,c
 13574  0038C8  0E00               	movlw	0
 13575  0038CA  6E20               	movwf	i2c_setDataCompleteCallback@p+1,c
 13576  0038CC  ECC9  F01D         	call	_i2c_setDataCompleteCallback	;wreg free
 13577                           
 13578                           ;i2c_simple_master.c: 114: return i2c_continue;
 13579  0038D0  0E04               	movlw	4
 13580  0038D2  0012               	return	
 13581  0038D4                     __end_of_wr2RegCompleteHandler:
 13582                           	opt stack 0
 13583                           tosu	equ	0xFFF
 13584                           tosh	equ	0xFFE
 13585                           tosl	equ	0xFFD
 13586                           pclath	equ	0xFFA
 13587                           tblptru	equ	0xFF8
 13588                           tblptrh	equ	0xFF7
 13589                           tblptrl	equ	0xFF6
 13590                           tablat	equ	0xFF5
 13591                           prodh	equ	0xFF4
 13592                           prodl	equ	0xFF3
 13593                           intcon	equ	0xFF2
 13594                           postinc0	equ	0xFEE
 13595                           wreg	equ	0xFE8
 13596                           postdec1	equ	0xFE5
 13597                           fsr1l	equ	0xFE1
 13598                           indf2	equ	0xFDF
 13599                           postinc2	equ	0xFDE
 13600                           postdec2	equ	0xFDD
 13601                           fsr2h	equ	0xFDA
 13602                           fsr2l	equ	0xFD9
 13603                           status	equ	0xFD8
 13604                           
 13605 ;; *************** function _i2c_setDataCompleteCallback *****************
 13606 ;; Defined at:
 13607 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 13608 ;; Parameters:    Size  Location     Type
 13609 ;;  cb              3   27[COMRAM] PTR FTN(PTR void ,)enum 
 13610 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 13611 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 13612 ;;  p               2   30[COMRAM] PTR void 
 13613 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13614 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13615 ;; Auto vars:     Size  Location     Type
 13616 ;;		None
 13617 ;; Return value:  Size  Location     Type
 13618 ;;                  1    wreg      void 
 13619 ;; Registers used:
 13620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13621 ;; Tracked objects:
 13622 ;;		On entry : 0/0
 13623 ;;		On exit  : 0/0
 13624 ;;		Unchanged: 0/0
 13625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13626 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13629 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13630 ;;Total ram usage:        5 bytes
 13631 ;; Hardware stack levels used:    1
 13632 ;; Hardware stack levels required when called:    7
 13633 ;; This function calls:
 13634 ;;		_setCallBack
 13635 ;; This function is called by:
 13636 ;;		_wr1RegCompleteHandler
 13637 ;;		_rd1RegCompleteHandler
 13638 ;;		_rd2RegCompleteHandler
 13639 ;;		_wr2RegCompleteHandler
 13640 ;;		_rdBlkRegCompleteHandler
 13641 ;;		_i2c_write1ByteRegister
 13642 ;;		_i2c_read1ByteRegister
 13643 ;;		_i2c_read2ByteRegister
 13644 ;;		_i2c_write2ByteRegister
 13645 ;;		_i2c_readDataBlock
 13646 ;; This function uses a non-reentrant model
 13647 ;;
 13648                           
 13649                           	psect	text95
 13650  003B92                     __ptext95:
 13651                           	opt stack 0
 13652  003B92                     _i2c_setDataCompleteCallback:
 13653                           	opt stack 15
 13654                           
 13655                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
 13656                           
 13657                           ;incstack = 0
 13658  003B92  C01C  F016         	movff	i2c_setDataCompleteCallback@cb,setCallBack@cb
 13659  003B96  C01D  F017         	movff	i2c_setDataCompleteCallback@cb+1,setCallBack@cb+1
 13660  003B9A  C01E  F018         	movff	i2c_setDataCompleteCallback@cb+2,setCallBack@cb+2
 13661  003B9E  C01F  F019         	movff	i2c_setDataCompleteCallback@p,setCallBack@p
 13662  003BA2  C020  F01A         	movff	i2c_setDataCompleteCallback@p+1,setCallBack@p+1
 13663  003BA6  0E00               	movlw	0
 13664  003BA8  EC6E  F018         	call	_setCallBack
 13665  003BAC  0012               	return		;funcret
 13666  003BAE                     __end_of_i2c_setDataCompleteCallback:
 13667                           	opt stack 0
 13668                           tosu	equ	0xFFF
 13669                           tosh	equ	0xFFE
 13670                           tosl	equ	0xFFD
 13671                           pclath	equ	0xFFA
 13672                           tblptru	equ	0xFF8
 13673                           tblptrh	equ	0xFF7
 13674                           tblptrl	equ	0xFF6
 13675                           tablat	equ	0xFF5
 13676                           prodh	equ	0xFF4
 13677                           prodl	equ	0xFF3
 13678                           intcon	equ	0xFF2
 13679                           postinc0	equ	0xFEE
 13680                           wreg	equ	0xFE8
 13681                           postdec1	equ	0xFE5
 13682                           fsr1l	equ	0xFE1
 13683                           indf2	equ	0xFDF
 13684                           postinc2	equ	0xFDE
 13685                           postdec2	equ	0xFDD
 13686                           fsr2h	equ	0xFDA
 13687                           fsr2l	equ	0xFD9
 13688                           status	equ	0xFD8
 13689                           
 13690 ;; *************** function _setCallBack *****************
 13691 ;; Defined at:
 13692 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 13693 ;; Parameters:    Size  Location     Type
 13694 ;;  idx             1    wreg     enum E12000
 13695 ;;  cb              3   21[COMRAM] PTR FTN(PTR void ,)enum 
 13696 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 13697 ;;		 -> wr1RegCompleteHandler(1), i2c_restartWrite(1), Absolute function(1), 
 13698 ;;  p               2   24[COMRAM] PTR void 
 13699 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 13700 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 13701 ;; Auto vars:     Size  Location     Type
 13702 ;;  idx             1   26[COMRAM] enum E12000
 13703 ;; Return value:  Size  Location     Type
 13704 ;;                  1    wreg      void 
 13705 ;; Registers used:
 13706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13707 ;; Tracked objects:
 13708 ;;		On entry : 0/0
 13709 ;;		On exit  : 0/0
 13710 ;;		Unchanged: 0/0
 13711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13712 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13713 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13715 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13716 ;;Total ram usage:        6 bytes
 13717 ;; Hardware stack levels used:    1
 13718 ;; Hardware stack levels required when called:    6
 13719 ;; This function calls:
 13720 ;;		Nothing
 13721 ;; This function is called by:
 13722 ;;		_i2c_setDataCompleteCallback
 13723 ;;		_i2c_setAddressNACKCallback
 13724 ;;		_i2c_setWriteCollisionCallback
 13725 ;;		_i2c_setDataNACKCallback
 13726 ;;		_i2c_setTimeOutCallback
 13727 ;; This function uses a non-reentrant model
 13728 ;;
 13729                           
 13730                           	psect	text96
 13731  0030DC                     __ptext96:
 13732                           	opt stack 0
 13733  0030DC                     _setCallBack:
 13734                           	opt stack 21
 13735                           
 13736                           ;incstack = 0
 13737                           ;setCallBack@idx stored from wreg
 13738  0030DC  6E1B               	movwf	setCallBack@idx,c
 13739                           
 13740                           ;i2c_master.c: 455: if(cb)
 13741  0030DE  5016               	movf	setCallBack@cb,w,c
 13742  0030E0  1017               	iorwf	setCallBack@cb+1,w,c
 13743  0030E2  1018               	iorwf	setCallBack@cb+2,w,c
 13744  0030E4  B4D8               	btfsc	status,2,c
 13745  0030E6  D01B               	goto	l482
 13746                           
 13747                           ;i2c_master.c: 456: {
 13748                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
 13749  0030E8  501B               	movf	setCallBack@idx,w,c
 13750  0030EA  0D03               	mullw	3
 13751  0030EC  0EBE               	movlw	low (_i2c_status+12)
 13752  0030EE  24F3               	addwf	prodl,w,c
 13753  0030F0  6ED9               	movwf	fsr2l,c
 13754  0030F2  0E00               	movlw	high (_i2c_status+12)
 13755  0030F4  20F4               	addwfc	prodh,w,c
 13756  0030F6  6EDA               	movwf	fsr2h,c
 13757  0030F8  C016  FFDE         	movff	setCallBack@cb,postinc2
 13758  0030FC  C017  FFDE         	movff	setCallBack@cb+1,postinc2
 13759  003100  C018  FFDE         	movff	setCallBack@cb+2,postinc2
 13760                           
 13761                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
 13762  003104  501B               	movf	setCallBack@idx,w,c
 13763  003106  0D02               	mullw	2
 13764  003108  0ED0               	movlw	low (_i2c_status+30)
 13765  00310A  24F3               	addwf	prodl,w,c
 13766  00310C  6ED9               	movwf	fsr2l,c
 13767  00310E  0E00               	movlw	high (_i2c_status+30)
 13768  003110  20F4               	addwfc	prodh,w,c
 13769  003112  6EDA               	movwf	fsr2h,c
 13770  003114  C019  FFDE         	movff	setCallBack@p,postinc2
 13771  003118  C01A  FFDD         	movff	setCallBack@p+1,postdec2
 13772                           
 13773                           ;i2c_master.c: 459: }
 13774  00311C  0012               	return	
 13775  00311E                     l482:
 13776                           
 13777                           ;i2c_master.c: 460: else
 13778                           ;i2c_master.c: 461: {
 13779                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
 13780  00311E  501B               	movf	setCallBack@idx,w,c
 13781  003120  0D03               	mullw	3
 13782  003122  0EBE               	movlw	low (_i2c_status+12)
 13783  003124  24F3               	addwf	prodl,w,c
 13784  003126  6ED9               	movwf	fsr2l,c
 13785  003128  0E00               	movlw	high (_i2c_status+12)
 13786  00312A  20F4               	addwfc	prodh,w,c
 13787  00312C  6EDA               	movwf	fsr2h,c
 13788  00312E  0EA4               	movlw	low _returnStop
 13789  003130  6EDE               	movwf	postinc2,c
 13790  003132  0E3E               	movlw	high _returnStop
 13791  003134  6EDE               	movwf	postinc2,c
 13792  003136  0E00               	movlw	low (_returnStop shr (0+16))
 13793  003138  6EDE               	movwf	postinc2,c
 13794                           
 13795                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
 13796  00313A  501B               	movf	setCallBack@idx,w,c
 13797  00313C  0D02               	mullw	2
 13798  00313E  0ED0               	movlw	low (_i2c_status+30)
 13799  003140  24F3               	addwf	prodl,w,c
 13800  003142  6ED9               	movwf	fsr2l,c
 13801  003144  0E00               	movlw	high (_i2c_status+30)
 13802  003146  20F4               	addwfc	prodh,w,c
 13803  003148  6EDA               	movwf	fsr2h,c
 13804  00314A  0E00               	movlw	0
 13805  00314C  6EDE               	movwf	postinc2,c
 13806  00314E  0E00               	movlw	0
 13807  003150  6EDD               	movwf	postdec2,c
 13808  003152  0012               	return	
 13809  003154                     __end_of_setCallBack:
 13810                           	opt stack 0
 13811                           tosu	equ	0xFFF
 13812                           tosh	equ	0xFFE
 13813                           tosl	equ	0xFFD
 13814                           pclath	equ	0xFFA
 13815                           tblptru	equ	0xFF8
 13816                           tblptrh	equ	0xFF7
 13817                           tblptrl	equ	0xFF6
 13818                           tablat	equ	0xFF5
 13819                           prodh	equ	0xFF4
 13820                           prodl	equ	0xFF3
 13821                           intcon	equ	0xFF2
 13822                           postinc0	equ	0xFEE
 13823                           wreg	equ	0xFE8
 13824                           postdec1	equ	0xFE5
 13825                           fsr1l	equ	0xFE1
 13826                           indf2	equ	0xFDF
 13827                           postinc2	equ	0xFDE
 13828                           postdec2	equ	0xFDD
 13829                           fsr2h	equ	0xFDA
 13830                           fsr2l	equ	0xFD9
 13831                           status	equ	0xFD8
 13832                           
 13833 ;; *************** function _i2c_setBuffer *****************
 13834 ;; Defined at:
 13835 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 13836 ;; Parameters:    Size  Location     Type
 13837 ;;  buffer          2   21[COMRAM] PTR void 
 13838 ;;		 -> XYZ_ReadTemp@readBuffer(2), XYZ_ReadTemp@wrtBuffer(1), XYZ_Read@readBuffer(6), XYZ_Read@wrtBuffer(1), 
 13839 ;;		 -> XYZ_WriteReg@wrtBuffer(2), LCD_writeI2C@wrtBuffer(1), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(5), 
 13840 ;;		 -> i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegist
      +er@result(2), 
 13841 ;;		 -> i2c_read1ByteRegister@reg(1), i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister
      +@data(1), 
 13842 ;;		 -> NULL(0), 
 13843 ;;  bufferSize      2   23[COMRAM] unsigned int 
 13844 ;; Auto vars:     Size  Location     Type
 13845 ;;		None
 13846 ;; Return value:  Size  Location     Type
 13847 ;;                  1    wreg      void 
 13848 ;; Registers used:
 13849 ;;		wreg, status,2, status,0
 13850 ;; Tracked objects:
 13851 ;;		On entry : 0/0
 13852 ;;		On exit  : 0/0
 13853 ;;		Unchanged: 0/0
 13854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13855 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13858 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13859 ;;Total ram usage:        4 bytes
 13860 ;; Hardware stack levels used:    1
 13861 ;; Hardware stack levels required when called:    6
 13862 ;; This function calls:
 13863 ;;		Nothing
 13864 ;; This function is called by:
 13865 ;;		_wr1RegCompleteHandler
 13866 ;;		_i2c_writeNBytes
 13867 ;;		_rd1RegCompleteHandler
 13868 ;;		_rd2RegCompleteHandler
 13869 ;;		_wr2RegCompleteHandler
 13870 ;;		_rdBlkRegCompleteHandler
 13871 ;;		_i2c_readNBytes
 13872 ;;		_i2c_write1ByteRegister
 13873 ;;		_i2c_read1ByteRegister
 13874 ;;		_i2c_read2ByteRegister
 13875 ;;		_i2c_write2ByteRegister
 13876 ;;		_i2c_readDataBlock
 13877 ;; This function uses a non-reentrant model
 13878 ;;
 13879                           
 13880                           	psect	text97
 13881  003BE4                     __ptext97:
 13882                           	opt stack 0
 13883  003BE4                     _i2c_setBuffer:
 13884                           	opt stack 22
 13885                           
 13886                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
 13887                           
 13888                           ;incstack = 0
 13889  003BE4  0100               	movlb	0	; () banked
 13890  003BE6  A5B2               	btfss	_i2c_status& (0+255),2,b
 13891  003BE8  0012               	return	
 13892                           
 13893                           ; BSR set to: 0
 13894                           ;i2c_master.c: 187: {
 13895                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
 13896  003BEA  C016  F0B4         	movff	i2c_setBuffer@buffer,_i2c_status+2
 13897  003BEE  C017  F0B5         	movff	i2c_setBuffer@buffer+1,_i2c_status+3
 13898                           
 13899                           ; BSR set to: 0
 13900                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
 13901  003BF2  C018  F0B6         	movff	i2c_setBuffer@bufferSize,_i2c_status+4
 13902  003BF6  C019  F0B7         	movff	i2c_setBuffer@bufferSize+1,_i2c_status+5
 13903                           
 13904                           ; BSR set to: 0
 13905                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 13906  003BFA  95B2               	bcf	_i2c_status& (0+255),2,b
 13907  003BFC  0012               	return	
 13908  003BFE                     __end_of_i2c_setBuffer:
 13909                           	opt stack 0
 13910                           tosu	equ	0xFFF
 13911                           tosh	equ	0xFFE
 13912                           tosl	equ	0xFFD
 13913                           pclath	equ	0xFFA
 13914                           tblptru	equ	0xFF8
 13915                           tblptrh	equ	0xFF7
 13916                           tblptrl	equ	0xFF6
 13917                           tablat	equ	0xFF5
 13918                           prodh	equ	0xFF4
 13919                           prodl	equ	0xFF3
 13920                           intcon	equ	0xFF2
 13921                           postinc0	equ	0xFEE
 13922                           wreg	equ	0xFE8
 13923                           postdec1	equ	0xFE5
 13924                           fsr1l	equ	0xFE1
 13925                           indf2	equ	0xFDF
 13926                           postinc2	equ	0xFDE
 13927                           postdec2	equ	0xFDD
 13928                           fsr2h	equ	0xFDA
 13929                           fsr2l	equ	0xFD9
 13930                           status	equ	0xFD8
 13931                           
 13932 ;; *************** function _i2c1_driver_stop *****************
 13933 ;; Defined at:
 13934 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 13935 ;; Parameters:    Size  Location     Type
 13936 ;;		None
 13937 ;; Auto vars:     Size  Location     Type
 13938 ;;		None
 13939 ;; Return value:  Size  Location     Type
 13940 ;;                  1    wreg      void 
 13941 ;; Registers used:
 13942 ;;		None
 13943 ;; Tracked objects:
 13944 ;;		On entry : 0/0
 13945 ;;		On exit  : 0/0
 13946 ;;		Unchanged: 0/0
 13947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13952 ;;Total ram usage:        0 bytes
 13953 ;; Hardware stack levels used:    1
 13954 ;; Hardware stack levels required when called:    6
 13955 ;; This function calls:
 13956 ;;		Nothing
 13957 ;; This function is called by:
 13958 ;;		_do_I2C_SEND_STOP
 13959 ;; This function uses a non-reentrant model
 13960 ;;
 13961                           
 13962                           	psect	text98
 13963  003F54                     __ptext98:
 13964                           	opt stack 0
 13965  003F54                     _i2c1_driver_stop:
 13966                           	opt stack 16
 13967                           
 13968                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
 13969                           
 13970                           ; BSR set to: 0
 13971                           ;incstack = 0
 13972  003F54  8497               	bsf	3991,2,c	;volatile
 13973  003F56  0012               	return		;funcret
 13974  003F58                     __end_of_i2c1_driver_stop:
 13975                           	opt stack 0
 13976                           tosu	equ	0xFFF
 13977                           tosh	equ	0xFFE
 13978                           tosl	equ	0xFFD
 13979                           pclath	equ	0xFFA
 13980                           tblptru	equ	0xFF8
 13981                           tblptrh	equ	0xFF7
 13982                           tblptrl	equ	0xFF6
 13983                           tablat	equ	0xFF5
 13984                           prodh	equ	0xFF4
 13985                           prodl	equ	0xFF3
 13986                           intcon	equ	0xFF2
 13987                           postinc0	equ	0xFEE
 13988                           wreg	equ	0xFE8
 13989                           postdec1	equ	0xFE5
 13990                           fsr1l	equ	0xFE1
 13991                           indf2	equ	0xFDF
 13992                           postinc2	equ	0xFDE
 13993                           postdec2	equ	0xFDD
 13994                           fsr2h	equ	0xFDA
 13995                           fsr2l	equ	0xFD9
 13996                           status	equ	0xFD8
 13997                           
 13998 ;; *************** function _i2c1_driver_restart *****************
 13999 ;; Defined at:
 14000 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 14001 ;; Parameters:    Size  Location     Type
 14002 ;;		None
 14003 ;; Auto vars:     Size  Location     Type
 14004 ;;		None
 14005 ;; Return value:  Size  Location     Type
 14006 ;;                  1    wreg      void 
 14007 ;; Registers used:
 14008 ;;		None
 14009 ;; Tracked objects:
 14010 ;;		On entry : 0/0
 14011 ;;		On exit  : 0/0
 14012 ;;		Unchanged: 0/0
 14013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14018 ;;Total ram usage:        0 bytes
 14019 ;; Hardware stack levels used:    1
 14020 ;; Hardware stack levels required when called:    6
 14021 ;; This function calls:
 14022 ;;		Nothing
 14023 ;; This function is called by:
 14024 ;;		_do_I2C_SEND_RESTART_READ
 14025 ;;		_do_I2C_SEND_RESTART_WRITE
 14026 ;;		_do_I2C_SEND_RESTART
 14027 ;; This function uses a non-reentrant model
 14028 ;;
 14029                           
 14030                           	psect	text99
 14031  003F58                     __ptext99:
 14032                           	opt stack 0
 14033  003F58                     _i2c1_driver_restart:
 14034                           	opt stack 16
 14035                           
 14036                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
 14037                           
 14038                           ;incstack = 0
 14039  003F58  8297               	bsf	3991,1,c	;volatile
 14040  003F5A  0012               	return		;funcret
 14041  003F5C                     __end_of_i2c1_driver_restart:
 14042                           	opt stack 0
 14043                           tosu	equ	0xFFF
 14044                           tosh	equ	0xFFE
 14045                           tosl	equ	0xFFD
 14046                           pclath	equ	0xFFA
 14047                           tblptru	equ	0xFF8
 14048                           tblptrh	equ	0xFF7
 14049                           tblptrl	equ	0xFF6
 14050                           tablat	equ	0xFF5
 14051                           prodh	equ	0xFF4
 14052                           prodl	equ	0xFF3
 14053                           intcon	equ	0xFF2
 14054                           postinc0	equ	0xFEE
 14055                           wreg	equ	0xFE8
 14056                           postdec1	equ	0xFE5
 14057                           fsr1l	equ	0xFE1
 14058                           indf2	equ	0xFDF
 14059                           postinc2	equ	0xFDE
 14060                           postdec2	equ	0xFDD
 14061                           fsr2h	equ	0xFDA
 14062                           fsr2l	equ	0xFD9
 14063                           status	equ	0xFD8
 14064                           
 14065 ;; *************** function _i2c1_driver_sendACK *****************
 14066 ;; Defined at:
 14067 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 14068 ;; Parameters:    Size  Location     Type
 14069 ;;		None
 14070 ;; Auto vars:     Size  Location     Type
 14071 ;;		None
 14072 ;; Return value:  Size  Location     Type
 14073 ;;                  1    wreg      void 
 14074 ;; Registers used:
 14075 ;;		None
 14076 ;; Tracked objects:
 14077 ;;		On entry : 0/0
 14078 ;;		On exit  : 0/0
 14079 ;;		Unchanged: 0/0
 14080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14085 ;;Total ram usage:        0 bytes
 14086 ;; Hardware stack levels used:    1
 14087 ;; Hardware stack levels required when called:    6
 14088 ;; This function calls:
 14089 ;;		Nothing
 14090 ;; This function is called by:
 14091 ;;		_do_I2C_DO_ACK
 14092 ;;		_do_I2C_RX
 14093 ;; This function uses a non-reentrant model
 14094 ;;
 14095                           
 14096                           	psect	text100
 14097  003F12                     __ptext100:
 14098                           	opt stack 0
 14099  003F12                     _i2c1_driver_sendACK:
 14100                           	opt stack 17
 14101                           
 14102                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 14103                           
 14104                           ;incstack = 0
 14105  003F12  9A97               	bcf	3991,5,c	;volatile
 14106                           
 14107                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 14108  003F14  8897               	bsf	3991,4,c	;volatile
 14109  003F16  0012               	return		;funcret
 14110  003F18                     __end_of_i2c1_driver_sendACK:
 14111                           	opt stack 0
 14112                           tosu	equ	0xFFF
 14113                           tosh	equ	0xFFE
 14114                           tosl	equ	0xFFD
 14115                           pclath	equ	0xFFA
 14116                           tblptru	equ	0xFF8
 14117                           tblptrh	equ	0xFF7
 14118                           tblptrl	equ	0xFF6
 14119                           tablat	equ	0xFF5
 14120                           prodh	equ	0xFF4
 14121                           prodl	equ	0xFF3
 14122                           intcon	equ	0xFF2
 14123                           postinc0	equ	0xFEE
 14124                           wreg	equ	0xFE8
 14125                           postdec1	equ	0xFE5
 14126                           fsr1l	equ	0xFE1
 14127                           indf2	equ	0xFDF
 14128                           postinc2	equ	0xFDE
 14129                           postdec2	equ	0xFDD
 14130                           fsr2h	equ	0xFDA
 14131                           fsr2l	equ	0xFD9
 14132                           status	equ	0xFD8
 14133                           
 14134 ;; *************** function _i2c1_driver_start *****************
 14135 ;; Defined at:
 14136 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 14137 ;; Parameters:    Size  Location     Type
 14138 ;;		None
 14139 ;; Auto vars:     Size  Location     Type
 14140 ;;		None
 14141 ;; Return value:  Size  Location     Type
 14142 ;;                  1    wreg      void 
 14143 ;; Registers used:
 14144 ;;		None
 14145 ;; Tracked objects:
 14146 ;;		On entry : 0/0
 14147 ;;		On exit  : 0/0
 14148 ;;		Unchanged: 0/0
 14149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14154 ;;Total ram usage:        0 bytes
 14155 ;; Hardware stack levels used:    1
 14156 ;; Hardware stack levels required when called:    6
 14157 ;; This function calls:
 14158 ;;		Nothing
 14159 ;; This function is called by:
 14160 ;;		_i2c_masterOperation
 14161 ;; This function uses a non-reentrant model
 14162 ;;
 14163                           
 14164                           	psect	text101
 14165  003F5C                     __ptext101:
 14166                           	opt stack 0
 14167  003F5C                     _i2c1_driver_start:
 14168                           	opt stack 20
 14169                           
 14170                           ;i2c1_driver.c: 148: SSP1CON2bits.SEN = 1;
 14171                           
 14172                           ;incstack = 0
 14173  003F5C  8097               	bsf	3991,0,c	;volatile
 14174  003F5E  0012               	return		;funcret
 14175  003F60                     __end_of_i2c1_driver_start:
 14176                           	opt stack 0
 14177                           tosu	equ	0xFFF
 14178                           tosh	equ	0xFFE
 14179                           tosl	equ	0xFFD
 14180                           pclath	equ	0xFFA
 14181                           tblptru	equ	0xFF8
 14182                           tblptrh	equ	0xFF7
 14183                           tblptrl	equ	0xFF6
 14184                           tablat	equ	0xFF5
 14185                           prodh	equ	0xFF4
 14186                           prodl	equ	0xFF3
 14187                           intcon	equ	0xFF2
 14188                           postinc0	equ	0xFEE
 14189                           wreg	equ	0xFE8
 14190                           postdec1	equ	0xFE5
 14191                           fsr1l	equ	0xFE1
 14192                           indf2	equ	0xFDF
 14193                           postinc2	equ	0xFDE
 14194                           postdec2	equ	0xFDD
 14195                           fsr2h	equ	0xFDA
 14196                           fsr2l	equ	0xFD9
 14197                           status	equ	0xFD8
 14198                           
 14199 ;; *************** function _i2c_close *****************
 14200 ;; Defined at:
 14201 ;;		line 162 in file "mcc_generated_files/drivers/i2c_master.c"
 14202 ;; Parameters:    Size  Location     Type
 14203 ;;		None
 14204 ;; Auto vars:     Size  Location     Type
 14205 ;;  ret             1   21[COMRAM] enum E11811
 14206 ;; Return value:  Size  Location     Type
 14207 ;;                  1    wreg      enum E11811
 14208 ;; Registers used:
 14209 ;;		wreg, status,2, cstack
 14210 ;; Tracked objects:
 14211 ;;		On entry : 0/0
 14212 ;;		On exit  : 0/0
 14213 ;;		Unchanged: 0/0
 14214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14216 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14218 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14219 ;;Total ram usage:        1 bytes
 14220 ;; Hardware stack levels used:    1
 14221 ;; Hardware stack levels required when called:    7
 14222 ;; This function calls:
 14223 ;;		_mssp1_clearIRQ
 14224 ;;		_mssp1_disableIRQ
 14225 ;; This function is called by:
 14226 ;;		_i2c_writeNBytes
 14227 ;;		_i2c_readNBytes
 14228 ;;		_i2c_write1ByteRegister
 14229 ;;		_i2c_read1ByteRegister
 14230 ;;		_i2c_read2ByteRegister
 14231 ;;		_i2c_write2ByteRegister
 14232 ;;		_i2c_readDataBlock
 14233 ;; This function uses a non-reentrant model
 14234 ;;
 14235                           
 14236                           	psect	text102
 14237  003B04                     __ptext102:
 14238                           	opt stack 0
 14239  003B04                     _i2c_close:
 14240                           	opt stack 21
 14241                           
 14242                           ;i2c_master.c: 164: i2c_error_t ret = I2C_BUSY;
 14243                           
 14244                           ;incstack = 0
 14245  003B04  0E01               	movlw	1
 14246  003B06  6E16               	movwf	i2c_close@ret,c
 14247                           
 14248                           ;i2c_master.c: 165: if(!i2c_status.busy)
 14249  003B08  0100               	movlb	0	; () banked
 14250  003B0A  B1B2               	btfsc	_i2c_status& (0+255),0,b
 14251  003B0C  D008               	goto	l355
 14252                           
 14253                           ; BSR set to: 0
 14254                           ;i2c_master.c: 166: {
 14255                           ;i2c_master.c: 167: i2c_status.inUse = 0;
 14256  003B0E  93B2               	bcf	_i2c_status& (0+255),1,b
 14257                           
 14258                           ;i2c_master.c: 169: i2c_status.address = 0xff;
 14259  003B10  69B3               	setf	(_i2c_status+1)& (0+255),b
 14260                           
 14261                           ; BSR set to: 0
 14262                           ;i2c_master.c: 170: mssp1_clearIRQ();
 14263  003B12  EC8F  F01F         	call	_mssp1_clearIRQ	;wreg free
 14264                           
 14265                           ;i2c_master.c: 171: mssp1_disableIRQ();
 14266  003B16  EC8C  F01F         	call	_mssp1_disableIRQ	;wreg free
 14267                           
 14268                           ;i2c_master.c: 172: ret = i2c_status.error;
 14269  003B1A  C0BD  F016         	movff	_i2c_status+11,i2c_close@ret
 14270  003B1E                     l355:
 14271                           
 14272                           ;i2c_master.c: 173: }
 14273                           ;i2c_master.c: 174: return ret;
 14274  003B1E  5016               	movf	i2c_close@ret,w,c
 14275  003B20  0012               	return	
 14276  003B22                     __end_of_i2c_close:
 14277                           	opt stack 0
 14278                           tosu	equ	0xFFF
 14279                           tosh	equ	0xFFE
 14280                           tosl	equ	0xFFD
 14281                           pclath	equ	0xFFA
 14282                           tblptru	equ	0xFF8
 14283                           tblptrh	equ	0xFF7
 14284                           tblptrl	equ	0xFF6
 14285                           tablat	equ	0xFF5
 14286                           prodh	equ	0xFF4
 14287                           prodl	equ	0xFF3
 14288                           intcon	equ	0xFF2
 14289                           postinc0	equ	0xFEE
 14290                           wreg	equ	0xFE8
 14291                           postdec1	equ	0xFE5
 14292                           fsr1l	equ	0xFE1
 14293                           indf2	equ	0xFDF
 14294                           postinc2	equ	0xFDE
 14295                           postdec2	equ	0xFDD
 14296                           fsr2h	equ	0xFDA
 14297                           fsr2l	equ	0xFD9
 14298                           status	equ	0xFD8
 14299                           
 14300 ;; *************** function _mssp1_disableIRQ *****************
 14301 ;; Defined at:
 14302 ;;		line 48 in file "mcc_generated_files/i2c1_driver.c"
 14303 ;; Parameters:    Size  Location     Type
 14304 ;;		None
 14305 ;; Auto vars:     Size  Location     Type
 14306 ;;		None
 14307 ;; Return value:  Size  Location     Type
 14308 ;;                  1    wreg      void 
 14309 ;; Registers used:
 14310 ;;		None
 14311 ;; Tracked objects:
 14312 ;;		On entry : 0/0
 14313 ;;		On exit  : 0/0
 14314 ;;		Unchanged: 0/0
 14315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14320 ;;Total ram usage:        0 bytes
 14321 ;; Hardware stack levels used:    1
 14322 ;; Hardware stack levels required when called:    6
 14323 ;; This function calls:
 14324 ;;		Nothing
 14325 ;; This function is called by:
 14326 ;;		_i2c_close
 14327 ;;		_i2c_setTimeOut
 14328 ;; This function uses a non-reentrant model
 14329 ;;
 14330                           
 14331                           	psect	text103
 14332  003F18                     __ptext103:
 14333                           	opt stack 0
 14334  003F18                     _mssp1_disableIRQ:
 14335                           	opt stack 21
 14336                           
 14337                           ;i2c1_driver.c: 50: PIE3bits.SSP1IE = 0;
 14338                           
 14339                           ;incstack = 0
 14340  003F18  010E               	movlb	14	; () banked
 14341  003F1A  91C5               	bcf	197,0,b	;volatile
 14342                           
 14343                           ; BSR set to: 14
 14344  003F1C  0012               	return		;funcret
 14345  003F1E                     __end_of_mssp1_disableIRQ:
 14346                           	opt stack 0
 14347                           tosu	equ	0xFFF
 14348                           tosh	equ	0xFFE
 14349                           tosl	equ	0xFFD
 14350                           pclath	equ	0xFFA
 14351                           tblptru	equ	0xFF8
 14352                           tblptrh	equ	0xFF7
 14353                           tblptrl	equ	0xFF6
 14354                           tablat	equ	0xFF5
 14355                           prodh	equ	0xFF4
 14356                           prodl	equ	0xFF3
 14357                           intcon	equ	0xFF2
 14358                           postinc0	equ	0xFEE
 14359                           wreg	equ	0xFE8
 14360                           postdec1	equ	0xFE5
 14361                           fsr1l	equ	0xFE1
 14362                           indf2	equ	0xFDF
 14363                           postinc2	equ	0xFDE
 14364                           postdec2	equ	0xFDD
 14365                           fsr2h	equ	0xFDA
 14366                           fsr2l	equ	0xFD9
 14367                           status	equ	0xFD8
 14368                           
 14369 ;; *************** function _mssp1_clearIRQ *****************
 14370 ;; Defined at:
 14371 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 14372 ;; Parameters:    Size  Location     Type
 14373 ;;		None
 14374 ;; Auto vars:     Size  Location     Type
 14375 ;;		None
 14376 ;; Return value:  Size  Location     Type
 14377 ;;                  1    wreg      void 
 14378 ;; Registers used:
 14379 ;;		None
 14380 ;; Tracked objects:
 14381 ;;		On entry : 0/0
 14382 ;;		On exit  : 0/0
 14383 ;;		Unchanged: 0/0
 14384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14389 ;;Total ram usage:        0 bytes
 14390 ;; Hardware stack levels used:    1
 14391 ;; Hardware stack levels required when called:    6
 14392 ;; This function calls:
 14393 ;;		Nothing
 14394 ;; This function is called by:
 14395 ;;		_i2c_open
 14396 ;;		_i2c_close
 14397 ;;		_i2c_ISR
 14398 ;; This function uses a non-reentrant model
 14399 ;;
 14400                           
 14401                           	psect	text104
 14402  003F1E                     __ptext104:
 14403                           	opt stack 0
 14404  003F1E                     _mssp1_clearIRQ:
 14405                           	opt stack 21
 14406                           
 14407                           ;i2c1_driver.c: 55: PIR3bits.SSP1IF = 0;
 14408                           
 14409                           ; BSR set to: 14
 14410                           ;incstack = 0
 14411  003F1E  010E               	movlb	14	; () banked
 14412  003F20  91CD               	bcf	205,0,b	;volatile
 14413                           
 14414                           ; BSR set to: 14
 14415  003F22  0012               	return		;funcret
 14416  003F24                     __end_of_mssp1_clearIRQ:
 14417                           	opt stack 0
 14418                           tosu	equ	0xFFF
 14419                           tosh	equ	0xFFE
 14420                           tosl	equ	0xFFD
 14421                           pclath	equ	0xFFA
 14422                           tblptru	equ	0xFF8
 14423                           tblptrh	equ	0xFF7
 14424                           tblptrl	equ	0xFF6
 14425                           tablat	equ	0xFF5
 14426                           prodh	equ	0xFF4
 14427                           prodl	equ	0xFF3
 14428                           intcon	equ	0xFF2
 14429                           postinc0	equ	0xFEE
 14430                           wreg	equ	0xFE8
 14431                           postdec1	equ	0xFE5
 14432                           fsr1l	equ	0xFE1
 14433                           indf2	equ	0xFDF
 14434                           postinc2	equ	0xFDE
 14435                           postdec2	equ	0xFDD
 14436                           fsr2h	equ	0xFDA
 14437                           fsr2l	equ	0xFD9
 14438                           status	equ	0xFD8
 14439                           
 14440 ;; *************** function _INTERRUPT_InterruptManager *****************
 14441 ;; Defined at:
 14442 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
 14443 ;; Parameters:    Size  Location     Type
 14444 ;;		None
 14445 ;; Auto vars:     Size  Location     Type
 14446 ;;		None
 14447 ;; Return value:  Size  Location     Type
 14448 ;;                  1    wreg      void 
 14449 ;; Registers used:
 14450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 14451 ;; Tracked objects:
 14452 ;;		On entry : 0/0
 14453 ;;		On exit  : 0/0
 14454 ;;		Unchanged: 0/0
 14455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14458 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14459 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14460 ;;Total ram usage:       18 bytes
 14461 ;; Hardware stack levels used:    1
 14462 ;; Hardware stack levels required when called:    5
 14463 ;; This function calls:
 14464 ;;		Absolute function
 14465 ;;		_i2c_busCollisionISR
 14466 ;;		i2_i2c_ISR
 14467 ;; This function is called by:
 14468 ;;		Interrupt level 2
 14469 ;; This function uses a non-reentrant model
 14470 ;;
 14471                           
 14472                           	psect	intcode
 14473  000008                     __pintcode:
 14474                           	opt stack 0
 14475  000008                     _INTERRUPT_InterruptManager:
 14476                           	opt stack 8
 14477                           
 14478                           ; BSR set to: 14
 14479                           ;incstack = 0
 14480  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14481  00000A  CFFA F004          	movff	pclath,??_INTERRUPT_InterruptManager
 14482  00000E  CFFB F005          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 14483  000012  CFE9 F006          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 14484  000016  CFEA F007          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 14485  00001A  CFE1 F008          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 14486  00001E  CFE2 F009          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 14487  000022  CFD9 F00A          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 14488  000026  CFDA F00B          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 14489  00002A  CFF3 F00C          	movff	prodl,??_INTERRUPT_InterruptManager+8
 14490  00002E  CFF4 F00D          	movff	prodh,??_INTERRUPT_InterruptManager+9
 14491  000032  CFF6 F00E          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 14492  000036  CFF7 F00F          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 14493  00003A  CFF8 F010          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 14494  00003E  CFF5 F011          	movff	tablat,??_INTERRUPT_InterruptManager+13
 14495  000042  C04A  F012         	movff	btemp,??_INTERRUPT_InterruptManager+14
 14496  000046  C04B  F013         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 14497  00004A  C04C  F014         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 14498  00004E  C04D  F015         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 14499                           
 14500                           ;interrupt_manager.c: 61: if(INTCONbits.PEIE == 1)
 14501  000052  ACF2               	btfss	intcon,6,c	;volatile
 14502  000054  D01D               	goto	i2u631_49
 14503                           
 14504                           ;interrupt_manager.c: 62: {
 14505                           ;interrupt_manager.c: 63: if(PIE3bits.BCL1IE == 1 && PIR3bits.BCL1IF == 1)
 14506  000056  010E               	movlb	14	; () banked
 14507  000058  B3C5               	btfsc	197,1,b	;volatile
 14508                           
 14509                           ; BSR set to: 14
 14510  00005A  A3CD               	btfss	205,1,b	;volatile
 14511  00005C  D00A               	goto	i2l62
 14512                           
 14513                           ; BSR set to: 14
 14514                           ;interrupt_manager.c: 64: {
 14515                           ;interrupt_manager.c: 65: i2c1_driver_busCollisionISR();
 14516  00005E  D801               	call	i2u628_48
 14517  000060  D017               	goto	i2u631_49
 14518  000062                     i2u628_48:
 14519  000062  0005               	push	
 14520  000064  6EFA               	movwf	pclath,c
 14521  000066  503E               	movf	_i2c1_driver_busCollisionISR,w,c
 14522  000068  6EFD               	movwf	tosl,c
 14523  00006A  503F               	movf	_i2c1_driver_busCollisionISR+1,w,c
 14524  00006C  6EFE               	movwf	tosh,c
 14525  00006E  5040               	movf	_i2c1_driver_busCollisionISR+2,w,c
 14526  000070  D00C               	goto	L5
 14527  000072                     i2l62:
 14528                           
 14529                           ; BSR set to: 14
 14530                           ;interrupt_manager.c: 67: else if(PIE3bits.SSP1IE == 1 && PIR3bits.SSP1IF == 1)
 14531  000072  B1C5               	btfsc	197,0,b	;volatile
 14532                           
 14533                           ; BSR set to: 14
 14534  000074  A1CD               	btfss	205,0,b	;volatile
 14535  000076  D00C               	goto	i2u631_49
 14536                           
 14537                           ; BSR set to: 14
 14538                           ;interrupt_manager.c: 68: {
 14539                           ;interrupt_manager.c: 69: i2c1_driver_i2cISR();
 14540  000078  D801               	call	i2u631_48
 14541  00007A  D00A               	goto	i2u631_49
 14542  00007C                     i2u631_48:
 14543  00007C  0005               	push	
 14544  00007E  6EFA               	movwf	pclath,c
 14545  000080  503B               	movf	_i2c1_driver_i2cISR,w,c
 14546  000082  6EFD               	movwf	tosl,c
 14547  000084  503C               	movf	_i2c1_driver_i2cISR+1,w,c
 14548  000086  6EFE               	movwf	tosh,c
 14549  000088  503D               	movf	_i2c1_driver_i2cISR+2,w,c
 14550  00008A                     L5:
 14551  00008A  6EFF               	movwf	tosu,c
 14552  00008C  50FA               	movf	pclath,w,c
 14553  00008E  0012               	return		;indir
 14554  000090                     i2u631_49:
 14555                           
 14556                           ;interrupt_manager.c: 76: else
 14557                           ;interrupt_manager.c: 77: {
 14558                           
 14559                           ;interrupt_manager.c: 74: }
 14560                           ;interrupt_manager.c: 75: }
 14561                           
 14562                           ;interrupt_manager.c: 71: else
 14563                           ;interrupt_manager.c: 72: {
 14564                           
 14565                           ;interrupt_manager.c: 70: }
 14566  000090  C015  F04D         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 14567  000094  C014  F04C         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 14568  000098  C013  F04B         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 14569  00009C  C012  F04A         	movff	??_INTERRUPT_InterruptManager+14,btemp
 14570  0000A0  C011  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 14571  0000A4  C010  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 14572  0000A8  C00F  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 14573  0000AC  C00E  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 14574  0000B0  C00D  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 14575  0000B4  C00C  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 14576  0000B8  C00B  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 14577  0000BC  C00A  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 14578  0000C0  C009  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 14579  0000C4  C008  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 14580  0000C8  C007  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 14581  0000CC  C006  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 14582  0000D0  C005  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 14583  0000D4  C004  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 14584  0000D8  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14585  0000DA  0011               	retfie		f
 14586  0000DC                     __end_of_INTERRUPT_InterruptManager:
 14587                           	opt stack 0
 14588                           tosu	equ	0xFFF
 14589                           tosh	equ	0xFFE
 14590                           tosl	equ	0xFFD
 14591                           pclatu	equ	0xFFB
 14592                           pclath	equ	0xFFA
 14593                           tblptru	equ	0xFF8
 14594                           tblptrh	equ	0xFF7
 14595                           tblptrl	equ	0xFF6
 14596                           tablat	equ	0xFF5
 14597                           prodh	equ	0xFF4
 14598                           prodl	equ	0xFF3
 14599                           intcon	equ	0xFF2
 14600                           postinc0	equ	0xFEE
 14601                           fsr0h	equ	0xFEA
 14602                           fsr0l	equ	0xFE9
 14603                           wreg	equ	0xFE8
 14604                           postdec1	equ	0xFE5
 14605                           fsr1h	equ	0xFE2
 14606                           fsr1l	equ	0xFE1
 14607                           indf2	equ	0xFDF
 14608                           postinc2	equ	0xFDE
 14609                           postdec2	equ	0xFDD
 14610                           fsr2h	equ	0xFDA
 14611                           fsr2l	equ	0xFD9
 14612                           status	equ	0xFD8
 14613                           
 14614 ;; *************** function i2_i2c_ISR *****************
 14615 ;; Defined at:
 14616 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 14617 ;; Parameters:    Size  Location     Type
 14618 ;;		None
 14619 ;; Auto vars:     Size  Location     Type
 14620 ;;		None
 14621 ;; Return value:  Size  Location     Type
 14622 ;;                  1    wreg      void 
 14623 ;; Registers used:
 14624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 14625 ;; Tracked objects:
 14626 ;;		On entry : 0/0
 14627 ;;		On exit  : 0/0
 14628 ;;		Unchanged: 0/0
 14629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14634 ;;Total ram usage:        0 bytes
 14635 ;; Hardware stack levels used:    1
 14636 ;; Hardware stack levels required when called:    4
 14637 ;; This function calls:
 14638 ;;		i2_do_I2C_DO_ACK
 14639 ;;		i2_do_I2C_DO_ADDRESS_NACK
 14640 ;;		i2_do_I2C_DO_NACK_RESTART
 14641 ;;		i2_do_I2C_DO_NACK_STOP
 14642 ;;		i2_do_I2C_IDLE
 14643 ;;		i2_do_I2C_RCEN
 14644 ;;		i2_do_I2C_RESET
 14645 ;;		i2_do_I2C_RX
 14646 ;;		i2_do_I2C_SEND_ADR_READ
 14647 ;;		i2_do_I2C_SEND_ADR_WRITE
 14648 ;;		i2_do_I2C_SEND_RESTART
 14649 ;;		i2_do_I2C_SEND_RESTART_READ
 14650 ;;		i2_do_I2C_SEND_RESTART_WRITE
 14651 ;;		i2_do_I2C_SEND_STOP
 14652 ;;		i2_do_I2C_TX
 14653 ;;		i2_do_I2C_TX_EMPTY
 14654 ;;		i2_i2c1_driver_isNACK
 14655 ;;		i2_mssp1_clearIRQ
 14656 ;; This function is called by:
 14657 ;; This function uses a non-reentrant model
 14658 ;;
 14659                           
 14660                           	psect	text106
 14661  00366C                     __ptext106:
 14662                           	opt stack 0
 14663  00366C                     i2_i2c_ISR:
 14664                           	opt stack 8
 14665                           
 14666                           ;i2c_master.c: 421: mssp1_clearIRQ();
 14667                           
 14668                           ;incstack = 0
 14669  00366C  EC92  F01F         	call	i2_mssp1_clearIRQ	;wreg free
 14670                           
 14671                           ;i2c_master.c: 427: if(i2c_status.addressNACKCheck && i2c1_driver_isNACK())
 14672  003670  0100               	movlb	0	; () banked
 14673  003672  A7B2               	btfss	_i2c_status& (0+255),3,b
 14674  003674  D007               	goto	i2l469
 14675                           
 14676                           ; BSR set to: 0
 14677  003676  EC72  F01E         	call	i2_i2c1_driver_isNACK	;wreg free
 14678  00367A  A0D8               	btfss	status,0,c
 14679  00367C  D003               	goto	i2l469
 14680                           
 14681                           ;i2c_master.c: 428: {
 14682                           ;i2c_master.c: 429: i2c_status.state = I2C_ADDRESS_NACK;
 14683  00367E  0E0F               	movlw	15
 14684  003680  0100               	movlb	0	; () banked
 14685  003682  6FBC               	movwf	(_i2c_status+10)& (0+255),b
 14686  003684                     i2l469:
 14687                           
 14688                           ;i2c_master.c: 430: }
 14689                           ;i2c_master.c: 432: i2c_status.state = fsmStateTable[i2c_status.state]();
 14690                           
 14691                           ; BSR set to: 0
 14692  003684  0100               	movlb	0	; () banked
 14693  003686  51BC               	movf	(_i2c_status+10)& (0+255),w,b
 14694  003688  0D03               	mullw	3
 14695  00368A  0E00               	movlw	low _fsmStateTable
 14696  00368C  24F3               	addwf	prodl,w,c
 14697  00368E  6ED9               	movwf	fsr2l,c
 14698  003690  0E01               	movlw	high _fsmStateTable
 14699  003692  20F4               	addwfc	prodh,w,c
 14700  003694  6EDA               	movwf	fsr2h,c
 14701  003696  D801               	call	i2u624_48
 14702  003698  D00A               	goto	i2u624_49
 14703  00369A                     i2u624_48:
 14704  00369A  0005               	push	
 14705  00369C  6EFA               	movwf	pclath,c
 14706  00369E  50DE               	movf	postinc2,w,c
 14707  0036A0  6EFD               	movwf	tosl,c
 14708  0036A2  50DE               	movf	postinc2,w,c
 14709  0036A4  6EFE               	movwf	tosh,c
 14710  0036A6  50DE               	movf	postinc2,w,c
 14711  0036A8  6EFF               	movwf	tosu,c
 14712  0036AA  50FA               	movf	pclath,w,c
 14713  0036AC  0012               	return		;indir
 14714  0036AE                     i2u624_49:
 14715  0036AE  0100               	movlb	0	; () banked
 14716  0036B0  6FBC               	movwf	(_i2c_status+10)& (0+255),b
 14717                           
 14718                           ; BSR set to: 0
 14719  0036B2  0012               	return		;funcret
 14720  0036B4                     __end_ofi2_i2c_ISR:
 14721                           	opt stack 0
 14722                           tosu	equ	0xFFF
 14723                           tosh	equ	0xFFE
 14724                           tosl	equ	0xFFD
 14725                           pclatu	equ	0xFFB
 14726                           pclath	equ	0xFFA
 14727                           tblptru	equ	0xFF8
 14728                           tblptrh	equ	0xFF7
 14729                           tblptrl	equ	0xFF6
 14730                           tablat	equ	0xFF5
 14731                           prodh	equ	0xFF4
 14732                           prodl	equ	0xFF3
 14733                           intcon	equ	0xFF2
 14734                           postinc0	equ	0xFEE
 14735                           fsr0h	equ	0xFEA
 14736                           fsr0l	equ	0xFE9
 14737                           wreg	equ	0xFE8
 14738                           postdec1	equ	0xFE5
 14739                           fsr1h	equ	0xFE2
 14740                           fsr1l	equ	0xFE1
 14741                           indf2	equ	0xFDF
 14742                           postinc2	equ	0xFDE
 14743                           postdec2	equ	0xFDD
 14744                           fsr2h	equ	0xFDA
 14745                           fsr2l	equ	0xFD9
 14746                           status	equ	0xFD8
 14747                           
 14748 ;; *************** function i2_mssp1_clearIRQ *****************
 14749 ;; Defined at:
 14750 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 14751 ;; Parameters:    Size  Location     Type
 14752 ;;		None
 14753 ;; Auto vars:     Size  Location     Type
 14754 ;;		None
 14755 ;; Return value:  Size  Location     Type
 14756 ;;                  1    wreg      void 
 14757 ;; Registers used:
 14758 ;;		None
 14759 ;; Tracked objects:
 14760 ;;		On entry : 0/0
 14761 ;;		On exit  : 0/0
 14762 ;;		Unchanged: 0/0
 14763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14768 ;;Total ram usage:        0 bytes
 14769 ;; Hardware stack levels used:    1
 14770 ;; This function calls:
 14771 ;;		Nothing
 14772 ;; This function is called by:
 14773 ;;		i2_i2c_ISR
 14774 ;; This function uses a non-reentrant model
 14775 ;;
 14776                           
 14777                           	psect	text107
 14778  003F24                     __ptext107:
 14779                           	opt stack 0
 14780  003F24                     i2_mssp1_clearIRQ:
 14781                           	opt stack 11
 14782                           
 14783                           ;i2c1_driver.c: 55: PIR3bits.SSP1IF = 0;
 14784                           
 14785                           ; BSR set to: 0
 14786                           ;incstack = 0
 14787  003F24  010E               	movlb	14	; () banked
 14788  003F26  91CD               	bcf	205,0,b	;volatile
 14789                           
 14790                           ; BSR set to: 14
 14791  003F28  0012               	return		;funcret
 14792  003F2A                     __end_ofi2_mssp1_clearIRQ:
 14793                           	opt stack 0
 14794                           tosu	equ	0xFFF
 14795                           tosh	equ	0xFFE
 14796                           tosl	equ	0xFFD
 14797                           pclatu	equ	0xFFB
 14798                           pclath	equ	0xFFA
 14799                           tblptru	equ	0xFF8
 14800                           tblptrh	equ	0xFF7
 14801                           tblptrl	equ	0xFF6
 14802                           tablat	equ	0xFF5
 14803                           prodh	equ	0xFF4
 14804                           prodl	equ	0xFF3
 14805                           intcon	equ	0xFF2
 14806                           postinc0	equ	0xFEE
 14807                           fsr0h	equ	0xFEA
 14808                           fsr0l	equ	0xFE9
 14809                           wreg	equ	0xFE8
 14810                           postdec1	equ	0xFE5
 14811                           fsr1h	equ	0xFE2
 14812                           fsr1l	equ	0xFE1
 14813                           indf2	equ	0xFDF
 14814                           postinc2	equ	0xFDE
 14815                           postdec2	equ	0xFDD
 14816                           fsr2h	equ	0xFDA
 14817                           fsr2l	equ	0xFD9
 14818                           status	equ	0xFD8
 14819                           
 14820 ;; *************** function i2_do_I2C_RX *****************
 14821 ;; Defined at:
 14822 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 14823 ;; Parameters:    Size  Location     Type
 14824 ;;		None
 14825 ;; Auto vars:     Size  Location     Type
 14826 ;;		None
 14827 ;; Return value:  Size  Location     Type
 14828 ;;                  1    wreg      enum E11982
 14829 ;; Registers used:
 14830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 14831 ;; Tracked objects:
 14832 ;;		On entry : 0/0
 14833 ;;		On exit  : 0/0
 14834 ;;		Unchanged: 0/0
 14835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14840 ;;Total ram usage:        0 bytes
 14841 ;; Hardware stack levels used:    1
 14842 ;; Hardware stack levels required when called:    3
 14843 ;; This function calls:
 14844 ;;		Absolute function
 14845 ;;		i2_do_I2C_DO_NACK_RESTART
 14846 ;;		i2_do_I2C_DO_NACK_STOP
 14847 ;;		i2_i2c1_driver_getRXData
 14848 ;;		i2_i2c1_driver_sendACK
 14849 ;;		i2_i2c_restartWrite
 14850 ;;		i2_rd1RegCompleteHandler
 14851 ;;		i2_rd2RegCompleteHandler
 14852 ;;		i2_rdBlkRegCompleteHandler
 14853 ;;		i2_returnReset
 14854 ;;		i2_returnStop
 14855 ;;		i2_wr1RegCompleteHandler
 14856 ;;		i2_wr2RegCompleteHandler
 14857 ;; This function is called by:
 14858 ;; This function uses a non-reentrant model
 14859 ;;
 14860                           
 14861                           	psect	text108
 14862  0031CC                     __ptext108:
 14863                           	opt stack 0
 14864  0031CC                     i2_do_I2C_RX:
 14865                           	opt stack 8
 14866                           
 14867                           ;i2c_master.c: 359: *i2c_status.data_ptr++ = i2c1_driver_getRXData();
 14868                           
 14869                           ; BSR set to: 14
 14870                           ;incstack = 0
 14871  0031CC  ECB0  F01F         	call	i2_i2c1_driver_getRXData	;wreg free
 14872  0031D0  C0B4  FFD9         	movff	_i2c_status+2,fsr2l
 14873  0031D4  C0B5  FFDA         	movff	_i2c_status+3,fsr2h
 14874  0031D8  6EDF               	movwf	indf2,c
 14875  0031DA  0100               	movlb	0	; () banked
 14876  0031DC  4BB4               	infsnz	(_i2c_status+2)& (0+255),f,b
 14877  0031DE  2BB5               	incf	(_i2c_status+3)& (0+255),f,b
 14878                           
 14879                           ; BSR set to: 0
 14880                           ;i2c_master.c: 360: if(--i2c_status.data_length)
 14881  0031E0  07B6               	decf	(_i2c_status+4)& (0+255),f,b
 14882  0031E2  A0D8               	btfss	status,0,c
 14883  0031E4  07B7               	decf	(_i2c_status+5)& (0+255),f,b
 14884  0031E6  51B6               	movf	(_i2c_status+4)& (0+255),w,b
 14885  0031E8  11B7               	iorwf	(_i2c_status+5)& (0+255),w,b
 14886  0031EA  B4D8               	btfsc	status,2,c
 14887  0031EC  D004               	goto	i2l445
 14888                           
 14889                           ; BSR set to: 0
 14890                           ;i2c_master.c: 361: {
 14891                           ;i2c_master.c: 362: i2c1_driver_sendACK();
 14892  0031EE  EC9B  F01F         	call	i2_i2c1_driver_sendACK	;wreg free
 14893                           
 14894                           ;i2c_master.c: 363: return I2C_RCEN;
 14895  0031F2  0E05               	movlw	5
 14896                           
 14897                           ;i2c_master.c: 364: }
 14898  0031F4  0012               	return	
 14899  0031F6                     i2l445:
 14900                           
 14901                           ; BSR set to: 0
 14902                           ;i2c_master.c: 365: else
 14903                           ;i2c_master.c: 366: {
 14904                           ;i2c_master.c: 367: i2c_status.bufferFree = 1;
 14905  0031F6  85B2               	bsf	_i2c_status& (0+255),2,b
 14906                           
 14907                           ;i2c_master.c: 368: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 14908  0031F8  D006               	goto	i2l448
 14909  0031FA                     
 14910                           ;i2c_master.c: 371: case i2c_restart_read:
 14911                           ;i2c_master.c: 372: return do_I2C_DO_NACK_RESTART();
 14912                           
 14913                           ; BSR set to: 0
 14914                           
 14915                           ; BSR set to: 0
 14916  0031FA  EC63  F01F         	call	i2_do_I2C_DO_NACK_RESTART	;wreg free
 14917  0031FE  0012               	return	
 14918  003200                     
 14919                           ;i2c_master.c: 375: case i2c_stop:
 14920                           ;i2c_master.c: 376: return do_I2C_DO_NACK_STOP();
 14921                           
 14922                           ;i2c_master.c: 374: case i2c_continue:
 14923  003200  EC67  F01F         	call	i2_do_I2C_DO_NACK_STOP	;wreg free
 14924                           
 14925                           ;i2c_master.c: 377: }
 14926  003204  0012               	return	
 14927  003206                     i2l448:
 14928  003206  C0D0  F00C         	movff	_i2c_status+30,i2returnStop@p
 14929  00320A  C0D1  F00D         	movff	_i2c_status+31,i2returnStop@p+1
 14930  00320E  EE20  F0BE         	lfsr	2,_i2c_status+12
 14931  003212  D801               	call	i2u583_48
 14932  003214  D00A               	goto	i2u583_49
 14933  003216                     i2u583_48:
 14934  003216  0005               	push	
 14935  003218  6EFA               	movwf	pclath,c
 14936  00321A  50DE               	movf	postinc2,w,c
 14937  00321C  6EFD               	movwf	tosl,c
 14938  00321E  50DE               	movf	postinc2,w,c
 14939  003220  6EFE               	movwf	tosh,c
 14940  003222  50DE               	movf	postinc2,w,c
 14941  003224  6EFF               	movwf	tosu,c
 14942  003226  50FA               	movf	pclath,w,c
 14943  003228  0012               	return		;indir
 14944  00322A                     i2u583_49:
 14945                           
 14946                           ; Switch size 1, requested type "space"
 14947                           ; Number of cases is 4, Range of values is 1 to 4
 14948                           ; switch strategies available:
 14949                           ; Name         Instructions Cycles
 14950                           ; simple_byte           13     7 (average)
 14951                           ;	Chosen strategy is simple_byte
 14952  00322A  0A01               	xorlw	1	; case 1
 14953  00322C  B4D8               	btfsc	status,2,c
 14954  00322E  D7E8               	goto	i2l451
 14955  003230  0A03               	xorlw	3	; case 2
 14956  003232  B4D8               	btfsc	status,2,c
 14957  003234  D7E2               	goto	i2l449
 14958  003236  0A01               	xorlw	1	; case 3
 14959  003238  B4D8               	btfsc	status,2,c
 14960  00323A  D7DF               	goto	i2l449
 14961  00323C  0A07               	xorlw	7	; case 4
 14962  00323E  D7E0               	goto	i2l451
 14963  003240                     __end_ofi2_do_I2C_RX:
 14964                           	opt stack 0
 14965                           tosu	equ	0xFFF
 14966                           tosh	equ	0xFFE
 14967                           tosl	equ	0xFFD
 14968                           pclatu	equ	0xFFB
 14969                           pclath	equ	0xFFA
 14970                           tblptru	equ	0xFF8
 14971                           tblptrh	equ	0xFF7
 14972                           tblptrl	equ	0xFF6
 14973                           tablat	equ	0xFF5
 14974                           prodh	equ	0xFF4
 14975                           prodl	equ	0xFF3
 14976                           intcon	equ	0xFF2
 14977                           postinc0	equ	0xFEE
 14978                           fsr0h	equ	0xFEA
 14979                           fsr0l	equ	0xFE9
 14980                           wreg	equ	0xFE8
 14981                           postdec1	equ	0xFE5
 14982                           fsr1h	equ	0xFE2
 14983                           fsr1l	equ	0xFE1
 14984                           indf2	equ	0xFDF
 14985                           postinc2	equ	0xFDE
 14986                           postdec2	equ	0xFDD
 14987                           fsr2h	equ	0xFDA
 14988                           fsr2l	equ	0xFD9
 14989                           status	equ	0xFD8
 14990                           
 14991 ;; *************** function i2_do_I2C_TX *****************
 14992 ;; Defined at:
 14993 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 14994 ;; Parameters:    Size  Location     Type
 14995 ;;		None
 14996 ;; Auto vars:     Size  Location     Type
 14997 ;;		None
 14998 ;; Return value:  Size  Location     Type
 14999 ;;                  1    wreg      enum E11982
 15000 ;; Registers used:
 15001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 15002 ;; Tracked objects:
 15003 ;;		On entry : 0/0
 15004 ;;		On exit  : 0/0
 15005 ;;		Unchanged: 0/0
 15006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15008 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15010 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15011 ;;Total ram usage:        2 bytes
 15012 ;; Hardware stack levels used:    1
 15013 ;; Hardware stack levels required when called:    3
 15014 ;; This function calls:
 15015 ;;		Absolute function
 15016 ;;		i2_do_I2C_SEND_RESTART_READ
 15017 ;;		i2_do_I2C_SEND_RESTART_WRITE
 15018 ;;		i2_do_I2C_SEND_STOP
 15019 ;;		i2_i2c1_driver_TXData
 15020 ;;		i2_i2c1_driver_isNACK
 15021 ;;		i2_i2c_restartWrite
 15022 ;;		i2_rd1RegCompleteHandler
 15023 ;;		i2_rd2RegCompleteHandler
 15024 ;;		i2_rdBlkRegCompleteHandler
 15025 ;;		i2_returnReset
 15026 ;;		i2_returnStop
 15027 ;;		i2_wr1RegCompleteHandler
 15028 ;;		i2_wr2RegCompleteHandler
 15029 ;; This function is called by:
 15030 ;; This function uses a non-reentrant model
 15031 ;;
 15032                           
 15033                           	psect	text109
 15034  002E4E                     __ptext109:
 15035                           	opt stack 0
 15036  002E4E                     i2_do_I2C_TX:
 15037                           	opt stack 8
 15038                           
 15039                           ;i2c_master.c: 335: if(i2c1_driver_isNACK())
 15040                           
 15041                           ;incstack = 0
 15042  002E4E  EC72  F01E         	call	i2_i2c1_driver_isNACK	;wreg free
 15043  002E52  B0D8               	btfsc	status,0,c
 15044  002E54  D00A               	goto	i2l430
 15045  002E56  D026               	goto	i2l429
 15046  002E58                     
 15047                           ;i2c_master.c: 340: return do_I2C_SEND_RESTART_READ();
 15048  002E58  EC7B  F01F         	call	i2_do_I2C_SEND_RESTART_READ	;wreg free
 15049  002E5C  0012               	return	
 15050  002E5E                     
 15051                           ;i2c_master.c: 342: return do_I2C_SEND_RESTART_WRITE();
 15052  002E5E  EC77  F01F         	call	i2_do_I2C_SEND_RESTART_WRITE	;wreg free
 15053  002E62  0012               	return	
 15054  002E64                     
 15055                           ;i2c_master.c: 345: case i2c_stop:
 15056                           ;i2c_master.c: 346: return do_I2C_SEND_STOP();
 15057                           
 15058                           ;i2c_master.c: 344: case i2c_continue:
 15059  002E64  EC6F  F01F         	call	i2_do_I2C_SEND_STOP	;wreg free
 15060                           
 15061                           ;i2c_master.c: 347: }
 15062  002E68  0012               	return	
 15063  002E6A                     i2l430:
 15064  002E6A  C0D6  F00C         	movff	_i2c_status+36,i2returnStop@p
 15065  002E6E  C0D7  F00D         	movff	_i2c_status+37,i2returnStop@p+1
 15066  002E72  EE20  F0C7         	lfsr	2,_i2c_status+21
 15067  002E76  D801               	call	i2u580_48
 15068  002E78  D00A               	goto	i2u580_49
 15069  002E7A                     i2u580_48:
 15070  002E7A  0005               	push	
 15071  002E7C  6EFA               	movwf	pclath,c
 15072  002E7E  50DE               	movf	postinc2,w,c
 15073  002E80  6EFD               	movwf	tosl,c
 15074  002E82  50DE               	movf	postinc2,w,c
 15075  002E84  6EFE               	movwf	tosh,c
 15076  002E86  50DE               	movf	postinc2,w,c
 15077  002E88  6EFF               	movwf	tosu,c
 15078  002E8A  50FA               	movf	pclath,w,c
 15079  002E8C  0012               	return		;indir
 15080  002E8E                     i2u580_49:
 15081                           
 15082                           ; Switch size 1, requested type "space"
 15083                           ; Number of cases is 4, Range of values is 1 to 4
 15084                           ; switch strategies available:
 15085                           ; Name         Instructions Cycles
 15086                           ; simple_byte           13     7 (average)
 15087                           ;	Chosen strategy is simple_byte
 15088  002E8E  0A01               	xorlw	1	; case 1
 15089  002E90  B4D8               	btfsc	status,2,c
 15090  002E92  D7E8               	goto	i2l434
 15091  002E94  0A03               	xorlw	3	; case 2
 15092  002E96  B4D8               	btfsc	status,2,c
 15093  002E98  D7DF               	goto	i2l431
 15094  002E9A  0A01               	xorlw	1	; case 3
 15095  002E9C  B4D8               	btfsc	status,2,c
 15096  002E9E  D7DF               	goto	i2l433
 15097  002EA0  0A07               	xorlw	7	; case 4
 15098  002EA2  D7E0               	goto	i2l434
 15099  002EA4                     i2l429:
 15100                           
 15101                           ;i2c_master.c: 349: else
 15102                           ;i2c_master.c: 350: {
 15103                           ;i2c_master.c: 351: i2c_status.addressNACKCheck = 0;
 15104  002EA4  0100               	movlb	0	; () banked
 15105  002EA6  97B2               	bcf	_i2c_status& (0+255),3,b
 15106                           
 15107                           ; BSR set to: 0
 15108                           ;i2c_master.c: 352: i2c1_driver_TXData(*i2c_status.data_ptr++);
 15109  002EA8  C0B4  FFD9         	movff	_i2c_status+2,fsr2l
 15110  002EAC  C0B5  FFDA         	movff	_i2c_status+3,fsr2h
 15111  002EB0  4BB4               	infsnz	(_i2c_status+2)& (0+255),f,b
 15112  002EB2  2BB5               	incf	(_i2c_status+3)& (0+255),f,b
 15113  002EB4  50DF               	movf	indf2,w,c
 15114  002EB6  EC7F  F01F         	call	i2_i2c1_driver_TXData
 15115                           
 15116                           ;i2c_master.c: 353: return (--i2c_status.data_length)?I2C_TX:I2C_TX_EMPTY;
 15117  002EBA  0100               	movlb	0	; () banked
 15118  002EBC  07B6               	decf	(_i2c_status+4)& (0+255),f,b
 15119  002EBE  A0D8               	btfss	status,0,c
 15120  002EC0  07B7               	decf	(_i2c_status+5)& (0+255),f,b
 15121  002EC2  51B6               	movf	(_i2c_status+4)& (0+255),w,b
 15122  002EC4  11B7               	iorwf	(_i2c_status+5)& (0+255),w,b
 15123  002EC6  A4D8               	btfss	status,2,c
 15124  002EC8  D004               	goto	i2l440
 15125                           
 15126                           ; BSR set to: 0
 15127  002ECA  0E00               	movlw	0
 15128  002ECC  6E03               	movwf	i2_do_I2C_TX$1023+1,c
 15129  002ECE  0E06               	movlw	6
 15130  002ED0  D003               	goto	L6
 15131  002ED2                     i2l440:
 15132                           
 15133                           ; BSR set to: 0
 15134                           
 15135                           ; BSR set to: 0
 15136  002ED2  0E00               	movlw	0
 15137  002ED4  6E03               	movwf	i2_do_I2C_TX$1023+1,c
 15138  002ED6  0E03               	movlw	3
 15139  002ED8                     L6:
 15140  002ED8  6E02               	movwf	i2_do_I2C_TX$1023,c
 15141                           
 15142                           ; BSR set to: 0
 15143  002EDA  5002               	movf	i2_do_I2C_TX$1023,w,c
 15144                           
 15145                           ; BSR set to: 0
 15146  002EDC  0012               	return	
 15147  002EDE                     __end_ofi2_do_I2C_TX:
 15148                           	opt stack 0
 15149                           tosu	equ	0xFFF
 15150                           tosh	equ	0xFFE
 15151                           tosl	equ	0xFFD
 15152                           pclatu	equ	0xFFB
 15153                           pclath	equ	0xFFA
 15154                           tblptru	equ	0xFF8
 15155                           tblptrh	equ	0xFF7
 15156                           tblptrl	equ	0xFF6
 15157                           tablat	equ	0xFF5
 15158                           prodh	equ	0xFF4
 15159                           prodl	equ	0xFF3
 15160                           intcon	equ	0xFF2
 15161                           postinc0	equ	0xFEE
 15162                           fsr0h	equ	0xFEA
 15163                           fsr0l	equ	0xFE9
 15164                           wreg	equ	0xFE8
 15165                           postdec1	equ	0xFE5
 15166                           fsr1h	equ	0xFE2
 15167                           fsr1l	equ	0xFE1
 15168                           indf2	equ	0xFDF
 15169                           postinc2	equ	0xFDE
 15170                           postdec2	equ	0xFDD
 15171                           fsr2h	equ	0xFDA
 15172                           fsr2l	equ	0xFD9
 15173                           status	equ	0xFD8
 15174                           
 15175 ;; *************** function i2_do_I2C_DO_ADDRESS_NACK *****************
 15176 ;; Defined at:
 15177 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 15178 ;; Parameters:    Size  Location     Type
 15179 ;;		None
 15180 ;; Auto vars:     Size  Location     Type
 15181 ;;		None
 15182 ;; Return value:  Size  Location     Type
 15183 ;;                  1    wreg      enum E11982
 15184 ;; Registers used:
 15185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 15186 ;; Tracked objects:
 15187 ;;		On entry : 0/0
 15188 ;;		On exit  : 0/0
 15189 ;;		Unchanged: 0/0
 15190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15195 ;;Total ram usage:        0 bytes
 15196 ;; Hardware stack levels used:    1
 15197 ;; Hardware stack levels required when called:    3
 15198 ;; This function calls:
 15199 ;;		Absolute function
 15200 ;;		i2_do_I2C_SEND_RESTART
 15201 ;;		i2_do_I2C_SEND_STOP
 15202 ;;		i2_i2c_restartWrite
 15203 ;;		i2_rd1RegCompleteHandler
 15204 ;;		i2_rd2RegCompleteHandler
 15205 ;;		i2_rdBlkRegCompleteHandler
 15206 ;;		i2_returnReset
 15207 ;;		i2_returnStop
 15208 ;;		i2_wr1RegCompleteHandler
 15209 ;;		i2_wr2RegCompleteHandler
 15210 ;; This function is called by:
 15211 ;; This function uses a non-reentrant model
 15212 ;;
 15213                           
 15214                           	psect	text110
 15215  0036B4                     __ptext110:
 15216                           	opt stack 0
 15217  0036B4                     i2_do_I2C_DO_ADDRESS_NACK:
 15218                           	opt stack 8
 15219                           
 15220                           ;i2c_master.c: 321: i2c_status.addressNACKCheck = 0;
 15221                           
 15222                           ;incstack = 0
 15223  0036B4  0100               	movlb	0	; () banked
 15224  0036B6  97B2               	bcf	_i2c_status& (0+255),3,b
 15225                           
 15226                           ; BSR set to: 0
 15227                           ;i2c_master.c: 322: i2c_status.error = I2C_FAIL;
 15228  0036B8  0E02               	movlw	2
 15229  0036BA  6FBD               	movwf	(_i2c_status+11)& (0+255),b
 15230                           
 15231                           ;i2c_master.c: 323: switch(i2c_status.callbackTable[i2c_addressNACK](i2c_status.callback
      +                          Payload[i2c_addressNACK]))
 15232  0036BC  D006               	goto	i2l421
 15233  0036BE                     
 15234                           ;i2c_master.c: 326: case i2c_restart_write:
 15235                           ;i2c_master.c: 327: return do_I2C_SEND_RESTART();
 15236                           
 15237                           ; BSR set to: 0
 15238                           
 15239                           ; BSR set to: 0
 15240  0036BE  EC73  F01F         	call	i2_do_I2C_SEND_RESTART	;wreg free
 15241  0036C2  0012               	return	
 15242  0036C4                     
 15243                           ;i2c_master.c: 329: return do_I2C_SEND_STOP();
 15244  0036C4  EC6F  F01F         	call	i2_do_I2C_SEND_STOP	;wreg free
 15245                           
 15246                           ;i2c_master.c: 330: }
 15247  0036C8  0012               	return	
 15248  0036CA                     i2l421:
 15249  0036CA  C0D4  F00C         	movff	_i2c_status+34,i2returnStop@p
 15250  0036CE  C0D5  F00D         	movff	_i2c_status+35,i2returnStop@p+1
 15251  0036D2  EE20  F0C4         	lfsr	2,_i2c_status+18
 15252  0036D6  D801               	call	i2u578_48
 15253  0036D8  D00A               	goto	i2u578_49
 15254  0036DA                     i2u578_48:
 15255  0036DA  0005               	push	
 15256  0036DC  6EFA               	movwf	pclath,c
 15257  0036DE  50DE               	movf	postinc2,w,c
 15258  0036E0  6EFD               	movwf	tosl,c
 15259  0036E2  50DE               	movf	postinc2,w,c
 15260  0036E4  6EFE               	movwf	tosh,c
 15261  0036E6  50DE               	movf	postinc2,w,c
 15262  0036E8  6EFF               	movwf	tosu,c
 15263  0036EA  50FA               	movf	pclath,w,c
 15264  0036EC  0012               	return		;indir
 15265  0036EE                     i2u578_49:
 15266                           
 15267                           ; Switch size 1, requested type "space"
 15268                           ; Number of cases is 2, Range of values is 2 to 3
 15269                           ; switch strategies available:
 15270                           ; Name         Instructions Cycles
 15271                           ; simple_byte            7     4 (average)
 15272                           ;	Chosen strategy is simple_byte
 15273  0036EE  0A02               	xorlw	2	; case 2
 15274  0036F0  B4D8               	btfsc	status,2,c
 15275  0036F2  D7E5               	goto	i2l422
 15276  0036F4  0A01               	xorlw	1	; case 3
 15277  0036F6  B4D8               	btfsc	status,2,c
 15278  0036F8  D7E2               	goto	i2l422
 15279  0036FA  D7E4               	goto	i2l425
 15280  0036FC                     __end_ofi2_do_I2C_DO_ADDRESS_NACK:
 15281                           	opt stack 0
 15282                           tosu	equ	0xFFF
 15283                           tosh	equ	0xFFE
 15284                           tosl	equ	0xFFD
 15285                           pclatu	equ	0xFFB
 15286                           pclath	equ	0xFFA
 15287                           tblptru	equ	0xFF8
 15288                           tblptrh	equ	0xFF7
 15289                           tblptrl	equ	0xFF6
 15290                           tablat	equ	0xFF5
 15291                           prodh	equ	0xFF4
 15292                           prodl	equ	0xFF3
 15293                           intcon	equ	0xFF2
 15294                           postinc0	equ	0xFEE
 15295                           fsr0h	equ	0xFEA
 15296                           fsr0l	equ	0xFE9
 15297                           wreg	equ	0xFE8
 15298                           postdec1	equ	0xFE5
 15299                           fsr1h	equ	0xFE2
 15300                           fsr1l	equ	0xFE1
 15301                           indf2	equ	0xFDF
 15302                           postinc2	equ	0xFDE
 15303                           postdec2	equ	0xFDD
 15304                           fsr2h	equ	0xFDA
 15305                           fsr2l	equ	0xFD9
 15306                           status	equ	0xFD8
 15307                           
 15308 ;; *************** function i2_do_I2C_DO_NACK_RESTART *****************
 15309 ;; Defined at:
 15310 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 15311 ;; Parameters:    Size  Location     Type
 15312 ;;		None
 15313 ;; Auto vars:     Size  Location     Type
 15314 ;;		None
 15315 ;; Return value:  Size  Location     Type
 15316 ;;                  1    wreg      enum E11982
 15317 ;; Registers used:
 15318 ;;		wreg, cstack
 15319 ;; Tracked objects:
 15320 ;;		On entry : 0/0
 15321 ;;		On exit  : 0/0
 15322 ;;		Unchanged: 0/0
 15323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15328 ;;Total ram usage:        0 bytes
 15329 ;; Hardware stack levels used:    1
 15330 ;; Hardware stack levels required when called:    1
 15331 ;; This function calls:
 15332 ;;		i2_i2c1_driver_sendNACK
 15333 ;; This function is called by:
 15334 ;;		i2_do_I2C_RX
 15335 ;; This function uses a non-reentrant model
 15336 ;;
 15337                           
 15338                           	psect	text111
 15339  003EC6                     __ptext111:
 15340                           	opt stack 0
 15341  003EC6                     i2_do_I2C_DO_NACK_RESTART:
 15342                           	opt stack 9
 15343                           
 15344                           ;i2c_master.c: 313: i2c1_driver_sendNACK();
 15345                           
 15346                           ;incstack = 0
 15347  003EC6  EC98  F01F         	call	i2_i2c1_driver_sendNACK	;wreg free
 15348                           
 15349                           ;i2c_master.c: 314: return I2C_SEND_RESTART;
 15350  003ECA  0E09               	movlw	9
 15351  003ECC  0012               	return	
 15352  003ECE                     __end_ofi2_do_I2C_DO_NACK_RESTART:
 15353                           	opt stack 0
 15354                           tosu	equ	0xFFF
 15355                           tosh	equ	0xFFE
 15356                           tosl	equ	0xFFD
 15357                           pclatu	equ	0xFFB
 15358                           pclath	equ	0xFFA
 15359                           tblptru	equ	0xFF8
 15360                           tblptrh	equ	0xFF7
 15361                           tblptrl	equ	0xFF6
 15362                           tablat	equ	0xFF5
 15363                           prodh	equ	0xFF4
 15364                           prodl	equ	0xFF3
 15365                           intcon	equ	0xFF2
 15366                           postinc0	equ	0xFEE
 15367                           fsr0h	equ	0xFEA
 15368                           fsr0l	equ	0xFE9
 15369                           wreg	equ	0xFE8
 15370                           postdec1	equ	0xFE5
 15371                           fsr1h	equ	0xFE2
 15372                           fsr1l	equ	0xFE1
 15373                           indf2	equ	0xFDF
 15374                           postinc2	equ	0xFDE
 15375                           postdec2	equ	0xFDD
 15376                           fsr2h	equ	0xFDA
 15377                           fsr2l	equ	0xFD9
 15378                           status	equ	0xFD8
 15379                           
 15380 ;; *************** function i2_do_I2C_DO_NACK_STOP *****************
 15381 ;; Defined at:
 15382 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 15383 ;; Parameters:    Size  Location     Type
 15384 ;;		None
 15385 ;; Auto vars:     Size  Location     Type
 15386 ;;		None
 15387 ;; Return value:  Size  Location     Type
 15388 ;;                  1    wreg      enum E11982
 15389 ;; Registers used:
 15390 ;;		wreg, cstack
 15391 ;; Tracked objects:
 15392 ;;		On entry : 0/0
 15393 ;;		On exit  : 0/0
 15394 ;;		Unchanged: 0/0
 15395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15400 ;;Total ram usage:        0 bytes
 15401 ;; Hardware stack levels used:    1
 15402 ;; Hardware stack levels required when called:    1
 15403 ;; This function calls:
 15404 ;;		i2_i2c1_driver_sendNACK
 15405 ;; This function is called by:
 15406 ;;		i2_do_I2C_RX
 15407 ;; This function uses a non-reentrant model
 15408 ;;
 15409                           
 15410                           	psect	text112
 15411  003ECE                     __ptext112:
 15412                           	opt stack 0
 15413  003ECE                     i2_do_I2C_DO_NACK_STOP:
 15414                           	opt stack 9
 15415                           
 15416                           ;i2c_master.c: 307: i2c1_driver_sendNACK();
 15417                           
 15418                           ;incstack = 0
 15419  003ECE  EC98  F01F         	call	i2_i2c1_driver_sendNACK	;wreg free
 15420                           
 15421                           ;i2c_master.c: 308: return I2C_SEND_STOP;
 15422  003ED2  0E0A               	movlw	10
 15423  003ED4  0012               	return	
 15424  003ED6                     __end_ofi2_do_I2C_DO_NACK_STOP:
 15425                           	opt stack 0
 15426                           tosu	equ	0xFFF
 15427                           tosh	equ	0xFFE
 15428                           tosl	equ	0xFFD
 15429                           pclatu	equ	0xFFB
 15430                           pclath	equ	0xFFA
 15431                           tblptru	equ	0xFF8
 15432                           tblptrh	equ	0xFF7
 15433                           tblptrl	equ	0xFF6
 15434                           tablat	equ	0xFF5
 15435                           prodh	equ	0xFF4
 15436                           prodl	equ	0xFF3
 15437                           intcon	equ	0xFF2
 15438                           postinc0	equ	0xFEE
 15439                           fsr0h	equ	0xFEA
 15440                           fsr0l	equ	0xFE9
 15441                           wreg	equ	0xFE8
 15442                           postdec1	equ	0xFE5
 15443                           fsr1h	equ	0xFE2
 15444                           fsr1l	equ	0xFE1
 15445                           indf2	equ	0xFDF
 15446                           postinc2	equ	0xFDE
 15447                           postdec2	equ	0xFDD
 15448                           fsr2h	equ	0xFDA
 15449                           fsr2l	equ	0xFD9
 15450                           status	equ	0xFD8
 15451                           
 15452 ;; *************** function i2_do_I2C_DO_ACK *****************
 15453 ;; Defined at:
 15454 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 15455 ;; Parameters:    Size  Location     Type
 15456 ;;		None
 15457 ;; Auto vars:     Size  Location     Type
 15458 ;;		None
 15459 ;; Return value:  Size  Location     Type
 15460 ;;                  1    wreg      enum E11982
 15461 ;; Registers used:
 15462 ;;		wreg, cstack
 15463 ;; Tracked objects:
 15464 ;;		On entry : 0/0
 15465 ;;		On exit  : 0/0
 15466 ;;		Unchanged: 0/0
 15467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15472 ;;Total ram usage:        0 bytes
 15473 ;; Hardware stack levels used:    1
 15474 ;; Hardware stack levels required when called:    1
 15475 ;; This function calls:
 15476 ;;		i2_i2c1_driver_sendACK
 15477 ;; This function is called by:
 15478 ;; This function uses a non-reentrant model
 15479 ;;
 15480                           
 15481                           	psect	text113
 15482  003ED6                     __ptext113:
 15483                           	opt stack 0
 15484  003ED6                     i2_do_I2C_DO_ACK:
 15485                           	opt stack 10
 15486                           
 15487                           ;i2c_master.c: 301: i2c1_driver_sendACK();
 15488                           
 15489                           ;incstack = 0
 15490  003ED6  EC9B  F01F         	call	i2_i2c1_driver_sendACK	;wreg free
 15491                           
 15492                           ;i2c_master.c: 302: return I2C_RCEN;
 15493  003EDA  0E05               	movlw	5
 15494  003EDC  0012               	return	
 15495  003EDE                     __end_ofi2_do_I2C_DO_ACK:
 15496                           	opt stack 0
 15497                           tosu	equ	0xFFF
 15498                           tosh	equ	0xFFE
 15499                           tosl	equ	0xFFD
 15500                           pclatu	equ	0xFFB
 15501                           pclath	equ	0xFFA
 15502                           tblptru	equ	0xFF8
 15503                           tblptrh	equ	0xFF7
 15504                           tblptrl	equ	0xFF6
 15505                           tablat	equ	0xFF5
 15506                           prodh	equ	0xFF4
 15507                           prodl	equ	0xFF3
 15508                           intcon	equ	0xFF2
 15509                           postinc0	equ	0xFEE
 15510                           fsr0h	equ	0xFEA
 15511                           fsr0l	equ	0xFE9
 15512                           wreg	equ	0xFE8
 15513                           postdec1	equ	0xFE5
 15514                           fsr1h	equ	0xFE2
 15515                           fsr1l	equ	0xFE1
 15516                           indf2	equ	0xFDF
 15517                           postinc2	equ	0xFDE
 15518                           postdec2	equ	0xFDD
 15519                           fsr2h	equ	0xFDA
 15520                           fsr2l	equ	0xFD9
 15521                           status	equ	0xFD8
 15522                           
 15523 ;; *************** function i2_do_I2C_RCEN *****************
 15524 ;; Defined at:
 15525 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 15526 ;; Parameters:    Size  Location     Type
 15527 ;;		None
 15528 ;; Auto vars:     Size  Location     Type
 15529 ;;		None
 15530 ;; Return value:  Size  Location     Type
 15531 ;;                  1    wreg      enum E11982
 15532 ;; Registers used:
 15533 ;;		wreg, cstack
 15534 ;; Tracked objects:
 15535 ;;		On entry : 0/0
 15536 ;;		On exit  : 0/0
 15537 ;;		Unchanged: 0/0
 15538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15543 ;;Total ram usage:        0 bytes
 15544 ;; Hardware stack levels used:    1
 15545 ;; Hardware stack levels required when called:    1
 15546 ;; This function calls:
 15547 ;;		i2_i2c1_driver_startRX
 15548 ;; This function is called by:
 15549 ;; This function uses a non-reentrant model
 15550 ;;
 15551                           
 15552                           	psect	text114
 15553  003E78                     __ptext114:
 15554                           	opt stack 0
 15555  003E78                     i2_do_I2C_RCEN:
 15556                           	opt stack 10
 15557                           
 15558                           ;i2c_master.c: 294: i2c_status.addressNACKCheck = 0;
 15559                           
 15560                           ;incstack = 0
 15561  003E78  0100               	movlb	0	; () banked
 15562  003E7A  97B2               	bcf	_i2c_status& (0+255),3,b
 15563                           
 15564                           ; BSR set to: 0
 15565                           ;i2c_master.c: 295: i2c1_driver_startRX();
 15566  003E7C  ECB2  F01F         	call	i2_i2c1_driver_startRX	;wreg free
 15567                           
 15568                           ;i2c_master.c: 296: return I2C_RX;
 15569  003E80  0E04               	movlw	4
 15570  003E82  0012               	return	
 15571  003E84                     __end_ofi2_do_I2C_RCEN:
 15572                           	opt stack 0
 15573                           tosu	equ	0xFFF
 15574                           tosh	equ	0xFFE
 15575                           tosl	equ	0xFFD
 15576                           pclatu	equ	0xFFB
 15577                           pclath	equ	0xFFA
 15578                           tblptru	equ	0xFF8
 15579                           tblptrh	equ	0xFF7
 15580                           tblptrl	equ	0xFF6
 15581                           tablat	equ	0xFF5
 15582                           prodh	equ	0xFF4
 15583                           prodl	equ	0xFF3
 15584                           intcon	equ	0xFF2
 15585                           postinc0	equ	0xFEE
 15586                           fsr0h	equ	0xFEA
 15587                           fsr0l	equ	0xFE9
 15588                           wreg	equ	0xFE8
 15589                           postdec1	equ	0xFE5
 15590                           fsr1h	equ	0xFE2
 15591                           fsr1l	equ	0xFE1
 15592                           indf2	equ	0xFDF
 15593                           postinc2	equ	0xFDE
 15594                           postdec2	equ	0xFDD
 15595                           fsr2h	equ	0xFDA
 15596                           fsr2l	equ	0xFD9
 15597                           status	equ	0xFD8
 15598                           
 15599 ;; *************** function i2_do_I2C_SEND_ADR_WRITE *****************
 15600 ;; Defined at:
 15601 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 15602 ;; Parameters:    Size  Location     Type
 15603 ;;		None
 15604 ;; Auto vars:     Size  Location     Type
 15605 ;;		None
 15606 ;; Return value:  Size  Location     Type
 15607 ;;                  1    wreg      enum E11982
 15608 ;; Registers used:
 15609 ;;		wreg, status,2, status,0, cstack
 15610 ;; Tracked objects:
 15611 ;;		On entry : 0/0
 15612 ;;		On exit  : 0/0
 15613 ;;		Unchanged: 0/0
 15614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15619 ;;Total ram usage:        0 bytes
 15620 ;; Hardware stack levels used:    1
 15621 ;; Hardware stack levels required when called:    1
 15622 ;; This function calls:
 15623 ;;		i2_i2c1_driver_TXData
 15624 ;; This function is called by:
 15625 ;; This function uses a non-reentrant model
 15626 ;;
 15627                           
 15628                           	psect	text115
 15629  003DA2                     __ptext115:
 15630                           	opt stack 0
 15631  003DA2                     i2_do_I2C_SEND_ADR_WRITE:
 15632                           	opt stack 10
 15633                           
 15634                           ;i2c_master.c: 287: i2c_status.addressNACKCheck = 1;
 15635                           
 15636                           ;incstack = 0
 15637  003DA2  0100               	movlb	0	; () banked
 15638  003DA4  87B2               	bsf	_i2c_status& (0+255),3,b
 15639                           
 15640                           ; BSR set to: 0
 15641                           ;i2c_master.c: 288: i2c1_driver_TXData(i2c_status.address << 1);
 15642  003DA6  51B3               	movf	(_i2c_status+1)& (0+255),w,b
 15643  003DA8  25B3               	addwf	(_i2c_status+1)& (0+255),w,b
 15644  003DAA  EC7F  F01F         	call	i2_i2c1_driver_TXData
 15645                           
 15646                           ;i2c_master.c: 289: return I2C_TX;
 15647  003DAE  0E03               	movlw	3
 15648  003DB0  0012               	return	
 15649  003DB2                     __end_ofi2_do_I2C_SEND_ADR_WRITE:
 15650                           	opt stack 0
 15651                           tosu	equ	0xFFF
 15652                           tosh	equ	0xFFE
 15653                           tosl	equ	0xFFD
 15654                           pclatu	equ	0xFFB
 15655                           pclath	equ	0xFFA
 15656                           tblptru	equ	0xFF8
 15657                           tblptrh	equ	0xFF7
 15658                           tblptrl	equ	0xFF6
 15659                           tablat	equ	0xFF5
 15660                           prodh	equ	0xFF4
 15661                           prodl	equ	0xFF3
 15662                           intcon	equ	0xFF2
 15663                           postinc0	equ	0xFEE
 15664                           fsr0h	equ	0xFEA
 15665                           fsr0l	equ	0xFE9
 15666                           wreg	equ	0xFE8
 15667                           postdec1	equ	0xFE5
 15668                           fsr1h	equ	0xFE2
 15669                           fsr1l	equ	0xFE1
 15670                           indf2	equ	0xFDF
 15671                           postinc2	equ	0xFDE
 15672                           postdec2	equ	0xFDD
 15673                           fsr2h	equ	0xFDA
 15674                           fsr2l	equ	0xFD9
 15675                           status	equ	0xFD8
 15676                           
 15677 ;; *************** function i2_do_I2C_SEND_ADR_READ *****************
 15678 ;; Defined at:
 15679 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 15680 ;; Parameters:    Size  Location     Type
 15681 ;;		None
 15682 ;; Auto vars:     Size  Location     Type
 15683 ;;		None
 15684 ;; Return value:  Size  Location     Type
 15685 ;;                  1    wreg      enum E11982
 15686 ;; Registers used:
 15687 ;;		wreg, status,0, cstack
 15688 ;; Tracked objects:
 15689 ;;		On entry : 0/0
 15690 ;;		On exit  : 0/0
 15691 ;;		Unchanged: 0/0
 15692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15696 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15697 ;;Total ram usage:        0 bytes
 15698 ;; Hardware stack levels used:    1
 15699 ;; Hardware stack levels required when called:    1
 15700 ;; This function calls:
 15701 ;;		i2_i2c1_driver_TXData
 15702 ;; This function is called by:
 15703 ;; This function uses a non-reentrant model
 15704 ;;
 15705                           
 15706                           	psect	text116
 15707  003DB2                     __ptext116:
 15708                           	opt stack 0
 15709  003DB2                     i2_do_I2C_SEND_ADR_READ:
 15710                           	opt stack 10
 15711                           
 15712                           ;i2c_master.c: 280: i2c_status.addressNACKCheck = 1;
 15713                           
 15714                           ;incstack = 0
 15715  003DB2  0100               	movlb	0	; () banked
 15716  003DB4  87B2               	bsf	_i2c_status& (0+255),3,b
 15717                           
 15718                           ; BSR set to: 0
 15719                           ;i2c_master.c: 281: i2c1_driver_TXData(i2c_status.address << 1 | 1);
 15720  003DB6  80D8               	bsf	status,0,c
 15721  003DB8  35B3               	rlcf	(_i2c_status+1)& (0+255),w,b
 15722  003DBA  EC7F  F01F         	call	i2_i2c1_driver_TXData
 15723                           
 15724                           ;i2c_master.c: 282: return I2C_RCEN;
 15725  003DBE  0E05               	movlw	5
 15726  003DC0  0012               	return	
 15727  003DC2                     __end_ofi2_do_I2C_SEND_ADR_READ:
 15728                           	opt stack 0
 15729                           tosu	equ	0xFFF
 15730                           tosh	equ	0xFFE
 15731                           tosl	equ	0xFFD
 15732                           pclatu	equ	0xFFB
 15733                           pclath	equ	0xFFA
 15734                           tblptru	equ	0xFF8
 15735                           tblptrh	equ	0xFF7
 15736                           tblptrl	equ	0xFF6
 15737                           tablat	equ	0xFF5
 15738                           prodh	equ	0xFF4
 15739                           prodl	equ	0xFF3
 15740                           intcon	equ	0xFF2
 15741                           postinc0	equ	0xFEE
 15742                           fsr0h	equ	0xFEA
 15743                           fsr0l	equ	0xFE9
 15744                           wreg	equ	0xFE8
 15745                           postdec1	equ	0xFE5
 15746                           fsr1h	equ	0xFE2
 15747                           fsr1l	equ	0xFE1
 15748                           indf2	equ	0xFDF
 15749                           postinc2	equ	0xFDE
 15750                           postdec2	equ	0xFDD
 15751                           fsr2h	equ	0xFDA
 15752                           fsr2l	equ	0xFD9
 15753                           status	equ	0xFD8
 15754                           
 15755 ;; *************** function i2_do_I2C_SEND_STOP *****************
 15756 ;; Defined at:
 15757 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 15758 ;; Parameters:    Size  Location     Type
 15759 ;;		None
 15760 ;; Auto vars:     Size  Location     Type
 15761 ;;		None
 15762 ;; Return value:  Size  Location     Type
 15763 ;;                  1    wreg      enum E11982
 15764 ;; Registers used:
 15765 ;;		wreg, cstack
 15766 ;; Tracked objects:
 15767 ;;		On entry : 0/0
 15768 ;;		On exit  : 0/0
 15769 ;;		Unchanged: 0/0
 15770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15775 ;;Total ram usage:        0 bytes
 15776 ;; Hardware stack levels used:    1
 15777 ;; Hardware stack levels required when called:    1
 15778 ;; This function calls:
 15779 ;;		i2_i2c1_driver_stop
 15780 ;; This function is called by:
 15781 ;;		i2_do_I2C_DO_ADDRESS_NACK
 15782 ;;		i2_do_I2C_TX
 15783 ;;		i2_do_I2C_TX_EMPTY
 15784 ;; This function uses a non-reentrant model
 15785 ;;
 15786                           
 15787                           	psect	text117
 15788  003EDE                     __ptext117:
 15789                           	opt stack 0
 15790  003EDE                     i2_do_I2C_SEND_STOP:
 15791                           	opt stack 9
 15792                           
 15793                           ;i2c_master.c: 274: i2c1_driver_stop();
 15794                           
 15795                           ;incstack = 0
 15796  003EDE  ECBA  F01F         	call	i2_i2c1_driver_stop	;wreg free
 15797                           
 15798                           ;i2c_master.c: 275: return I2C_IDLE;
 15799  003EE2  0E00               	movlw	0
 15800  003EE4  0012               	return	
 15801  003EE6                     __end_ofi2_do_I2C_SEND_STOP:
 15802                           	opt stack 0
 15803                           tosu	equ	0xFFF
 15804                           tosh	equ	0xFFE
 15805                           tosl	equ	0xFFD
 15806                           pclatu	equ	0xFFB
 15807                           pclath	equ	0xFFA
 15808                           tblptru	equ	0xFF8
 15809                           tblptrh	equ	0xFF7
 15810                           tblptrl	equ	0xFF6
 15811                           tablat	equ	0xFF5
 15812                           prodh	equ	0xFF4
 15813                           prodl	equ	0xFF3
 15814                           intcon	equ	0xFF2
 15815                           postinc0	equ	0xFEE
 15816                           fsr0h	equ	0xFEA
 15817                           fsr0l	equ	0xFE9
 15818                           wreg	equ	0xFE8
 15819                           postdec1	equ	0xFE5
 15820                           fsr1h	equ	0xFE2
 15821                           fsr1l	equ	0xFE1
 15822                           indf2	equ	0xFDF
 15823                           postinc2	equ	0xFDE
 15824                           postdec2	equ	0xFDD
 15825                           fsr2h	equ	0xFDA
 15826                           fsr2l	equ	0xFD9
 15827                           status	equ	0xFD8
 15828                           
 15829 ;; *************** function i2_do_I2C_SEND_RESTART *****************
 15830 ;; Defined at:
 15831 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 15832 ;; Parameters:    Size  Location     Type
 15833 ;;		None
 15834 ;; Auto vars:     Size  Location     Type
 15835 ;;		None
 15836 ;; Return value:  Size  Location     Type
 15837 ;;                  1    wreg      enum E11982
 15838 ;; Registers used:
 15839 ;;		wreg, cstack
 15840 ;; Tracked objects:
 15841 ;;		On entry : 0/0
 15842 ;;		On exit  : 0/0
 15843 ;;		Unchanged: 0/0
 15844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15849 ;;Total ram usage:        0 bytes
 15850 ;; Hardware stack levels used:    1
 15851 ;; Hardware stack levels required when called:    1
 15852 ;; This function calls:
 15853 ;;		i2_i2c1_driver_restart
 15854 ;; This function is called by:
 15855 ;;		i2_do_I2C_DO_ADDRESS_NACK
 15856 ;;		i2_do_I2C_TX_EMPTY
 15857 ;; This function uses a non-reentrant model
 15858 ;;
 15859                           
 15860                           	psect	text118
 15861  003EE6                     __ptext118:
 15862                           	opt stack 0
 15863  003EE6                     i2_do_I2C_SEND_RESTART:
 15864                           	opt stack 9
 15865                           
 15866                           ;i2c_master.c: 268: i2c1_driver_restart();
 15867                           
 15868                           ;incstack = 0
 15869  003EE6  ECBC  F01F         	call	i2_i2c1_driver_restart	;wreg free
 15870                           
 15871                           ;i2c_master.c: 269: return I2C_SEND_ADR_READ;
 15872  003EEA  0E01               	movlw	1
 15873  003EEC  0012               	return	
 15874  003EEE                     __end_ofi2_do_I2C_SEND_RESTART:
 15875                           	opt stack 0
 15876                           tosu	equ	0xFFF
 15877                           tosh	equ	0xFFE
 15878                           tosl	equ	0xFFD
 15879                           pclatu	equ	0xFFB
 15880                           pclath	equ	0xFFA
 15881                           tblptru	equ	0xFF8
 15882                           tblptrh	equ	0xFF7
 15883                           tblptrl	equ	0xFF6
 15884                           tablat	equ	0xFF5
 15885                           prodh	equ	0xFF4
 15886                           prodl	equ	0xFF3
 15887                           intcon	equ	0xFF2
 15888                           postinc0	equ	0xFEE
 15889                           fsr0h	equ	0xFEA
 15890                           fsr0l	equ	0xFE9
 15891                           wreg	equ	0xFE8
 15892                           postdec1	equ	0xFE5
 15893                           fsr1h	equ	0xFE2
 15894                           fsr1l	equ	0xFE1
 15895                           indf2	equ	0xFDF
 15896                           postinc2	equ	0xFDE
 15897                           postdec2	equ	0xFDD
 15898                           fsr2h	equ	0xFDA
 15899                           fsr2l	equ	0xFD9
 15900                           status	equ	0xFD8
 15901                           
 15902 ;; *************** function i2_do_I2C_SEND_RESTART_WRITE *****************
 15903 ;; Defined at:
 15904 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 15905 ;; Parameters:    Size  Location     Type
 15906 ;;		None
 15907 ;; Auto vars:     Size  Location     Type
 15908 ;;		None
 15909 ;; Return value:  Size  Location     Type
 15910 ;;                  1    wreg      enum E11982
 15911 ;; Registers used:
 15912 ;;		wreg, cstack
 15913 ;; Tracked objects:
 15914 ;;		On entry : 0/0
 15915 ;;		On exit  : 0/0
 15916 ;;		Unchanged: 0/0
 15917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15922 ;;Total ram usage:        0 bytes
 15923 ;; Hardware stack levels used:    1
 15924 ;; Hardware stack levels required when called:    1
 15925 ;; This function calls:
 15926 ;;		i2_i2c1_driver_restart
 15927 ;; This function is called by:
 15928 ;;		i2_do_I2C_TX
 15929 ;; This function uses a non-reentrant model
 15930 ;;
 15931                           
 15932                           	psect	text119
 15933  003EEE                     __ptext119:
 15934                           	opt stack 0
 15935  003EEE                     i2_do_I2C_SEND_RESTART_WRITE:
 15936                           	opt stack 9
 15937                           
 15938                           ;i2c_master.c: 262: i2c1_driver_restart();
 15939                           
 15940                           ;incstack = 0
 15941  003EEE  ECBC  F01F         	call	i2_i2c1_driver_restart	;wreg free
 15942                           
 15943                           ;i2c_master.c: 263: return I2C_SEND_ADR_WRITE;
 15944  003EF2  0E02               	movlw	2
 15945  003EF4  0012               	return	
 15946  003EF6                     __end_ofi2_do_I2C_SEND_RESTART_WRITE:
 15947                           	opt stack 0
 15948                           tosu	equ	0xFFF
 15949                           tosh	equ	0xFFE
 15950                           tosl	equ	0xFFD
 15951                           pclatu	equ	0xFFB
 15952                           pclath	equ	0xFFA
 15953                           tblptru	equ	0xFF8
 15954                           tblptrh	equ	0xFF7
 15955                           tblptrl	equ	0xFF6
 15956                           tablat	equ	0xFF5
 15957                           prodh	equ	0xFF4
 15958                           prodl	equ	0xFF3
 15959                           intcon	equ	0xFF2
 15960                           postinc0	equ	0xFEE
 15961                           fsr0h	equ	0xFEA
 15962                           fsr0l	equ	0xFE9
 15963                           wreg	equ	0xFE8
 15964                           postdec1	equ	0xFE5
 15965                           fsr1h	equ	0xFE2
 15966                           fsr1l	equ	0xFE1
 15967                           indf2	equ	0xFDF
 15968                           postinc2	equ	0xFDE
 15969                           postdec2	equ	0xFDD
 15970                           fsr2h	equ	0xFDA
 15971                           fsr2l	equ	0xFD9
 15972                           status	equ	0xFD8
 15973                           
 15974 ;; *************** function i2_do_I2C_SEND_RESTART_READ *****************
 15975 ;; Defined at:
 15976 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 15977 ;; Parameters:    Size  Location     Type
 15978 ;;		None
 15979 ;; Auto vars:     Size  Location     Type
 15980 ;;		None
 15981 ;; Return value:  Size  Location     Type
 15982 ;;                  1    wreg      enum E11982
 15983 ;; Registers used:
 15984 ;;		wreg, cstack
 15985 ;; Tracked objects:
 15986 ;;		On entry : 0/0
 15987 ;;		On exit  : 0/0
 15988 ;;		Unchanged: 0/0
 15989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15994 ;;Total ram usage:        0 bytes
 15995 ;; Hardware stack levels used:    1
 15996 ;; Hardware stack levels required when called:    1
 15997 ;; This function calls:
 15998 ;;		i2_i2c1_driver_restart
 15999 ;; This function is called by:
 16000 ;;		i2_do_I2C_TX
 16001 ;; This function uses a non-reentrant model
 16002 ;;
 16003                           
 16004                           	psect	text120
 16005  003EF6                     __ptext120:
 16006                           	opt stack 0
 16007  003EF6                     i2_do_I2C_SEND_RESTART_READ:
 16008                           	opt stack 9
 16009                           
 16010                           ;i2c_master.c: 256: i2c1_driver_restart();
 16011                           
 16012                           ;incstack = 0
 16013  003EF6  ECBC  F01F         	call	i2_i2c1_driver_restart	;wreg free
 16014                           
 16015                           ;i2c_master.c: 257: return I2C_SEND_ADR_READ;
 16016  003EFA  0E01               	movlw	1
 16017  003EFC  0012               	return	
 16018  003EFE                     __end_ofi2_do_I2C_SEND_RESTART_READ:
 16019                           	opt stack 0
 16020                           tosu	equ	0xFFF
 16021                           tosh	equ	0xFFE
 16022                           tosl	equ	0xFFD
 16023                           pclatu	equ	0xFFB
 16024                           pclath	equ	0xFFA
 16025                           tblptru	equ	0xFF8
 16026                           tblptrh	equ	0xFF7
 16027                           tblptrl	equ	0xFF6
 16028                           tablat	equ	0xFF5
 16029                           prodh	equ	0xFF4
 16030                           prodl	equ	0xFF3
 16031                           intcon	equ	0xFF2
 16032                           postinc0	equ	0xFEE
 16033                           fsr0h	equ	0xFEA
 16034                           fsr0l	equ	0xFE9
 16035                           wreg	equ	0xFE8
 16036                           postdec1	equ	0xFE5
 16037                           fsr1h	equ	0xFE2
 16038                           fsr1l	equ	0xFE1
 16039                           indf2	equ	0xFDF
 16040                           postinc2	equ	0xFDE
 16041                           postdec2	equ	0xFDD
 16042                           fsr2h	equ	0xFDA
 16043                           fsr2l	equ	0xFD9
 16044                           status	equ	0xFD8
 16045                           
 16046 ;; *************** function i2_do_I2C_IDLE *****************
 16047 ;; Defined at:
 16048 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 16049 ;; Parameters:    Size  Location     Type
 16050 ;;		None
 16051 ;; Auto vars:     Size  Location     Type
 16052 ;;		None
 16053 ;; Return value:  Size  Location     Type
 16054 ;;                  1    wreg      enum E11982
 16055 ;; Registers used:
 16056 ;;		wreg, status,2
 16057 ;; Tracked objects:
 16058 ;;		On entry : 0/0
 16059 ;;		On exit  : 0/0
 16060 ;;		Unchanged: 0/0
 16061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16066 ;;Total ram usage:        0 bytes
 16067 ;; Hardware stack levels used:    1
 16068 ;; This function calls:
 16069 ;;		Nothing
 16070 ;; This function is called by:
 16071 ;; This function uses a non-reentrant model
 16072 ;;
 16073                           
 16074                           	psect	text121
 16075  003E84                     __ptext121:
 16076                           	opt stack 0
 16077  003E84                     i2_do_I2C_IDLE:
 16078                           	opt stack 11
 16079                           
 16080                           ;i2c_master.c: 249: i2c_status.busy = 0;
 16081                           
 16082                           ;incstack = 0
 16083  003E84  0100               	movlb	0	; () banked
 16084  003E86  91B2               	bcf	_i2c_status& (0+255),0,b
 16085                           
 16086                           ; BSR set to: 0
 16087                           ;i2c_master.c: 250: i2c_status.error = I2C_NOERR;
 16088  003E88  0E00               	movlw	0
 16089  003E8A  6FBD               	movwf	(_i2c_status+11)& (0+255),b
 16090                           
 16091                           ; BSR set to: 0
 16092                           ;i2c_master.c: 251: return I2C_RESET;
 16093  003E8C  0E0E               	movlw	14
 16094  003E8E  0012               	return	
 16095  003E90                     __end_ofi2_do_I2C_IDLE:
 16096                           	opt stack 0
 16097                           tosu	equ	0xFFF
 16098                           tosh	equ	0xFFE
 16099                           tosl	equ	0xFFD
 16100                           pclatu	equ	0xFFB
 16101                           pclath	equ	0xFFA
 16102                           tblptru	equ	0xFF8
 16103                           tblptrh	equ	0xFF7
 16104                           tblptrl	equ	0xFF6
 16105                           tablat	equ	0xFF5
 16106                           prodh	equ	0xFF4
 16107                           prodl	equ	0xFF3
 16108                           intcon	equ	0xFF2
 16109                           postinc0	equ	0xFEE
 16110                           fsr0h	equ	0xFEA
 16111                           fsr0l	equ	0xFE9
 16112                           wreg	equ	0xFE8
 16113                           postdec1	equ	0xFE5
 16114                           fsr1h	equ	0xFE2
 16115                           fsr1l	equ	0xFE1
 16116                           indf2	equ	0xFDF
 16117                           postinc2	equ	0xFDE
 16118                           postdec2	equ	0xFDD
 16119                           fsr2h	equ	0xFDA
 16120                           fsr2l	equ	0xFD9
 16121                           status	equ	0xFD8
 16122                           
 16123 ;; *************** function i2_do_I2C_RESET *****************
 16124 ;; Defined at:
 16125 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 16126 ;; Parameters:    Size  Location     Type
 16127 ;;		None
 16128 ;; Auto vars:     Size  Location     Type
 16129 ;;		None
 16130 ;; Return value:  Size  Location     Type
 16131 ;;                  1    wreg      enum E11982
 16132 ;; Registers used:
 16133 ;;		wreg, status,2, cstack
 16134 ;; Tracked objects:
 16135 ;;		On entry : 0/0
 16136 ;;		On exit  : 0/0
 16137 ;;		Unchanged: 0/0
 16138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16143 ;;Total ram usage:        0 bytes
 16144 ;; Hardware stack levels used:    1
 16145 ;; Hardware stack levels required when called:    1
 16146 ;; This function calls:
 16147 ;;		i2_i2c1_driver_resetBus
 16148 ;; This function is called by:
 16149 ;; This function uses a non-reentrant model
 16150 ;;
 16151                           
 16152                           	psect	text122
 16153  003DC2                     __ptext122:
 16154                           	opt stack 0
 16155  003DC2                     i2_do_I2C_RESET:
 16156                           	opt stack 10
 16157                           
 16158                           ;i2c_master.c: 241: i2c1_driver_resetBus();
 16159                           
 16160                           ; BSR set to: 0
 16161                           ;incstack = 0
 16162  003DC2  ECBF  F01F         	call	i2_i2c1_driver_resetBus	;wreg free
 16163                           
 16164                           ;i2c_master.c: 242: i2c_status.busy = 0;
 16165  003DC6  0100               	movlb	0	; () banked
 16166  003DC8  91B2               	bcf	_i2c_status& (0+255),0,b
 16167                           
 16168                           ; BSR set to: 0
 16169                           ;i2c_master.c: 243: i2c_status.error = I2C_NOERR;
 16170  003DCA  0E00               	movlw	0
 16171  003DCC  6FBD               	movwf	(_i2c_status+11)& (0+255),b
 16172                           
 16173                           ; BSR set to: 0
 16174                           ;i2c_master.c: 244: return I2C_RESET;
 16175  003DCE  0E0E               	movlw	14
 16176  003DD0  0012               	return	
 16177  003DD2                     __end_ofi2_do_I2C_RESET:
 16178                           	opt stack 0
 16179                           tosu	equ	0xFFF
 16180                           tosh	equ	0xFFE
 16181                           tosl	equ	0xFFD
 16182                           pclatu	equ	0xFFB
 16183                           pclath	equ	0xFFA
 16184                           tblptru	equ	0xFF8
 16185                           tblptrh	equ	0xFF7
 16186                           tblptrl	equ	0xFF6
 16187                           tablat	equ	0xFF5
 16188                           prodh	equ	0xFF4
 16189                           prodl	equ	0xFF3
 16190                           intcon	equ	0xFF2
 16191                           postinc0	equ	0xFEE
 16192                           fsr0h	equ	0xFEA
 16193                           fsr0l	equ	0xFE9
 16194                           wreg	equ	0xFE8
 16195                           postdec1	equ	0xFE5
 16196                           fsr1h	equ	0xFE2
 16197                           fsr1l	equ	0xFE1
 16198                           indf2	equ	0xFDF
 16199                           postinc2	equ	0xFDE
 16200                           postdec2	equ	0xFDD
 16201                           fsr2h	equ	0xFDA
 16202                           fsr2l	equ	0xFD9
 16203                           status	equ	0xFD8
 16204                           
 16205 ;; *************** function i2_do_I2C_TX_EMPTY *****************
 16206 ;; Defined at:
 16207 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 16208 ;; Parameters:    Size  Location     Type
 16209 ;;		None
 16210 ;; Auto vars:     Size  Location     Type
 16211 ;;		None
 16212 ;; Return value:  Size  Location     Type
 16213 ;;                  1    wreg      enum E11982
 16214 ;; Registers used:
 16215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 16216 ;; Tracked objects:
 16217 ;;		On entry : 0/0
 16218 ;;		On exit  : 0/0
 16219 ;;		Unchanged: 0/0
 16220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16225 ;;Total ram usage:        0 bytes
 16226 ;; Hardware stack levels used:    1
 16227 ;; Hardware stack levels required when called:    3
 16228 ;; This function calls:
 16229 ;;		Absolute function
 16230 ;;		i2_do_I2C_SEND_RESTART
 16231 ;;		i2_do_I2C_SEND_STOP
 16232 ;;		i2_i2c_restartWrite
 16233 ;;		i2_mssp1_setIRQ
 16234 ;;		i2_rd1RegCompleteHandler
 16235 ;;		i2_rd2RegCompleteHandler
 16236 ;;		i2_rdBlkRegCompleteHandler
 16237 ;;		i2_returnReset
 16238 ;;		i2_returnStop
 16239 ;;		i2_wr1RegCompleteHandler
 16240 ;;		i2_wr2RegCompleteHandler
 16241 ;; This function is called by:
 16242 ;; This function uses a non-reentrant model
 16243 ;;
 16244                           
 16245                           	psect	text123
 16246  00349C                     __ptext123:
 16247                           	opt stack 0
 16248  00349C                     i2_do_I2C_TX_EMPTY:
 16249                           	opt stack 8
 16250                           
 16251                           ;i2c_master.c: 384: i2c_status.bufferFree = 1;
 16252                           
 16253                           ; BSR set to: 0
 16254                           ;incstack = 0
 16255  00349C  0100               	movlb	0	; () banked
 16256  00349E  85B2               	bsf	_i2c_status& (0+255),2,b
 16257                           
 16258                           ;i2c_master.c: 385: switch(i2c_status.callbackTable[i2c_dataComplete](i2c_status.callbac
      +                          kPayload[i2c_dataComplete]))
 16259  0034A0  D00A               	goto	i2l457
 16260  0034A2                     
 16261                           ;i2c_master.c: 388: case i2c_restart_write:
 16262                           ;i2c_master.c: 389: return do_I2C_SEND_RESTART();
 16263                           
 16264                           ; BSR set to: 0
 16265                           
 16266                           ; BSR set to: 0
 16267  0034A2  EC73  F01F         	call	i2_do_I2C_SEND_RESTART	;wreg free
 16268  0034A6  0012               	return	
 16269  0034A8                     
 16270                           ;i2c_master.c: 391: mssp1_setIRQ();
 16271  0034A8  EC95  F01F         	call	i2_mssp1_setIRQ	;wreg free
 16272                           
 16273                           ;i2c_master.c: 392: return I2C_TX;
 16274  0034AC  0E03               	movlw	3
 16275  0034AE  0012               	return	
 16276  0034B0                     
 16277                           ;i2c_master.c: 395: return do_I2C_SEND_STOP();
 16278                           
 16279                           ;i2c_master.c: 394: case i2c_stop:
 16280  0034B0  EC6F  F01F         	call	i2_do_I2C_SEND_STOP	;wreg free
 16281                           
 16282                           ;i2c_master.c: 396: }
 16283  0034B4  0012               	return	
 16284  0034B6                     i2l457:
 16285  0034B6  C0D0  F00C         	movff	_i2c_status+30,i2returnStop@p
 16286  0034BA  C0D1  F00D         	movff	_i2c_status+31,i2returnStop@p+1
 16287  0034BE  EE20  F0BE         	lfsr	2,_i2c_status+12
 16288  0034C2  D801               	call	i2u584_48
 16289  0034C4  D00A               	goto	i2u584_49
 16290  0034C6                     i2u584_48:
 16291  0034C6  0005               	push	
 16292  0034C8  6EFA               	movwf	pclath,c
 16293  0034CA  50DE               	movf	postinc2,w,c
 16294  0034CC  6EFD               	movwf	tosl,c
 16295  0034CE  50DE               	movf	postinc2,w,c
 16296  0034D0  6EFE               	movwf	tosh,c
 16297  0034D2  50DE               	movf	postinc2,w,c
 16298  0034D4  6EFF               	movwf	tosu,c
 16299  0034D6  50FA               	movf	pclath,w,c
 16300  0034D8  0012               	return		;indir
 16301  0034DA                     i2u584_49:
 16302                           
 16303                           ; Switch size 1, requested type "space"
 16304                           ; Number of cases is 4, Range of values is 1 to 4
 16305                           ; switch strategies available:
 16306                           ; Name         Instructions Cycles
 16307                           ; simple_byte           13     7 (average)
 16308                           ;	Chosen strategy is simple_byte
 16309  0034DA  0A01               	xorlw	1	; case 1
 16310  0034DC  B4D8               	btfsc	status,2,c
 16311  0034DE  D7E8               	goto	i2l462
 16312  0034E0  0A03               	xorlw	3	; case 2
 16313  0034E2  B4D8               	btfsc	status,2,c
 16314  0034E4  D7DE               	goto	i2l458
 16315  0034E6  0A01               	xorlw	1	; case 3
 16316  0034E8  B4D8               	btfsc	status,2,c
 16317  0034EA  D7DB               	goto	i2l458
 16318  0034EC  0A07               	xorlw	7	; case 4
 16319  0034EE  B4D8               	btfsc	status,2,c
 16320  0034F0  D7DB               	goto	i2l461
 16321  0034F2  D7DE               	goto	i2l462
 16322  0034F4                     __end_ofi2_do_I2C_TX_EMPTY:
 16323                           	opt stack 0
 16324                           tosu	equ	0xFFF
 16325                           tosh	equ	0xFFE
 16326                           tosl	equ	0xFFD
 16327                           pclatu	equ	0xFFB
 16328                           pclath	equ	0xFFA
 16329                           tblptru	equ	0xFF8
 16330                           tblptrh	equ	0xFF7
 16331                           tblptrl	equ	0xFF6
 16332                           tablat	equ	0xFF5
 16333                           prodh	equ	0xFF4
 16334                           prodl	equ	0xFF3
 16335                           intcon	equ	0xFF2
 16336                           postinc0	equ	0xFEE
 16337                           fsr0h	equ	0xFEA
 16338                           fsr0l	equ	0xFE9
 16339                           wreg	equ	0xFE8
 16340                           postdec1	equ	0xFE5
 16341                           fsr1h	equ	0xFE2
 16342                           fsr1l	equ	0xFE1
 16343                           indf2	equ	0xFDF
 16344                           postinc2	equ	0xFDE
 16345                           postdec2	equ	0xFDD
 16346                           fsr2h	equ	0xFDA
 16347                           fsr2l	equ	0xFD9
 16348                           status	equ	0xFD8
 16349                           
 16350 ;; *************** function i2_mssp1_setIRQ *****************
 16351 ;; Defined at:
 16352 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 16353 ;; Parameters:    Size  Location     Type
 16354 ;;		None
 16355 ;; Auto vars:     Size  Location     Type
 16356 ;;		None
 16357 ;; Return value:  Size  Location     Type
 16358 ;;                  1    wreg      void 
 16359 ;; Registers used:
 16360 ;;		None
 16361 ;; Tracked objects:
 16362 ;;		On entry : 0/0
 16363 ;;		On exit  : 0/0
 16364 ;;		Unchanged: 0/0
 16365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16370 ;;Total ram usage:        0 bytes
 16371 ;; Hardware stack levels used:    1
 16372 ;; This function calls:
 16373 ;;		Nothing
 16374 ;; This function is called by:
 16375 ;;		i2_do_I2C_TX_EMPTY
 16376 ;; This function uses a non-reentrant model
 16377 ;;
 16378                           
 16379                           	psect	text124
 16380  003F2A                     __ptext124:
 16381                           	opt stack 0
 16382  003F2A                     i2_mssp1_setIRQ:
 16383                           	opt stack 10
 16384                           
 16385                           ;i2c1_driver.c: 60: PIR3bits.SSP1IF = 1;
 16386                           
 16387                           ;incstack = 0
 16388  003F2A  010E               	movlb	14	; () banked
 16389  003F2C  81CD               	bsf	205,0,b	;volatile
 16390                           
 16391                           ; BSR set to: 14
 16392  003F2E  0012               	return		;funcret
 16393  003F30                     __end_ofi2_mssp1_setIRQ:
 16394                           	opt stack 0
 16395                           tosu	equ	0xFFF
 16396                           tosh	equ	0xFFE
 16397                           tosl	equ	0xFFD
 16398                           pclatu	equ	0xFFB
 16399                           pclath	equ	0xFFA
 16400                           tblptru	equ	0xFF8
 16401                           tblptrh	equ	0xFF7
 16402                           tblptrl	equ	0xFF6
 16403                           tablat	equ	0xFF5
 16404                           prodh	equ	0xFF4
 16405                           prodl	equ	0xFF3
 16406                           intcon	equ	0xFF2
 16407                           postinc0	equ	0xFEE
 16408                           fsr0h	equ	0xFEA
 16409                           fsr0l	equ	0xFE9
 16410                           wreg	equ	0xFE8
 16411                           postdec1	equ	0xFE5
 16412                           fsr1h	equ	0xFE2
 16413                           fsr1l	equ	0xFE1
 16414                           indf2	equ	0xFDF
 16415                           postinc2	equ	0xFDE
 16416                           postdec2	equ	0xFDD
 16417                           fsr2h	equ	0xFDA
 16418                           fsr2l	equ	0xFD9
 16419                           status	equ	0xFD8
 16420                           
 16421 ;; *************** function i2_i2c1_driver_isNACK *****************
 16422 ;; Defined at:
 16423 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 16424 ;; Parameters:    Size  Location     Type
 16425 ;;		None
 16426 ;; Auto vars:     Size  Location     Type
 16427 ;;		None
 16428 ;; Return value:  Size  Location     Type
 16429 ;;		None               void
 16430 ;; Registers used:
 16431 ;;		wreg, status,2, status,0
 16432 ;; Tracked objects:
 16433 ;;		On entry : 0/0
 16434 ;;		On exit  : 0/0
 16435 ;;		Unchanged: 0/0
 16436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16439 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16440 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16441 ;;Total ram usage:        1 bytes
 16442 ;; Hardware stack levels used:    1
 16443 ;; This function calls:
 16444 ;;		Nothing
 16445 ;; This function is called by:
 16446 ;;		i2_do_I2C_TX
 16447 ;;		i2_i2c_ISR
 16448 ;; This function uses a non-reentrant model
 16449 ;;
 16450                           
 16451                           	psect	text125
 16452  003CE4                     __ptext125:
 16453                           	opt stack 0
 16454  003CE4                     i2_i2c1_driver_isNACK:
 16455                           	opt stack 11
 16456                           
 16457                           ;i2c1_driver.c: 163: return SSP1CON2bits.ACKSTAT = 1;
 16458                           
 16459                           ; BSR set to: 14
 16460                           ;incstack = 0
 16461  003CE4  5097               	movf	3991,w,c	;volatile
 16462  003CE6  0BBF               	andlw	-65
 16463  003CE8  0940               	iorlw	64
 16464  003CEA  6E97               	movwf	3991,c	;volatile
 16465  003CEC  3897               	swapf	3991,w,c	;volatile
 16466  003CEE  32E8               	rrcf	wreg,f,c
 16467  003CF0  32E8               	rrcf	wreg,f,c
 16468  003CF2  0B01               	andlw	1
 16469  003CF4  6E01               	movwf	??i2_i2c1_driver_isNACK& (0+255),c
 16470  003CF6  3001               	rrcf	??i2_i2c1_driver_isNACK,w,c
 16471  003CF8  0012               	return	
 16472  003CFA                     __end_ofi2_i2c1_driver_isNACK:
 16473                           	opt stack 0
 16474                           tosu	equ	0xFFF
 16475                           tosh	equ	0xFFE
 16476                           tosl	equ	0xFFD
 16477                           pclatu	equ	0xFFB
 16478                           pclath	equ	0xFFA
 16479                           tblptru	equ	0xFF8
 16480                           tblptrh	equ	0xFF7
 16481                           tblptrl	equ	0xFF6
 16482                           tablat	equ	0xFF5
 16483                           prodh	equ	0xFF4
 16484                           prodl	equ	0xFF3
 16485                           intcon	equ	0xFF2
 16486                           postinc0	equ	0xFEE
 16487                           fsr0h	equ	0xFEA
 16488                           fsr0l	equ	0xFE9
 16489                           wreg	equ	0xFE8
 16490                           postdec1	equ	0xFE5
 16491                           fsr1h	equ	0xFE2
 16492                           fsr1l	equ	0xFE1
 16493                           indf2	equ	0xFDF
 16494                           postinc2	equ	0xFDE
 16495                           postdec2	equ	0xFDD
 16496                           fsr2h	equ	0xFDA
 16497                           fsr2l	equ	0xFD9
 16498                           status	equ	0xFD8
 16499                           
 16500 ;; *************** function i2_i2c1_driver_TXData *****************
 16501 ;; Defined at:
 16502 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 16503 ;; Parameters:    Size  Location     Type
 16504 ;;  d               1    wreg     unsigned char 
 16505 ;; Auto vars:     Size  Location     Type
 16506 ;;  d               1    0[COMRAM] unsigned char 
 16507 ;; Return value:  Size  Location     Type
 16508 ;;                  1    wreg      void 
 16509 ;; Registers used:
 16510 ;;		wreg
 16511 ;; Tracked objects:
 16512 ;;		On entry : 0/0
 16513 ;;		On exit  : 0/0
 16514 ;;		Unchanged: 0/0
 16515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16517 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16519 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16520 ;;Total ram usage:        1 bytes
 16521 ;; Hardware stack levels used:    1
 16522 ;; This function calls:
 16523 ;;		Nothing
 16524 ;; This function is called by:
 16525 ;;		i2_do_I2C_SEND_ADR_READ
 16526 ;;		i2_do_I2C_SEND_ADR_WRITE
 16527 ;;		i2_do_I2C_TX
 16528 ;; This function uses a non-reentrant model
 16529 ;;
 16530                           
 16531                           	psect	text126
 16532  003EFE                     __ptext126:
 16533                           	opt stack 0
 16534  003EFE                     i2_i2c1_driver_TXData:
 16535                           	opt stack 10
 16536                           
 16537                           ;incstack = 0
 16538                           ;i2i2c1_driver_TXData@d stored from wreg
 16539  003EFE  6E01               	movwf	i2i2c1_driver_TXData@d,c
 16540                           
 16541                           ;i2c1_driver.c: 188: SSP1BUF = d;
 16542  003F00  C001  FF92         	movff	i2i2c1_driver_TXData@d,3986	;volatile
 16543  003F04  0012               	return		;funcret
 16544  003F06                     __end_ofi2_i2c1_driver_TXData:
 16545                           	opt stack 0
 16546                           tosu	equ	0xFFF
 16547                           tosh	equ	0xFFE
 16548                           tosl	equ	0xFFD
 16549                           pclatu	equ	0xFFB
 16550                           pclath	equ	0xFFA
 16551                           tblptru	equ	0xFF8
 16552                           tblptrh	equ	0xFF7
 16553                           tblptrl	equ	0xFF6
 16554                           tablat	equ	0xFF5
 16555                           prodh	equ	0xFF4
 16556                           prodl	equ	0xFF3
 16557                           intcon	equ	0xFF2
 16558                           postinc0	equ	0xFEE
 16559                           fsr0h	equ	0xFEA
 16560                           fsr0l	equ	0xFE9
 16561                           wreg	equ	0xFE8
 16562                           postdec1	equ	0xFE5
 16563                           fsr1h	equ	0xFE2
 16564                           fsr1l	equ	0xFE1
 16565                           indf2	equ	0xFDF
 16566                           postinc2	equ	0xFDE
 16567                           postdec2	equ	0xFDD
 16568                           fsr2h	equ	0xFDA
 16569                           fsr2l	equ	0xFD9
 16570                           status	equ	0xFD8
 16571                           
 16572 ;; *************** function i2_i2c1_driver_getRXData *****************
 16573 ;; Defined at:
 16574 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 16575 ;; Parameters:    Size  Location     Type
 16576 ;;		None
 16577 ;; Auto vars:     Size  Location     Type
 16578 ;;		None
 16579 ;; Return value:  Size  Location     Type
 16580 ;;                  1    wreg      unsigned char 
 16581 ;; Registers used:
 16582 ;;		wreg, status,2
 16583 ;; Tracked objects:
 16584 ;;		On entry : 0/0
 16585 ;;		On exit  : 0/0
 16586 ;;		Unchanged: 0/0
 16587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16592 ;;Total ram usage:        0 bytes
 16593 ;; Hardware stack levels used:    1
 16594 ;; This function calls:
 16595 ;;		Nothing
 16596 ;; This function is called by:
 16597 ;;		i2_do_I2C_RX
 16598 ;; This function uses a non-reentrant model
 16599 ;;
 16600                           
 16601                           	psect	text127
 16602  003F60                     __ptext127:
 16603                           	opt stack 0
 16604  003F60                     i2_i2c1_driver_getRXData:
 16605                           	opt stack 10
 16606                           
 16607                           ;i2c1_driver.c: 173: return SSP1BUF;
 16608                           
 16609                           ;incstack = 0
 16610  003F60  5092               	movf	3986,w,c	;volatile
 16611  003F62  0012               	return	
 16612  003F64                     __end_ofi2_i2c1_driver_getRXData:
 16613                           	opt stack 0
 16614                           tosu	equ	0xFFF
 16615                           tosh	equ	0xFFE
 16616                           tosl	equ	0xFFD
 16617                           pclatu	equ	0xFFB
 16618                           pclath	equ	0xFFA
 16619                           tblptru	equ	0xFF8
 16620                           tblptrh	equ	0xFF7
 16621                           tblptrl	equ	0xFF6
 16622                           tablat	equ	0xFF5
 16623                           prodh	equ	0xFF4
 16624                           prodl	equ	0xFF3
 16625                           intcon	equ	0xFF2
 16626                           postinc0	equ	0xFEE
 16627                           fsr0h	equ	0xFEA
 16628                           fsr0l	equ	0xFE9
 16629                           wreg	equ	0xFE8
 16630                           postdec1	equ	0xFE5
 16631                           fsr1h	equ	0xFE2
 16632                           fsr1l	equ	0xFE1
 16633                           indf2	equ	0xFDF
 16634                           postinc2	equ	0xFDE
 16635                           postdec2	equ	0xFDD
 16636                           fsr2h	equ	0xFDA
 16637                           fsr2l	equ	0xFD9
 16638                           status	equ	0xFD8
 16639                           
 16640 ;; *************** function i2_i2c1_driver_sendNACK *****************
 16641 ;; Defined at:
 16642 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 16643 ;; Parameters:    Size  Location     Type
 16644 ;;		None
 16645 ;; Auto vars:     Size  Location     Type
 16646 ;;		None
 16647 ;; Return value:  Size  Location     Type
 16648 ;;                  1    wreg      void 
 16649 ;; Registers used:
 16650 ;;		None
 16651 ;; Tracked objects:
 16652 ;;		On entry : 0/0
 16653 ;;		On exit  : 0/0
 16654 ;;		Unchanged: 0/0
 16655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16660 ;;Total ram usage:        0 bytes
 16661 ;; Hardware stack levels used:    1
 16662 ;; This function calls:
 16663 ;;		Nothing
 16664 ;; This function is called by:
 16665 ;;		i2_do_I2C_DO_NACK_STOP
 16666 ;;		i2_do_I2C_DO_NACK_RESTART
 16667 ;; This function uses a non-reentrant model
 16668 ;;
 16669                           
 16670                           	psect	text128
 16671  003F30                     __ptext128:
 16672                           	opt stack 0
 16673  003F30                     i2_i2c1_driver_sendNACK:
 16674                           	opt stack 9
 16675                           
 16676                           ;i2c1_driver.c: 204: SSP1CON2bits.ACKDT = 1;
 16677                           
 16678                           ;incstack = 0
 16679  003F30  8A97               	bsf	3991,5,c	;volatile
 16680                           
 16681                           ;i2c1_driver.c: 205: SSP1CON2bits.ACKEN = 1;
 16682  003F32  8897               	bsf	3991,4,c	;volatile
 16683  003F34  0012               	return		;funcret
 16684  003F36                     __end_ofi2_i2c1_driver_sendNACK:
 16685                           	opt stack 0
 16686                           tosu	equ	0xFFF
 16687                           tosh	equ	0xFFE
 16688                           tosl	equ	0xFFD
 16689                           pclatu	equ	0xFFB
 16690                           pclath	equ	0xFFA
 16691                           tblptru	equ	0xFF8
 16692                           tblptrh	equ	0xFF7
 16693                           tblptrl	equ	0xFF6
 16694                           tablat	equ	0xFF5
 16695                           prodh	equ	0xFF4
 16696                           prodl	equ	0xFF3
 16697                           intcon	equ	0xFF2
 16698                           postinc0	equ	0xFEE
 16699                           fsr0h	equ	0xFEA
 16700                           fsr0l	equ	0xFE9
 16701                           wreg	equ	0xFE8
 16702                           postdec1	equ	0xFE5
 16703                           fsr1h	equ	0xFE2
 16704                           fsr1l	equ	0xFE1
 16705                           indf2	equ	0xFDF
 16706                           postinc2	equ	0xFDE
 16707                           postdec2	equ	0xFDD
 16708                           fsr2h	equ	0xFDA
 16709                           fsr2l	equ	0xFD9
 16710                           status	equ	0xFD8
 16711                           
 16712 ;; *************** function i2_i2c1_driver_resetBus *****************
 16713 ;; Defined at:
 16714 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 16715 ;; Parameters:    Size  Location     Type
 16716 ;;		None
 16717 ;; Auto vars:     Size  Location     Type
 16718 ;;		None
 16719 ;; Return value:  Size  Location     Type
 16720 ;;                  1    wreg      void 
 16721 ;; Registers used:
 16722 ;;		None
 16723 ;; Tracked objects:
 16724 ;;		On entry : 0/0
 16725 ;;		On exit  : 0/0
 16726 ;;		Unchanged: 0/0
 16727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16732 ;;Total ram usage:        0 bytes
 16733 ;; Hardware stack levels used:    1
 16734 ;; This function calls:
 16735 ;;		Nothing
 16736 ;; This function is called by:
 16737 ;;		i2_do_I2C_RESET
 16738 ;; This function uses a non-reentrant model
 16739 ;;
 16740                           
 16741                           	psect	text129
 16742  003F7E                     __ptext129:
 16743                           	opt stack 0
 16744  003F7E                     i2_i2c1_driver_resetBus:
 16745                           	opt stack 10
 16746                           
 16747                           ;incstack = 0
 16748  003F7E  0012               	return		;funcret
 16749  003F80                     __end_ofi2_i2c1_driver_resetBus:
 16750                           	opt stack 0
 16751                           tosu	equ	0xFFF
 16752                           tosh	equ	0xFFE
 16753                           tosl	equ	0xFFD
 16754                           pclatu	equ	0xFFB
 16755                           pclath	equ	0xFFA
 16756                           tblptru	equ	0xFF8
 16757                           tblptrh	equ	0xFF7
 16758                           tblptrl	equ	0xFF6
 16759                           tablat	equ	0xFF5
 16760                           prodh	equ	0xFF4
 16761                           prodl	equ	0xFF3
 16762                           intcon	equ	0xFF2
 16763                           postinc0	equ	0xFEE
 16764                           fsr0h	equ	0xFEA
 16765                           fsr0l	equ	0xFE9
 16766                           wreg	equ	0xFE8
 16767                           postdec1	equ	0xFE5
 16768                           fsr1h	equ	0xFE2
 16769                           fsr1l	equ	0xFE1
 16770                           indf2	equ	0xFDF
 16771                           postinc2	equ	0xFDE
 16772                           postdec2	equ	0xFDD
 16773                           fsr2h	equ	0xFDA
 16774                           fsr2l	equ	0xFD9
 16775                           status	equ	0xFD8
 16776                           
 16777 ;; *************** function i2_i2c1_driver_startRX *****************
 16778 ;; Defined at:
 16779 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 16780 ;; Parameters:    Size  Location     Type
 16781 ;;		None
 16782 ;; Auto vars:     Size  Location     Type
 16783 ;;		None
 16784 ;; Return value:  Size  Location     Type
 16785 ;;                  1    wreg      void 
 16786 ;; Registers used:
 16787 ;;		None
 16788 ;; Tracked objects:
 16789 ;;		On entry : 0/0
 16790 ;;		On exit  : 0/0
 16791 ;;		Unchanged: 0/0
 16792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16797 ;;Total ram usage:        0 bytes
 16798 ;; Hardware stack levels used:    1
 16799 ;; This function calls:
 16800 ;;		Nothing
 16801 ;; This function is called by:
 16802 ;;		i2_do_I2C_RCEN
 16803 ;; This function uses a non-reentrant model
 16804 ;;
 16805                           
 16806                           	psect	text130
 16807  003F64                     __ptext130:
 16808                           	opt stack 0
 16809  003F64                     i2_i2c1_driver_startRX:
 16810                           	opt stack 10
 16811                           
 16812                           ;i2c1_driver.c: 168: SSP1CON2bits.RCEN = 1;
 16813                           
 16814                           ;incstack = 0
 16815  003F64  8697               	bsf	3991,3,c	;volatile
 16816  003F66  0012               	return		;funcret
 16817  003F68                     __end_ofi2_i2c1_driver_startRX:
 16818                           	opt stack 0
 16819                           tosu	equ	0xFFF
 16820                           tosh	equ	0xFFE
 16821                           tosl	equ	0xFFD
 16822                           pclatu	equ	0xFFB
 16823                           pclath	equ	0xFFA
 16824                           tblptru	equ	0xFF8
 16825                           tblptrh	equ	0xFF7
 16826                           tblptrl	equ	0xFF6
 16827                           tablat	equ	0xFF5
 16828                           prodh	equ	0xFF4
 16829                           prodl	equ	0xFF3
 16830                           intcon	equ	0xFF2
 16831                           postinc0	equ	0xFEE
 16832                           fsr0h	equ	0xFEA
 16833                           fsr0l	equ	0xFE9
 16834                           wreg	equ	0xFE8
 16835                           postdec1	equ	0xFE5
 16836                           fsr1h	equ	0xFE2
 16837                           fsr1l	equ	0xFE1
 16838                           indf2	equ	0xFDF
 16839                           postinc2	equ	0xFDE
 16840                           postdec2	equ	0xFDD
 16841                           fsr2h	equ	0xFDA
 16842                           fsr2l	equ	0xFD9
 16843                           status	equ	0xFD8
 16844                           
 16845 ;; *************** function i2_rdBlkRegCompleteHandler *****************
 16846 ;; Defined at:
 16847 ;;		line 134 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 16848 ;; Parameters:    Size  Location     Type
 16849 ;;  p               2   11[COMRAM] PTR void 
 16850 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 16851 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 16852 ;; Auto vars:     Size  Location     Type
 16853 ;;		None
 16854 ;; Return value:  Size  Location     Type
 16855 ;;                  1    wreg      enum E97
 16856 ;; Registers used:
 16857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16858 ;; Tracked objects:
 16859 ;;		On entry : 0/0
 16860 ;;		On exit  : 0/0
 16861 ;;		Unchanged: 0/0
 16862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16863 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16866 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16867 ;;Total ram usage:        2 bytes
 16868 ;; Hardware stack levels used:    1
 16869 ;; Hardware stack levels required when called:    2
 16870 ;; This function calls:
 16871 ;;		i2_i2c_setBuffer
 16872 ;;		i2_i2c_setDataCompleteCallback
 16873 ;; This function is called by:
 16874 ;; This function uses a non-reentrant model
 16875 ;;
 16876                           
 16877                           	psect	text131
 16878  0036FC                     __ptext131:
 16879                           	opt stack 0
 16880  0036FC                     i2_rdBlkRegCompleteHandler:
 16881                           	opt stack 8
 16882                           
 16883                           ;i2c_simple_master.c: 136: i2c_setBuffer(((buf_t *)p)->data,((buf_t*)p)->len);
 16884                           
 16885                           ;incstack = 0
 16886  0036FC  EE20 F002          	lfsr	2,2
 16887  003700  500C               	movf	i2rdBlkRegCompleteHandler@p,w,c
 16888  003702  26D9               	addwf	fsr2l,f,c
 16889  003704  500D               	movf	i2rdBlkRegCompleteHandler@p+1,w,c
 16890  003706  22DA               	addwfc	fsr2h,f,c
 16891  003708  CFDE F001          	movff	postinc2,i2i2c_setBuffer@buffer
 16892  00370C  CFDD F002          	movff	postdec2,i2i2c_setBuffer@buffer+1
 16893  003710  C00C  FFD9         	movff	i2rdBlkRegCompleteHandler@p,fsr2l
 16894  003714  C00D  FFDA         	movff	i2rdBlkRegCompleteHandler@p+1,fsr2h
 16895  003718  CFDE F003          	movff	postinc2,i2i2c_setBuffer@bufferSize
 16896  00371C  CFDD F004          	movff	postdec2,i2i2c_setBuffer@bufferSize+1
 16897  003720  ECFF  F01D         	call	i2_i2c_setBuffer	;wreg free
 16898                           
 16899                           ;i2c_simple_master.c: 137: i2c_setDataCompleteCallback((0),(0));
 16900  003724  0E00               	movlw	0
 16901  003726  6E07               	movwf	i2i2c_setDataCompleteCallback@cb,c
 16902  003728  0E00               	movlw	0
 16903  00372A  6E08               	movwf	i2i2c_setDataCompleteCallback@cb+1,c
 16904  00372C  0E00               	movlw	0
 16905  00372E  6E09               	movwf	i2i2c_setDataCompleteCallback@cb+2,c
 16906  003730  0E00               	movlw	0
 16907  003732  6E0A               	movwf	i2i2c_setDataCompleteCallback@p,c
 16908  003734  0E00               	movlw	0
 16909  003736  6E0B               	movwf	i2i2c_setDataCompleteCallback@p+1,c
 16910  003738  ECD7  F01D         	call	i2_i2c_setDataCompleteCallback	;wreg free
 16911                           
 16912                           ;i2c_simple_master.c: 138: return i2c_restart_read;
 16913  00373C  0E02               	movlw	2
 16914  00373E  0012               	return	
 16915  003740                     __end_ofi2_rdBlkRegCompleteHandler:
 16916                           	opt stack 0
 16917                           tosu	equ	0xFFF
 16918                           tosh	equ	0xFFE
 16919                           tosl	equ	0xFFD
 16920                           pclatu	equ	0xFFB
 16921                           pclath	equ	0xFFA
 16922                           tblptru	equ	0xFF8
 16923                           tblptrh	equ	0xFF7
 16924                           tblptrl	equ	0xFF6
 16925                           tablat	equ	0xFF5
 16926                           prodh	equ	0xFF4
 16927                           prodl	equ	0xFF3
 16928                           intcon	equ	0xFF2
 16929                           postinc0	equ	0xFEE
 16930                           fsr0h	equ	0xFEA
 16931                           fsr0l	equ	0xFE9
 16932                           wreg	equ	0xFE8
 16933                           postdec1	equ	0xFE5
 16934                           fsr1h	equ	0xFE2
 16935                           fsr1l	equ	0xFE1
 16936                           indf2	equ	0xFDF
 16937                           postinc2	equ	0xFDE
 16938                           postdec2	equ	0xFDD
 16939                           fsr2h	equ	0xFDA
 16940                           fsr2l	equ	0xFD9
 16941                           status	equ	0xFD8
 16942                           
 16943 ;; *************** function i2_rd2RegCompleteHandler *****************
 16944 ;; Defined at:
 16945 ;;		line 87 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 16946 ;; Parameters:    Size  Location     Type
 16947 ;;  p               2   11[COMRAM] PTR void 
 16948 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 16949 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 16950 ;; Auto vars:     Size  Location     Type
 16951 ;;		None
 16952 ;; Return value:  Size  Location     Type
 16953 ;;                  1    wreg      enum E97
 16954 ;; Registers used:
 16955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16956 ;; Tracked objects:
 16957 ;;		On entry : 0/0
 16958 ;;		On exit  : 0/0
 16959 ;;		Unchanged: 0/0
 16960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16961 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16964 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16965 ;;Total ram usage:        2 bytes
 16966 ;; Hardware stack levels used:    1
 16967 ;; Hardware stack levels required when called:    2
 16968 ;; This function calls:
 16969 ;;		i2_i2c_setBuffer
 16970 ;;		i2_i2c_setDataCompleteCallback
 16971 ;; This function is called by:
 16972 ;; This function uses a non-reentrant model
 16973 ;;
 16974                           
 16975                           	psect	text132
 16976  00399A                     __ptext132:
 16977                           	opt stack 0
 16978  00399A                     i2_rd2RegCompleteHandler:
 16979                           	opt stack 8
 16980                           
 16981                           ;i2c_simple_master.c: 89: i2c_setBuffer(p,2);
 16982                           
 16983                           ;incstack = 0
 16984  00399A  C00C  F001         	movff	i2rd2RegCompleteHandler@p,i2i2c_setBuffer@buffer
 16985  00399E  C00D  F002         	movff	i2rd2RegCompleteHandler@p+1,i2i2c_setBuffer@buffer+1
 16986  0039A2  0E00               	movlw	0
 16987  0039A4  6E04               	movwf	i2i2c_setBuffer@bufferSize+1,c
 16988  0039A6  0E02               	movlw	2
 16989  0039A8  6E03               	movwf	i2i2c_setBuffer@bufferSize,c
 16990  0039AA  ECFF  F01D         	call	i2_i2c_setBuffer	;wreg free
 16991                           
 16992                           ;i2c_simple_master.c: 90: i2c_setDataCompleteCallback((0),(0));
 16993  0039AE  0E00               	movlw	0
 16994  0039B0  6E07               	movwf	i2i2c_setDataCompleteCallback@cb,c
 16995  0039B2  0E00               	movlw	0
 16996  0039B4  6E08               	movwf	i2i2c_setDataCompleteCallback@cb+1,c
 16997  0039B6  0E00               	movlw	0
 16998  0039B8  6E09               	movwf	i2i2c_setDataCompleteCallback@cb+2,c
 16999  0039BA  0E00               	movlw	0
 17000  0039BC  6E0A               	movwf	i2i2c_setDataCompleteCallback@p,c
 17001  0039BE  0E00               	movlw	0
 17002  0039C0  6E0B               	movwf	i2i2c_setDataCompleteCallback@p+1,c
 17003  0039C2  ECD7  F01D         	call	i2_i2c_setDataCompleteCallback	;wreg free
 17004                           
 17005                           ;i2c_simple_master.c: 91: return i2c_restart_read;
 17006  0039C6  0E02               	movlw	2
 17007  0039C8  0012               	return	
 17008  0039CA                     __end_ofi2_rd2RegCompleteHandler:
 17009                           	opt stack 0
 17010                           tosu	equ	0xFFF
 17011                           tosh	equ	0xFFE
 17012                           tosl	equ	0xFFD
 17013                           pclatu	equ	0xFFB
 17014                           pclath	equ	0xFFA
 17015                           tblptru	equ	0xFF8
 17016                           tblptrh	equ	0xFF7
 17017                           tblptrl	equ	0xFF6
 17018                           tablat	equ	0xFF5
 17019                           prodh	equ	0xFF4
 17020                           prodl	equ	0xFF3
 17021                           intcon	equ	0xFF2
 17022                           postinc0	equ	0xFEE
 17023                           fsr0h	equ	0xFEA
 17024                           fsr0l	equ	0xFE9
 17025                           wreg	equ	0xFE8
 17026                           postdec1	equ	0xFE5
 17027                           fsr1h	equ	0xFE2
 17028                           fsr1l	equ	0xFE1
 17029                           indf2	equ	0xFDF
 17030                           postinc2	equ	0xFDE
 17031                           postdec2	equ	0xFDD
 17032                           fsr2h	equ	0xFDA
 17033                           fsr2l	equ	0xFD9
 17034                           status	equ	0xFD8
 17035                           
 17036 ;; *************** function i2_rd1RegCompleteHandler *****************
 17037 ;; Defined at:
 17038 ;;		line 58 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 17039 ;; Parameters:    Size  Location     Type
 17040 ;;  p               2   11[COMRAM] PTR void 
 17041 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 17042 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 17043 ;; Auto vars:     Size  Location     Type
 17044 ;;		None
 17045 ;; Return value:  Size  Location     Type
 17046 ;;                  1    wreg      enum E97
 17047 ;; Registers used:
 17048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17049 ;; Tracked objects:
 17050 ;;		On entry : 0/0
 17051 ;;		On exit  : 0/0
 17052 ;;		Unchanged: 0/0
 17053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17054 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17058 ;;Total ram usage:        2 bytes
 17059 ;; Hardware stack levels used:    1
 17060 ;; Hardware stack levels required when called:    2
 17061 ;; This function calls:
 17062 ;;		i2_i2c_setBuffer
 17063 ;;		i2_i2c_setDataCompleteCallback
 17064 ;; This function is called by:
 17065 ;; This function uses a non-reentrant model
 17066 ;;
 17067                           
 17068                           	psect	text133
 17069  0039CA                     __ptext133:
 17070                           	opt stack 0
 17071  0039CA                     i2_rd1RegCompleteHandler:
 17072                           	opt stack 8
 17073                           
 17074                           ;i2c_simple_master.c: 60: i2c_setBuffer(p,1);
 17075                           
 17076                           ;incstack = 0
 17077  0039CA  C00C  F001         	movff	i2rd1RegCompleteHandler@p,i2i2c_setBuffer@buffer
 17078  0039CE  C00D  F002         	movff	i2rd1RegCompleteHandler@p+1,i2i2c_setBuffer@buffer+1
 17079  0039D2  0E00               	movlw	0
 17080  0039D4  6E04               	movwf	i2i2c_setBuffer@bufferSize+1,c
 17081  0039D6  0E01               	movlw	1
 17082  0039D8  6E03               	movwf	i2i2c_setBuffer@bufferSize,c
 17083  0039DA  ECFF  F01D         	call	i2_i2c_setBuffer	;wreg free
 17084                           
 17085                           ;i2c_simple_master.c: 61: i2c_setDataCompleteCallback((0),(0));
 17086  0039DE  0E00               	movlw	0
 17087  0039E0  6E07               	movwf	i2i2c_setDataCompleteCallback@cb,c
 17088  0039E2  0E00               	movlw	0
 17089  0039E4  6E08               	movwf	i2i2c_setDataCompleteCallback@cb+1,c
 17090  0039E6  0E00               	movlw	0
 17091  0039E8  6E09               	movwf	i2i2c_setDataCompleteCallback@cb+2,c
 17092  0039EA  0E00               	movlw	0
 17093  0039EC  6E0A               	movwf	i2i2c_setDataCompleteCallback@p,c
 17094  0039EE  0E00               	movlw	0
 17095  0039F0  6E0B               	movwf	i2i2c_setDataCompleteCallback@p+1,c
 17096  0039F2  ECD7  F01D         	call	i2_i2c_setDataCompleteCallback	;wreg free
 17097                           
 17098                           ;i2c_simple_master.c: 62: return i2c_restart_read;
 17099  0039F6  0E02               	movlw	2
 17100  0039F8  0012               	return	
 17101  0039FA                     __end_ofi2_rd1RegCompleteHandler:
 17102                           	opt stack 0
 17103                           tosu	equ	0xFFF
 17104                           tosh	equ	0xFFE
 17105                           tosl	equ	0xFFD
 17106                           pclatu	equ	0xFFB
 17107                           pclath	equ	0xFFA
 17108                           tblptru	equ	0xFF8
 17109                           tblptrh	equ	0xFF7
 17110                           tblptrl	equ	0xFF6
 17111                           tablat	equ	0xFF5
 17112                           prodh	equ	0xFF4
 17113                           prodl	equ	0xFF3
 17114                           intcon	equ	0xFF2
 17115                           postinc0	equ	0xFEE
 17116                           fsr0h	equ	0xFEA
 17117                           fsr0l	equ	0xFE9
 17118                           wreg	equ	0xFE8
 17119                           postdec1	equ	0xFE5
 17120                           fsr1h	equ	0xFE2
 17121                           fsr1l	equ	0xFE1
 17122                           indf2	equ	0xFDF
 17123                           postinc2	equ	0xFDE
 17124                           postdec2	equ	0xFDD
 17125                           fsr2h	equ	0xFDA
 17126                           fsr2l	equ	0xFD9
 17127                           status	equ	0xFD8
 17128                           
 17129 ;; *************** function i2_wr1RegCompleteHandler *****************
 17130 ;; Defined at:
 17131 ;;		line 31 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 17132 ;; Parameters:    Size  Location     Type
 17133 ;;  p               2   11[COMRAM] PTR void 
 17134 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 17135 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 17136 ;; Auto vars:     Size  Location     Type
 17137 ;;		None
 17138 ;; Return value:  Size  Location     Type
 17139 ;;                  1    wreg      enum E97
 17140 ;; Registers used:
 17141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17142 ;; Tracked objects:
 17143 ;;		On entry : 0/0
 17144 ;;		On exit  : 0/0
 17145 ;;		Unchanged: 0/0
 17146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17147 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17150 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17151 ;;Total ram usage:        2 bytes
 17152 ;; Hardware stack levels used:    1
 17153 ;; Hardware stack levels required when called:    2
 17154 ;; This function calls:
 17155 ;;		i2_i2c_setBuffer
 17156 ;;		i2_i2c_setDataCompleteCallback
 17157 ;; This function is called by:
 17158 ;; This function uses a non-reentrant model
 17159 ;;
 17160                           
 17161                           	psect	text134
 17162  0039FA                     __ptext134:
 17163                           	opt stack 0
 17164  0039FA                     i2_wr1RegCompleteHandler:
 17165                           	opt stack 8
 17166                           
 17167                           ;i2c_simple_master.c: 33: i2c_setBuffer(p,1);
 17168                           
 17169                           ;incstack = 0
 17170  0039FA  C00C  F001         	movff	i2wr1RegCompleteHandler@p,i2i2c_setBuffer@buffer
 17171  0039FE  C00D  F002         	movff	i2wr1RegCompleteHandler@p+1,i2i2c_setBuffer@buffer+1
 17172  003A02  0E00               	movlw	0
 17173  003A04  6E04               	movwf	i2i2c_setBuffer@bufferSize+1,c
 17174  003A06  0E01               	movlw	1
 17175  003A08  6E03               	movwf	i2i2c_setBuffer@bufferSize,c
 17176  003A0A  ECFF  F01D         	call	i2_i2c_setBuffer	;wreg free
 17177                           
 17178                           ;i2c_simple_master.c: 34: i2c_setDataCompleteCallback((0),(0));
 17179  003A0E  0E00               	movlw	0
 17180  003A10  6E07               	movwf	i2i2c_setDataCompleteCallback@cb,c
 17181  003A12  0E00               	movlw	0
 17182  003A14  6E08               	movwf	i2i2c_setDataCompleteCallback@cb+1,c
 17183  003A16  0E00               	movlw	0
 17184  003A18  6E09               	movwf	i2i2c_setDataCompleteCallback@cb+2,c
 17185  003A1A  0E00               	movlw	0
 17186  003A1C  6E0A               	movwf	i2i2c_setDataCompleteCallback@p,c
 17187  003A1E  0E00               	movlw	0
 17188  003A20  6E0B               	movwf	i2i2c_setDataCompleteCallback@p+1,c
 17189  003A22  ECD7  F01D         	call	i2_i2c_setDataCompleteCallback	;wreg free
 17190                           
 17191                           ;i2c_simple_master.c: 35: return i2c_continue;
 17192  003A26  0E04               	movlw	4
 17193  003A28  0012               	return	
 17194  003A2A                     __end_ofi2_wr1RegCompleteHandler:
 17195                           	opt stack 0
 17196                           tosu	equ	0xFFF
 17197                           tosh	equ	0xFFE
 17198                           tosl	equ	0xFFD
 17199                           pclatu	equ	0xFFB
 17200                           pclath	equ	0xFFA
 17201                           tblptru	equ	0xFF8
 17202                           tblptrh	equ	0xFF7
 17203                           tblptrl	equ	0xFF6
 17204                           tablat	equ	0xFF5
 17205                           prodh	equ	0xFF4
 17206                           prodl	equ	0xFF3
 17207                           intcon	equ	0xFF2
 17208                           postinc0	equ	0xFEE
 17209                           fsr0h	equ	0xFEA
 17210                           fsr0l	equ	0xFE9
 17211                           wreg	equ	0xFE8
 17212                           postdec1	equ	0xFE5
 17213                           fsr1h	equ	0xFE2
 17214                           fsr1l	equ	0xFE1
 17215                           indf2	equ	0xFDF
 17216                           postinc2	equ	0xFDE
 17217                           postdec2	equ	0xFDD
 17218                           fsr2h	equ	0xFDA
 17219                           fsr2l	equ	0xFD9
 17220                           status	equ	0xFD8
 17221                           
 17222 ;; *************** function i2_i2c_restartWrite *****************
 17223 ;; Defined at:
 17224 ;;		line 35 in file "mcc_generated_files/drivers/i2c_types.c"
 17225 ;; Parameters:    Size  Location     Type
 17226 ;;  p               2   11[COMRAM] PTR void 
 17227 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 17228 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 17229 ;; Auto vars:     Size  Location     Type
 17230 ;;		None
 17231 ;; Return value:  Size  Location     Type
 17232 ;;                  1    wreg      enum E96
 17233 ;; Registers used:
 17234 ;;		wreg
 17235 ;; Tracked objects:
 17236 ;;		On entry : 0/0
 17237 ;;		On exit  : 0/0
 17238 ;;		Unchanged: 0/0
 17239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17240 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17243 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17244 ;;Total ram usage:        2 bytes
 17245 ;; Hardware stack levels used:    1
 17246 ;; This function calls:
 17247 ;;		Nothing
 17248 ;; This function is called by:
 17249 ;; This function uses a non-reentrant model
 17250 ;;
 17251                           
 17252                           	psect	text135
 17253  003F68                     __ptext135:
 17254                           	opt stack 0
 17255  003F68                     i2_i2c_restartWrite:
 17256                           	opt stack 10
 17257                           
 17258                           ;i2c_types.c: 37: return i2c_restart_write;
 17259                           
 17260                           ;incstack = 0
 17261  003F68  0E03               	movlw	3
 17262  003F6A  0012               	return	
 17263  003F6C                     __end_ofi2_i2c_restartWrite:
 17264                           	opt stack 0
 17265                           tosu	equ	0xFFF
 17266                           tosh	equ	0xFFE
 17267                           tosl	equ	0xFFD
 17268                           pclatu	equ	0xFFB
 17269                           pclath	equ	0xFFA
 17270                           tblptru	equ	0xFF8
 17271                           tblptrh	equ	0xFF7
 17272                           tblptrl	equ	0xFF6
 17273                           tablat	equ	0xFF5
 17274                           prodh	equ	0xFF4
 17275                           prodl	equ	0xFF3
 17276                           intcon	equ	0xFF2
 17277                           postinc0	equ	0xFEE
 17278                           fsr0h	equ	0xFEA
 17279                           fsr0l	equ	0xFE9
 17280                           wreg	equ	0xFE8
 17281                           postdec1	equ	0xFE5
 17282                           fsr1h	equ	0xFE2
 17283                           fsr1l	equ	0xFE1
 17284                           indf2	equ	0xFDF
 17285                           postinc2	equ	0xFDE
 17286                           postdec2	equ	0xFDD
 17287                           fsr2h	equ	0xFDA
 17288                           fsr2l	equ	0xFD9
 17289                           status	equ	0xFD8
 17290                           
 17291 ;; *************** function i2_returnReset *****************
 17292 ;; Defined at:
 17293 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 17294 ;; Parameters:    Size  Location     Type
 17295 ;;  p               2   11[COMRAM] PTR void 
 17296 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 17297 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 17298 ;; Auto vars:     Size  Location     Type
 17299 ;;		None
 17300 ;; Return value:  Size  Location     Type
 17301 ;;                  1    wreg      enum E11816
 17302 ;; Registers used:
 17303 ;;		wreg
 17304 ;; Tracked objects:
 17305 ;;		On entry : 0/0
 17306 ;;		On exit  : 0/0
 17307 ;;		Unchanged: 0/0
 17308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17309 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17312 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17313 ;;Total ram usage:        2 bytes
 17314 ;; Hardware stack levels used:    1
 17315 ;; This function calls:
 17316 ;;		Nothing
 17317 ;; This function is called by:
 17318 ;; This function uses a non-reentrant model
 17319 ;;
 17320                           
 17321                           	psect	text136
 17322  003F6C                     __ptext136:
 17323                           	opt stack 0
 17324  003F6C                     i2_returnReset:
 17325                           	opt stack 10
 17326                           
 17327                           ;i2c_master.c: 450: return i2c_reset_link;
 17328                           
 17329                           ;incstack = 0
 17330  003F6C  0E05               	movlw	5
 17331  003F6E  0012               	return	
 17332  003F70                     __end_ofi2_returnReset:
 17333                           	opt stack 0
 17334                           tosu	equ	0xFFF
 17335                           tosh	equ	0xFFE
 17336                           tosl	equ	0xFFD
 17337                           pclatu	equ	0xFFB
 17338                           pclath	equ	0xFFA
 17339                           tblptru	equ	0xFF8
 17340                           tblptrh	equ	0xFF7
 17341                           tblptrl	equ	0xFF6
 17342                           tablat	equ	0xFF5
 17343                           prodh	equ	0xFF4
 17344                           prodl	equ	0xFF3
 17345                           intcon	equ	0xFF2
 17346                           postinc0	equ	0xFEE
 17347                           fsr0h	equ	0xFEA
 17348                           fsr0l	equ	0xFE9
 17349                           wreg	equ	0xFE8
 17350                           postdec1	equ	0xFE5
 17351                           fsr1h	equ	0xFE2
 17352                           fsr1l	equ	0xFE1
 17353                           indf2	equ	0xFDF
 17354                           postinc2	equ	0xFDE
 17355                           postdec2	equ	0xFDD
 17356                           fsr2h	equ	0xFDA
 17357                           fsr2l	equ	0xFD9
 17358                           status	equ	0xFD8
 17359                           
 17360 ;; *************** function i2_returnStop *****************
 17361 ;; Defined at:
 17362 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 17363 ;; Parameters:    Size  Location     Type
 17364 ;;  p               2   11[COMRAM] PTR void 
 17365 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 17366 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 17367 ;; Auto vars:     Size  Location     Type
 17368 ;;		None
 17369 ;; Return value:  Size  Location     Type
 17370 ;;                  1    wreg      enum E11816
 17371 ;; Registers used:
 17372 ;;		wreg
 17373 ;; Tracked objects:
 17374 ;;		On entry : 0/0
 17375 ;;		On exit  : 0/0
 17376 ;;		Unchanged: 0/0
 17377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17378 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17381 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17382 ;;Total ram usage:        2 bytes
 17383 ;; Hardware stack levels used:    1
 17384 ;; This function calls:
 17385 ;;		Nothing
 17386 ;; This function is called by:
 17387 ;;		i2_setCallBack
 17388 ;;		_do_I2C_DO_ADDRESS_NACK
 17389 ;;		_do_I2C_TX
 17390 ;;		_do_I2C_RX
 17391 ;;		_do_I2C_TX_EMPTY
 17392 ;;		i2_do_I2C_DO_ADDRESS_NACK
 17393 ;;		i2_do_I2C_TX
 17394 ;;		i2_do_I2C_RX
 17395 ;;		i2_do_I2C_TX_EMPTY
 17396 ;; This function uses a non-reentrant model
 17397 ;;
 17398                           
 17399                           	psect	text137
 17400  003F70                     __ptext137:
 17401                           	opt stack 0
 17402  003F70                     i2_returnStop:
 17403                           	opt stack 10
 17404                           
 17405                           ;i2c_master.c: 445: return i2c_stop;
 17406                           
 17407                           ;incstack = 0
 17408  003F70  0E01               	movlw	1
 17409  003F72  0012               	return	
 17410  003F74                     __end_ofi2_returnStop:
 17411                           	opt stack 0
 17412                           tosu	equ	0xFFF
 17413                           tosh	equ	0xFFE
 17414                           tosl	equ	0xFFD
 17415                           pclatu	equ	0xFFB
 17416                           pclath	equ	0xFFA
 17417                           tblptru	equ	0xFF8
 17418                           tblptrh	equ	0xFF7
 17419                           tblptrl	equ	0xFF6
 17420                           tablat	equ	0xFF5
 17421                           prodh	equ	0xFF4
 17422                           prodl	equ	0xFF3
 17423                           intcon	equ	0xFF2
 17424                           postinc0	equ	0xFEE
 17425                           fsr0h	equ	0xFEA
 17426                           fsr0l	equ	0xFE9
 17427                           wreg	equ	0xFE8
 17428                           postdec1	equ	0xFE5
 17429                           fsr1h	equ	0xFE2
 17430                           fsr1l	equ	0xFE1
 17431                           indf2	equ	0xFDF
 17432                           postinc2	equ	0xFDE
 17433                           postdec2	equ	0xFDD
 17434                           fsr2h	equ	0xFDA
 17435                           fsr2l	equ	0xFD9
 17436                           status	equ	0xFD8
 17437                           
 17438 ;; *************** function i2_wr2RegCompleteHandler *****************
 17439 ;; Defined at:
 17440 ;;		line 110 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 17441 ;; Parameters:    Size  Location     Type
 17442 ;;  p               2   11[COMRAM] PTR void 
 17443 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 17444 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 17445 ;; Auto vars:     Size  Location     Type
 17446 ;;		None
 17447 ;; Return value:  Size  Location     Type
 17448 ;;                  1    wreg      enum E97
 17449 ;; Registers used:
 17450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17451 ;; Tracked objects:
 17452 ;;		On entry : 0/0
 17453 ;;		On exit  : 0/0
 17454 ;;		Unchanged: 0/0
 17455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17456 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17459 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17460 ;;Total ram usage:        2 bytes
 17461 ;; Hardware stack levels used:    1
 17462 ;; Hardware stack levels required when called:    2
 17463 ;; This function calls:
 17464 ;;		i2_i2c_setBuffer
 17465 ;;		i2_i2c_setDataCompleteCallback
 17466 ;; This function is called by:
 17467 ;; This function uses a non-reentrant model
 17468 ;;
 17469                           
 17470                           	psect	text138
 17471  003A2A                     __ptext138:
 17472                           	opt stack 0
 17473  003A2A                     i2_wr2RegCompleteHandler:
 17474                           	opt stack 8
 17475                           
 17476                           ;i2c_simple_master.c: 112: i2c_setBuffer(p,2);
 17477                           
 17478                           ;incstack = 0
 17479  003A2A  C00C  F001         	movff	i2wr2RegCompleteHandler@p,i2i2c_setBuffer@buffer
 17480  003A2E  C00D  F002         	movff	i2wr2RegCompleteHandler@p+1,i2i2c_setBuffer@buffer+1
 17481  003A32  0E00               	movlw	0
 17482  003A34  6E04               	movwf	i2i2c_setBuffer@bufferSize+1,c
 17483  003A36  0E02               	movlw	2
 17484  003A38  6E03               	movwf	i2i2c_setBuffer@bufferSize,c
 17485  003A3A  ECFF  F01D         	call	i2_i2c_setBuffer	;wreg free
 17486                           
 17487                           ;i2c_simple_master.c: 113: i2c_setDataCompleteCallback((0),(0));
 17488  003A3E  0E00               	movlw	0
 17489  003A40  6E07               	movwf	i2i2c_setDataCompleteCallback@cb,c
 17490  003A42  0E00               	movlw	0
 17491  003A44  6E08               	movwf	i2i2c_setDataCompleteCallback@cb+1,c
 17492  003A46  0E00               	movlw	0
 17493  003A48  6E09               	movwf	i2i2c_setDataCompleteCallback@cb+2,c
 17494  003A4A  0E00               	movlw	0
 17495  003A4C  6E0A               	movwf	i2i2c_setDataCompleteCallback@p,c
 17496  003A4E  0E00               	movlw	0
 17497  003A50  6E0B               	movwf	i2i2c_setDataCompleteCallback@p+1,c
 17498  003A52  ECD7  F01D         	call	i2_i2c_setDataCompleteCallback	;wreg free
 17499                           
 17500                           ;i2c_simple_master.c: 114: return i2c_continue;
 17501  003A56  0E04               	movlw	4
 17502  003A58  0012               	return	
 17503  003A5A                     __end_ofi2_wr2RegCompleteHandler:
 17504                           	opt stack 0
 17505                           tosu	equ	0xFFF
 17506                           tosh	equ	0xFFE
 17507                           tosl	equ	0xFFD
 17508                           pclatu	equ	0xFFB
 17509                           pclath	equ	0xFFA
 17510                           tblptru	equ	0xFF8
 17511                           tblptrh	equ	0xFF7
 17512                           tblptrl	equ	0xFF6
 17513                           tablat	equ	0xFF5
 17514                           prodh	equ	0xFF4
 17515                           prodl	equ	0xFF3
 17516                           intcon	equ	0xFF2
 17517                           postinc0	equ	0xFEE
 17518                           fsr0h	equ	0xFEA
 17519                           fsr0l	equ	0xFE9
 17520                           wreg	equ	0xFE8
 17521                           postdec1	equ	0xFE5
 17522                           fsr1h	equ	0xFE2
 17523                           fsr1l	equ	0xFE1
 17524                           indf2	equ	0xFDF
 17525                           postinc2	equ	0xFDE
 17526                           postdec2	equ	0xFDD
 17527                           fsr2h	equ	0xFDA
 17528                           fsr2l	equ	0xFD9
 17529                           status	equ	0xFD8
 17530                           
 17531 ;; *************** function i2_i2c_setDataCompleteCallback *****************
 17532 ;; Defined at:
 17533 ;;		line 89 in file "mcc_generated_files/drivers/i2c_master.c"
 17534 ;; Parameters:    Size  Location     Type
 17535 ;;  cb              3    6[COMRAM] PTR FTN(PTR void ,)enum 
 17536 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 17537 ;;		 -> wr1RegCompleteHandler(1), Absolute function(1), 
 17538 ;;  p               2    9[COMRAM] PTR void 
 17539 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 17540 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 17541 ;; Auto vars:     Size  Location     Type
 17542 ;;		None
 17543 ;; Return value:  Size  Location     Type
 17544 ;;                  1    wreg      void 
 17545 ;; Registers used:
 17546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17547 ;; Tracked objects:
 17548 ;;		On entry : 0/0
 17549 ;;		On exit  : 0/0
 17550 ;;		Unchanged: 0/0
 17551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17552 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17555 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17556 ;;Total ram usage:        5 bytes
 17557 ;; Hardware stack levels used:    1
 17558 ;; Hardware stack levels required when called:    1
 17559 ;; This function calls:
 17560 ;;		i2_setCallBack
 17561 ;; This function is called by:
 17562 ;;		i2_wr1RegCompleteHandler
 17563 ;;		i2_rd1RegCompleteHandler
 17564 ;;		i2_rd2RegCompleteHandler
 17565 ;;		i2_wr2RegCompleteHandler
 17566 ;;		i2_rdBlkRegCompleteHandler
 17567 ;; This function uses a non-reentrant model
 17568 ;;
 17569                           
 17570                           	psect	text139
 17571  003BAE                     __ptext139:
 17572                           	opt stack 0
 17573  003BAE                     i2_i2c_setDataCompleteCallback:
 17574                           	opt stack 8
 17575                           
 17576                           ;i2c_master.c: 91: setCallBack(i2c_dataComplete,cb,p);
 17577                           
 17578                           ;incstack = 0
 17579  003BAE  C007  F001         	movff	i2i2c_setDataCompleteCallback@cb,i2setCallBack@cb
 17580  003BB2  C008  F002         	movff	i2i2c_setDataCompleteCallback@cb+1,i2setCallBack@cb+1
 17581  003BB6  C009  F003         	movff	i2i2c_setDataCompleteCallback@cb+2,i2setCallBack@cb+2
 17582  003BBA  C00A  F004         	movff	i2i2c_setDataCompleteCallback@p,i2setCallBack@p
 17583  003BBE  C00B  F005         	movff	i2i2c_setDataCompleteCallback@p+1,i2setCallBack@p+1
 17584  003BC2  0E00               	movlw	0
 17585  003BC4  ECAA  F018         	call	i2_setCallBack
 17586  003BC8  0012               	return		;funcret
 17587  003BCA                     __end_ofi2_i2c_setDataCompleteCallback:
 17588                           	opt stack 0
 17589                           tosu	equ	0xFFF
 17590                           tosh	equ	0xFFE
 17591                           tosl	equ	0xFFD
 17592                           pclatu	equ	0xFFB
 17593                           pclath	equ	0xFFA
 17594                           tblptru	equ	0xFF8
 17595                           tblptrh	equ	0xFF7
 17596                           tblptrl	equ	0xFF6
 17597                           tablat	equ	0xFF5
 17598                           prodh	equ	0xFF4
 17599                           prodl	equ	0xFF3
 17600                           intcon	equ	0xFF2
 17601                           postinc0	equ	0xFEE
 17602                           fsr0h	equ	0xFEA
 17603                           fsr0l	equ	0xFE9
 17604                           wreg	equ	0xFE8
 17605                           postdec1	equ	0xFE5
 17606                           fsr1h	equ	0xFE2
 17607                           fsr1l	equ	0xFE1
 17608                           indf2	equ	0xFDF
 17609                           postinc2	equ	0xFDE
 17610                           postdec2	equ	0xFDD
 17611                           fsr2h	equ	0xFDA
 17612                           fsr2l	equ	0xFD9
 17613                           status	equ	0xFD8
 17614                           
 17615 ;; *************** function i2_setCallBack *****************
 17616 ;; Defined at:
 17617 ;;		line 453 in file "mcc_generated_files/drivers/i2c_master.c"
 17618 ;; Parameters:    Size  Location     Type
 17619 ;;  idx             1    wreg     enum E12000
 17620 ;;  cb              3    0[COMRAM] PTR FTN(PTR void ,)enum 
 17621 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 17622 ;;		 -> wr1RegCompleteHandler(1), i2c_restartWrite(1), Absolute function(1), 
 17623 ;;  p               2    3[COMRAM] PTR void 
 17624 ;;		 -> i2c_readDataBlock@d(5), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 17625 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 17626 ;; Auto vars:     Size  Location     Type
 17627 ;;  idx             1    5[COMRAM] enum E12000
 17628 ;; Return value:  Size  Location     Type
 17629 ;;                  1    wreg      void 
 17630 ;; Registers used:
 17631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17632 ;; Tracked objects:
 17633 ;;		On entry : 0/0
 17634 ;;		On exit  : 0/0
 17635 ;;		Unchanged: 0/0
 17636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17637 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17638 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17640 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17641 ;;Total ram usage:        6 bytes
 17642 ;; Hardware stack levels used:    1
 17643 ;; This function calls:
 17644 ;;		Nothing
 17645 ;; This function is called by:
 17646 ;;		i2_i2c_setDataCompleteCallback
 17647 ;; This function uses a non-reentrant model
 17648 ;;
 17649                           
 17650                           	psect	text140
 17651  003154                     __ptext140:
 17652                           	opt stack 0
 17653  003154                     i2_setCallBack:
 17654                           	opt stack 8
 17655                           
 17656                           ;incstack = 0
 17657                           ;i2setCallBack@idx stored from wreg
 17658  003154  6E06               	movwf	i2setCallBack@idx,c
 17659                           
 17660                           ;i2c_master.c: 455: if(cb)
 17661  003156  5001               	movf	i2setCallBack@cb,w,c
 17662  003158  1002               	iorwf	i2setCallBack@cb+1,w,c
 17663  00315A  1003               	iorwf	i2setCallBack@cb+2,w,c
 17664  00315C  B4D8               	btfsc	status,2,c
 17665  00315E  D01B               	goto	i2l482
 17666                           
 17667                           ;i2c_master.c: 456: {
 17668                           ;i2c_master.c: 457: i2c_status.callbackTable[idx] = cb;
 17669  003160  5006               	movf	i2setCallBack@idx,w,c
 17670  003162  0D03               	mullw	3
 17671  003164  0EBE               	movlw	low (_i2c_status+12)
 17672  003166  24F3               	addwf	prodl,w,c
 17673  003168  6ED9               	movwf	fsr2l,c
 17674  00316A  0E00               	movlw	high (_i2c_status+12)
 17675  00316C  20F4               	addwfc	prodh,w,c
 17676  00316E  6EDA               	movwf	fsr2h,c
 17677  003170  C001  FFDE         	movff	i2setCallBack@cb,postinc2
 17678  003174  C002  FFDE         	movff	i2setCallBack@cb+1,postinc2
 17679  003178  C003  FFDE         	movff	i2setCallBack@cb+2,postinc2
 17680                           
 17681                           ;i2c_master.c: 458: i2c_status.callbackPayload[idx] = p;
 17682  00317C  5006               	movf	i2setCallBack@idx,w,c
 17683  00317E  0D02               	mullw	2
 17684  003180  0ED0               	movlw	low (_i2c_status+30)
 17685  003182  24F3               	addwf	prodl,w,c
 17686  003184  6ED9               	movwf	fsr2l,c
 17687  003186  0E00               	movlw	high (_i2c_status+30)
 17688  003188  20F4               	addwfc	prodh,w,c
 17689  00318A  6EDA               	movwf	fsr2h,c
 17690  00318C  C004  FFDE         	movff	i2setCallBack@p,postinc2
 17691  003190  C005  FFDD         	movff	i2setCallBack@p+1,postdec2
 17692                           
 17693                           ;i2c_master.c: 459: }
 17694  003194  0012               	return	
 17695  003196                     i2l482:
 17696                           
 17697                           ;i2c_master.c: 460: else
 17698                           ;i2c_master.c: 461: {
 17699                           ;i2c_master.c: 462: i2c_status.callbackTable[idx] = returnStop;
 17700  003196  5006               	movf	i2setCallBack@idx,w,c
 17701  003198  0D03               	mullw	3
 17702  00319A  0EBE               	movlw	low (_i2c_status+12)
 17703  00319C  24F3               	addwf	prodl,w,c
 17704  00319E  6ED9               	movwf	fsr2l,c
 17705  0031A0  0E00               	movlw	high (_i2c_status+12)
 17706  0031A2  20F4               	addwfc	prodh,w,c
 17707  0031A4  6EDA               	movwf	fsr2h,c
 17708  0031A6  0E70               	movlw	low i2_returnStop
 17709  0031A8  6EDE               	movwf	postinc2,c
 17710  0031AA  0E3F               	movlw	high i2_returnStop
 17711  0031AC  6EDE               	movwf	postinc2,c
 17712  0031AE  0E00               	movlw	low (i2_returnStop shr (0+16))
 17713  0031B0  6EDE               	movwf	postinc2,c
 17714                           
 17715                           ;i2c_master.c: 463: i2c_status.callbackPayload[idx] = (0);
 17716  0031B2  5006               	movf	i2setCallBack@idx,w,c
 17717  0031B4  0D02               	mullw	2
 17718  0031B6  0ED0               	movlw	low (_i2c_status+30)
 17719  0031B8  24F3               	addwf	prodl,w,c
 17720  0031BA  6ED9               	movwf	fsr2l,c
 17721  0031BC  0E00               	movlw	high (_i2c_status+30)
 17722  0031BE  20F4               	addwfc	prodh,w,c
 17723  0031C0  6EDA               	movwf	fsr2h,c
 17724  0031C2  0E00               	movlw	0
 17725  0031C4  6EDE               	movwf	postinc2,c
 17726  0031C6  0E00               	movlw	0
 17727  0031C8  6EDD               	movwf	postdec2,c
 17728  0031CA  0012               	return	
 17729  0031CC                     __end_ofi2_setCallBack:
 17730                           	opt stack 0
 17731                           tosu	equ	0xFFF
 17732                           tosh	equ	0xFFE
 17733                           tosl	equ	0xFFD
 17734                           pclatu	equ	0xFFB
 17735                           pclath	equ	0xFFA
 17736                           tblptru	equ	0xFF8
 17737                           tblptrh	equ	0xFF7
 17738                           tblptrl	equ	0xFF6
 17739                           tablat	equ	0xFF5
 17740                           prodh	equ	0xFF4
 17741                           prodl	equ	0xFF3
 17742                           intcon	equ	0xFF2
 17743                           postinc0	equ	0xFEE
 17744                           fsr0h	equ	0xFEA
 17745                           fsr0l	equ	0xFE9
 17746                           wreg	equ	0xFE8
 17747                           postdec1	equ	0xFE5
 17748                           fsr1h	equ	0xFE2
 17749                           fsr1l	equ	0xFE1
 17750                           indf2	equ	0xFDF
 17751                           postinc2	equ	0xFDE
 17752                           postdec2	equ	0xFDD
 17753                           fsr2h	equ	0xFDA
 17754                           fsr2l	equ	0xFD9
 17755                           status	equ	0xFD8
 17756                           
 17757 ;; *************** function i2_i2c_setBuffer *****************
 17758 ;; Defined at:
 17759 ;;		line 184 in file "mcc_generated_files/drivers/i2c_master.c"
 17760 ;; Parameters:    Size  Location     Type
 17761 ;;  buffer          2    0[COMRAM] PTR void 
 17762 ;;		 -> XYZ_ReadTemp@readBuffer(2), XYZ_ReadTemp@wrtBuffer(1), XYZ_Read@readBuffer(6), XYZ_Read@wrtBuffer(1), 
 17763 ;;		 -> XYZ_WriteReg@wrtBuffer(2), LCD_writeI2C@wrtBuffer(1), i2c_readDataBlock@reg(1), i2c_readDataBlock@d(5), 
 17764 ;;		 -> i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg(1), i2c_read2ByteRegist
      +er@result(2), 
 17765 ;;		 -> i2c_read1ByteRegister@reg(1), i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister
      +@data(1), 
 17766 ;;		 -> NULL(0), 
 17767 ;;  bufferSize      2    2[COMRAM] unsigned int 
 17768 ;; Auto vars:     Size  Location     Type
 17769 ;;		None
 17770 ;; Return value:  Size  Location     Type
 17771 ;;                  1    wreg      void 
 17772 ;; Registers used:
 17773 ;;		wreg, status,2, status,0
 17774 ;; Tracked objects:
 17775 ;;		On entry : 0/0
 17776 ;;		On exit  : 0/0
 17777 ;;		Unchanged: 0/0
 17778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17779 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17782 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17783 ;;Total ram usage:        4 bytes
 17784 ;; Hardware stack levels used:    1
 17785 ;; This function calls:
 17786 ;;		Nothing
 17787 ;; This function is called by:
 17788 ;;		i2_wr1RegCompleteHandler
 17789 ;;		i2_rd1RegCompleteHandler
 17790 ;;		i2_rd2RegCompleteHandler
 17791 ;;		i2_wr2RegCompleteHandler
 17792 ;;		i2_rdBlkRegCompleteHandler
 17793 ;; This function uses a non-reentrant model
 17794 ;;
 17795                           
 17796                           	psect	text141
 17797  003BFE                     __ptext141:
 17798                           	opt stack 0
 17799  003BFE                     i2_i2c_setBuffer:
 17800                           	opt stack 9
 17801                           
 17802                           ;i2c_master.c: 186: if(i2c_status.bufferFree)
 17803                           
 17804                           ;incstack = 0
 17805  003BFE  0100               	movlb	0	; () banked
 17806  003C00  A5B2               	btfss	_i2c_status& (0+255),2,b
 17807  003C02  0012               	return	
 17808                           
 17809                           ; BSR set to: 0
 17810                           ;i2c_master.c: 187: {
 17811                           ;i2c_master.c: 188: i2c_status.data_ptr = buffer;
 17812  003C04  C001  F0B4         	movff	i2i2c_setBuffer@buffer,_i2c_status+2
 17813  003C08  C002  F0B5         	movff	i2i2c_setBuffer@buffer+1,_i2c_status+3
 17814                           
 17815                           ; BSR set to: 0
 17816                           ;i2c_master.c: 189: i2c_status.data_length = bufferSize;
 17817  003C0C  C003  F0B6         	movff	i2i2c_setBuffer@bufferSize,_i2c_status+4
 17818  003C10  C004  F0B7         	movff	i2i2c_setBuffer@bufferSize+1,_i2c_status+5
 17819                           
 17820                           ; BSR set to: 0
 17821                           ;i2c_master.c: 190: i2c_status.bufferFree = 0;
 17822  003C14  95B2               	bcf	_i2c_status& (0+255),2,b
 17823  003C16  0012               	return	
 17824  003C18                     __end_ofi2_i2c_setBuffer:
 17825                           	opt stack 0
 17826                           tosu	equ	0xFFF
 17827                           tosh	equ	0xFFE
 17828                           tosl	equ	0xFFD
 17829                           pclatu	equ	0xFFB
 17830                           pclath	equ	0xFFA
 17831                           tblptru	equ	0xFF8
 17832                           tblptrh	equ	0xFF7
 17833                           tblptrl	equ	0xFF6
 17834                           tablat	equ	0xFF5
 17835                           prodh	equ	0xFF4
 17836                           prodl	equ	0xFF3
 17837                           intcon	equ	0xFF2
 17838                           postinc0	equ	0xFEE
 17839                           fsr0h	equ	0xFEA
 17840                           fsr0l	equ	0xFE9
 17841                           wreg	equ	0xFE8
 17842                           postdec1	equ	0xFE5
 17843                           fsr1h	equ	0xFE2
 17844                           fsr1l	equ	0xFE1
 17845                           indf2	equ	0xFDF
 17846                           postinc2	equ	0xFDE
 17847                           postdec2	equ	0xFDD
 17848                           fsr2h	equ	0xFDA
 17849                           fsr2l	equ	0xFD9
 17850                           status	equ	0xFD8
 17851                           
 17852 ;; *************** function i2_i2c1_driver_stop *****************
 17853 ;; Defined at:
 17854 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 17855 ;; Parameters:    Size  Location     Type
 17856 ;;		None
 17857 ;; Auto vars:     Size  Location     Type
 17858 ;;		None
 17859 ;; Return value:  Size  Location     Type
 17860 ;;                  1    wreg      void 
 17861 ;; Registers used:
 17862 ;;		None
 17863 ;; Tracked objects:
 17864 ;;		On entry : 0/0
 17865 ;;		On exit  : 0/0
 17866 ;;		Unchanged: 0/0
 17867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17872 ;;Total ram usage:        0 bytes
 17873 ;; Hardware stack levels used:    1
 17874 ;; This function calls:
 17875 ;;		Nothing
 17876 ;; This function is called by:
 17877 ;;		i2_do_I2C_SEND_STOP
 17878 ;; This function uses a non-reentrant model
 17879 ;;
 17880                           
 17881                           	psect	text142
 17882  003F74                     __ptext142:
 17883                           	opt stack 0
 17884  003F74                     i2_i2c1_driver_stop:
 17885                           	opt stack 9
 17886                           
 17887                           ;i2c1_driver.c: 158: SSP1CON2bits.PEN = 1;
 17888                           
 17889                           ; BSR set to: 0
 17890                           ;incstack = 0
 17891  003F74  8497               	bsf	3991,2,c	;volatile
 17892  003F76  0012               	return		;funcret
 17893  003F78                     __end_ofi2_i2c1_driver_stop:
 17894                           	opt stack 0
 17895                           tosu	equ	0xFFF
 17896                           tosh	equ	0xFFE
 17897                           tosl	equ	0xFFD
 17898                           pclatu	equ	0xFFB
 17899                           pclath	equ	0xFFA
 17900                           tblptru	equ	0xFF8
 17901                           tblptrh	equ	0xFF7
 17902                           tblptrl	equ	0xFF6
 17903                           tablat	equ	0xFF5
 17904                           prodh	equ	0xFF4
 17905                           prodl	equ	0xFF3
 17906                           intcon	equ	0xFF2
 17907                           postinc0	equ	0xFEE
 17908                           fsr0h	equ	0xFEA
 17909                           fsr0l	equ	0xFE9
 17910                           wreg	equ	0xFE8
 17911                           postdec1	equ	0xFE5
 17912                           fsr1h	equ	0xFE2
 17913                           fsr1l	equ	0xFE1
 17914                           indf2	equ	0xFDF
 17915                           postinc2	equ	0xFDE
 17916                           postdec2	equ	0xFDD
 17917                           fsr2h	equ	0xFDA
 17918                           fsr2l	equ	0xFD9
 17919                           status	equ	0xFD8
 17920                           
 17921 ;; *************** function i2_i2c1_driver_restart *****************
 17922 ;; Defined at:
 17923 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 17924 ;; Parameters:    Size  Location     Type
 17925 ;;		None
 17926 ;; Auto vars:     Size  Location     Type
 17927 ;;		None
 17928 ;; Return value:  Size  Location     Type
 17929 ;;                  1    wreg      void 
 17930 ;; Registers used:
 17931 ;;		None
 17932 ;; Tracked objects:
 17933 ;;		On entry : 0/0
 17934 ;;		On exit  : 0/0
 17935 ;;		Unchanged: 0/0
 17936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17941 ;;Total ram usage:        0 bytes
 17942 ;; Hardware stack levels used:    1
 17943 ;; This function calls:
 17944 ;;		Nothing
 17945 ;; This function is called by:
 17946 ;;		i2_do_I2C_SEND_RESTART_READ
 17947 ;;		i2_do_I2C_SEND_RESTART_WRITE
 17948 ;;		i2_do_I2C_SEND_RESTART
 17949 ;; This function uses a non-reentrant model
 17950 ;;
 17951                           
 17952                           	psect	text143
 17953  003F78                     __ptext143:
 17954                           	opt stack 0
 17955  003F78                     i2_i2c1_driver_restart:
 17956                           	opt stack 9
 17957                           
 17958                           ;i2c1_driver.c: 153: SSP1CON2bits.RSEN = 1;
 17959                           
 17960                           ;incstack = 0
 17961  003F78  8297               	bsf	3991,1,c	;volatile
 17962  003F7A  0012               	return		;funcret
 17963  003F7C                     __end_ofi2_i2c1_driver_restart:
 17964                           	opt stack 0
 17965                           tosu	equ	0xFFF
 17966                           tosh	equ	0xFFE
 17967                           tosl	equ	0xFFD
 17968                           pclatu	equ	0xFFB
 17969                           pclath	equ	0xFFA
 17970                           tblptru	equ	0xFF8
 17971                           tblptrh	equ	0xFF7
 17972                           tblptrl	equ	0xFF6
 17973                           tablat	equ	0xFF5
 17974                           prodh	equ	0xFF4
 17975                           prodl	equ	0xFF3
 17976                           intcon	equ	0xFF2
 17977                           postinc0	equ	0xFEE
 17978                           fsr0h	equ	0xFEA
 17979                           fsr0l	equ	0xFE9
 17980                           wreg	equ	0xFE8
 17981                           postdec1	equ	0xFE5
 17982                           fsr1h	equ	0xFE2
 17983                           fsr1l	equ	0xFE1
 17984                           indf2	equ	0xFDF
 17985                           postinc2	equ	0xFDE
 17986                           postdec2	equ	0xFDD
 17987                           fsr2h	equ	0xFDA
 17988                           fsr2l	equ	0xFD9
 17989                           status	equ	0xFD8
 17990                           
 17991 ;; *************** function i2_i2c1_driver_sendACK *****************
 17992 ;; Defined at:
 17993 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 17994 ;; Parameters:    Size  Location     Type
 17995 ;;		None
 17996 ;; Auto vars:     Size  Location     Type
 17997 ;;		None
 17998 ;; Return value:  Size  Location     Type
 17999 ;;                  1    wreg      void 
 18000 ;; Registers used:
 18001 ;;		None
 18002 ;; Tracked objects:
 18003 ;;		On entry : 0/0
 18004 ;;		On exit  : 0/0
 18005 ;;		Unchanged: 0/0
 18006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18011 ;;Total ram usage:        0 bytes
 18012 ;; Hardware stack levels used:    1
 18013 ;; This function calls:
 18014 ;;		Nothing
 18015 ;; This function is called by:
 18016 ;;		i2_do_I2C_DO_ACK
 18017 ;;		i2_do_I2C_RX
 18018 ;; This function uses a non-reentrant model
 18019 ;;
 18020                           
 18021                           	psect	text144
 18022  003F36                     __ptext144:
 18023                           	opt stack 0
 18024  003F36                     i2_i2c1_driver_sendACK:
 18025                           	opt stack 10
 18026                           
 18027                           ;i2c1_driver.c: 198: SSP1CON2bits.ACKDT = 0;
 18028                           
 18029                           ;incstack = 0
 18030  003F36  9A97               	bcf	3991,5,c	;volatile
 18031                           
 18032                           ;i2c1_driver.c: 199: SSP1CON2bits.ACKEN = 1;
 18033  003F38  8897               	bsf	3991,4,c	;volatile
 18034  003F3A  0012               	return		;funcret
 18035  003F3C                     __end_ofi2_i2c1_driver_sendACK:
 18036                           	opt stack 0
 18037                           tosu	equ	0xFFF
 18038                           tosh	equ	0xFFE
 18039                           tosl	equ	0xFFD
 18040                           pclatu	equ	0xFFB
 18041                           pclath	equ	0xFFA
 18042                           tblptru	equ	0xFF8
 18043                           tblptrh	equ	0xFF7
 18044                           tblptrl	equ	0xFF6
 18045                           tablat	equ	0xFF5
 18046                           prodh	equ	0xFF4
 18047                           prodl	equ	0xFF3
 18048                           intcon	equ	0xFF2
 18049                           postinc0	equ	0xFEE
 18050                           fsr0h	equ	0xFEA
 18051                           fsr0l	equ	0xFE9
 18052                           wreg	equ	0xFE8
 18053                           postdec1	equ	0xFE5
 18054                           fsr1h	equ	0xFE2
 18055                           fsr1l	equ	0xFE1
 18056                           indf2	equ	0xFDF
 18057                           postinc2	equ	0xFDE
 18058                           postdec2	equ	0xFDD
 18059                           fsr2h	equ	0xFDA
 18060                           fsr2l	equ	0xFD9
 18061                           status	equ	0xFD8
 18062                           
 18063 ;; *************** function _i2c_busCollisionISR *****************
 18064 ;; Defined at:
 18065 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 18066 ;; Parameters:    Size  Location     Type
 18067 ;;		None
 18068 ;; Auto vars:     Size  Location     Type
 18069 ;;		None
 18070 ;; Return value:  Size  Location     Type
 18071 ;;                  1    wreg      void 
 18072 ;; Registers used:
 18073 ;;		cstack
 18074 ;; Tracked objects:
 18075 ;;		On entry : 0/0
 18076 ;;		On exit  : 0/0
 18077 ;;		Unchanged: 0/0
 18078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18083 ;;Total ram usage:        0 bytes
 18084 ;; Hardware stack levels used:    1
 18085 ;; Hardware stack levels required when called:    1
 18086 ;; This function calls:
 18087 ;;		_i2c1_driver_clearBusCollision
 18088 ;; This function is called by:
 18089 ;;		_i2c_open
 18090 ;;		_INTERRUPT_InterruptManager
 18091 ;; This function uses a non-reentrant model
 18092 ;;
 18093                           
 18094                           	psect	text145
 18095  003F3C                     __ptext145:
 18096                           	opt stack 0
 18097  003F3C                     _i2c_busCollisionISR:
 18098                           	opt stack 11
 18099                           
 18100                           ;i2c_master.c: 437: i2c1_driver_clearBusCollision();
 18101                           
 18102                           ;incstack = 0
 18103  003F3C  ECA1  F01F         	call	_i2c1_driver_clearBusCollision	;wreg free
 18104  003F40  0012               	return		;funcret
 18105  003F42                     __end_of_i2c_busCollisionISR:
 18106                           	opt stack 0
 18107                           tosu	equ	0xFFF
 18108                           tosh	equ	0xFFE
 18109                           tosl	equ	0xFFD
 18110                           pclatu	equ	0xFFB
 18111                           pclath	equ	0xFFA
 18112                           tblptru	equ	0xFF8
 18113                           tblptrh	equ	0xFF7
 18114                           tblptrl	equ	0xFF6
 18115                           tablat	equ	0xFF5
 18116                           prodh	equ	0xFF4
 18117                           prodl	equ	0xFF3
 18118                           intcon	equ	0xFF2
 18119                           postinc0	equ	0xFEE
 18120                           fsr0h	equ	0xFEA
 18121                           fsr0l	equ	0xFE9
 18122                           wreg	equ	0xFE8
 18123                           postdec1	equ	0xFE5
 18124                           fsr1h	equ	0xFE2
 18125                           fsr1l	equ	0xFE1
 18126                           indf2	equ	0xFDF
 18127                           postinc2	equ	0xFDE
 18128                           postdec2	equ	0xFDD
 18129                           fsr2h	equ	0xFDA
 18130                           fsr2l	equ	0xFD9
 18131                           status	equ	0xFD8
 18132                           
 18133 ;; *************** function _i2c1_driver_clearBusCollision *****************
 18134 ;; Defined at:
 18135 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 18136 ;; Parameters:    Size  Location     Type
 18137 ;;		None
 18138 ;; Auto vars:     Size  Location     Type
 18139 ;;		None
 18140 ;; Return value:  Size  Location     Type
 18141 ;;                  1    wreg      void 
 18142 ;; Registers used:
 18143 ;;		None
 18144 ;; Tracked objects:
 18145 ;;		On entry : 0/0
 18146 ;;		On exit  : 0/0
 18147 ;;		Unchanged: 0/0
 18148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18153 ;;Total ram usage:        0 bytes
 18154 ;; Hardware stack levels used:    1
 18155 ;; This function calls:
 18156 ;;		Nothing
 18157 ;; This function is called by:
 18158 ;;		_i2c_busCollisionISR
 18159 ;; This function uses a non-reentrant model
 18160 ;;
 18161                           
 18162                           	psect	text146
 18163  003F42                     __ptext146:
 18164                           	opt stack 0
 18165  003F42                     _i2c1_driver_clearBusCollision:
 18166                           	opt stack 11
 18167                           
 18168                           ;i2c1_driver.c: 255: PIR3bits.BCL1IF = 0;
 18169                           
 18170                           ;incstack = 0
 18171  003F42  010E               	movlb	14	; () banked
 18172  003F44  93CD               	bcf	205,1,b	;volatile
 18173                           
 18174                           ; BSR set to: 14
 18175  003F46  0012               	return		;funcret
 18176  003F48                     __end_of_i2c1_driver_clearBusCollision:
 18177                           	opt stack 0
 18178                           tosu	equ	0xFFF
 18179                           tosh	equ	0xFFE
 18180                           tosl	equ	0xFFD
 18181                           pclatu	equ	0xFFB
 18182                           pclath	equ	0xFFA
 18183                           tblptru	equ	0xFF8
 18184                           tblptrh	equ	0xFF7
 18185                           tblptrl	equ	0xFF6
 18186                           tablat	equ	0xFF5
 18187                           prodh	equ	0xFF4
 18188                           prodl	equ	0xFF3
 18189                           intcon	equ	0xFF2
 18190                           postinc0	equ	0xFEE
 18191                           fsr0h	equ	0xFEA
 18192                           fsr0l	equ	0xFE9
 18193                           wreg	equ	0xFE8
 18194                           postdec1	equ	0xFE5
 18195                           fsr1h	equ	0xFE2
 18196                           fsr1l	equ	0xFE1
 18197                           indf2	equ	0xFDF
 18198                           postinc2	equ	0xFDE
 18199                           postdec2	equ	0xFDD
 18200                           fsr2h	equ	0xFDA
 18201                           fsr2l	equ	0xFD9
 18202                           status	equ	0xFD8
 18203                           tosu	equ	0xFFF
 18204                           tosh	equ	0xFFE
 18205                           tosl	equ	0xFFD
 18206                           pclatu	equ	0xFFB
 18207                           pclath	equ	0xFFA
 18208                           tblptru	equ	0xFF8
 18209                           tblptrh	equ	0xFF7
 18210                           tblptrl	equ	0xFF6
 18211                           tablat	equ	0xFF5
 18212                           prodh	equ	0xFF4
 18213                           prodl	equ	0xFF3
 18214                           intcon	equ	0xFF2
 18215                           postinc0	equ	0xFEE
 18216                           fsr0h	equ	0xFEA
 18217                           fsr0l	equ	0xFE9
 18218                           wreg	equ	0xFE8
 18219                           postdec1	equ	0xFE5
 18220                           fsr1h	equ	0xFE2
 18221                           fsr1l	equ	0xFE1
 18222                           indf2	equ	0xFDF
 18223                           postinc2	equ	0xFDE
 18224                           postdec2	equ	0xFDD
 18225                           fsr2h	equ	0xFDA
 18226                           fsr2l	equ	0xFD9
 18227                           status	equ	0xFD8
 18228                           
 18229                           	psect	text147
 18230  000000                     __ptext147:
 18231                           	opt stack 0
 18232                           tosu	equ	0xFFF
 18233                           tosh	equ	0xFFE
 18234                           tosl	equ	0xFFD
 18235                           pclatu	equ	0xFFB
 18236                           pclath	equ	0xFFA
 18237                           tblptru	equ	0xFF8
 18238                           tblptrh	equ	0xFF7
 18239                           tblptrl	equ	0xFF6
 18240                           tablat	equ	0xFF5
 18241                           prodh	equ	0xFF4
 18242                           prodl	equ	0xFF3
 18243                           intcon	equ	0xFF2
 18244                           postinc0	equ	0xFEE
 18245                           fsr0h	equ	0xFEA
 18246                           fsr0l	equ	0xFE9
 18247                           wreg	equ	0xFE8
 18248                           postdec1	equ	0xFE5
 18249                           fsr1h	equ	0xFE2
 18250                           fsr1l	equ	0xFE1
 18251                           indf2	equ	0xFDF
 18252                           postinc2	equ	0xFDE
 18253                           postdec2	equ	0xFDD
 18254                           fsr2h	equ	0xFDA
 18255                           fsr2l	equ	0xFD9
 18256                           status	equ	0xFD8
 18257                           
 18258                           	psect	rparam
 18259  0000                     tosu	equ	0xFFF
 18260                           tosh	equ	0xFFE
 18261                           tosl	equ	0xFFD
 18262                           pclatu	equ	0xFFB
 18263                           pclath	equ	0xFFA
 18264                           tblptru	equ	0xFF8
 18265                           tblptrh	equ	0xFF7
 18266                           tblptrl	equ	0xFF6
 18267                           tablat	equ	0xFF5
 18268                           prodh	equ	0xFF4
 18269                           prodl	equ	0xFF3
 18270                           intcon	equ	0xFF2
 18271                           postinc0	equ	0xFEE
 18272                           fsr0h	equ	0xFEA
 18273                           fsr0l	equ	0xFE9
 18274                           wreg	equ	0xFE8
 18275                           postdec1	equ	0xFE5
 18276                           fsr1h	equ	0xFE2
 18277                           fsr1l	equ	0xFE1
 18278                           indf2	equ	0xFDF
 18279                           postinc2	equ	0xFDE
 18280                           postdec2	equ	0xFDD
 18281                           fsr2h	equ	0xFDA
 18282                           fsr2l	equ	0xFD9
 18283                           status	equ	0xFD8
 18284                           
 18285                           	psect	temp
 18286  00004A                     btemp:
 18287                           	opt stack 0
 18288  00004A                     	ds	1
 18289  0000                     int$flags	set	btemp
 18290  0000                     wtemp6	set	btemp+1
 18291                           tosu	equ	0xFFF
 18292                           tosh	equ	0xFFE
 18293                           tosl	equ	0xFFD
 18294                           pclatu	equ	0xFFB
 18295                           pclath	equ	0xFFA
 18296                           tblptru	equ	0xFF8
 18297                           tblptrh	equ	0xFF7
 18298                           tblptrl	equ	0xFF6
 18299                           tablat	equ	0xFF5
 18300                           prodh	equ	0xFF4
 18301                           prodl	equ	0xFF3
 18302                           intcon	equ	0xFF2
 18303                           postinc0	equ	0xFEE
 18304                           fsr0h	equ	0xFEA
 18305                           fsr0l	equ	0xFE9
 18306                           wreg	equ	0xFE8
 18307                           postdec1	equ	0xFE5
 18308                           fsr1h	equ	0xFE2
 18309                           fsr1l	equ	0xFE1
 18310                           indf2	equ	0xFDF
 18311                           postinc2	equ	0xFDE
 18312                           postdec2	equ	0xFDD
 18313                           fsr2h	equ	0xFDA
 18314                           fsr2l	equ	0xFD9
 18315                           status	equ	0xFD8


Data Sizes:
    Strings     16
    Constant    151
    Data        48
    BSS         90
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     58      73
    BANK0           160     82     158
    BANK1           256      9      57
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          136      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(2) Largest target is 0

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(2) Largest target is 0

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0

    do_I2C_TX$2297$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    do_I2C_RX$2303$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$2309$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_ISR$2315	PTR const FTN()enum E11982 size(3) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    do_I2C_TX_EMPTY$2314	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    do_I2C_TX_EMPTY$2309	PTR FTN(PTR void ,)enum E11816 size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    do_I2C_RX$2308	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    do_I2C_RX$2303	PTR FTN(PTR void ,)enum E11816 size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    do_I2C_TX$2302	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    do_I2C_TX$2297	PTR FTN(PTR void ,)enum E11816 size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    returnStop@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    returnReset@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    Absolute function$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_restartWrite@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    S820$11$0	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    mssp1_waitForEvent@timeout	PTR unsigned int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    eval_poly@d	PTR const  size(2) Largest target is 18
		 -> atan@coeff_a(CODE[18]), atan@coeff_b(CODE[15]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_2(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> vectorString(BANK0[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    XYZ_Read@z	PTR int  size(2) Largest target is 2
		 -> main@z(BANK1[2]), 

    XYZ_Read@y	PTR int  size(2) Largest target is 2
		 -> main@y(BANK1[2]), 

    XYZ_Read@x	PTR int  size(2) Largest target is 2
		 -> main@x(BANK1[2]), 

    XYZ_azimuth@b	PTR int  size(2) Largest target is 2
		 -> main@x(BANK1[2]), 

    XYZ_azimuth@a	PTR int  size(2) Largest target is 2
		 -> main@y(BANK1[2]), 

    LCD_print@s	PTR const unsigned char  size(2) Largest target is 32
		 -> vectorString(BANK0[32]), STR_1(CODE[9]), 

    i2c_readNBytes@data	PTR void  size(2) Largest target is 6
		 -> XYZ_ReadTemp@readBuffer(COMRAM[2]), XYZ_Read@readBuffer(COMRAM[6]), 

    d.data	PTR unsigned char  size(2) Largest target is 0

    S1085$data	PTR unsigned char  size(2) Largest target is 0

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(2) Largest target is 0

    rdBlkRegCompleteHandler@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_writeNBytes@data	PTR void  size(2) Largest target is 2
		 -> XYZ_ReadTemp@wrtBuffer(COMRAM[1]), XYZ_Read@wrtBuffer(COMRAM[1]), XYZ_WriteReg@wrtBuffer(COMRAM[2]), LCD_writeI2C@wrtBuffer(COMRAM[1]), 

    wr1RegCompleteHandler@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    setCallBack@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    setCallBack@cb	PTR FTN(PTR void ,)enum E11816 size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), 

    fsmStateTable	PTR const FTN()enum E11982[16] size(3) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    i2c_setBuffer@buffer	PTR void  size(2) Largest target is 6
		 -> XYZ_ReadTemp@readBuffer(COMRAM[2]), XYZ_ReadTemp@wrtBuffer(COMRAM[1]), XYZ_Read@readBuffer(COMRAM[6]), XYZ_Read@wrtBuffer(COMRAM[1]), 
		 -> XYZ_WriteReg@wrtBuffer(COMRAM[2]), LCD_writeI2C@wrtBuffer(COMRAM[1]), i2c_readDataBlock@reg(COMRAM[1]), i2c_readDataBlock@d(COMRAM[5]), 
		 -> i2c_write2ByteRegister@reg(COMRAM[1]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@reg(COMRAM[1]), i2c_read2ByteRegister@result(COMRAM[2]), 
		 -> i2c_read1ByteRegister@reg(COMRAM[1]), i2c_read1ByteRegister@d2(COMRAM[1]), i2c_write1ByteRegister@reg(COMRAM[1]), i2c_write1ByteRegister@data(COMRAM[1]), 
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@p	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_setAddressNACKCallback@cb	PTR FTN(PTR void ,)enum E11816 size(3) Largest target is 1
		 -> i2c_restartWrite(), 

    i2c_setDataCompleteCallback@p	PTR void  size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_setDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E11816 size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), Absolute function(), 

    S820$callbackPayload	PTR void [6] size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(2) Largest target is 5
		 -> i2c_readDataBlock@d(COMRAM[5]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@result(COMRAM[2]), i2c_read1ByteRegister@d2(COMRAM[1]), 
		 -> i2c_write1ByteRegister@data(COMRAM[1]), NULL(NULL[0]), 

    S820$callbackTable	PTR FTN(PTR void ,)enum E11816[6] size(3) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), returnReset(), 
		 -> returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E11816[6] size(3) Largest target is 1
		 -> i2_returnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rd1RegCompleteHandler(), wr1RegCompleteHandler(), i2c_restartWrite(), Absolute function(), 
		 -> returnReset(), returnStop(), 

    S820$data_ptr	PTR unsigned char  size(2) Largest target is 6
		 -> XYZ_ReadTemp@readBuffer(COMRAM[2]), XYZ_ReadTemp@wrtBuffer(COMRAM[1]), XYZ_Read@readBuffer(COMRAM[6]), XYZ_Read@wrtBuffer(COMRAM[1]), 
		 -> XYZ_WriteReg@wrtBuffer(COMRAM[2]), LCD_writeI2C@wrtBuffer(COMRAM[1]), i2c_readDataBlock@reg(COMRAM[1]), i2c_readDataBlock@d(COMRAM[5]), 
		 -> i2c_write2ByteRegister@reg(COMRAM[1]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@reg(COMRAM[1]), i2c_read2ByteRegister@result(COMRAM[2]), 
		 -> i2c_read1ByteRegister@reg(COMRAM[1]), i2c_read1ByteRegister@d2(COMRAM[1]), i2c_write1ByteRegister@reg(COMRAM[1]), i2c_write1ByteRegister@data(COMRAM[1]), 
		 -> NULL(NULL[0]), 

    i2c_status.data_ptr	PTR unsigned char  size(2) Largest target is 6
		 -> XYZ_ReadTemp@readBuffer(COMRAM[2]), XYZ_ReadTemp@wrtBuffer(COMRAM[1]), XYZ_Read@readBuffer(COMRAM[6]), XYZ_Read@wrtBuffer(COMRAM[1]), 
		 -> XYZ_WriteReg@wrtBuffer(COMRAM[2]), LCD_writeI2C@wrtBuffer(COMRAM[1]), i2c_readDataBlock@reg(COMRAM[1]), i2c_readDataBlock@d(COMRAM[5]), 
		 -> i2c_write2ByteRegister@reg(COMRAM[1]), i2c_write2ByteRegister@data(COMRAM[2]), i2c_read2ByteRegister@reg(COMRAM[1]), i2c_read2ByteRegister@result(COMRAM[2]), 
		 -> i2c_read1ByteRegister@reg(COMRAM[1]), i2c_read1ByteRegister@d2(COMRAM[1]), i2c_write1ByteRegister@reg(COMRAM[1]), i2c_write1ByteRegister@data(COMRAM[1]), 
		 -> NULL(NULL[0]), 

    i2c1_driver_setI2cISR@f	PTR void  size(3) Largest target is 1
		 -> i2c_ISR(), 

    i2c1_driver_setBusCollisionISR@f	PTR void  size(3) Largest target is 1
		 -> i2c_busCollisionISR(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 


Critical Paths under _main in COMRAM

    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->___ftmul
    _atan->_eval_poly
    _eval_poly->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___ftdiv->___ftmul
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    _XYZ_Read->_i2c_writeNBytes
    _i2c_readNBytes->_i2c_open
    _i2c_masterRead->_i2c_masterOperation
    _XYZ_Init->_XYZ_setMode
    _XYZ_setMode->_XYZ_WriteReg
    _XYZ_WriteReg->_i2c_writeNBytes
    _LCD_setCursor->_LCD_command
    _LCD_print->_LCD_write
    _LCD_write->_LCD_send
    _LCD_init->_LCD_command
    _LCD_display->_LCD_command
    _LCD_clear->_LCD_command
    _LCD_command->_LCD_send
    _LCD_send->_LCD_write4bits
    _LCD_pulseEnable->_LCD_EN_SET
    _LCD_writeI2C->_i2c_writeNBytes
    _i2c_writeNBytes->_i2c_setAddressNACKCallback
    _i2c_setAddressNACKCallback->_setCallBack
    _i2c_open->_i2c1_driver_setBusCollisionISR
    _i2c_open->_i2c1_driver_setI2cISR
    _i2c_masterWrite->_i2c_masterOperation
    _i2c_ISR->_do_I2C_TX
    _do_I2C_TX->_i2c1_driver_TXData
    _do_I2C_TX->_i2c1_driver_isNACK
    _do_I2C_SEND_ADR_WRITE->_i2c1_driver_TXData
    _do_I2C_SEND_ADR_READ->_i2c1_driver_TXData
    _wr2RegCompleteHandler->_i2c_setDataCompleteCallback
    _wr1RegCompleteHandler->_i2c_setDataCompleteCallback
    _rdBlkRegCompleteHandler->_i2c_setDataCompleteCallback
    _rd2RegCompleteHandler->_i2c_setDataCompleteCallback
    _rd1RegCompleteHandler->_i2c_setDataCompleteCallback
    _i2c_setDataCompleteCallback->_setCallBack

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    i2_i2c_ISR->i2_do_I2C_TX
    i2_do_I2C_TX->i2_i2c1_driver_TXData
    i2_do_I2C_TX->i2_i2c1_driver_isNACK
    i2_do_I2C_SEND_ADR_WRITE->i2_i2c1_driver_TXData
    i2_do_I2C_SEND_ADR_READ->i2_i2c1_driver_TXData
    i2_wr2RegCompleteHandler->i2_i2c_setDataCompleteCallback
    i2_wr1RegCompleteHandler->i2_i2c_setDataCompleteCallback
    i2_rdBlkRegCompleteHandler->i2_i2c_setDataCompleteCallback
    i2_rd2RegCompleteHandler->i2_i2c_setDataCompleteCallback
    i2_rd1RegCompleteHandler->i2_i2c_setDataCompleteCallback
    i2_i2c_setDataCompleteCallback->i2_setCallBack

Critical Paths under _main in BANK0

    _main->_XYZ_azimuth
    _sprintf->___ftsub
    ___fttol->_scale
    _XYZ_azimuth->_atan2
    _atan2->_atan
    _atan->_eval_poly
    _fabs->___ftneg
    ___ftneg->___ftdiv
    _eval_poly->___ftadd
    ___ftge->_fabs
    ___ftsub->___ftadd
    ___ftadd->___ftneg

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0 1941378
                                             81 BANK0      1     1      0
                                              0 BANK1      9     9      0
                           _LCD_init
                          _LCD_print
                      _LCD_setCursor
                  _SYSTEM_Initialize
                           _XYZ_Init
                           _XYZ_Read
                        _XYZ_azimuth
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   71781
                                             36 BANK0     36    29      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   17050
                                              0 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             21 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   16771
                                              0 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2053
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2245
                                             27 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     634
                                             21 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     853
                                             21 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3145
                                             29 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     772
                                             21 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     601
                                             21 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     641
                                              7 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (1) _XYZ_azimuth                                         10     6      4   80023
                                             71 BANK0     10     6      4
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                              _atan2
 ---------------------------------------------------------------------------------
 (2) _atan2                                               15     9      6   59303
                                             56 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___ftsub
                               _atan
                               _fabs
 ---------------------------------------------------------------------------------
 (3) _atan                                                16    13      3   39007
                                             40 BANK0     16    13      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                          _eval_poly
                               _fabs
 ---------------------------------------------------------------------------------
 (3) _fabs                                                 3     0      3     878
                                             18 BANK0      3     0      3
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     515
                                             15 BANK0      3     0      3
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   18495
                                             56 COMRAM     2     2      0
                                             30 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    5302
                                             35 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6821
                                             41 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1458
                                             21 BANK0      9     3      6
                               _fabs (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    4593
                                              0 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    6354
                                             30 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5578
                                             18 BANK0     12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___wmul (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3356
                                             29 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2953
                                             21 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _XYZ_Read                                            16    10      6  221460
                                             37 COMRAM    16    10      6
                     _i2c_readNBytes
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) _i2c_readNBytes                                       5     1      4  109114
                                             26 COMRAM     5     1      4
                          _i2c_close
                     _i2c_masterRead
                           _i2c_open
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_masterRead                                       0     0      0  106092
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (1) _XYZ_Init                                             0     0      0  224524
                       _XYZ_WriteReg
                        _XYZ_setMode
 ---------------------------------------------------------------------------------
 (2) _XYZ_setMode                                          4     1      3  112459
                                             39 COMRAM     4     1      3
                       _XYZ_WriteReg
 ---------------------------------------------------------------------------------
 (3) _XYZ_WriteReg                                         2     1      1  112065
                                             37 COMRAM     2     1      1
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_setCursor                                        2     1      1  224108
                                             43 COMRAM     2     1      1
                        _LCD_command
 ---------------------------------------------------------------------------------
 (1) _LCD_print                                            3     1      2  224121
                                             43 COMRAM     3     1      2
                          _LCD_write
 ---------------------------------------------------------------------------------
 (2) _LCD_write                                            1     1      0  223863
                                             42 COMRAM     1     1      0
                           _LCD_send
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             1     1      0  895148
                                             43 COMRAM     1     1      0
                         _LCD_BL_SET
                          _LCD_clear
                        _LCD_command
                        _LCD_display
                     _LCD_write4bits
 ---------------------------------------------------------------------------------
 (2) _LCD_display                                          0     0      0  223863
                        _LCD_command
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            0     0      0  223863
                        _LCD_command
 ---------------------------------------------------------------------------------
 (2) _LCD_command                                          1     1      0  223863
                                             42 COMRAM     1     1      0
                           _LCD_send
 ---------------------------------------------------------------------------------
 (3) _LCD_send                                             2     1      1  223832
                                             40 COMRAM     2     1      1
                         _LCD_RS_SET
                     _LCD_write4bits
 ---------------------------------------------------------------------------------
 (4) _LCD_write4bits                                       2     2      0  111795
                                             38 COMRAM     2     2      0
                    _LCD_pulseEnable
 ---------------------------------------------------------------------------------
 (5) _LCD_pulseEnable                                      0     0      0  111764
                         _LCD_EN_SET
 ---------------------------------------------------------------------------------
 (6) _LCD_EN_SET                                           1     1      0  111764
                                             37 COMRAM     1     1      0
                       _LCD_writeI2C
 ---------------------------------------------------------------------------------
 (4) _LCD_RS_SET                                           1     1      0  111764
                                             37 COMRAM     1     1      0
                       _LCD_writeI2C
 ---------------------------------------------------------------------------------
 (2) _LCD_BL_SET                                           1     1      0  111764
                                             37 COMRAM     1     1      0
                       _LCD_writeI2C
 ---------------------------------------------------------------------------------
 (7) _LCD_writeI2C                                         0     0      0  111733
                    _i2c_writeNBytes
 ---------------------------------------------------------------------------------
 (2) _i2c_writeNBytes                                      5     1      4  111733
                                             32 COMRAM     5     1      4
                          _i2c_close
                    _i2c_masterWrite
                           _i2c_open
         _i2c_setAddressNACKCallback
                      _i2c_setBuffer
 ---------------------------------------------------------------------------------
 (3) _i2c_setAddressNACKCallback                           5     0      5    2259
                                             27 COMRAM     5     0      5
                        _setCallBack
 ---------------------------------------------------------------------------------
 (3) _i2c_open                                             2     2      0     310
                                             24 COMRAM     2     2      0
                   _i2c1_driver_open
     _i2c1_driver_setBusCollisionISR
              _i2c1_driver_setI2cISR
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_setI2cISR                                3     0      3     121
                                             21 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_setBusCollisionISR                       3     0      3     121
                                             21 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_masterWrite                                      0     0      0  106092
                _i2c_masterOperation
 ---------------------------------------------------------------------------------
 (4) _i2c_masterOperation                                  2     2      0  106092
                                             24 COMRAM     2     2      0
                  _i2c1_driver_start
                         _i2c_poller
                 _mssp1_IRQisEnabled
 ---------------------------------------------------------------------------------
 (5) _mssp1_IRQisEnabled                                   1     1      0       0
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _i2c_poller                                           0     0      0  106024
                            _i2c_ISR
                 _mssp1_waitForEvent
 ---------------------------------------------------------------------------------
 (6) _mssp1_waitForEvent                                   2     0      2      90
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _i2c_ISR                                              0     0      0  105934
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX_EMPTY                                      0     0      0   26451
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
                       _mssp1_setIRQ
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _mssp1_setIRQ                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_TX                                            2     2      0   26519
                                             22 COMRAM     2     2      0
                   Absolute function *
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_TXData
                 _i2c1_driver_isNACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (7) _i2c1_driver_isNACK                                   1     1      0       0
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_WRITE                            0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART_READ                             0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_WRITE                                0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (7) _do_I2C_SEND_ADR_READ                                 0     0      0      31
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_TXData                                   1     1      0      31
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RX                                            0     0      0   26451
                   Absolute function *
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
              _i2c1_driver_getRXData
                _i2c1_driver_sendACK
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_STOP                                  0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (8) _do_I2C_DO_NACK_RESTART                               0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (9) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RESET                                         0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_resetBus                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_RCEN                                          0     0      0       0
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ADDRESS_NACK                               0     0      0   26451
                   Absolute function *
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                   _i2c_restartWrite *
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
                        _returnReset *
                         _returnStop *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _wr2RegCompleteHandler                                2     0      2    5232
                                             32 COMRAM     2     0      2
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr1RegCompleteHandler                                2     0      2    5232
                                             32 COMRAM     2     0      2
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _returnStop                                           2     0      2     108
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _returnReset                                          2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _rdBlkRegCompleteHandler                              2     0      2    5415
                                             32 COMRAM     2     0      2
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd2RegCompleteHandler                                2     0      2    5232
                                             32 COMRAM     2     0      2
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd1RegCompleteHandler                                2     0      2    5232
                                             32 COMRAM     2     0      2
                      _i2c_setBuffer
        _i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _i2c_setDataCompleteCallback                          5     0      5    2979
                                             27 COMRAM     5     0      5
                        _setCallBack
 ---------------------------------------------------------------------------------
 (4) _setCallBack                                          6     1      5    1117
                                             21 COMRAM     6     1      5
 ---------------------------------------------------------------------------------
 (3) _i2c_setBuffer                                        4     0      4    2222
                                             21 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (8) _i2c_restartWrite                                     2     0      2       0
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_STOP                                     0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (9) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _do_I2C_SEND_RESTART                                  0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (9) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (21) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (7) _do_I2C_DO_ACK                                        0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (8) _i2c1_driver_sendACK                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_close                                            1     1      0      37
                                             21 COMRAM     1     1      0
                     _mssp1_clearIRQ
                   _mssp1_disableIRQ
 ---------------------------------------------------------------------------------
 (4) _mssp1_disableIRQ                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _mssp1_clearIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 21
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (18) _INTERRUPT_InterruptManager                         18    18      0   17327
                                              3 COMRAM    18    18      0
                   Absolute function *
                _i2c_busCollisionISR *
                          i2_i2c_ISR *
 ---------------------------------------------------------------------------------
 (19) i2_i2c_ISR                                           0     0      0   17327
                    i2_do_I2C_DO_ACK *
           i2_do_I2C_DO_ADDRESS_NACK *
           i2_do_I2C_DO_NACK_RESTART *
              i2_do_I2C_DO_NACK_STOP *
                      i2_do_I2C_IDLE *
                      i2_do_I2C_RCEN *
                     i2_do_I2C_RESET *
                        i2_do_I2C_RX *
             i2_do_I2C_SEND_ADR_READ *
            i2_do_I2C_SEND_ADR_WRITE *
              i2_do_I2C_SEND_RESTART *
         i2_do_I2C_SEND_RESTART_READ *
        i2_do_I2C_SEND_RESTART_WRITE *
                 i2_do_I2C_SEND_STOP *
                        i2_do_I2C_TX *
                  i2_do_I2C_TX_EMPTY *
               i2_i2c1_driver_isNACK
                   i2_mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (20) i2_mssp1_clearIRQ                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i2_do_I2C_TX_EMPTY                                   0     0      0    4306
                   Absolute function *
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                 i2_i2c_restartWrite *
                     i2_mssp1_setIRQ
            i2_rd1RegCompleteHandler *
            i2_rd2RegCompleteHandler *
          i2_rdBlkRegCompleteHandler *
                      i2_returnReset *
                       i2_returnStop *
            i2_wr1RegCompleteHandler *
            i2_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (21) i2_mssp1_setIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i2_do_I2C_TX                                         2     2      0    4365
                                              1 COMRAM     2     2      0
                   Absolute function *
         i2_do_I2C_SEND_RESTART_READ
        i2_do_I2C_SEND_RESTART_WRITE
                 i2_do_I2C_SEND_STOP
               i2_i2c1_driver_TXData
               i2_i2c1_driver_isNACK
                 i2_i2c_restartWrite *
            i2_rd1RegCompleteHandler *
            i2_rd2RegCompleteHandler *
          i2_rdBlkRegCompleteHandler *
                      i2_returnReset *
                       i2_returnStop *
            i2_wr1RegCompleteHandler *
            i2_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (20) i2_i2c1_driver_isNACK                                1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (21) i2_do_I2C_SEND_RESTART_WRITE                         0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (21) i2_do_I2C_SEND_RESTART_READ                          0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (20) i2_do_I2C_SEND_ADR_WRITE                             0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (20) i2_do_I2C_SEND_ADR_READ                              0     0      0      22
               i2_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (21) i2_i2c1_driver_TXData                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (20) i2_do_I2C_RX                                         0     0      0    4306
                   Absolute function *
           i2_do_I2C_DO_NACK_RESTART
              i2_do_I2C_DO_NACK_STOP
            i2_i2c1_driver_getRXData
              i2_i2c1_driver_sendACK
                 i2_i2c_restartWrite *
            i2_rd1RegCompleteHandler *
            i2_rd2RegCompleteHandler *
          i2_rdBlkRegCompleteHandler *
                      i2_returnReset *
                       i2_returnStop *
            i2_wr1RegCompleteHandler *
            i2_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (21) i2_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (21) i2_do_I2C_DO_NACK_STOP                               0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (21) i2_do_I2C_DO_NACK_RESTART                            0     0      0       0
             i2_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (22) i2_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i2_do_I2C_RESET                                      0     0      0       0
             i2_i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (21) i2_i2c1_driver_resetBus                              0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i2_do_I2C_RCEN                                       0     0      0       0
              i2_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (21) i2_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i2_do_I2C_IDLE                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i2_do_I2C_DO_ADDRESS_NACK                            0     0      0    4306
                   Absolute function *
              i2_do_I2C_SEND_RESTART
                 i2_do_I2C_SEND_STOP
                 i2_i2c_restartWrite *
            i2_rd1RegCompleteHandler *
            i2_rd2RegCompleteHandler *
          i2_rdBlkRegCompleteHandler *
                      i2_returnReset *
                       i2_returnStop *
            i2_wr1RegCompleteHandler *
            i2_wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (21) i2_wr2RegCompleteHandler                             2     0      2     836
                                             11 COMRAM     2     0      2
                    i2_i2c_setBuffer
      i2_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (21) i2_wr1RegCompleteHandler                             2     0      2     836
                                             11 COMRAM     2     0      2
                    i2_i2c_setBuffer
      i2_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (21) i2_returnStop                                        2     0      2      76
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (21) i2_returnReset                                       2     0      2       0
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (21) i2_rdBlkRegCompleteHandler                           2     0      2     886
                                             11 COMRAM     2     0      2
                    i2_i2c_setBuffer
      i2_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (21) i2_rd2RegCompleteHandler                             2     0      2     836
                                             11 COMRAM     2     0      2
                    i2_i2c_setBuffer
      i2_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (21) i2_rd1RegCompleteHandler                             2     0      2     836
                                             11 COMRAM     2     0      2
                    i2_i2c_setBuffer
      i2_i2c_setDataCompleteCallback
 ---------------------------------------------------------------------------------
 (22) i2_i2c_setDataCompleteCallback                       5     0      5     510
                                              6 COMRAM     5     0      5
                      i2_setCallBack
 ---------------------------------------------------------------------------------
 (23) i2_setCallBack                                       6     1      5     206
                                              0 COMRAM     6     1      5
 ---------------------------------------------------------------------------------
 (22) i2_i2c_setBuffer                                     4     0      4     304
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (21) i2_i2c_restartWrite                                  2     0      2       0
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (21) i2_do_I2C_SEND_STOP                                  0     0      0       0
                 i2_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (22) i2_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (21) i2_do_I2C_SEND_RESTART                               0     0      0       0
              i2_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (22) i2_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (21) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (20) i2_do_I2C_DO_ACK                                     0     0      0       0
              i2_i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (21) i2_i2c1_driver_sendACK                               0     0      0       0
 ---------------------------------------------------------------------------------
 (19) _i2c_busCollisionISR                                 0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (20) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 23
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_init
     _LCD_BL_SET
       _LCD_writeI2C
         _i2c_writeNBytes
           _i2c_close
             _mssp1_clearIRQ
             _mssp1_disableIRQ
           _i2c_masterWrite
             _i2c_masterOperation
               _i2c1_driver_start
               _i2c_poller
                 _i2c_ISR
                   _do_I2C_DO_ACK *
                     _i2c1_driver_sendACK
                   _do_I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_DO_NACK_RESTART *
                     _i2c1_driver_sendNACK
                   _do_I2C_DO_NACK_STOP *
                     _i2c1_driver_sendNACK
                   _do_I2C_IDLE *
                   _do_I2C_RCEN *
                     _i2c1_driver_startRX
                   _do_I2C_RESET *
                     _i2c1_driver_resetBus
                   _do_I2C_RX *
                     Absolute function(Fake) *
                     _do_I2C_DO_NACK_RESTART *
                       _i2c1_driver_sendNACK
                     _do_I2C_DO_NACK_STOP *
                       _i2c1_driver_sendNACK
                     _i2c1_driver_getRXData *
                     _i2c1_driver_sendACK *
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_SEND_ADR_READ *
                     _i2c1_driver_TXData
                   _do_I2C_SEND_ADR_WRITE *
                     _i2c1_driver_TXData
                   _do_I2C_SEND_RESTART *
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_READ *
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_WRITE *
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c1_driver_stop
                   _do_I2C_TX *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART_READ *
                       _i2c1_driver_restart
                     _do_I2C_SEND_RESTART_WRITE *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c1_driver_TXData *
                     _i2c1_driver_isNACK *
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_TX_EMPTY *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c_restartWrite *
                     _mssp1_setIRQ *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _i2c1_driver_isNACK *
                   _mssp1_clearIRQ *
                 _mssp1_waitForEvent
               _mssp1_IRQisEnabled
           _i2c_open
             _i2c1_driver_open
             _i2c1_driver_setBusCollisionISR
             _i2c1_driver_setI2cISR
             _mssp1_clearIRQ
           _i2c_setAddressNACKCallback
             _setCallBack
           _i2c_setBuffer
     _LCD_clear
       _LCD_command
         _LCD_send
           _LCD_RS_SET
             _LCD_writeI2C
               _i2c_writeNBytes
                 _i2c_close
                   _mssp1_clearIRQ
                   _mssp1_disableIRQ
                 _i2c_masterWrite
                   _i2c_masterOperation
                     _i2c1_driver_start
                     _i2c_poller
                       _i2c_ISR
                         _do_I2C_DO_ACK *
                           _i2c1_driver_sendACK
                         _do_I2C_DO_ADDRESS_NACK *
                           Absolute function(Fake) *
                           _do_I2C_SEND_RESTART *
                             _i2c1_driver_restart
                           _do_I2C_SEND_STOP *
                             _i2c1_driver_stop
                           _i2c_restartWrite *
                           _rd1RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _rd2RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _rdBlkRegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _returnReset *
                           _returnStop *
                           _wr1RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _wr2RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                         _do_I2C_DO_NACK_RESTART *
                           _i2c1_driver_sendNACK
                         _do_I2C_DO_NACK_STOP *
                           _i2c1_driver_sendNACK
                         _do_I2C_IDLE *
                         _do_I2C_RCEN *
                           _i2c1_driver_startRX
                         _do_I2C_RESET *
                           _i2c1_driver_resetBus
                         _do_I2C_RX *
                           Absolute function(Fake) *
                           _do_I2C_DO_NACK_RESTART *
                             _i2c1_driver_sendNACK
                           _do_I2C_DO_NACK_STOP *
                             _i2c1_driver_sendNACK
                           _i2c1_driver_getRXData *
                           _i2c1_driver_sendACK *
                           _i2c_restartWrite *
                           _rd1RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _rd2RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _rdBlkRegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _returnReset *
                           _returnStop *
                           _wr1RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _wr2RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                         _do_I2C_SEND_ADR_READ *
                           _i2c1_driver_TXData
                         _do_I2C_SEND_ADR_WRITE *
                           _i2c1_driver_TXData
                         _do_I2C_SEND_RESTART *
                           _i2c1_driver_restart
                         _do_I2C_SEND_RESTART_READ *
                           _i2c1_driver_restart
                         _do_I2C_SEND_RESTART_WRITE *
                           _i2c1_driver_restart
                         _do_I2C_SEND_STOP *
                           _i2c1_driver_stop
                         _do_I2C_TX *
                           Absolute function(Fake) *
                           _do_I2C_SEND_RESTART_READ *
                             _i2c1_driver_restart
                           _do_I2C_SEND_RESTART_WRITE *
                             _i2c1_driver_restart
                           _do_I2C_SEND_STOP *
                             _i2c1_driver_stop
                           _i2c1_driver_TXData *
                           _i2c1_driver_isNACK *
                           _i2c_restartWrite *
                           _rd1RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _rd2RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _rdBlkRegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _returnReset *
                           _returnStop *
                           _wr1RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _wr2RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                         _do_I2C_TX_EMPTY *
                           Absolute function(Fake) *
                           _do_I2C_SEND_RESTART *
                             _i2c1_driver_restart
                           _do_I2C_SEND_STOP *
                             _i2c1_driver_stop
                           _i2c_restartWrite *
                           _mssp1_setIRQ *
                           _rd1RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _rd2RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _rdBlkRegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _returnReset *
                           _returnStop *
                           _wr1RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _wr2RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                         _i2c1_driver_isNACK *
                         _mssp1_clearIRQ *
                       _mssp1_waitForEvent
                     _mssp1_IRQisEnabled
                 _i2c_open
                   _i2c1_driver_open
                   _i2c1_driver_setBusCollisionISR
                   _i2c1_driver_setI2cISR
                   _mssp1_clearIRQ
                 _i2c_setAddressNACKCallback
                   _setCallBack
                 _i2c_setBuffer
           _LCD_write4bits
             _LCD_pulseEnable
               _LCD_EN_SET
                 _LCD_writeI2C
                   _i2c_writeNBytes
                     _i2c_close
                       _mssp1_clearIRQ
                       _mssp1_disableIRQ
                     _i2c_masterWrite
                       _i2c_masterOperation
                         _i2c1_driver_start
                         _i2c_poller
                           _i2c_ISR
                             _do_I2C_DO_ACK *
                               _i2c1_driver_sendACK
                             _do_I2C_DO_ADDRESS_NACK *
                               Absolute function(Fake) *
                               _do_I2C_SEND_RESTART *
                                 _i2c1_driver_restart
                               _do_I2C_SEND_STOP *
                                 _i2c1_driver_stop
                               _i2c_restartWrite *
                               _rd1RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _rd2RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _rdBlkRegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _returnReset *
                               _returnStop *
                               _wr1RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _wr2RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                             _do_I2C_DO_NACK_RESTART *
                               _i2c1_driver_sendNACK
                             _do_I2C_DO_NACK_STOP *
                               _i2c1_driver_sendNACK
                             _do_I2C_IDLE *
                             _do_I2C_RCEN *
                               _i2c1_driver_startRX
                             _do_I2C_RESET *
                               _i2c1_driver_resetBus
                             _do_I2C_RX *
                               Absolute function(Fake) *
                               _do_I2C_DO_NACK_RESTART *
                                 _i2c1_driver_sendNACK
                               _do_I2C_DO_NACK_STOP *
                                 _i2c1_driver_sendNACK
                               _i2c1_driver_getRXData *
                               _i2c1_driver_sendACK *
                               _i2c_restartWrite *
                               _rd1RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _rd2RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _rdBlkRegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _returnReset *
                               _returnStop *
                               _wr1RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _wr2RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                             _do_I2C_SEND_ADR_READ *
                               _i2c1_driver_TXData
                             _do_I2C_SEND_ADR_WRITE *
                               _i2c1_driver_TXData
                             _do_I2C_SEND_RESTART *
                               _i2c1_driver_restart
                             _do_I2C_SEND_RESTART_READ *
                               _i2c1_driver_restart
                             _do_I2C_SEND_RESTART_WRITE *
                               _i2c1_driver_restart
                             _do_I2C_SEND_STOP *
                               _i2c1_driver_stop
                             _do_I2C_TX *
                               Absolute function(Fake) *
                               _do_I2C_SEND_RESTART_READ *
                                 _i2c1_driver_restart
                               _do_I2C_SEND_RESTART_WRITE *
                                 _i2c1_driver_restart
                               _do_I2C_SEND_STOP *
                                 _i2c1_driver_stop
                               _i2c1_driver_TXData *
                               _i2c1_driver_isNACK *
                               _i2c_restartWrite *
                               _rd1RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _rd2RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _rdBlkRegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _returnReset *
                               _returnStop *
                               _wr1RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _wr2RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                             _do_I2C_TX_EMPTY *
                               Absolute function(Fake) *
                               _do_I2C_SEND_RESTART *
                                 _i2c1_driver_restart
                               _do_I2C_SEND_STOP *
                                 _i2c1_driver_stop
                               _i2c_restartWrite *
                               _mssp1_setIRQ *
                               _rd1RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _rd2RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _rdBlkRegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _returnReset *
                               _returnStop *
                               _wr1RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _wr2RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                             _i2c1_driver_isNACK *
                             _mssp1_clearIRQ *
                           _mssp1_waitForEvent
                         _mssp1_IRQisEnabled
                     _i2c_open
                       _i2c1_driver_open
                       _i2c1_driver_setBusCollisionISR
                       _i2c1_driver_setI2cISR
                       _mssp1_clearIRQ
                     _i2c_setAddressNACKCallback
                       _setCallBack
                     _i2c_setBuffer
     _LCD_command
       _LCD_send
         _LCD_RS_SET
           _LCD_writeI2C
             _i2c_writeNBytes
               _i2c_close
                 _mssp1_clearIRQ
                 _mssp1_disableIRQ
               _i2c_masterWrite
                 _i2c_masterOperation
                   _i2c1_driver_start
                   _i2c_poller
                     _i2c_ISR
                       _do_I2C_DO_ACK *
                         _i2c1_driver_sendACK
                       _do_I2C_DO_ADDRESS_NACK *
                         Absolute function(Fake) *
                         _do_I2C_SEND_RESTART *
                           _i2c1_driver_restart
                         _do_I2C_SEND_STOP *
                           _i2c1_driver_stop
                         _i2c_restartWrite *
                         _rd1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rd2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rdBlkRegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _returnReset *
                         _returnStop *
                         _wr1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _wr2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                       _do_I2C_DO_NACK_RESTART *
                         _i2c1_driver_sendNACK
                       _do_I2C_DO_NACK_STOP *
                         _i2c1_driver_sendNACK
                       _do_I2C_IDLE *
                       _do_I2C_RCEN *
                         _i2c1_driver_startRX
                       _do_I2C_RESET *
                         _i2c1_driver_resetBus
                       _do_I2C_RX *
                         Absolute function(Fake) *
                         _do_I2C_DO_NACK_RESTART *
                           _i2c1_driver_sendNACK
                         _do_I2C_DO_NACK_STOP *
                           _i2c1_driver_sendNACK
                         _i2c1_driver_getRXData *
                         _i2c1_driver_sendACK *
                         _i2c_restartWrite *
                         _rd1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rd2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rdBlkRegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _returnReset *
                         _returnStop *
                         _wr1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _wr2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                       _do_I2C_SEND_ADR_READ *
                         _i2c1_driver_TXData
                       _do_I2C_SEND_ADR_WRITE *
                         _i2c1_driver_TXData
                       _do_I2C_SEND_RESTART *
                         _i2c1_driver_restart
                       _do_I2C_SEND_RESTART_READ *
                         _i2c1_driver_restart
                       _do_I2C_SEND_RESTART_WRITE *
                         _i2c1_driver_restart
                       _do_I2C_SEND_STOP *
                         _i2c1_driver_stop
                       _do_I2C_TX *
                         Absolute function(Fake) *
                         _do_I2C_SEND_RESTART_READ *
                           _i2c1_driver_restart
                         _do_I2C_SEND_RESTART_WRITE *
                           _i2c1_driver_restart
                         _do_I2C_SEND_STOP *
                           _i2c1_driver_stop
                         _i2c1_driver_TXData *
                         _i2c1_driver_isNACK *
                         _i2c_restartWrite *
                         _rd1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rd2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rdBlkRegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _returnReset *
                         _returnStop *
                         _wr1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _wr2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                       _do_I2C_TX_EMPTY *
                         Absolute function(Fake) *
                         _do_I2C_SEND_RESTART *
                           _i2c1_driver_restart
                         _do_I2C_SEND_STOP *
                           _i2c1_driver_stop
                         _i2c_restartWrite *
                         _mssp1_setIRQ *
                         _rd1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rd2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rdBlkRegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _returnReset *
                         _returnStop *
                         _wr1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _wr2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                       _i2c1_driver_isNACK *
                       _mssp1_clearIRQ *
                     _mssp1_waitForEvent
                   _mssp1_IRQisEnabled
               _i2c_open
                 _i2c1_driver_open
                 _i2c1_driver_setBusCollisionISR
                 _i2c1_driver_setI2cISR
                 _mssp1_clearIRQ
               _i2c_setAddressNACKCallback
                 _setCallBack
               _i2c_setBuffer
         _LCD_write4bits
           _LCD_pulseEnable
             _LCD_EN_SET
               _LCD_writeI2C
                 _i2c_writeNBytes
                   _i2c_close
                     _mssp1_clearIRQ
                     _mssp1_disableIRQ
                   _i2c_masterWrite
                     _i2c_masterOperation
                       _i2c1_driver_start
                       _i2c_poller
                         _i2c_ISR
                           _do_I2C_DO_ACK *
                             _i2c1_driver_sendACK
                           _do_I2C_DO_ADDRESS_NACK *
                             Absolute function(Fake) *
                             _do_I2C_SEND_RESTART *
                               _i2c1_driver_restart
                             _do_I2C_SEND_STOP *
                               _i2c1_driver_stop
                             _i2c_restartWrite *
                             _rd1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rd2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rdBlkRegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _returnReset *
                             _returnStop *
                             _wr1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _wr2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                           _do_I2C_DO_NACK_RESTART *
                             _i2c1_driver_sendNACK
                           _do_I2C_DO_NACK_STOP *
                             _i2c1_driver_sendNACK
                           _do_I2C_IDLE *
                           _do_I2C_RCEN *
                             _i2c1_driver_startRX
                           _do_I2C_RESET *
                             _i2c1_driver_resetBus
                           _do_I2C_RX *
                             Absolute function(Fake) *
                             _do_I2C_DO_NACK_RESTART *
                               _i2c1_driver_sendNACK
                             _do_I2C_DO_NACK_STOP *
                               _i2c1_driver_sendNACK
                             _i2c1_driver_getRXData *
                             _i2c1_driver_sendACK *
                             _i2c_restartWrite *
                             _rd1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rd2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rdBlkRegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _returnReset *
                             _returnStop *
                             _wr1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _wr2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                           _do_I2C_SEND_ADR_READ *
                             _i2c1_driver_TXData
                           _do_I2C_SEND_ADR_WRITE *
                             _i2c1_driver_TXData
                           _do_I2C_SEND_RESTART *
                             _i2c1_driver_restart
                           _do_I2C_SEND_RESTART_READ *
                             _i2c1_driver_restart
                           _do_I2C_SEND_RESTART_WRITE *
                             _i2c1_driver_restart
                           _do_I2C_SEND_STOP *
                             _i2c1_driver_stop
                           _do_I2C_TX *
                             Absolute function(Fake) *
                             _do_I2C_SEND_RESTART_READ *
                               _i2c1_driver_restart
                             _do_I2C_SEND_RESTART_WRITE *
                               _i2c1_driver_restart
                             _do_I2C_SEND_STOP *
                               _i2c1_driver_stop
                             _i2c1_driver_TXData *
                             _i2c1_driver_isNACK *
                             _i2c_restartWrite *
                             _rd1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rd2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rdBlkRegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _returnReset *
                             _returnStop *
                             _wr1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _wr2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                           _do_I2C_TX_EMPTY *
                             Absolute function(Fake) *
                             _do_I2C_SEND_RESTART *
                               _i2c1_driver_restart
                             _do_I2C_SEND_STOP *
                               _i2c1_driver_stop
                             _i2c_restartWrite *
                             _mssp1_setIRQ *
                             _rd1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rd2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rdBlkRegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _returnReset *
                             _returnStop *
                             _wr1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _wr2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                           _i2c1_driver_isNACK *
                           _mssp1_clearIRQ *
                         _mssp1_waitForEvent
                       _mssp1_IRQisEnabled
                   _i2c_open
                     _i2c1_driver_open
                     _i2c1_driver_setBusCollisionISR
                     _i2c1_driver_setI2cISR
                     _mssp1_clearIRQ
                   _i2c_setAddressNACKCallback
                     _setCallBack
                   _i2c_setBuffer
     _LCD_display
       _LCD_command
         _LCD_send
           _LCD_RS_SET
             _LCD_writeI2C
               _i2c_writeNBytes
                 _i2c_close
                   _mssp1_clearIRQ
                   _mssp1_disableIRQ
                 _i2c_masterWrite
                   _i2c_masterOperation
                     _i2c1_driver_start
                     _i2c_poller
                       _i2c_ISR
                         _do_I2C_DO_ACK *
                           _i2c1_driver_sendACK
                         _do_I2C_DO_ADDRESS_NACK *
                           Absolute function(Fake) *
                           _do_I2C_SEND_RESTART *
                             _i2c1_driver_restart
                           _do_I2C_SEND_STOP *
                             _i2c1_driver_stop
                           _i2c_restartWrite *
                           _rd1RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _rd2RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _rdBlkRegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _returnReset *
                           _returnStop *
                           _wr1RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _wr2RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                         _do_I2C_DO_NACK_RESTART *
                           _i2c1_driver_sendNACK
                         _do_I2C_DO_NACK_STOP *
                           _i2c1_driver_sendNACK
                         _do_I2C_IDLE *
                         _do_I2C_RCEN *
                           _i2c1_driver_startRX
                         _do_I2C_RESET *
                           _i2c1_driver_resetBus
                         _do_I2C_RX *
                           Absolute function(Fake) *
                           _do_I2C_DO_NACK_RESTART *
                             _i2c1_driver_sendNACK
                           _do_I2C_DO_NACK_STOP *
                             _i2c1_driver_sendNACK
                           _i2c1_driver_getRXData *
                           _i2c1_driver_sendACK *
                           _i2c_restartWrite *
                           _rd1RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _rd2RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _rdBlkRegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _returnReset *
                           _returnStop *
                           _wr1RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _wr2RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                         _do_I2C_SEND_ADR_READ *
                           _i2c1_driver_TXData
                         _do_I2C_SEND_ADR_WRITE *
                           _i2c1_driver_TXData
                         _do_I2C_SEND_RESTART *
                           _i2c1_driver_restart
                         _do_I2C_SEND_RESTART_READ *
                           _i2c1_driver_restart
                         _do_I2C_SEND_RESTART_WRITE *
                           _i2c1_driver_restart
                         _do_I2C_SEND_STOP *
                           _i2c1_driver_stop
                         _do_I2C_TX *
                           Absolute function(Fake) *
                           _do_I2C_SEND_RESTART_READ *
                             _i2c1_driver_restart
                           _do_I2C_SEND_RESTART_WRITE *
                             _i2c1_driver_restart
                           _do_I2C_SEND_STOP *
                             _i2c1_driver_stop
                           _i2c1_driver_TXData *
                           _i2c1_driver_isNACK *
                           _i2c_restartWrite *
                           _rd1RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _rd2RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _rdBlkRegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _returnReset *
                           _returnStop *
                           _wr1RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _wr2RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                         _do_I2C_TX_EMPTY *
                           Absolute function(Fake) *
                           _do_I2C_SEND_RESTART *
                             _i2c1_driver_restart
                           _do_I2C_SEND_STOP *
                             _i2c1_driver_stop
                           _i2c_restartWrite *
                           _mssp1_setIRQ *
                           _rd1RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _rd2RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _rdBlkRegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _returnReset *
                           _returnStop *
                           _wr1RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                           _wr2RegCompleteHandler *
                             _i2c_setBuffer
                             _i2c_setDataCompleteCallback
                               _setCallBack
                         _i2c1_driver_isNACK *
                         _mssp1_clearIRQ *
                       _mssp1_waitForEvent
                     _mssp1_IRQisEnabled
                 _i2c_open
                   _i2c1_driver_open
                   _i2c1_driver_setBusCollisionISR
                   _i2c1_driver_setI2cISR
                   _mssp1_clearIRQ
                 _i2c_setAddressNACKCallback
                   _setCallBack
                 _i2c_setBuffer
           _LCD_write4bits
             _LCD_pulseEnable
               _LCD_EN_SET
                 _LCD_writeI2C
                   _i2c_writeNBytes
                     _i2c_close
                       _mssp1_clearIRQ
                       _mssp1_disableIRQ
                     _i2c_masterWrite
                       _i2c_masterOperation
                         _i2c1_driver_start
                         _i2c_poller
                           _i2c_ISR
                             _do_I2C_DO_ACK *
                               _i2c1_driver_sendACK
                             _do_I2C_DO_ADDRESS_NACK *
                               Absolute function(Fake) *
                               _do_I2C_SEND_RESTART *
                                 _i2c1_driver_restart
                               _do_I2C_SEND_STOP *
                                 _i2c1_driver_stop
                               _i2c_restartWrite *
                               _rd1RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _rd2RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _rdBlkRegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _returnReset *
                               _returnStop *
                               _wr1RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _wr2RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                             _do_I2C_DO_NACK_RESTART *
                               _i2c1_driver_sendNACK
                             _do_I2C_DO_NACK_STOP *
                               _i2c1_driver_sendNACK
                             _do_I2C_IDLE *
                             _do_I2C_RCEN *
                               _i2c1_driver_startRX
                             _do_I2C_RESET *
                               _i2c1_driver_resetBus
                             _do_I2C_RX *
                               Absolute function(Fake) *
                               _do_I2C_DO_NACK_RESTART *
                                 _i2c1_driver_sendNACK
                               _do_I2C_DO_NACK_STOP *
                                 _i2c1_driver_sendNACK
                               _i2c1_driver_getRXData *
                               _i2c1_driver_sendACK *
                               _i2c_restartWrite *
                               _rd1RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _rd2RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _rdBlkRegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _returnReset *
                               _returnStop *
                               _wr1RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _wr2RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                             _do_I2C_SEND_ADR_READ *
                               _i2c1_driver_TXData
                             _do_I2C_SEND_ADR_WRITE *
                               _i2c1_driver_TXData
                             _do_I2C_SEND_RESTART *
                               _i2c1_driver_restart
                             _do_I2C_SEND_RESTART_READ *
                               _i2c1_driver_restart
                             _do_I2C_SEND_RESTART_WRITE *
                               _i2c1_driver_restart
                             _do_I2C_SEND_STOP *
                               _i2c1_driver_stop
                             _do_I2C_TX *
                               Absolute function(Fake) *
                               _do_I2C_SEND_RESTART_READ *
                                 _i2c1_driver_restart
                               _do_I2C_SEND_RESTART_WRITE *
                                 _i2c1_driver_restart
                               _do_I2C_SEND_STOP *
                                 _i2c1_driver_stop
                               _i2c1_driver_TXData *
                               _i2c1_driver_isNACK *
                               _i2c_restartWrite *
                               _rd1RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _rd2RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _rdBlkRegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _returnReset *
                               _returnStop *
                               _wr1RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _wr2RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                             _do_I2C_TX_EMPTY *
                               Absolute function(Fake) *
                               _do_I2C_SEND_RESTART *
                                 _i2c1_driver_restart
                               _do_I2C_SEND_STOP *
                                 _i2c1_driver_stop
                               _i2c_restartWrite *
                               _mssp1_setIRQ *
                               _rd1RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _rd2RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _rdBlkRegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _returnReset *
                               _returnStop *
                               _wr1RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                               _wr2RegCompleteHandler *
                                 _i2c_setBuffer
                                 _i2c_setDataCompleteCallback
                                   _setCallBack
                             _i2c1_driver_isNACK *
                             _mssp1_clearIRQ *
                           _mssp1_waitForEvent
                         _mssp1_IRQisEnabled
                     _i2c_open
                       _i2c1_driver_open
                       _i2c1_driver_setBusCollisionISR
                       _i2c1_driver_setI2cISR
                       _mssp1_clearIRQ
                     _i2c_setAddressNACKCallback
                       _setCallBack
                     _i2c_setBuffer
     _LCD_write4bits
       _LCD_pulseEnable
         _LCD_EN_SET
           _LCD_writeI2C
             _i2c_writeNBytes
               _i2c_close
                 _mssp1_clearIRQ
                 _mssp1_disableIRQ
               _i2c_masterWrite
                 _i2c_masterOperation
                   _i2c1_driver_start
                   _i2c_poller
                     _i2c_ISR
                       _do_I2C_DO_ACK *
                         _i2c1_driver_sendACK
                       _do_I2C_DO_ADDRESS_NACK *
                         Absolute function(Fake) *
                         _do_I2C_SEND_RESTART *
                           _i2c1_driver_restart
                         _do_I2C_SEND_STOP *
                           _i2c1_driver_stop
                         _i2c_restartWrite *
                         _rd1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rd2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rdBlkRegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _returnReset *
                         _returnStop *
                         _wr1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _wr2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                       _do_I2C_DO_NACK_RESTART *
                         _i2c1_driver_sendNACK
                       _do_I2C_DO_NACK_STOP *
                         _i2c1_driver_sendNACK
                       _do_I2C_IDLE *
                       _do_I2C_RCEN *
                         _i2c1_driver_startRX
                       _do_I2C_RESET *
                         _i2c1_driver_resetBus
                       _do_I2C_RX *
                         Absolute function(Fake) *
                         _do_I2C_DO_NACK_RESTART *
                           _i2c1_driver_sendNACK
                         _do_I2C_DO_NACK_STOP *
                           _i2c1_driver_sendNACK
                         _i2c1_driver_getRXData *
                         _i2c1_driver_sendACK *
                         _i2c_restartWrite *
                         _rd1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rd2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rdBlkRegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _returnReset *
                         _returnStop *
                         _wr1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _wr2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                       _do_I2C_SEND_ADR_READ *
                         _i2c1_driver_TXData
                       _do_I2C_SEND_ADR_WRITE *
                         _i2c1_driver_TXData
                       _do_I2C_SEND_RESTART *
                         _i2c1_driver_restart
                       _do_I2C_SEND_RESTART_READ *
                         _i2c1_driver_restart
                       _do_I2C_SEND_RESTART_WRITE *
                         _i2c1_driver_restart
                       _do_I2C_SEND_STOP *
                         _i2c1_driver_stop
                       _do_I2C_TX *
                         Absolute function(Fake) *
                         _do_I2C_SEND_RESTART_READ *
                           _i2c1_driver_restart
                         _do_I2C_SEND_RESTART_WRITE *
                           _i2c1_driver_restart
                         _do_I2C_SEND_STOP *
                           _i2c1_driver_stop
                         _i2c1_driver_TXData *
                         _i2c1_driver_isNACK *
                         _i2c_restartWrite *
                         _rd1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rd2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rdBlkRegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _returnReset *
                         _returnStop *
                         _wr1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _wr2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                       _do_I2C_TX_EMPTY *
                         Absolute function(Fake) *
                         _do_I2C_SEND_RESTART *
                           _i2c1_driver_restart
                         _do_I2C_SEND_STOP *
                           _i2c1_driver_stop
                         _i2c_restartWrite *
                         _mssp1_setIRQ *
                         _rd1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rd2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rdBlkRegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _returnReset *
                         _returnStop *
                         _wr1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _wr2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                       _i2c1_driver_isNACK *
                       _mssp1_clearIRQ *
                     _mssp1_waitForEvent
                   _mssp1_IRQisEnabled
               _i2c_open
                 _i2c1_driver_open
                 _i2c1_driver_setBusCollisionISR
                 _i2c1_driver_setI2cISR
                 _mssp1_clearIRQ
               _i2c_setAddressNACKCallback
                 _setCallBack
               _i2c_setBuffer
   _LCD_print
     _LCD_write
       _LCD_send
         _LCD_RS_SET
           _LCD_writeI2C
             _i2c_writeNBytes
               _i2c_close
                 _mssp1_clearIRQ
                 _mssp1_disableIRQ
               _i2c_masterWrite
                 _i2c_masterOperation
                   _i2c1_driver_start
                   _i2c_poller
                     _i2c_ISR
                       _do_I2C_DO_ACK *
                         _i2c1_driver_sendACK
                       _do_I2C_DO_ADDRESS_NACK *
                         Absolute function(Fake) *
                         _do_I2C_SEND_RESTART *
                           _i2c1_driver_restart
                         _do_I2C_SEND_STOP *
                           _i2c1_driver_stop
                         _i2c_restartWrite *
                         _rd1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rd2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rdBlkRegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _returnReset *
                         _returnStop *
                         _wr1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _wr2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                       _do_I2C_DO_NACK_RESTART *
                         _i2c1_driver_sendNACK
                       _do_I2C_DO_NACK_STOP *
                         _i2c1_driver_sendNACK
                       _do_I2C_IDLE *
                       _do_I2C_RCEN *
                         _i2c1_driver_startRX
                       _do_I2C_RESET *
                         _i2c1_driver_resetBus
                       _do_I2C_RX *
                         Absolute function(Fake) *
                         _do_I2C_DO_NACK_RESTART *
                           _i2c1_driver_sendNACK
                         _do_I2C_DO_NACK_STOP *
                           _i2c1_driver_sendNACK
                         _i2c1_driver_getRXData *
                         _i2c1_driver_sendACK *
                         _i2c_restartWrite *
                         _rd1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rd2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rdBlkRegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _returnReset *
                         _returnStop *
                         _wr1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _wr2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                       _do_I2C_SEND_ADR_READ *
                         _i2c1_driver_TXData
                       _do_I2C_SEND_ADR_WRITE *
                         _i2c1_driver_TXData
                       _do_I2C_SEND_RESTART *
                         _i2c1_driver_restart
                       _do_I2C_SEND_RESTART_READ *
                         _i2c1_driver_restart
                       _do_I2C_SEND_RESTART_WRITE *
                         _i2c1_driver_restart
                       _do_I2C_SEND_STOP *
                         _i2c1_driver_stop
                       _do_I2C_TX *
                         Absolute function(Fake) *
                         _do_I2C_SEND_RESTART_READ *
                           _i2c1_driver_restart
                         _do_I2C_SEND_RESTART_WRITE *
                           _i2c1_driver_restart
                         _do_I2C_SEND_STOP *
                           _i2c1_driver_stop
                         _i2c1_driver_TXData *
                         _i2c1_driver_isNACK *
                         _i2c_restartWrite *
                         _rd1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rd2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rdBlkRegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _returnReset *
                         _returnStop *
                         _wr1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _wr2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                       _do_I2C_TX_EMPTY *
                         Absolute function(Fake) *
                         _do_I2C_SEND_RESTART *
                           _i2c1_driver_restart
                         _do_I2C_SEND_STOP *
                           _i2c1_driver_stop
                         _i2c_restartWrite *
                         _mssp1_setIRQ *
                         _rd1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rd2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rdBlkRegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _returnReset *
                         _returnStop *
                         _wr1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _wr2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                       _i2c1_driver_isNACK *
                       _mssp1_clearIRQ *
                     _mssp1_waitForEvent
                   _mssp1_IRQisEnabled
               _i2c_open
                 _i2c1_driver_open
                 _i2c1_driver_setBusCollisionISR
                 _i2c1_driver_setI2cISR
                 _mssp1_clearIRQ
               _i2c_setAddressNACKCallback
                 _setCallBack
               _i2c_setBuffer
         _LCD_write4bits
           _LCD_pulseEnable
             _LCD_EN_SET
               _LCD_writeI2C
                 _i2c_writeNBytes
                   _i2c_close
                     _mssp1_clearIRQ
                     _mssp1_disableIRQ
                   _i2c_masterWrite
                     _i2c_masterOperation
                       _i2c1_driver_start
                       _i2c_poller
                         _i2c_ISR
                           _do_I2C_DO_ACK *
                             _i2c1_driver_sendACK
                           _do_I2C_DO_ADDRESS_NACK *
                             Absolute function(Fake) *
                             _do_I2C_SEND_RESTART *
                               _i2c1_driver_restart
                             _do_I2C_SEND_STOP *
                               _i2c1_driver_stop
                             _i2c_restartWrite *
                             _rd1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rd2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rdBlkRegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _returnReset *
                             _returnStop *
                             _wr1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _wr2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                           _do_I2C_DO_NACK_RESTART *
                             _i2c1_driver_sendNACK
                           _do_I2C_DO_NACK_STOP *
                             _i2c1_driver_sendNACK
                           _do_I2C_IDLE *
                           _do_I2C_RCEN *
                             _i2c1_driver_startRX
                           _do_I2C_RESET *
                             _i2c1_driver_resetBus
                           _do_I2C_RX *
                             Absolute function(Fake) *
                             _do_I2C_DO_NACK_RESTART *
                               _i2c1_driver_sendNACK
                             _do_I2C_DO_NACK_STOP *
                               _i2c1_driver_sendNACK
                             _i2c1_driver_getRXData *
                             _i2c1_driver_sendACK *
                             _i2c_restartWrite *
                             _rd1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rd2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rdBlkRegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _returnReset *
                             _returnStop *
                             _wr1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _wr2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                           _do_I2C_SEND_ADR_READ *
                             _i2c1_driver_TXData
                           _do_I2C_SEND_ADR_WRITE *
                             _i2c1_driver_TXData
                           _do_I2C_SEND_RESTART *
                             _i2c1_driver_restart
                           _do_I2C_SEND_RESTART_READ *
                             _i2c1_driver_restart
                           _do_I2C_SEND_RESTART_WRITE *
                             _i2c1_driver_restart
                           _do_I2C_SEND_STOP *
                             _i2c1_driver_stop
                           _do_I2C_TX *
                             Absolute function(Fake) *
                             _do_I2C_SEND_RESTART_READ *
                               _i2c1_driver_restart
                             _do_I2C_SEND_RESTART_WRITE *
                               _i2c1_driver_restart
                             _do_I2C_SEND_STOP *
                               _i2c1_driver_stop
                             _i2c1_driver_TXData *
                             _i2c1_driver_isNACK *
                             _i2c_restartWrite *
                             _rd1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rd2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rdBlkRegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _returnReset *
                             _returnStop *
                             _wr1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _wr2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                           _do_I2C_TX_EMPTY *
                             Absolute function(Fake) *
                             _do_I2C_SEND_RESTART *
                               _i2c1_driver_restart
                             _do_I2C_SEND_STOP *
                               _i2c1_driver_stop
                             _i2c_restartWrite *
                             _mssp1_setIRQ *
                             _rd1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rd2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rdBlkRegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _returnReset *
                             _returnStop *
                             _wr1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _wr2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                           _i2c1_driver_isNACK *
                           _mssp1_clearIRQ *
                         _mssp1_waitForEvent
                       _mssp1_IRQisEnabled
                   _i2c_open
                     _i2c1_driver_open
                     _i2c1_driver_setBusCollisionISR
                     _i2c1_driver_setI2cISR
                     _mssp1_clearIRQ
                   _i2c_setAddressNACKCallback
                     _setCallBack
                   _i2c_setBuffer
   _LCD_setCursor
     _LCD_command
       _LCD_send
         _LCD_RS_SET
           _LCD_writeI2C
             _i2c_writeNBytes
               _i2c_close
                 _mssp1_clearIRQ
                 _mssp1_disableIRQ
               _i2c_masterWrite
                 _i2c_masterOperation
                   _i2c1_driver_start
                   _i2c_poller
                     _i2c_ISR
                       _do_I2C_DO_ACK *
                         _i2c1_driver_sendACK
                       _do_I2C_DO_ADDRESS_NACK *
                         Absolute function(Fake) *
                         _do_I2C_SEND_RESTART *
                           _i2c1_driver_restart
                         _do_I2C_SEND_STOP *
                           _i2c1_driver_stop
                         _i2c_restartWrite *
                         _rd1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rd2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rdBlkRegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _returnReset *
                         _returnStop *
                         _wr1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _wr2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                       _do_I2C_DO_NACK_RESTART *
                         _i2c1_driver_sendNACK
                       _do_I2C_DO_NACK_STOP *
                         _i2c1_driver_sendNACK
                       _do_I2C_IDLE *
                       _do_I2C_RCEN *
                         _i2c1_driver_startRX
                       _do_I2C_RESET *
                         _i2c1_driver_resetBus
                       _do_I2C_RX *
                         Absolute function(Fake) *
                         _do_I2C_DO_NACK_RESTART *
                           _i2c1_driver_sendNACK
                         _do_I2C_DO_NACK_STOP *
                           _i2c1_driver_sendNACK
                         _i2c1_driver_getRXData *
                         _i2c1_driver_sendACK *
                         _i2c_restartWrite *
                         _rd1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rd2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rdBlkRegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _returnReset *
                         _returnStop *
                         _wr1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _wr2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                       _do_I2C_SEND_ADR_READ *
                         _i2c1_driver_TXData
                       _do_I2C_SEND_ADR_WRITE *
                         _i2c1_driver_TXData
                       _do_I2C_SEND_RESTART *
                         _i2c1_driver_restart
                       _do_I2C_SEND_RESTART_READ *
                         _i2c1_driver_restart
                       _do_I2C_SEND_RESTART_WRITE *
                         _i2c1_driver_restart
                       _do_I2C_SEND_STOP *
                         _i2c1_driver_stop
                       _do_I2C_TX *
                         Absolute function(Fake) *
                         _do_I2C_SEND_RESTART_READ *
                           _i2c1_driver_restart
                         _do_I2C_SEND_RESTART_WRITE *
                           _i2c1_driver_restart
                         _do_I2C_SEND_STOP *
                           _i2c1_driver_stop
                         _i2c1_driver_TXData *
                         _i2c1_driver_isNACK *
                         _i2c_restartWrite *
                         _rd1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rd2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rdBlkRegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _returnReset *
                         _returnStop *
                         _wr1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _wr2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                       _do_I2C_TX_EMPTY *
                         Absolute function(Fake) *
                         _do_I2C_SEND_RESTART *
                           _i2c1_driver_restart
                         _do_I2C_SEND_STOP *
                           _i2c1_driver_stop
                         _i2c_restartWrite *
                         _mssp1_setIRQ *
                         _rd1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rd2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _rdBlkRegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _returnReset *
                         _returnStop *
                         _wr1RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                         _wr2RegCompleteHandler *
                           _i2c_setBuffer
                           _i2c_setDataCompleteCallback
                             _setCallBack
                       _i2c1_driver_isNACK *
                       _mssp1_clearIRQ *
                     _mssp1_waitForEvent
                   _mssp1_IRQisEnabled
               _i2c_open
                 _i2c1_driver_open
                 _i2c1_driver_setBusCollisionISR
                 _i2c1_driver_setI2cISR
                 _mssp1_clearIRQ
               _i2c_setAddressNACKCallback
                 _setCallBack
               _i2c_setBuffer
         _LCD_write4bits
           _LCD_pulseEnable
             _LCD_EN_SET
               _LCD_writeI2C
                 _i2c_writeNBytes
                   _i2c_close
                     _mssp1_clearIRQ
                     _mssp1_disableIRQ
                   _i2c_masterWrite
                     _i2c_masterOperation
                       _i2c1_driver_start
                       _i2c_poller
                         _i2c_ISR
                           _do_I2C_DO_ACK *
                             _i2c1_driver_sendACK
                           _do_I2C_DO_ADDRESS_NACK *
                             Absolute function(Fake) *
                             _do_I2C_SEND_RESTART *
                               _i2c1_driver_restart
                             _do_I2C_SEND_STOP *
                               _i2c1_driver_stop
                             _i2c_restartWrite *
                             _rd1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rd2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rdBlkRegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _returnReset *
                             _returnStop *
                             _wr1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _wr2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                           _do_I2C_DO_NACK_RESTART *
                             _i2c1_driver_sendNACK
                           _do_I2C_DO_NACK_STOP *
                             _i2c1_driver_sendNACK
                           _do_I2C_IDLE *
                           _do_I2C_RCEN *
                             _i2c1_driver_startRX
                           _do_I2C_RESET *
                             _i2c1_driver_resetBus
                           _do_I2C_RX *
                             Absolute function(Fake) *
                             _do_I2C_DO_NACK_RESTART *
                               _i2c1_driver_sendNACK
                             _do_I2C_DO_NACK_STOP *
                               _i2c1_driver_sendNACK
                             _i2c1_driver_getRXData *
                             _i2c1_driver_sendACK *
                             _i2c_restartWrite *
                             _rd1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rd2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rdBlkRegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _returnReset *
                             _returnStop *
                             _wr1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _wr2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                           _do_I2C_SEND_ADR_READ *
                             _i2c1_driver_TXData
                           _do_I2C_SEND_ADR_WRITE *
                             _i2c1_driver_TXData
                           _do_I2C_SEND_RESTART *
                             _i2c1_driver_restart
                           _do_I2C_SEND_RESTART_READ *
                             _i2c1_driver_restart
                           _do_I2C_SEND_RESTART_WRITE *
                             _i2c1_driver_restart
                           _do_I2C_SEND_STOP *
                             _i2c1_driver_stop
                           _do_I2C_TX *
                             Absolute function(Fake) *
                             _do_I2C_SEND_RESTART_READ *
                               _i2c1_driver_restart
                             _do_I2C_SEND_RESTART_WRITE *
                               _i2c1_driver_restart
                             _do_I2C_SEND_STOP *
                               _i2c1_driver_stop
                             _i2c1_driver_TXData *
                             _i2c1_driver_isNACK *
                             _i2c_restartWrite *
                             _rd1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rd2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rdBlkRegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _returnReset *
                             _returnStop *
                             _wr1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _wr2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                           _do_I2C_TX_EMPTY *
                             Absolute function(Fake) *
                             _do_I2C_SEND_RESTART *
                               _i2c1_driver_restart
                             _do_I2C_SEND_STOP *
                               _i2c1_driver_stop
                             _i2c_restartWrite *
                             _mssp1_setIRQ *
                             _rd1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rd2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _rdBlkRegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _returnReset *
                             _returnStop *
                             _wr1RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                             _wr2RegCompleteHandler *
                               _i2c_setBuffer
                               _i2c_setDataCompleteCallback
                                 _setCallBack
                           _i2c1_driver_isNACK *
                           _mssp1_clearIRQ *
                         _mssp1_waitForEvent
                       _mssp1_IRQisEnabled
                   _i2c_open
                     _i2c1_driver_open
                     _i2c1_driver_setBusCollisionISR
                     _i2c1_driver_setI2cISR
                     _mssp1_clearIRQ
                   _i2c_setAddressNACKCallback
                     _setCallBack
                   _i2c_setBuffer
   _SYSTEM_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
   _XYZ_Init
     _XYZ_WriteReg
       _i2c_writeNBytes
         _i2c_close
           _mssp1_clearIRQ
           _mssp1_disableIRQ
         _i2c_masterWrite
           _i2c_masterOperation
             _i2c1_driver_start
             _i2c_poller
               _i2c_ISR
                 _do_I2C_DO_ACK *
                   _i2c1_driver_sendACK
                 _do_I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART *
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c1_driver_stop
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_DO_NACK_RESTART *
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c1_driver_sendNACK
                 _do_I2C_IDLE *
                 _do_I2C_RCEN *
                   _i2c1_driver_startRX
                 _do_I2C_RESET *
                   _i2c1_driver_resetBus
                 _do_I2C_RX *
                   Absolute function(Fake) *
                   _do_I2C_DO_NACK_RESTART *
                     _i2c1_driver_sendNACK
                   _do_I2C_DO_NACK_STOP *
                     _i2c1_driver_sendNACK
                   _i2c1_driver_getRXData *
                   _i2c1_driver_sendACK *
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_SEND_ADR_READ *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_ADR_WRITE *
                   _i2c1_driver_TXData
                 _do_I2C_SEND_RESTART *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_READ *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c1_driver_stop
                 _do_I2C_TX *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART_READ *
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_WRITE *
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c1_driver_stop
                   _i2c1_driver_TXData *
                   _i2c1_driver_isNACK *
                   _i2c_restartWrite *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _do_I2C_TX_EMPTY *
                   Absolute function(Fake) *
                   _do_I2C_SEND_RESTART *
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c1_driver_stop
                   _i2c_restartWrite *
                   _mssp1_setIRQ *
                   _rd1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rd2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _rdBlkRegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _returnReset *
                   _returnStop *
                   _wr1RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                   _wr2RegCompleteHandler *
                     _i2c_setBuffer
                     _i2c_setDataCompleteCallback
                       _setCallBack
                 _i2c1_driver_isNACK *
                 _mssp1_clearIRQ *
               _mssp1_waitForEvent
             _mssp1_IRQisEnabled
         _i2c_open
           _i2c1_driver_open
           _i2c1_driver_setBusCollisionISR
           _i2c1_driver_setI2cISR
           _mssp1_clearIRQ
         _i2c_setAddressNACKCallback
           _setCallBack
         _i2c_setBuffer
     _XYZ_setMode
       _XYZ_WriteReg
         _i2c_writeNBytes
           _i2c_close
             _mssp1_clearIRQ
             _mssp1_disableIRQ
           _i2c_masterWrite
             _i2c_masterOperation
               _i2c1_driver_start
               _i2c_poller
                 _i2c_ISR
                   _do_I2C_DO_ACK *
                     _i2c1_driver_sendACK
                   _do_I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_DO_NACK_RESTART *
                     _i2c1_driver_sendNACK
                   _do_I2C_DO_NACK_STOP *
                     _i2c1_driver_sendNACK
                   _do_I2C_IDLE *
                   _do_I2C_RCEN *
                     _i2c1_driver_startRX
                   _do_I2C_RESET *
                     _i2c1_driver_resetBus
                   _do_I2C_RX *
                     Absolute function(Fake) *
                     _do_I2C_DO_NACK_RESTART *
                       _i2c1_driver_sendNACK
                     _do_I2C_DO_NACK_STOP *
                       _i2c1_driver_sendNACK
                     _i2c1_driver_getRXData *
                     _i2c1_driver_sendACK *
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_SEND_ADR_READ *
                     _i2c1_driver_TXData
                   _do_I2C_SEND_ADR_WRITE *
                     _i2c1_driver_TXData
                   _do_I2C_SEND_RESTART *
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_READ *
                     _i2c1_driver_restart
                   _do_I2C_SEND_RESTART_WRITE *
                     _i2c1_driver_restart
                   _do_I2C_SEND_STOP *
                     _i2c1_driver_stop
                   _do_I2C_TX *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART_READ *
                       _i2c1_driver_restart
                     _do_I2C_SEND_RESTART_WRITE *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c1_driver_TXData *
                     _i2c1_driver_isNACK *
                     _i2c_restartWrite *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _do_I2C_TX_EMPTY *
                     Absolute function(Fake) *
                     _do_I2C_SEND_RESTART *
                       _i2c1_driver_restart
                     _do_I2C_SEND_STOP *
                       _i2c1_driver_stop
                     _i2c_restartWrite *
                     _mssp1_setIRQ *
                     _rd1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rd2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _rdBlkRegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _returnReset *
                     _returnStop *
                     _wr1RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                     _wr2RegCompleteHandler *
                       _i2c_setBuffer
                       _i2c_setDataCompleteCallback
                         _setCallBack
                   _i2c1_driver_isNACK *
                   _mssp1_clearIRQ *
                 _mssp1_waitForEvent
               _mssp1_IRQisEnabled
           _i2c_open
             _i2c1_driver_open
             _i2c1_driver_setBusCollisionISR
             _i2c1_driver_setI2cISR
             _mssp1_clearIRQ
           _i2c_setAddressNACKCallback
             _setCallBack
           _i2c_setBuffer
   _XYZ_Read
     _i2c_readNBytes
       _i2c_close
         _mssp1_clearIRQ
         _mssp1_disableIRQ
       _i2c_masterRead
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c1_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData *
                 _i2c1_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c1_driver_stop
                 _i2c1_driver_TXData *
                 _i2c1_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c1_driver_stop
                 _i2c_restartWrite *
                 _mssp1_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setBuffer
     _i2c_writeNBytes
       _i2c_close
         _mssp1_clearIRQ
         _mssp1_disableIRQ
       _i2c_masterWrite
         _i2c_masterOperation
           _i2c1_driver_start
           _i2c_poller
             _i2c_ISR
               _do_I2C_DO_ACK *
                 _i2c1_driver_sendACK
               _do_I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c1_driver_stop
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_DO_NACK_RESTART *
                 _i2c1_driver_sendNACK
               _do_I2C_DO_NACK_STOP *
                 _i2c1_driver_sendNACK
               _do_I2C_IDLE *
               _do_I2C_RCEN *
                 _i2c1_driver_startRX
               _do_I2C_RESET *
                 _i2c1_driver_resetBus
               _do_I2C_RX *
                 Absolute function(Fake) *
                 _do_I2C_DO_NACK_RESTART *
                   _i2c1_driver_sendNACK
                 _do_I2C_DO_NACK_STOP *
                   _i2c1_driver_sendNACK
                 _i2c1_driver_getRXData *
                 _i2c1_driver_sendACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_SEND_ADR_READ *
                 _i2c1_driver_TXData
               _do_I2C_SEND_ADR_WRITE *
                 _i2c1_driver_TXData
               _do_I2C_SEND_RESTART *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_READ *
                 _i2c1_driver_restart
               _do_I2C_SEND_RESTART_WRITE *
                 _i2c1_driver_restart
               _do_I2C_SEND_STOP *
                 _i2c1_driver_stop
               _do_I2C_TX *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART_READ *
                   _i2c1_driver_restart
                 _do_I2C_SEND_RESTART_WRITE *
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c1_driver_stop
                 _i2c1_driver_TXData *
                 _i2c1_driver_isNACK *
                 _i2c_restartWrite *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _do_I2C_TX_EMPTY *
                 Absolute function(Fake) *
                 _do_I2C_SEND_RESTART *
                   _i2c1_driver_restart
                 _do_I2C_SEND_STOP *
                   _i2c1_driver_stop
                 _i2c_restartWrite *
                 _mssp1_setIRQ *
                 _rd1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rd2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _rdBlkRegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _returnReset *
                 _returnStop *
                 _wr1RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
                 _wr2RegCompleteHandler *
                   _i2c_setBuffer
                   _i2c_setDataCompleteCallback
                     _setCallBack
               _i2c1_driver_isNACK *
               _mssp1_clearIRQ *
             _mssp1_waitForEvent
           _mssp1_IRQisEnabled
       _i2c_open
         _i2c1_driver_open
         _i2c1_driver_setBusCollisionISR
         _i2c1_driver_setI2cISR
         _mssp1_clearIRQ
       _i2c_setAddressNACKCallback
         _setCallBack
       _i2c_setBuffer
   _XYZ_azimuth
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _atan2
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge (ARG)
         _fabs (ARG)
           ___ftneg
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       _atan (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftge
           _fabs (ARG)
             ___ftneg
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _fabs
           ___ftneg
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
       _fabs (ARG)
         ___ftneg
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       _fabs (ARG)
         ___ftneg
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision
   i2_i2c_ISR *
     i2_do_I2C_DO_ACK *
       i2_i2c1_driver_sendACK
     i2_do_I2C_DO_ADDRESS_NACK *
       Absolute function(Fake) *
       i2_do_I2C_SEND_RESTART *
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP *
         i2_i2c1_driver_stop
       i2_i2c_restartWrite *
       i2_rd1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rd2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rdBlkRegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_returnReset *
       i2_returnStop *
       i2_wr1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_wr2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
     i2_do_I2C_DO_NACK_RESTART *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_DO_NACK_STOP *
       i2_i2c1_driver_sendNACK
     i2_do_I2C_IDLE *
     i2_do_I2C_RCEN *
       i2_i2c1_driver_startRX
     i2_do_I2C_RESET *
       i2_i2c1_driver_resetBus
     i2_do_I2C_RX *
       Absolute function(Fake) *
       i2_do_I2C_DO_NACK_RESTART *
         i2_i2c1_driver_sendNACK
       i2_do_I2C_DO_NACK_STOP *
         i2_i2c1_driver_sendNACK
       i2_i2c1_driver_getRXData *
       i2_i2c1_driver_sendACK *
       i2_i2c_restartWrite *
       i2_rd1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rd2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rdBlkRegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_returnReset *
       i2_returnStop *
       i2_wr1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_wr2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
     i2_do_I2C_SEND_ADR_READ *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_ADR_WRITE *
       i2_i2c1_driver_TXData
     i2_do_I2C_SEND_RESTART *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_READ *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_RESTART_WRITE *
       i2_i2c1_driver_restart
     i2_do_I2C_SEND_STOP *
       i2_i2c1_driver_stop
     i2_do_I2C_TX *
       Absolute function(Fake) *
       i2_do_I2C_SEND_RESTART_READ *
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_RESTART_WRITE *
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP *
         i2_i2c1_driver_stop
       i2_i2c1_driver_TXData *
       i2_i2c1_driver_isNACK *
       i2_i2c_restartWrite *
       i2_rd1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rd2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rdBlkRegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_returnReset *
       i2_returnStop *
       i2_wr1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_wr2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
     i2_do_I2C_TX_EMPTY *
       Absolute function(Fake) *
       i2_do_I2C_SEND_RESTART *
         i2_i2c1_driver_restart
       i2_do_I2C_SEND_STOP *
         i2_i2c1_driver_stop
       i2_i2c_restartWrite *
       i2_mssp1_setIRQ *
       i2_rd1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rd2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_rdBlkRegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_returnReset *
       i2_returnStop *
       i2_wr1RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
       i2_wr2RegCompleteHandler *
         i2_i2c_setBuffer
         i2_i2c_setDataCompleteCallback
           i2_setCallBack
     i2_i2c1_driver_isNACK *
     i2_mssp1_clearIRQ *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E87      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      9      39       8       22.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     52      9E       5       98.8%
BITBANK14           88      0       0      33        0.0%
BANK14              88      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3A      49       1       77.7%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     120       6        0.0%
DATA                 0      0     120       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Jun 11 11:53:44 2018

                ??i2_i2c1_driver_startRX 0001                             returnReset@p 0021  
          _do_I2C_SEND_RESTART$intlevel0 3E48                              __CFG_CP$OFF 000000  
                           ___awdiv@sign 0021                     __size_of_do_I2C_IDLE 0012  
                    _do_I2C_SEND_RESTART 3E42                     __size_of_do_I2C_RCEN 0012  
                    ___wmul@multiplicand 0026                      ?i2_i2c_restartWrite 000C  
                           ___ftadd@exp1 007D                             ___ftadd@exp2 007C  
                           ___ftadd@sign 007B                                      l421 355E  
                                    l422 3552                                      l430 2D48  
                                    l431 2D36                                      l440 2DB0  
                                    l425 3558                                      l433 2D3C  
                                    l434 2D42                                      l355 3B1E  
                                    l451 309C                                      l531 35CE  
                                    l380 3BCC                                      l348 2B30  
                                    l461 3398                                      l429 2D82  
                                    l445 3092                                      l462 33A0  
                                    l367 3954                                      l448 30A2  
                                    l632 2BFE                                      l457 33A6  
                                    l449 3096                                      l369 3966  
                                    l482 311E                                      l458 3392  
                                    l379 3BDC                                      l900 160C  
                                    l469 3512                                      l901 151E  
                                    l806 2A5A                                      l910 16B0  
                                    l751 3D1A                                      l591 392C  
                                    l903 162E                                      l752 3D1C  
                                    l904 1618                                      l681 3650  
                                    l841 1D78                                      l746 3D2E  
                                    l690 3472                                      l682 3628  
                                    l906 1650                                      l747 3D30  
                                    l691 3446                                      l851 1B16  
                                    l907 166C                                      l756 3D42  
                                    l684 3632                                      l844 1914  
                                    l757 3D44                                      l685 363C  
                                    l845 1828                                      l909 168C  
                                    l686 3646                                      l838 1C9E  
                                    l870 10E0                                      l862 1062  
                                    l855 0FB6                                      l848 18E8  
                                    l880 12AC                                      l872 1172  
                                    l856 0FCC                                      l849 1A56  
                                    l873 11DA                                      l865 105E  
                                    l857 1050                                      l866 108A  
                                    l858 1036                                      l891 1464  
                                    l875 1200                                      l859 0FFA  
                                    l868 1638                                      l892 13CA  
                                    l876 123E                                      l877 1302  
                                    l869 109E                                      l894 1484  
                                    l886 1368                                      l895 146E  
                                    l897 14A8                                      l898 14AC  
                                    l899 14CE                             __CFG_CPD$OFF 000000  
        __end_ofi2_i2c1_driver_getRXData 3F64             __size_of_i2c_masterOperation 0032  
                   _returnStop$intlevel0 3EAA            i2c_setDataCompleteCallback@cb 001C  
        i2i2c_setDataCompleteCallback@cb 0007                  __size_of_PMD_Initialize 001C  
                           ___awmod@sign 001B                    __size_of_do_I2C_RESET 0016  
                                    prod 000FF3                                      tosl 000FFD  
                          ?_XYZ_WriteReg 0026                                      wreg 000FE8  
               ?i2_rd1RegCompleteHandler 000C          i2c1_driver_setBusCollisionISR@f 0016  
                            i2_do_I2C_RX 31CC                              i2_do_I2C_TX 2E4E  
               ?i2_wr1RegCompleteHandler 000C                             __CFG_LVP$OFF 000000  
                           __CFG_ZCD$OFF 000000                             ___ftdiv@cntr 0069  
                           ___ftdiv@sign 006E                                     l1110 2F4A  
                                   l1102 2EF2                                     l1111 2F58  
                                   l1103 2F02                                     l1105 2F20  
                                   l1130 37D8                                     l1106 2F18  
                                   l1122 328E                                     l1203 224A  
                                   l1123 3298                                     l1115 3254  
                                   l1212 22DA                                     l1060 1E64  
                                   l1300 26E4                                     l1140 24F4  
                                   l1124 32A6                                     l1116 3260  
                ??_rd2RegCompleteHandler 0023                                     l1061 1E72  
                                   l1109 2F40                                     l1230 234E  
                                   l1062 1F64                                     l1142 2512  
                                   l1118 3276                                     l1231 237E  
                                   l1207 2274                                     l1055 1DEC  
                                   l1143 2554                                     l1119 326E  
                                   l1240 28A0                                     l1136 38F8  
                                   l1064 1F2C                                     l1152 25E6  
                                   l1144 2584                                     l1304 3ADE  
                                   l1217 22D0                                     l1065 1F56  
                                   l1057 1E1C                                     l1153 25DA  
                                   l1226 230E                                     l1218 22C6  
                                   l1066 1FF4                                     l1058 1E2A  
                                   l1330 2F90                                     l1146 25C2  
                                   l1250 249A                                     l1227 2304  
                                   l1067 201E                                     l1331 2F84  
                                   l1147 25B2                                     l1251 248A  
                                   l1172 2B5C                                     l1236 2814  
                                   l1340 333E                                     l1244 23D0  
                                   l1173 2B52                                     l1229 2332  
                                   l1261 2DEE                                     l1341 3332  
                                   l1238 283C                                     l1262 2E1E  
                                   l1270 2746                                     l1334 2FC4  
                                   l1246 23FC                                     l1175 2B90  
                                   l1239 287A                                     l1271 2778  
                                   l1335 2FD2                                     l1351 33F6  
                                   l1247 2436                                     l1176 2B7A  
                                   l1272 2788                                     l1344 3366  
                                   l1352 33EA                                     l1256 24BE  
                                   l1248 245E                                     l1345 3374  
                                   l1257 24B2                                     l1178 2BB8  
                                   l1274 27A0                                     l1179 2BAE  
                                   l1275 27B0                                     l1291 26A4  
                                   l1268 271E                                     l1292 2694  
                                   l1285 379A                                     l1279 3A72  
                                   l1560 20BA                                     l1561 21C4  
                                   l1297 26C8                                     l1289 262C  
                                   l1298 26BC                                     l1563 21D8  
                                   l1558 2062                                     l1568 2998  
                                   l1569 2916                                     l7323 146E  
                                   l6197 3592                                     l7275 1286  
                                   l7267 123E                                     l6629 3908  
                                   l7295 136C                                     l5785 2E4A  
                                   l7385 16AC                           i2_mssp1_setIRQ 3F2A  
                 __size_ofi2_do_I2C_IDLE 000C                                     STR_1 0F98  
                                   STR_2 0FA1                             ?_LCD_command 0001  
                           ?_LCD_display 0001                   __size_ofi2_do_I2C_RCEN 000C  
                                   _LATA 000F83                                     _LATB 000F84  
                                   _LATC 000F85                                     _LATD 000F86  
                                   _LATE 000F87                                     u6000 1210  
                                   u6010 1250                                     u5220 327A  
                                   u4430 3C7C                                     u6110 1492  
                                   u4600 2B44                                     u5080 2088  
                                   u5160 2F24                                     u6120 14A2  
                                   u6040 1286                                     u4418 30B2  
                                   u5090 208A                                     u6210 16CC  
                                   u4419 30C6                                     u4428 33B6  
                                   _PMD0 000EE1                                     u4429 33CA  
                                   _PMD1 000EE2                                     _PMD2 000EE3  
                                   _PMD3 000EE4                                     u4368 356E  
                                   u4480 3D68                                     u4640 2BC2  
                                   u4720 223C                                     u6080 13AA  
                                   _PMD4 000EE5                                     u4369 3582  
                                   _PMD5 000EE6                                     u5610 25EC  
                                   u4388 2D58                                     u4820 22E2  
                                   u5540 24C4                                     u4389 2D6C  
                                   u5461 23B4                                     u4478 3528  
                                   u4750 2266                                     u4479 353C  
                                   u4911 272E                                     u5631 2610  
                                   u4488 3D6A                                     u5720 2F94  
                                   u4681 2208                                     u5481 23E0  
                                   u4850 2316                                     u5650 264A  
                                   u6507 32D6                                     u4691 221C  
                                   u4780 22A4                                     u6517 32E4  
                                   i2l62 0072                                     u5750 3342  
                                   u6527 32F2                                     u5655 2642  
                                   u6537 3D9A                                     u4961 27FC  
                                   u5850 3468                                     u5690 26CE  
                                   u6547 3B52                                     u4891 2706  
                                   u5860 3494                                     u6557 3C84  
                                   u4981 2824                     ?_do_I2C_SEND_RESTART 0001  
                                   u6487 2C06                                     u5960 1118  
                                   u6497 32BA                                     u5857 345E  
                                   u5867 348A                                     u5965 110E  
                                   _WPUA 000F10                                     _WPUB 000F18  
                                   _WPUC 000F20                                     _WPUD 000F25  
                                   _WPUE 000F2D                     ??i2_i2c_restartWrite 000E  
                ??_wr2RegCompleteHandler 0023                            __CFG_FCMEN$ON 000000  
      __size_of_do_I2C_SEND_RESTART_READ 000E                                     _fabs 38D4  
                   __end_ofi2_returnStop 3F74                          XYZ_WriteReg@reg 0027  
                        XYZ_WriteReg@val 0026                ?_do_I2C_SEND_RESTART_READ 0001  
                                   _atan 202C                                     _main 2BE2  
                           ___ftpack@arg 0016                __size_of_do_I2C_SEND_STOP 000E  
                 __size_of_do_I2C_DO_ACK 000E                             ___ftpack@exp 0019  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     fsr0l 000FE9  
                                   indf2 000FDF                                     fsr1l 000FE1  
                                   fsr2l 000FD9                                     btemp 004A  
                 __size_of_LCD_setCursor 0048                    ?_do_I2C_SEND_ADR_READ 0001  
                                   prodh 000FF4                                     prodl 000FF3  
        ??_i2c1_driver_clearBusCollision 0001                 __size_of_i2c_writeNBytes 004A  
                                   start 00DC                       __size_of_LCD_clear 0010  
                          ??_XYZ_azimuth 003B                            _i2c_setBuffer 3BE4  
                           _sprintf$2294 0091                            __CFG_CSWEN$ON 000000  
                           ___ftmul@cntr 0037                       __size_of_LCD_print 005C  
                        __end_of_i2c_ISR 3542                            ??_XYZ_setMode 002B  
                           ___param_bank 000000                             ___ftmul@sign 0038  
                     __size_of_LCD_write 000E         __size_of_rdBlkRegCompleteHandler 004A  
                          __CFG_SCANE$ON 000000                 ??_do_I2C_DO_NACK_RESTART 0016  
              __size_of_mssp1_disableIRQ 0006                             ___fttol@exp1 0075  
                           ___fttol@lval 0071                             _do_I2C_RESET 3CB8  
         __size_of_OSCILLATOR_Initialize 0018              i2c_setAddressNACKCallback@p 001F  
                       __end_of_LCD_init 3320            __end_of_OSCILLATOR_Initialize 3C30  
                       __end_of_LCD_send 3C48                                    ?_fabs 0072  
                                  ?_atan 0088                 __end_of_i2c1_driver_open 3C76  
                                  ?_main 0001                          __end_of___awdiv 2F62  
                         _i2c_readNBytes 3906                 __size_ofi2_i2c_setBuffer 001A  
               __end_of_i2c1_driver_stop 3F58                          __end_of___ftadd 23A4  
                          __CFG_WDTE$OFF 000000                          __end_of___awmod 32B0  
                        __end_of___ftdiv 28D2                          __end_of___ftneg 3A80  
                        __end_of___lldiv 2FE4                          __end_of___ftmul 27EA  
                        ___awdiv@divisor 001E                          __end_of___llmod 3386  
                        __end_of___ftsub 37C4                          __end_of___fttol 26F6  
             __end_of_i2c1_driver_TXData 3EC6                           __CFG_DEBUG$OFF 000000  
                __size_ofi2_do_I2C_RESET 0010                                    i2l421 36CA  
                                  i2l422 36BE                                    i2l430 2E6A  
                                  i2l431 2E58                                    i2l440 2ED2  
                                  i2l425 36C4                                    i2l433 2E5E  
                                  i2l434 2E64                                    i2l451 3200  
                                  i2l461 34A8                                    i2l429 2EA4  
                                  i2l445 31F6                                    i2l462 34B0  
                                  i2l448 3206                                    i2l457 34B6  
                                  i2l449 31FA                                    i2l482 3196  
                                  i2l458 34A2                                    i2l469 3684  
                        ___awdiv@counter 0020                                    _OSCEN 000EDC  
                         ??_XYZ_WriteReg 0027                                    _TRISA 000F88  
                                  _TRISB 000F89                                    _TRISC 000F8A  
                                  _TRISD 000F8B                                    _TRISE 000F8C  
                        LCD_EN_SET@value 0026                      __size_of_LCD_BL_SET 0014  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                      __size_of_LCD_EN_SET 0014  
                          __CFG_WRT3$OFF 000000                            __CFG_WRT4$OFF 000000  
                          __CFG_WRT5$OFF 000000                             ___lltoft@exp 0026  
                          __CFG_WRT6$OFF 000000                            __CFG_WRT7$OFF 000000  
                         __CFG_EBTR0$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                            i2c_open@ret 001A                           __CFG_EBTR4$OFF 000000  
                         __CFG_EBTR5$OFF 000000                           __CFG_EBTR6$OFF 000000  
                         __CFG_EBTR7$OFF 000000                           _i2c_masterRead 3EAE  
                          __CFG_WRTB$OFF 000000                    __end_ofi2_returnReset 3F70  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                 __end_ofi2_mssp1_setIRQ 3F30                           __CFG_EBTRB$OFF 000000  
                                  _atan2 1DC0                            ___awtoft@sign 0021  
             __end_of_i2c1_driver_isNACK 3CE4                          __end_of_dpowers 0F29  
                                  fabs@d 0072                      __size_of_LCD_RS_SET 0014  
                                  _errno 00DC                       __size_ofi2_i2c_ISR 0048  
                                  _scale 16DA                          __end_of_isdigit 3AE6  
                                  atan@f 0088                                    atan@x 008E  
                                  atan@y 008B               ?_do_I2C_SEND_RESTART_WRITE 0001  
                     __CFG_MCLRE$EXTMCLR 000000                            ___ftpack@sign 001A  
                  ??_do_I2C_SEND_RESTART 0016                                    main@x 0135  
                                  main@y 0137                                    main@z 0133  
                          i2returnStop@p 000C   __end_of_i2c1_driver_setBusCollisionISR 3E0A  
__size_of_i2c1_driver_setBusCollisionISR 000E           _i2c1_driver_setBusCollisionISR 3DFC  
                                  pclath 000FFA                                    tablat 000FF5  
                __size_of_mssp1_clearIRQ 0006                   ?_do_I2C_SEND_ADR_WRITE 0001  
                                  status 000FD8                                    wtemp6 004B  
                        __end_of_sprintf 16DA          __size_ofi2_i2c1_driver_sendNACK 0006  
                         ?_i2c_setBuffer 0016                             ?_setCallBack 0016  
                          ?_LCD_writeI2C 0001          __size_ofi2_i2c1_driver_resetBus 0002  
                          _fsmStateTable 0100                          __initialization 3740  
                             _i2c_poller 3BCA                             __end_of_fabs 3906  
                           __end_of_atan 21F6                               _i2c_status 00B2  
                           __end_of_main 2C88                         __end_of_XYZ_Init 3B04  
                       __end_of_XYZ_Read 2D26                            i2_do_I2C_IDLE 3E84  
                       i2setCallBack@idx 0006                            i2_do_I2C_RCEN 3E78  
                       i2_do_I2C_TX$1023 0002                         __end_of_i2c_open 2B34  
                 __end_of_i2c_readNBytes 3938              ?_INTERRUPT_InterruptManager 0001  
                  i2i2c_setBuffer@buffer 0001                      __end_of_XYZ_azimuth 2A84  
                       i2_mssp1_clearIRQ 3F24         __end_ofi2_do_I2C_DO_ADDRESS_NACK 36FC  
        __end_ofi2_rd1RegCompleteHandler 39FA                                   ??_fabs 0039  
                          setCallBack@cb 0016                                   ??_atan 003B  
                          _do_I2C_DO_ACK 3E26                                   ??_main 00B1  
                          ___fttol@sign1 0070                      __end_of_XYZ_setMode 3D0E  
                            LCD_print@cs 002E                            _LCD_setCursor 3624  
                      ?_i2c_restartWrite 0021            __size_of_i2c1_driver_sendNACK 0006  
                          __activetblptr 000003          __end_ofi2_wr1RegCompleteHandler 3A2A  
                           i2c_close@ret 0016                   __end_of_i2c_masterRead 3EB6  
                   __size_of__tdiv_to_l_ 0132                       ??_i2c_restartWrite 0023  
                      __end_of_LCD_clear 3DA2            __size_of_i2c1_driver_resetBus 0002  
                ?_do_I2C_DO_ADDRESS_NACK 0001                        __end_of_LCD_print 349C  
                        ?i2_mssp1_setIRQ 0001                                   ?_atan2 0098  
                      __end_of_LCD_write 3DE0       __end_ofi2_do_I2C_SEND_RESTART_READ 3EFE  
             i2_do_I2C_SEND_RESTART_READ 3EF6                         ___llmod@dividend 0016  
                                 ?_scale 0060                         ___awdiv@dividend 001C  
                       __end_of___awtoft 37FC                                   _ANSELA 000F11  
                                 _ANSELB 000F19                                   _ANSELC 000F21  
                                 _ANSELD 000F26                                   _ANSELE 000F2E  
                       __end_of___ftpack 2BE2                 __size_ofi2_do_I2C_DO_ACK 0008  
                       __end_of___lltoft 3440                                   _RC3PPS 000EFA  
                                 _RC4PPS 000EFB                                   _ODCONA 000F0F  
                                 _ODCONB 000F17                                   _ODCONC 000F1F  
                                 _ODCOND 000F24                                   _ODCONE 000F2C  
                           __displaymode 0041                           __CFG_WDTCCS$SC 000000  
                     __size_of_i2c_close 001E                                   _OSCFRQ 000EDE  
                i2_do_I2C_SEND_ADR_WRITE 3DA2                   ??_do_I2C_SEND_ADR_READ 0017  
               rdBlkRegCompleteHandler@p 0021                                ??_i2c_ISR 0019  
                  XYZ_ReadTemp@wrtBuffer 0046                           ??_LCD_writeI2C 0026  
                         __CFG_PWRTE$OFF 000000                             XYZ_azimuth@a 00A7  
                           XYZ_azimuth@b 00A9                  ??i2_do_I2C_SEND_RESTART 0001  
                         __CFG_XINST$OFF 000000         __size_ofi2_i2c1_driver_getRXData 0004  
                  _i2c1_driver_getRXData 3F4C                         __end_of__powers_ 0F50  
                __size_of_LCD_write4bits 0018                __CFG_RSTOSC$HFINTOSC_1MHZ 000000  
                     i2_i2c1_driver_stop 3F74                      _do_I2C_RX$intlevel0 3068  
                                 ___ftge 2DBC              __end_of_do_I2C_DO_NACK_STOP 3E26  
    __end_of_i2c_setDataCompleteCallback 3BAE           ?i2_i2c_setDataCompleteCallback 0007  
            _i2c_setDataCompleteCallback 3B92                           ?i2_do_I2C_IDLE 0001  
                                 ___wmul 3A80                          _i2c_masterWrite 3EB6  
                         ?i2_do_I2C_RCEN 0001                                ??___awdiv 0020  
  __end_of_i2c1_driver_clearBusCollision 3F48   __size_of_i2c1_driver_clearBusCollision 0006  
          _i2c1_driver_clearBusCollision 3F42                                ??___ftadd 0078  
                         __CFG_STVREN$ON 000000                                ??___awmod 001A  
                              ??___ftdiv 0066                                ??___ftneg 0039  
                              ??___lldiv 001E                                ??___ftmul 0030  
                              ??___llmod 001E                                ??___ftsub 0039  
                              ??___fttol 006B                        __end_ofi2_i2c_ISR 36B4  
        __size_of_do_I2C_DO_NACK_RESTART 000E                        ??_i2c_writeNBytes 0025  
                        ?_i2c_readNBytes 001B                                   atan2@v 00A4  
                                 atan2@x 009B                                   atan2@y 0098  
                                 _fround 1B42                           i2returnReset@p 000C  
                                 clear_0 3766                                   clear_1 3772  
                       ___awdiv@quotient 0022                           ?_do_I2C_DO_ACK 0001  
                        ___awmod@divisor 0018                           ?_LCD_setCursor 002C  
                        ___awmod@counter 001A                      ?i2_i2c1_driver_stop 0001  
         i2i2c_setDataCompleteCallback@p 000A                                   main@az 0130  
                 i2_i2c1_driver_sendNACK 3F30                    ___ftmul@f3_as_product 0034  
                 i2c1_driver_setI2cISR@f 0016              __end_of_i2c1_driver_sendACK 3F18  
                         _PMD_Initialize 3B22           __end_of_do_I2C_DO_ADDRESS_NACK 3590  
                              ??_isdigit 0016                          ?_i2c_masterRead 0001  
                 i2_i2c1_driver_resetBus 3F7E              ?_i2c_setAddressNACKCallback 001C  
                           __mediumconst 0000     __size_ofi2_do_I2C_SEND_RESTART_WRITE 0008  
            __end_of_i2c1_driver_restart 3F5C                        LCD_setCursor@fila 002C  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                             ?_returnReset 0021  
          _do_I2C_DO_NACK_STOP$intlevel0 3E1E                    _i2c1_driver_setI2cISR 3DEE  
            __end_of_i2c1_driver_startRX 3F54                    __size_ofi2_returnStop 0004  
                      ??i2_i2c_setBuffer 0005                                ??_sprintf 008B  
         __size_ofi2_do_I2C_DO_NACK_STOP 0008            __size_of_INTERRUPT_Initialize 0004  
          __end_ofi2_do_I2C_DO_NACK_STOP 3ED6                        _SYSTEM_Initialize 3D4A  
                             __accesstop 0060                     ??i2_i2c1_driver_stop 0001  
                __end_of__initialization 3778                          ??_i2c_setBuffer 001A  
         _do_I2C_SEND_ADR_READ$intlevel0 3CA8                         _do_I2C_SEND_STOP 3E34  
                             ___ftadd@f1 0072                               ___ftadd@f2 0075  
                   __size_of_LCD_command 000E                       __size_of_do_I2C_RX 007A  
                     __size_of_do_I2C_TX 0096                     __size_of_LCD_display 000C  
                             ___ftge@ff1 0075                               ___ftge@ff2 0078  
                              ?_LCD_init 0001                             ??_LCD_BL_SET 0026  
                     ?_SYSTEM_Initialize 0001                                ?_LCD_send 0029  
                           eval_poly@res 0085                            ___rparam_used 000001  
                           ??_LCD_EN_SET 0026               __end_of_mssp1_IRQisEnabled 3D6E  
                             ___ftdiv@f1 0060        _rdBlkRegCompleteHandler$intlevel0 35E0  
                             ___ftdiv@f2 0063                               ___ftdiv@f3 006A  
                    _i2c_masterOperation 3938                 __size_of_do_I2C_TX_EMPTY 005E  
                             ___ftneg@f1 006F                               ___awtoft@c 001E  
                   __end_of_XYZ_WriteReg 3AC8                              _XYZ_azimuth 29B0  
             ?i2_rdBlkRegCompleteHandler 000C                  _rdBlkRegCompleteHandler 35DA  
                             ___ftmul@f1 002A                               ___ftmul@f2 002D  
         __size_ofi2_i2c1_driver_sendACK 0006               __end_of_mssp1_waitForEvent 3C8C  
                           ??_LCD_RS_SET 0026            __end_ofi2_i2c1_driver_sendACK 3F3C  
                             ___ftsub@f1 007E                               ___ftsub@f2 0081  
                             ___fttol@f1 0067                              ?_i2c_poller 0001  
                         __pcstackCOMRAM 0001                      _do_I2C_TX$intlevel0 2D2C  
                            _XYZ_setMode 3CFA                             __pidataBANK1 396A  
                    ??_SYSTEM_Initialize 0016           __size_ofi2_i2c1_driver_restart 0004  
                          __end_of_atan2 202C            __end_ofi2_i2c1_driver_restart 3F7C  
                             ___lltoft@c 001E                         _mssp1_disableIRQ 3F18  
         __size_ofi2_i2c1_driver_startRX 0004                            __end_of_scale 1B42  
          __end_ofi2_i2c1_driver_startRX 3F68                   __end_of_PMD_Initialize 3B3E  
                           LCD_send@mode 0029                        __end_of_i2c_close 3B22  
                           i2_returnStop 3F70                           i2_do_I2C_RESET 3DC2  
                             __div_to_l_ 24D6                     ?_i2c_masterOperation 0001  
                             _atan2$2295 00A1                               _atan2$2296 009E  
               i2_do_I2C_DO_ADDRESS_NACK 36B4                       __end_of_LCD_BL_SET 3D4A  
                     __end_of_LCD_EN_SET 3D22                             ?i2_do_I2C_RX 0001  
                           ?i2_do_I2C_TX 0001                                  ??_atan2 003B  
      __size_ofi2_do_I2C_DO_NACK_RESTART 0008                 i2rd2RegCompleteHandler@p 000C  
                         setCallBack@idx 001B                          __div_to_l_@exp1 0021  
                        __div_to_l_@cntr 0020                ?i2_do_I2C_DO_NACK_RESTART 0001  
                 _do_I2C_DO_NACK_RESTART 3E0A                           _do_I2C_TX$1023 0017  
                                ??_scale 0039                __end_of_SYSTEM_Initialize 3D5C  
              ??i2_do_I2C_SEND_ADR_WRITE 0002                          __div_to_l_@quot 001C  
                     __end_of_LCD_RS_SET 3D36               __end_ofi2_do_I2C_SEND_STOP 3EE6  
                         _mssp1_clearIRQ 3F1E                               __pbssBANK0 00B2  
                              ?_XYZ_Init 0001                                ?_XYZ_Read 0026  
                     __size_of_eval_poly 00DE            __size_ofi2_i2c1_driver_TXData 0008  
         __size_of_rd2RegCompleteHandler 0036                                ?_i2c_open 0001  
          __end_of_rd2RegCompleteHandler 3832                               __pnvCOMRAM 0049  
         __size_of_wr2RegCompleteHandler 0036                               ??_LCD_init 002C  
          __end_of_wr2RegCompleteHandler 38D4                               ??_LCD_send 002A  
                __end_of_i2c_masterWrite 3EBE         __size_ofi2_rd1RegCompleteHandler 0030  
                          __div_to_l_@f1 0016                            __div_to_l_@f2 0019  
                  _rd1RegCompleteHandler 3832                   ?_i2c1_driver_getRXData 0001  
                      ??i2_do_I2C_DO_ACK 0001                 __size_of_LCD_pulseEnable 001C  
               i2wr2RegCompleteHandler@p 000C            __size_ofi2_i2c1_driver_isNACK 0016  
                  _do_I2C_IDLE$intlevel0 3D86                        i2_do_I2C_TX_EMPTY 349C  
       __size_ofi2_wr1RegCompleteHandler 0030                          ??i2_do_I2C_IDLE 0001  
                  _wr1RegCompleteHandler 3868                           _SSP1DATPPSbits 000EB8  
           __size_of_i2c_busCollisionISR 0006                          ??i2_do_I2C_RCEN 0001  
        _wr1RegCompleteHandler$intlevel0 386E          _rd1RegCompleteHandler$intlevel0 3838  
                          ??_do_I2C_IDLE 0016                     __size_of_setCallBack 0078  
                          ??_do_I2C_RCEN 0016        __end_ofi2_rdBlkRegCompleteHandler 3740  
                  i2c_readNBytes@address 001F                                  ?___ftge 0075  
                     ?i2_do_I2C_TX_EMPTY 0001                                  ?___wmul 0024  
                        __CFG_PPS1WAY$ON 000000                          ??_do_I2C_DO_ACK 0016  
                        ??_LCD_setCursor 002D                           LCD_write@value 002B  
                 __end_ofi2_do_I2C_RESET 3DD2                                  ?_fround 0060  
                    i2c_setBuffer@buffer 0016                                ?___awtoft 001E  
                              ?___ftpack 0016                           _SSP1CLKPPSbits 000EB7  
                        ?_PMD_Initialize 0001                                ?___lltoft 001E  
         ?_i2c1_driver_clearBusCollision 0001                      ??i2_do_I2C_TX_EMPTY 0001  
                  ??_i2c_masterOperation 0019                        ?_i2c1_driver_open 0001  
                      __end_of_do_I2C_RX 30DC                        __end_of_do_I2C_TX 2DBC  
               ??i2_do_I2C_SEND_ADR_READ 0002                        ?_i2c1_driver_stop 0001  
                   __end_of_LCD_writeI2C 3B76                   ?_i2c1_driver_setI2cISR 0016  
                     ??_i2c1_driver_open 0016                 ?i2_rd2RegCompleteHandler 000C  
                     ??_i2c1_driver_stop 0016                                  _OSCCON1 000ED8  
                                _OSCCON3 000EDA                            ?_mssp1_setIRQ 0001  
                 __size_ofi2_setCallBack 0078                    XYZ_WriteReg@wrtBuffer 0044  
                                _OSCTUNE 000EDD                                  _SSP1ADD 000F93  
               ?i2_wr2RegCompleteHandler 000C                                  _SSP1BUF 000F92  
                 __end_of_mssp1_clearIRQ 3F24                                  _SSP1MSK 000F94  
                    __size_of_i2c_poller 001A                  ??_do_I2C_SEND_ADR_WRITE 0017  
    _do_I2C_SEND_RESTART_WRITE$intlevel0 3E56              ??_do_I2C_SEND_RESTART_WRITE 0016  
                             ??_XYZ_Init 002C                               ??_XYZ_Read 002C  
                     _i2c1_driver_TXData 3EBE                               ??_i2c_open 0019  
            __size_ofi2_i2c_restartWrite 0004                 __end_ofi2_mssp1_clearIRQ 3F2A  
                     _i2c1_driver_i2cISR 003B                                  _i2c_ISR 34F4  
              ??_rdBlkRegCompleteHandler 0023                __end_ofi2_do_I2C_TX_EMPTY 34F4  
                i2_i2c1_driver_getRXData 3F60                        __end_of__npowers_ 0F77  
                                __Hparam 0000                    _returnReset$intlevel0 3EA0  
                  _do_I2C_RCEN$intlevel0 3D74                               _scale$2293 0063  
                         _LCD_write4bits 3C48                       _i2c1_driver_isNACK 3CCE  
                    ?_i2c1_driver_TXData 0001                                  __Lparam 0000  
       _do_I2C_DO_ADDRESS_NACK$intlevel0 3548      __size_of_i2c_setAddressNACKCallback 001C  
                        __size_of___ftge 0092                                  ___awdiv 2EDE  
                                ___ftadd 21F6                                  ___awmod 3240  
                                ___ftdiv 27EA                                  ___ftneg 3A5A  
                                ___lldiv 2F62                          __size_of___wmul 0026  
                                ___ftmul 26F6                                  ___llmod 3320  
                                ___ftsub 3782                                  ___fttol 25FE  
                           __psmallconst 0F00                        ??_do_I2C_TX_EMPTY 0016  
                    ?_i2c1_driver_isNACK 0001                          ?i2_do_I2C_RESET 0001  
                                __pcinit 3740                               ??___awtoft 0021  
                             ??___ftpack 001B                        __end_of_eval_poly 29B0  
                        __size_of_fround 027E                                  __ramtop 0F00  
                 i2c_writeNBytes@address 0025                       i2c_readNBytes@data 001B  
                             ??___lltoft 0022                                  __ptext0 2BE2  
                                __ptext1 0FAA                                  __ptext2 16DA  
                                __ptext3 3AC8                                  __ptext4 1B42  
                                __ptext5 3240                                  __ptext6 2EDE  
                                __ptext7 23A4                                  __ptext8 24D6  
                                __ptext9 33E4                      __end_of_do_I2C_IDLE 3D92  
                    __end_of_do_I2C_RCEN 3D80                         ??i2_mssp1_setIRQ 0001  
                            ?__div_to_l_ 0016                                  _dpowers 0F01  
                  _OSCILLATOR_Initialize 3C18                                  _isdigit 3AC8  
                        atan@val_squared 0092              __end_of_do_I2C_SEND_RESTART 3E50  
                         ??_mssp1_setIRQ 0016                         ___awmod@dividend 0016  
                   ??_i2c1_driver_TXData 0016                 ??_PIN_MANAGER_Initialize 0016  
                                atan@val 0095                   i2c_masterOperation@ret 001A  
                        __displaycontrol 0042                          ?_mssp1_clearIRQ 0001  
             _do_I2C_SEND_STOP$intlevel0 3E3A              ?i2_do_I2C_SEND_RESTART_READ 0001  
               _do_I2C_SEND_RESTART_READ 3E5E               __size_of_SYSTEM_Initialize 0012  
                                _sprintf 0FAA                     __size_of_returnReset 000A  
                              _LCD_clear 3D92                     end_of_initialization 3778  
                   ??_i2c1_driver_isNACK 0016                                _LCD_print 3440  
                  __size_of_XYZ_WriteReg 0022                                _LCD_write 3DD2  
              __size_of_i2c_restartWrite 000A             __end_of_i2c1_driver_sendNACK 3F12  
                 ?_rd1RegCompleteHandler 0021                          _i2c_writeNBytes 3590  
                 __end_of_LCD_write4bits 3C60                         ?_i2c_masterWrite 0001  
                 ?_wr1RegCompleteHandler 0021             __end_of_i2c1_driver_resetBus 3F7E  
                       _XYZ_azimuth$2290 00AB                          ___lldiv@divisor 001A  
                        ___lldiv@counter 0022                         ??_i2c_readNBytes 001F  
                          i2_setCallBack 3154           __size_ofi2_do_I2C_SEND_RESTART 0008  
          __end_ofi2_do_I2C_SEND_RESTART 3EEE                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                   __size_ofi2_returnReset 0004  
           ?i2_do_I2C_SEND_RESTART_WRITE 0001                _do_I2C_SEND_RESTART_WRITE 3E50  
                ?i2_i2c1_driver_sendNACK 0001                           __tdiv_to_l_@f1 0016  
                         __tdiv_to_l_@f2 0019                        ??_LCD_pulseEnable 0027  
                       ??_i2c_masterRead 001B                    __CFG_WDTCPS$WDTCPS_31 000000  
                        i2_i2c_setBuffer 3BFE                            ??__tdiv_to_l_ 001C  
                ?i2_i2c1_driver_resetBus 0001          __end_ofi2_rd2RegCompleteHandler 39CA  
                             _returnStop 3EA4          __end_of_rdBlkRegCompleteHandler 3624  
               __end_of_do_I2C_SEND_STOP 3E42                                i2_i2c_ISR 366C  
        __end_ofi2_wr2RegCompleteHandler 3A5A          __size_ofi2_do_I2C_SEND_ADR_READ 0010  
                           _XYZ_WriteReg 3AA6     __size_of_i2c_setDataCompleteCallback 001C  
        ??i2_i2c_setDataCompleteCallback 000C                       XYZ_azimuth@azimuth 00AE  
                            returnStop@p 0021                                XYZ_Read@x 0026  
                              XYZ_Read@y 0028                                XYZ_Read@z 002A  
                       __CFG_FEXTOSC$OFF 000000                 __end_of_mssp1_disableIRQ 3F1E  
                             ?_LCD_clear 0001                     __size_ofi2_do_I2C_RX 0074  
                   __size_ofi2_do_I2C_TX 0090             i2c_setDataCompleteCallback@p 001F  
                             ?_LCD_print 002C                ??i2_i2c1_driver_getRXData 0001  
                             ?_LCD_write 0001                  i2_rd1RegCompleteHandler 39CA  
                            ___ftdiv@exp 006D               __size_ofi2_do_I2C_TX_EMPTY 0058  
                        ?_LCD_write4bits 0001                  i2_wr1RegCompleteHandler 39FA  
          __size_of_do_I2C_SEND_ADR_READ 0016                           ?i2_setCallBack 0001  
                    __size_of__div_to_l_ 0128                             ?_XYZ_azimuth 00A7  
                      __size_of_LCD_init 0070                        __size_of_LCD_send 0018  
                            ___ftmul@exp 0033                             ??_i2c_poller 0019  
            ??i2_rdBlkRegCompleteHandler 000E           __end_ofi2_i2c1_driver_sendNACK 3F36  
                           ?_XYZ_setMode 0028                              _do_I2C_IDLE 3D80  
                            _do_I2C_RCEN 3D6E             __end_of_INTERRUPT_Initialize 3F4C  
         __end_ofi2_i2c1_driver_resetBus 3F80                           __end_of___ftge 2E4E  
             ??i2_do_I2C_DO_ADDRESS_NACK 0001                           __end_of___wmul 3AA6  
       __end_ofi2_do_I2C_DO_NACK_RESTART 3ECE            ??i2_do_I2C_SEND_RESTART_WRITE 0001  
                  __size_of_LCD_writeI2C 001C                       _mssp1_IRQisEnabled 3D5C  
                 ?_OSCILLATOR_Initialize 0001                           __end_of_fround 1DC0  
                             ?i2_i2c_ISR 0001             __size_of_do_I2C_DO_NACK_STOP 000E  
                     _mssp1_waitForEvent 3C76                  ?_do_I2C_DO_NACK_RESTART 0001  
                    start_initialization 3740                                _i2c_close 3B04  
                             eval_poly@d 0081                               eval_poly@n 0083  
                             eval_poly@x 007E                      _i2c_busCollisionISR 3F3C  
        __size_of_PIN_MANAGER_Initialize 007E                      ?_mssp1_IRQisEnabled 0001  
                    __end_of__tdiv_to_l_ 24D6                            LCD_send@value 002A  
                        i2setCallBack@cb 0001                  __end_of_i2c_writeNBytes 35DA  
                        i2_do_I2C_DO_ACK 3ED6                            i2_returnReset 3F6C  
                    ?_mssp1_waitForEvent 0016                            ??_LCD_command 002B  
                           setCallBack@p 0019                            ??_LCD_display 002C  
                     __end_of_i2c_poller 3BE4                               LCD_print@s 002C  
           __size_of_i2c1_driver_sendACK 0006                          i2c_open@address 0019  
                i2c_setBuffer@bufferSize 0018                  ??_i2c1_driver_getRXData 0016  
                 rd1RegCompleteHandler@p 0021             __size_of_i2c1_driver_restart 0004  
            __size_ofi2_i2c1_driver_stop 0004             __size_of_i2c1_driver_startRX 0004  
                  i2_do_I2C_DO_NACK_STOP 3ECE                          ___llmod@divisor 001A  
                      __size_of_XYZ_Init 001E                        __size_of_XYZ_Read 009E  
                        ___llmod@counter 001E                   i2_do_I2C_SEND_ADR_READ 3DB2  
                  __end_of_i2c_setBuffer 3BFE                        __size_of_i2c_open 00B0  
                   ?_i2c_busCollisionISR 0001                         __CFG_LPBOREN$OFF 000000  
                           _LCD_writeI2C 3B5A                     __end_of_mssp1_setIRQ 3F0C  
                __end_ofi2_i2c_setBuffer 3C18                     ??_mssp1_IRQisEnabled 0016  
                     i2_do_I2C_SEND_STOP 3EDE                         ??_PMD_Initialize 0016  
                               ??___ftge 007B                                 ??___wmul 0028  
                   ??_mssp1_waitForEvent 0018                   wr1RegCompleteHandler@p 0021  
                  i2_i2c1_driver_sendACK 3F36                            ?_do_I2C_RESET 0001  
           __end_ofi2_i2c1_driver_TXData 3F06                              __pdataBANK1 0100  
                  i2i2c1_driver_TXData@d 0001                                 ??_fround 0039  
              _do_I2C_TX_EMPTY$intlevel0 338C      __size_ofi2_do_I2C_SEND_RESTART_READ 0008  
                  i2_i2c1_driver_restart 3F78                           _LCD_I2C_BUFFER 0043  
                            ?_returnStop 0021                            sprintf@tmpval 009E  
                        LCD_RS_SET@value 0026                      ?i2_do_I2C_SEND_STOP 0001  
                ??_i2c1_driver_setI2cISR 0019                    i2_i2c1_driver_startRX 3F64  
                    i2i2c_restartWrite@p 000C           __end_of_do_I2C_DO_NACK_RESTART 3E18  
                   _i2c1_driver_sendNACK 3F0C                               fround@prec 0069  
                      __size_of___awtoft 0038                        __size_of___ftpack 00AE  
           __end_ofi2_i2c1_driver_isNACK 3CFA                        __size_of___lltoft 005C  
                            __pbssCOMRAM 003B                               ?_i2c_close 0001  
                   _i2c1_driver_resetBus 3F7C                i2_rdBlkRegCompleteHandler 36FC  
                          __pcstackBANK0 0060                            __pcstackBANK1 0130  
                         ?i2_returnReset 000C                                _do_I2C_RX 3062  
                              _do_I2C_TX 2D26                             _isdigit$1677 0017  
                            ??_LCD_clear 002C                ??i2_rd1RegCompleteHandler 000E  
         __size_of_do_I2C_SEND_ADR_WRITE 0016    __end_ofi2_i2c_setDataCompleteCallback 3BCA  
 __size_ofi2_i2c_setDataCompleteCallback 001C            i2_i2c_setDataCompleteCallback 3BAE  
                            ??_LCD_print 002E            __end_of_do_I2C_SEND_ADR_WRITE 3CA2  
              ??i2_wr1RegCompleteHandler 000E                              ??_LCD_write 002B  
                       _i2c_restartWrite 3E90                     ??i2_do_I2C_SEND_STOP 0001  
                            sprintf@flag 0096               _i2c_restartWrite$intlevel0 3E96  
              __size_of_i2c1_driver_open 0016                              sprintf@fval 00A4  
                      ?i2_mssp1_clearIRQ 0001                __size_of_i2c1_driver_stop 0004  
                            sprintf@prec 00A2                          ??i2_setCallBack 0006  
                               ?_i2c_ISR 0001          _do_I2C_SEND_ADR_WRITE$intlevel0 3C92  
                        _do_I2C_TX_EMPTY 3386                            ??_setCallBack 001B  
       __size_ofi2_rd2RegCompleteHandler 0030                    _rd2RegCompleteHandler 37FC  
                    __end_of_LCD_command 3DEE                       ??i2_mssp1_clearIRQ 0001  
                    __end_of_LCD_display 3E78                    ??_i2c_busCollisionISR 0001  
       __size_ofi2_wr2RegCompleteHandler 0030                   _PIN_MANAGER_Initialize 2FE4  
                  _wr2RegCompleteHandler 389E                         ??i2_do_I2C_RESET 0001  
                        LCD_write4bits@a 0028                                __pintcode 0008  
                  __end_ofi2_do_I2C_IDLE 3E90                    __end_ofi2_do_I2C_RCEN 3E84  
                         ??_do_I2C_RESET 0016                                 ?___awdiv 001C  
                              __ptext100 3F12                                __ptext101 3F5C  
                              __ptext110 36B4                                __ptext102 3B04  
                              __ptext111 3EC6                                __ptext103 3F18  
                              __ptext120 3EF6                                __ptext112 3ECE  
                              __ptext104 3F1E                                __ptext121 3E84  
                              __ptext113 3ED6                                __ptext130 3F64  
                              __ptext122 3DC2                                __ptext114 3E78  
                              __ptext106 366C                                __ptext131 36FC  
                              __ptext123 349C                                __ptext115 3DA2  
                              __ptext107 3F24                                __ptext140 3154  
                              __ptext132 399A                                __ptext124 3F2A  
                              __ptext116 3DB2                                __ptext108 31CC  
                              __ptext141 3BFE                                __ptext133 39CA  
                              __ptext125 3CE4                                __ptext117 3EDE  
                              __ptext109 2E4E                                 ?___ftadd 0072  
                              __ptext142 3F74                                __ptext134 39FA  
                              __ptext126 3EFE                                __ptext118 3EE6  
                              __ptext143 3F78                                __ptext135 3F68  
                              __ptext127 3F60                                __ptext119 3EEE  
                              __ptext144 3F36                                __ptext136 3F6C  
                              __ptext128 3F30                                __ptext145 3F3C  
                              __ptext137 3F70                                __ptext129 3F7E  
                              __ptext146 3F42                                __ptext138 3A2A  
                              __ptext147 0000                                __ptext139 3BAE  
                               ?___awmod 0016              __end_of_i2c_masterOperation 396A  
                               ?___ftdiv 0060                                 ?___ftneg 006F  
                               ?___lldiv 0016                                 ?___ftmul 002A  
                               ?___llmod 0016                                 ?___ftsub 007E  
                              __npowers_ 0F50                                 ?___fttol 0067  
               ??_do_I2C_DO_ADDRESS_NACK 0016              _i2c1_driver_busCollisionISR 003E  
                  __end_of_do_I2C_DO_ACK 3E34                    __end_of_LCD_setCursor 366C  
           ??_INTERRUPT_InterruptManager 0004                              __tdiv_to_l_ 23A4  
             ??_do_I2C_SEND_RESTART_READ 0016                    ?_i2c1_driver_sendNACK 0001  
                            ??i2_i2c_ISR 0004                  __end_ofi2_do_I2C_DO_ACK 3EDE  
                           ??__div_to_l_ 001C                         ??_mssp1_clearIRQ 0016  
                            __smallconst 0F00                                 ?_isdigit 0001  
               i2_do_I2C_DO_NACK_RESTART 3EC6                    ?_i2c1_driver_resetBus 0001  
     __size_of_do_I2C_SEND_RESTART_WRITE 000E                                _eval_poly 28D2  
               ?i2_do_I2C_SEND_ADR_WRITE 0001                               ?_do_I2C_RX 0001  
                             ?_do_I2C_TX 0001                           __size_of_atan2 026C  
                      _i2c1_driver_start 3F5C                         ?_i2c_writeNBytes 0021  
                               ?_sprintf 0084               __end_ofi2_i2c_restartWrite 3F6C  
                         __size_of_scale 0468                  ??_rd1RegCompleteHandler 0023  
                      i2c_readNBytes@len 001D                     _INTERRUPT_Initialize 3F48  
                      _i2c_ISR$intlevel0 34FA                       ?_i2c1_driver_start 0001  
                ??_wr1RegCompleteHandler 0023                   ?i2_do_I2C_DO_NACK_STOP 0001  
                         ___wmul@product 0028                      __size_of_returnStop 000A  
                        _LCD_pulseEnable 3B3E                                 _LCD_init 32B0  
                               _LCD_send 3C30                                atan@recip 0091  
                               _PIE3bits 000EC5                      __CFG_BORV$VBOR_2P45 000000  
                  LCD_writeI2C@wrtBuffer 0048                      ??_i2c1_driver_start 0016  
    __size_of_INTERRUPT_InterruptManager 00D4                       __end_of__div_to_l_ 25FE  
                               _PIR3bits 000ECD                                 i2u631_48 007C  
                               i2u631_49 0090                                 i2u624_48 369A  
                               i2u624_49 36AE                                 i2u580_48 2E7A  
                               i2u628_48 0062                                 i2u580_49 2E8E  
                       ?i2_i2c_setBuffer 0001                                 i2u583_48 3216  
                               i2u583_49 322A                                 i2u584_48 34C6  
                               i2u584_49 34DA                                 i2u578_48 36DA  
                               i2u578_49 36EE                   ?i2_i2c1_driver_sendACK 0001  
                               _SSP1CON1 000F96                                 _SSP1CON2 000F97  
                   __size_of_XYZ_azimuth 00D4             ?_i2c_setDataCompleteCallback 001C  
                               _SSP1STAT 000F95                      __end_of_setCallBack 3154  
                        XYZ_setMode@mode 002B                   ?i2_i2c1_driver_restart 0001  
                   __size_of_XYZ_setMode 0014                   ?i2_i2c1_driver_startRX 0001  
                      ___wmul@multiplier 0024             i2c_setAddressNACKCallback@cb 001C  
                      ?_do_I2C_SEND_STOP 0001                          ??i2_returnReset 000E  
                             ?_eval_poly 007E                              ??_i2c_close 0016  
              __end_of_i2c1_driver_start 3F60                            ??_returnReset 0023  
                     ??_do_I2C_SEND_STOP 0016              __size_of_i2c1_driver_TXData 0008  
           ??_i2c_setAddressNACKCallback 0021                      __end_ofatan@coeff_a 0F89  
                    __end_ofatan@coeff_b 0F98        __end_of_do_I2C_SEND_RESTART_WRITE 3E5E  
                __end_of_do_I2C_TX_EMPTY 33E4                                copy_data0 3754  
                       ??_LCD_write4bits 0027                    ?_INTERRUPT_Initialize 0001  
               ?_rdBlkRegCompleteHandler 0021                              _LCD_command 3DE0  
                      ?_mssp1_disableIRQ 0001                                 _XYZ_Init 3AE6  
                            _LCD_display 3E6C                                 _XYZ_Read 2C88  
           __size_of_do_I2C_SEND_RESTART 000E              __size_of_i2c1_driver_isNACK 0016  
                   i2_i2c1_driver_TXData 3EFE                  _do_I2C_DO_ACK$intlevel0 3E2C  
                               _i2c_open 2A84                    __size_of_mssp1_setIRQ 0006  
                         i2setCallBack@p 0004                       ??_mssp1_disableIRQ 0016  
                 ?_rd2RegCompleteHandler 0021                      _do_I2C_DO_NACK_STOP 3E18  
                       __size_of_i2c_ISR 004E                   ?_wr2RegCompleteHandler 0021  
        _wr2RegCompleteHandler$intlevel0 38A4          _rd2RegCompleteHandler$intlevel0 3802  
                               __Hrparam 0000                     i2_i2c1_driver_isNACK 3CE4  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                    i2c_writeNBytes@data 0021                             ?_do_I2C_IDLE 0001  
                           ?_do_I2C_RCEN 0001                  ??_OSCILLATOR_Initialize 0016  
                    _i2c1_driver_sendACK 3F12                 __size_of_i2c_masterWrite 0008  
                       __size_of___awdiv 0084                         __size_of___ftadd 01AE  
                       __size_of___awmod 0070                    i2_do_I2C_SEND_RESTART 3EE6  
                       __size_of___ftdiv 00E8                         __size_of___ftneg 0026  
        __size_of_do_I2C_DO_ADDRESS_NACK 004E                         __size_of___lldiv 0082  
                       __size_of___ftmul 00F4                      i2c1_driver_TXData@d 0016  
                       __size_of___llmod 0066                         __size_of___ftsub 0042  
                       __size_of___fttol 00F8                   ??_i2c1_driver_sendNACK 0016  
          ??_i2c_setDataCompleteCallback 0021          __end_ofi2_do_I2C_SEND_ADR_WRITE 3DB2  
                               ___awtoft 37C4                                 ___ftpack 2B34  
       ??_i2c1_driver_setBusCollisionISR 0019          ?_i2c1_driver_setBusCollisionISR 0016  
     _do_I2C_SEND_RESTART_READ$intlevel0 3E64                      _i2c1_driver_restart 3F58  
                            _fround$2291 0066                              _fround$2292 0063  
                          ?i2_returnStop 000C                                 ___lltoft 33E4  
                   ?_do_I2C_DO_NACK_STOP 0001                      _i2c1_driver_startRX 3F50  
           __end_of_do_I2C_SEND_ADR_READ 3CB8                   ??_i2c1_driver_resetBus 0016  
                       ?i2_do_I2C_DO_ACK 0001                               sprintf@exp 009C  
                             sprintf@val 0098                         __size_of_isdigit 001E  
                          ??i2_do_I2C_RX 0001                            ??i2_do_I2C_TX 0002  
                           _mssp1_setIRQ 3F06                              ??_do_I2C_RX 0016  
                            ??_do_I2C_TX 0017                                 __ptext10 3320  
                               __ptext11 2F62                                 __ptext20 26F6  
                               __ptext12 25FE                                 __ptext21 2DBC  
                               __ptext13 29B0                                 __ptext30 3AE6  
                               __ptext22 27EA                                 __ptext14 1DC0  
                               __ptext31 3CFA                                 __ptext23 3782  
                               __ptext15 202C                                 __ptext40 3DD2  
                               __ptext32 3AA6                                 __ptext24 21F6  
                               __ptext16 38D4                                 __ptext41 32B0  
                               __ptext33 3D4A                                 __ptext25 37C4  
                               __ptext17 3A5A                                 __ptext50 3D36  
                               __ptext42 3E6C                                 __ptext34 3B22  
                               __ptext26 2B34                                 __ptext18 28D2  
                               __ptext51 3B5A                                 __ptext43 3D92  
                               __ptext35 2FE4                                 __ptext27 2C88  
                               __ptext19 3A80                                 __ptext60 3D5C  
                               __ptext52 3590                                 __ptext44 3DE0  
                               __ptext36 3C18                                 __ptext28 3906  
                               __ptext61 3BCA                                 __ptext53 3B76  
                               __ptext45 3C30                                 __ptext37 3F48  
                               __ptext29 3EAE                                 __ptext70 3D6E  
                               __ptext62 3C76                                 __ptext54 2A84  
                               __ptext46 3C48                                 __ptext38 3624  
                               __ptext71 3C8C                                 __ptext63 34F4  
                               __ptext55 3DEE                                 __ptext47 3B3E  
                               __ptext39 3440                                 __ptext80 3F06  
                               __ptext72 3CA2                                 __ptext64 3062  
                               __ptext56 3DFC                                 __ptext48 3D0E  
                               __ptext81 3CCE                                 __ptext73 3E34  
                               __ptext65 2D26                                 __ptext57 3C60  
                               __ptext49 3D22                                 __ptext90 3868  
                               __ptext82 3EBE                                 __ptext74 3E42  
                               __ptext66 3542                                 __ptext58 3EB6  
                               __ptext91 3E90                                 __ptext83 3F4C  
                               __ptext75 3E50                                 __ptext67 3E0A  
                               __ptext59 3938                                 __ptext92 3E9A  
                               __ptext84 3F0C                                 __ptext76 3E5E  
                               __ptext68 3E18                                 __ptext93 3EA4  
                               __ptext85 3F7C                                 __ptext77 3D80  
                               __ptext69 3E26                                 __ptext94 389E  
                               __ptext86 3F50                                 __ptext78 3CB8  
                               __ptext95 3B92                                 __ptext87 35DA  
                               __ptext79 3386                                 __ptext96 30DC  
                               __ptext88 37FC                                 __ptext97 3BE4  
                               __ptext89 3832                                 __ptext98 3F54  
                               __ptext99 3F58                             _SSP1CON1bits 000F96  
                           _SSP1CON2bits 000F97                                 __powers_ 0F29  
                __end_of_LCD_pulseEnable 3B5A                     ?_i2c1_driver_sendACK 0001  
                   __end_of_do_I2C_RESET 3CCE                         __size_of_sprintf 0730  
                  ?i2_i2c1_driver_TXData 0001                  ?i2_do_I2C_SEND_ADR_READ 0001  
                __size_ofi2_mssp1_setIRQ 0006                     ?_i2c1_driver_restart 0001  
                    __end_of_returnReset 3EA4                         _i2c1_driver_open 3C60  
                          __size_of_fabs 0032       __size_ofi2_rdBlkRegCompleteHandler 0044  
                          __size_of_atan 01CA                  i2_rd2RegCompleteHandler 399A  
                       _i2c1_driver_stop 3F54                            __size_of_main 00A6  
                   ?_i2c1_driver_startRX 0001           __size_of_i2c1_driver_getRXData 0004  
          __end_of_i2c1_driver_getRXData 3F50                               _LCD_BL_SET 3D36  
                i2_wr2RegCompleteHandler 3A2A                               _LCD_EN_SET 3D0E  
                   __CFG_WDTCWS$WDTCWS_7 000000                              _setCallBack 30DC  
                  ?i2_i2c1_driver_isNACK 0001                  i2c_masterOperation@read 0019  
                   LCD_setCursor@columna 002D                       XYZ_Read@readBuffer 0030  
                             _LCD_RS_SET 3D22                           XYZ_setMode@odr 0028  
                         XYZ_setMode@rng 0029                           XYZ_setMode@osr 002A  
                               int$flags 004A                         __displayfunction 0049  
     __end_of_INTERRUPT_InterruptManager 00DC               _INTERRUPT_InterruptManager 0008  
                           _SSP1STATbits 000F95                           ??i2_returnStop 000E  
       __end_of_do_I2C_SEND_RESTART_READ 3E6C                             ??_returnStop 0023  
               __end_of_i2c_restartWrite 3E9A                    ??_do_I2C_DO_NACK_STOP 0016  
                            atan@coeff_a 0F77                              atan@coeff_b 0F89  
                __size_of_i2c_readNBytes 0032                mssp1_waitForEvent@timeout 0016  
         __size_of_i2c1_driver_setI2cISR 000E            __end_of_i2c1_driver_setI2cISR 3DFC  
                             _INTCONbits 000FF2                              ??_eval_poly 0039  
             __size_of_i2c1_driver_start 0004                       i2c_writeNBytes@len 0023  
                               isdigit@c 0018                   ??_INTERRUPT_Initialize 0016  
               ?i2_i2c1_driver_getRXData 0001                  __size_of_i2c_masterRead 0008  
                               scale@scl 0066           __end_ofi2_do_I2C_SEND_ADR_READ 3DC2  
                  ??_i2c1_driver_sendACK 0016                         ?_do_I2C_TX_EMPTY 0001  
      __size_ofi2_do_I2C_DO_ADDRESS_NACK 0048               __end_ofi2_i2c1_driver_stop 3F78  
              ?i2_do_I2C_DO_ADDRESS_NACK 0001                   _do_I2C_DO_ADDRESS_NACK 3542  
                               intlevel2 0000                                sprintf@ap 0094  
                 _do_I2C_RESET$intlevel0 3CBE                         __tdiv_to_l_@exp1 0024  
                       __tdiv_to_l_@cntr 0023                                sprintf@sp 0084  
                  ??_i2c1_driver_restart 0016                         __tdiv_to_l_@quot 001F  
                 rd2RegCompleteHandler@p 0021                    ??_i2c1_driver_startRX 0016  
             i2rdBlkRegCompleteHandler@p 000C                      __end_ofi2_do_I2C_RX 3240  
                    __end_ofi2_do_I2C_TX 2EDE                         ___lldiv@dividend 0016  
                ?_PIN_MANAGER_Initialize 0001                        i2c_restartWrite@p 0021  
                      __CFG_CLKOUTEN$OFF 000000                             _vectorString 00DE  
                     __end_of_returnStop 3EAE              __size_of_mssp1_IRQisEnabled 0012  
    __end_ofi2_do_I2C_SEND_RESTART_WRITE 3EF6              i2_do_I2C_SEND_RESTART_WRITE 3EEE  
                 ?i2_do_I2C_SEND_RESTART 0001               ??i2_do_I2C_DO_NACK_RESTART 0001  
                 wr2RegCompleteHandler@p 0021              __size_of_mssp1_waitForEvent 0016  
              i2i2c_setBuffer@bufferSize 0003                __size_ofi2_mssp1_clearIRQ 0006  
                           ?__tdiv_to_l_ 0016                                 sprintf@c 00A7  
                               sprintf@f 0086                          LCD_BL_SET@value 0026  
                       ___lldiv@quotient 001E                        ??_i2c_masterWrite 001B  
     __end_of_i2c_setAddressNACKCallback 3B92               _i2c_setAddressNACKCallback 3B76  
                 __size_of_i2c_setBuffer 001A                              _returnReset 3E9A  
       _do_I2C_DO_NACK_RESTART$intlevel0 3E10                 i2rd1RegCompleteHandler@p 000C  
                ??i2_do_I2C_DO_NACK_STOP 0001                   ??i2_i2c1_driver_TXData 0001  
                       ?_LCD_pulseEnable 0001                ??i2_rd2RegCompleteHandler 000E  
           ??i2_do_I2C_SEND_RESTART_READ 0001           __end_of_PIN_MANAGER_Initialize 3062  
            __end_of_i2c_busCollisionISR 3F42                         LCD_command@value 002B  
         __size_of_rd1RegCompleteHandler 0036                ??i2_wr2RegCompleteHandler 000E  
          __end_of_rd1RegCompleteHandler 3868              __size_ofi2_do_I2C_SEND_STOP 0008  
               ??i2_i2c1_driver_sendNACK 0001           __size_of_wr1RegCompleteHandler 0036  
                 ??i2_i2c1_driver_isNACK 0001            __end_of_wr1RegCompleteHandler 389E  
       __size_ofi2_do_I2C_SEND_ADR_WRITE 0010                              ?_LCD_BL_SET 0001  
                  _do_I2C_SEND_ADR_WRITE 3C8C                              ?_LCD_EN_SET 0001  
                ??i2_i2c1_driver_sendACK 0001                     _do_I2C_SEND_ADR_READ 3CA2  
                  __end_ofi2_setCallBack 31CC                 ??i2_i2c1_driver_resetBus 0001  
                      XYZ_Read@wrtBuffer 0047                 i2wr1RegCompleteHandler@p 000C  
                ??i2_i2c1_driver_restart 0001                       i2_i2c_restartWrite 3F68  
                            ?_LCD_RS_SET 0001  
