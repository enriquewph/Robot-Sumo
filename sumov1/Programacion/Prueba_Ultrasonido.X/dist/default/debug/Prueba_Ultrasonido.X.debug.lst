

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Jun 16 15:49:11 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F47K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65  0000                     
    66                           ; Version 1.44
    67                           ; Generated 14/09/2017 GMT
    68                           ; 
    69                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F47K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100  0000                     
   101                           	psect	smallconst
   102  000F00                     __psmallconst:
   103                           	opt stack 0
   104  000F00  00                 	db	0
   105  000F01                     _dpowers:
   106                           	opt stack 0
   107  000F01  0001               	dw	1
   108  000F03  0000               	dw	0
   109  000F05  000A               	dw	10
   110  000F07  0000               	dw	0
   111  000F09  0064               	dw	100
   112  000F0B  0000               	dw	0
   113  000F0D  03E8               	dw	1000
   114  000F0F  0000               	dw	0
   115  000F11  2710               	dw	10000
   116  000F13  0000               	dw	0
   117  000F15  86A0               	dw	34464
   118  000F17  0001               	dw	1
   119  000F19  4240               	dw	16960
   120  000F1B  000F               	dw	15
   121  000F1D  9680               	dw	38528
   122  000F1F  0098               	dw	152
   123  000F21  E100               	dw	57600
   124  000F23  05F5               	dw	1525
   125  000F25  CA00               	dw	51712
   126  000F27  3B9A               	dw	15258
   127  000F29                     __end_of_dpowers:
   128                           	opt stack 0
   129  000F29                     __powers_:
   130                           	opt stack 0
   131  000F29  00                 	db	0
   132  000F2A  80                 	db	128
   133  000F2B  3F                 	db	63
   134  000F2C  00                 	db	0
   135  000F2D  20                 	db	32
   136  000F2E  41                 	db	65
   137  000F2F  00                 	db	0
   138  000F30  C8                 	db	200
   139  000F31  42                 	db	66
   140  000F32  00                 	db	0
   141  000F33  7A                 	db	122
   142  000F34  44                 	db	68
   143  000F35  40                 	db	64
   144  000F36  1C                 	db	28
   145  000F37  46                 	db	70
   146  000F38  50                 	db	80
   147  000F39  C3                 	db	195
   148  000F3A  47                 	db	71
   149  000F3B  24                 	db	36
   150  000F3C  74                 	db	116
   151  000F3D  49                 	db	73
   152  000F3E  97                 	db	151
   153  000F3F  18                 	db	24
   154  000F40  4B                 	db	75
   155  000F41  BC                 	db	188
   156  000F42  BE                 	db	190
   157  000F43  4C                 	db	76
   158  000F44  6B                 	db	107
   159  000F45  6E                 	db	110
   160  000F46  4E                 	db	78
   161  000F47  03                 	db	3
   162  000F48  15                 	db	21
   163  000F49  50                 	db	80
   164  000F4A  79                 	db	121
   165  000F4B  AD                 	db	173
   166  000F4C  60                 	db	96
   167  000F4D  F3                 	db	243
   168  000F4E  49                 	db	73
   169  000F4F  71                 	db	113
   170  000F50                     __end_of__powers_:
   171                           	opt stack 0
   172  000F50                     __npowers_:
   173                           	opt stack 0
   174  000F50  00                 	db	0
   175  000F51  80                 	db	128
   176  000F52  3F                 	db	63
   177  000F53  CD                 	db	205
   178  000F54  CC                 	db	204
   179  000F55  3D                 	db	61
   180  000F56  D7                 	db	215
   181  000F57  23                 	db	35
   182  000F58  3C                 	db	60
   183  000F59  12                 	db	18
   184  000F5A  83                 	db	131
   185  000F5B  3A                 	db	58
   186  000F5C  B7                 	db	183
   187  000F5D  D1                 	db	209
   188  000F5E  38                 	db	56
   189  000F5F  C6                 	db	198
   190  000F60  27                 	db	39
   191  000F61  37                 	db	55
   192  000F62  38                 	db	56
   193  000F63  86                 	db	134
   194  000F64  35                 	db	53
   195  000F65  C0                 	db	192
   196  000F66  D6                 	db	214
   197  000F67  33                 	db	51
   198  000F68  CC                 	db	204
   199  000F69  2B                 	db	43
   200  000F6A  32                 	db	50
   201  000F6B  70                 	db	112
   202  000F6C  89                 	db	137
   203  000F6D  30                 	db	48
   204  000F6E  E7                 	db	231
   205  000F6F  DB                 	db	219
   206  000F70  2E                 	db	46
   207  000F71  E5                 	db	229
   208  000F72  3C                 	db	60
   209  000F73  1E                 	db	30
   210  000F74  42                 	db	66
   211  000F75  A2                 	db	162
   212  000F76  0D                 	db	13
   213  000F77                     __end_of__npowers_:
   214                           	opt stack 0
   215  000F77                     STR_1:
   216                           
   217                           ; BSR set to: 0
   218  000F77  25                 	db	37
   219  000F78  66                 	db	102	;'f'
   220  000F79  20                 	db	32
   221  000F7A  0A                 	db	10
   222  000F7B  00                 	db	0
   223                           
   224                           ; #config settings
   225  000F7C  00                 	db	0	; dummy byte at the end
   226  0000                     
   227                           	psect	nvCOMRAM
   228  000050                     __pnvCOMRAM:
   229                           	opt stack 0
   230  000050                     _EUSART1_RxDefaultInterruptHandler:
   231                           	opt stack 0
   232  000050                     	ds	3
   233  000053                     _EUSART1_TxDefaultInterruptHandler:
   234                           	opt stack 0
   235  000053                     	ds	3
   236  000056                     _INT0_InterruptHandler:
   237                           	opt stack 0
   238  000056                     	ds	3
   239  000059                     _timer5ReloadVal:
   240                           	opt stack 0
   241  000059                     	ds	2
   242                           
   243                           	psect	nvBANK0
   244  0000E9                     __pnvBANK0:
   245                           	opt stack 0
   246  0000E9                     _eusart1TxBufferRemaining:
   247                           	opt stack 0
   248  0000E9                     	ds	1
   249  0000                     _RC6PPS	set	3837
   250  0000                     _RX1PPSbits	set	3765
   251  0000                     _INT0PPSbits	set	3745
   252  0000                     _PMD5	set	3814
   253  0000                     _PMD4	set	3813
   254  0000                     _PMD3	set	3812
   255  0000                     _PMD2	set	3811
   256  0000                     _PMD1	set	3810
   257  0000                     _PMD0	set	3809
   258  0000                     _OSCTUNE	set	3805
   259  0000                     _OSCFRQ	set	3806
   260  0000                     _OSCEN	set	3804
   261  0000                     _OSCCON3	set	3802
   262  0000                     _OSCCON1	set	3800
   263  0000                     _PIR3bits	set	3789
   264  0000                     _PIE3bits	set	3781
   265  0000                     _PIR4bits	set	3790
   266  0000                     _PIE0bits	set	3778
   267  0000                     _PIR0bits	set	3786
   268  0000                     _ODCOND	set	3876
   269  0000                     _ODCONC	set	3871
   270  0000                     _ODCONB	set	3863
   271  0000                     _ODCONA	set	3855
   272  0000                     _ODCONE	set	3884
   273  0000                     _WPUC	set	3872
   274  0000                     _WPUA	set	3856
   275  0000                     _WPUB	set	3864
   276  0000                     _WPUE	set	3885
   277  0000                     _WPUD	set	3877
   278  0000                     _ANSELA	set	3857
   279  0000                     _ANSELE	set	3886
   280  0000                     _ANSELB	set	3865
   281  0000                     _ANSELC	set	3873
   282  0000                     _ANSELD	set	3878
   283  0000                     _PORTBbits	set	3982
   284  0000                     _RC1REG	set	3993
   285  0000                     _RC1STAbits	set	3997
   286  0000                     _TX1REG	set	3994
   287  0000                     _TX1STAbits	set	3998
   288  0000                     _SP1BRGH	set	3996
   289  0000                     _SP1BRGL	set	3995
   290  0000                     _TX1STA	set	3998
   291  0000                     _RC1STA	set	3997
   292  0000                     _BAUD1CON	set	3999
   293  0000                     _TRISD	set	3979
   294  0000                     _TRISC	set	3978
   295  0000                     _TRISB	set	3977
   296  0000                     _TRISA	set	3976
   297  0000                     _TRISE	set	3980
   298  0000                     _LATC	set	3973
   299  0000                     _LATB	set	3972
   300  0000                     _LATA	set	3971
   301  0000                     _LATD	set	3974
   302  0000                     _LATE	set	3975
   303  0000                     _T5GCONbits	set	4036
   304  0000                     _T5CONbits	set	4035
   305  0000                     _T5CON	set	4035
   306  0000                     _TMR5L	set	4033
   307  0000                     _TMR5H	set	4034
   308  0000                     _T5CLK	set	4038
   309  0000                     _T5GATE	set	4037
   310  0000                     _T5GCON	set	4036
   311  0000                     _INTCONbits	set	4082
   312                           
   313                           	psect	cinit
   314  002C88                     __pcinit:
   315                           	opt stack 0
   316  002C88                     start_initialization:
   317                           	opt stack 0
   318  002C88                     __initialization:
   319                           	opt stack 0
   320                           
   321                           ; Clear objects allocated to BANK0 (37 bytes)
   322  002C88  EE00  F0C4         	lfsr	0,__pbssBANK0
   323  002C8C  0E25               	movlw	37
   324  002C8E                     clear_0:
   325  002C8E  6AEE               	clrf	postinc0,c
   326  002C90  06E8               	decf	wreg,f,c
   327  002C92  E1FD               	bnz	clear_0
   328                           
   329                           ; Clear objects allocated to COMRAM (20 bytes)
   330  002C94  EE00  F03C         	lfsr	0,__pbssCOMRAM
   331  002C98  0E14               	movlw	20
   332  002C9A                     clear_1:
   333  002C9A  6AEE               	clrf	postinc0,c
   334  002C9C  06E8               	decf	wreg,f,c
   335  002C9E  E1FD               	bnz	clear_1
   336  002CA0                     end_of_initialization:
   337                           	opt stack 0
   338  002CA0                     __end_of__initialization:
   339                           	opt stack 0
   340  002CA0  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   341  002CA2  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   342  002CA4  0100               	movlb	0
   343  002CA6  EF5A  F014         	goto	_main	;jump to C main() function
   344                           postinc0	equ	0xFEE
   345                           wreg	equ	0xFE8
   346                           
   347                           	psect	bssCOMRAM
   348  00003C                     __pbssCOMRAM:
   349                           	opt stack 0
   350  00003C                     _eusart1RxBuffer:
   351                           	opt stack 0
   352  00003C                     	ds	8
   353  000044                     _eusart1TxBuffer:
   354                           	opt stack 0
   355  000044                     	ds	8
   356  00004C                     _timerCount:
   357                           	opt stack 0
   358  00004C                     	ds	2
   359  00004E                     _eusart1RxCount:
   360                           	opt stack 0
   361  00004E                     	ds	1
   362  00004F                     _eusart1RxTail:
   363                           	opt stack 0
   364  00004F                     	ds	1
   365                           postinc0	equ	0xFEE
   366                           wreg	equ	0xFE8
   367                           
   368                           	psect	bssBANK0
   369  0000C4                     __pbssBANK0:
   370                           	opt stack 0
   371  0000C4                     _distancia:
   372                           	opt stack 0
   373  0000C4                     	ds	2
   374  0000C6                     _eusart1RxHead:
   375                           	opt stack 0
   376  0000C6                     	ds	1
   377  0000C7                     _eusart1TxTail:
   378                           	opt stack 0
   379  0000C7                     	ds	1
   380  0000C8                     _eusart1TxHead:
   381                           	opt stack 0
   382  0000C8                     	ds	1
   383  0000C9                     _vectorString:
   384                           	opt stack 0
   385  0000C9                     	ds	32
   386                           postinc0	equ	0xFEE
   387                           wreg	equ	0xFE8
   388                           
   389                           	psect	cstackBANK0
   390  000060                     __pcstackBANK0:
   391                           	opt stack 0
   392  000060                     ??_TMR5_Initialize:
   393  000060                     ?___awmod:
   394                           	opt stack 0
   395  000060                     ?___ftpack:
   396                           	opt stack 0
   397  000060                     ?___ftneg:
   398                           	opt stack 0
   399  000060                     ?__tdiv_to_l_:
   400                           	opt stack 0
   401  000060                     ?__div_to_l_:
   402                           	opt stack 0
   403  000060                     ?___lldiv:
   404                           	opt stack 0
   405  000060                     ?___llmod:
   406                           	opt stack 0
   407  000060                     EUSART1_Write@txData:
   408                           	opt stack 0
   409  000060                     ___awmod@dividend:
   410                           	opt stack 0
   411  000060                     INT0_SetInterruptHandler@InterruptHandler:
   412                           	opt stack 0
   413  000060                     EUSART1_SetTxInterruptHandler@interruptHandler:
   414                           	opt stack 0
   415  000060                     EUSART1_SetRxInterruptHandler@interruptHandler:
   416                           	opt stack 0
   417  000060                     __div_to_l_@f1:
   418                           	opt stack 0
   419  000060                     ___ftpack@arg:
   420                           	opt stack 0
   421  000060                     __tdiv_to_l_@f1:
   422                           	opt stack 0
   423  000060                     ___ftge@ff1:
   424                           	opt stack 0
   425  000060                     ___ftneg@f1:
   426                           	opt stack 0
   427  000060                     ___lldiv@dividend:
   428                           	opt stack 0
   429  000060                     ___llmod@dividend:
   430                           	opt stack 0
   431                           
   432                           ; 4 bytes @ 0x0
   433  000060                     	ds	1
   434  000061                     serial_print@cadena:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x1
   438  000061                     	ds	1
   439  000062                     ___awmod@divisor:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x2
   443  000062                     	ds	1
   444  000063                     serial_print@i:
   445                           	opt stack 0
   446  000063                     ___ftpack@exp:
   447                           	opt stack 0
   448  000063                     __div_to_l_@f2:
   449                           	opt stack 0
   450  000063                     __tdiv_to_l_@f2:
   451                           	opt stack 0
   452  000063                     ___ftge@ff2:
   453                           	opt stack 0
   454                           
   455                           ; 3 bytes @ 0x3
   456  000063                     	ds	1
   457  000064                     ___awmod@counter:
   458                           	opt stack 0
   459  000064                     ___ftpack@sign:
   460                           	opt stack 0
   461  000064                     ___lldiv@divisor:
   462                           	opt stack 0
   463  000064                     ___llmod@divisor:
   464                           	opt stack 0
   465                           
   466                           ; 4 bytes @ 0x4
   467  000064                     	ds	1
   468  000065                     ??___ftpack:
   469  000065                     ___awmod@sign:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x5
   473  000065                     	ds	1
   474  000066                     ??__tdiv_to_l_:
   475  000066                     ??___ftge:
   476  000066                     ?___awdiv:
   477                           	opt stack 0
   478  000066                     ___awdiv@dividend:
   479                           	opt stack 0
   480  000066                     __div_to_l_@quot:
   481                           	opt stack 0
   482                           
   483                           ; 4 bytes @ 0x6
   484  000066                     	ds	2
   485  000068                     ?___lltoft:
   486                           	opt stack 0
   487  000068                     ___llmod@counter:
   488                           	opt stack 0
   489  000068                     ___awdiv@divisor:
   490                           	opt stack 0
   491  000068                     ___lldiv@quotient:
   492                           	opt stack 0
   493  000068                     ___lltoft@c:
   494                           	opt stack 0
   495                           
   496                           ; 4 bytes @ 0x8
   497  000068                     	ds	1
   498  000069                     __tdiv_to_l_@quot:
   499                           	opt stack 0
   500                           
   501                           ; 4 bytes @ 0x9
   502  000069                     	ds	1
   503  00006A                     ___awdiv@counter:
   504                           	opt stack 0
   505  00006A                     __div_to_l_@cntr:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0xA
   509  00006A                     	ds	1
   510  00006B                     ___awdiv@sign:
   511                           	opt stack 0
   512  00006B                     __div_to_l_@exp1:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0xB
   516  00006B                     	ds	1
   517  00006C                     ??___lltoft:
   518  00006C                     ___lldiv@counter:
   519                           	opt stack 0
   520  00006C                     ___awdiv@quotient:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0xC
   524  00006C                     	ds	1
   525  00006D                     __tdiv_to_l_@cntr:
   526                           	opt stack 0
   527                           
   528                           ; 1 bytes @ 0xD
   529  00006D                     	ds	1
   530  00006E                     ?___wmul:
   531                           	opt stack 0
   532  00006E                     __tdiv_to_l_@exp1:
   533                           	opt stack 0
   534  00006E                     ___wmul@multiplier:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0xE
   538  00006E                     	ds	2
   539  000070                     ___lltoft@exp:
   540                           	opt stack 0
   541  000070                     ___wmul@multiplicand:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x10
   545  000070                     	ds	2
   546  000072                     ___wmul@product:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x12
   550  000072                     	ds	2
   551  000074                     ?___ftmul:
   552                           	opt stack 0
   553  000074                     ___ftmul@f1:
   554                           	opt stack 0
   555                           
   556                           ; 3 bytes @ 0x14
   557  000074                     	ds	3
   558  000077                     ___ftmul@f2:
   559                           	opt stack 0
   560                           
   561                           ; 3 bytes @ 0x17
   562  000077                     	ds	3
   563  00007A                     ??___ftmul:
   564                           
   565                           ; 1 bytes @ 0x1A
   566  00007A                     	ds	3
   567  00007D                     ___ftmul@exp:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x1D
   571  00007D                     	ds	1
   572  00007E                     ___ftmul@f3_as_product:
   573                           	opt stack 0
   574                           
   575                           ; 3 bytes @ 0x1E
   576  00007E                     	ds	3
   577  000081                     ___ftmul@cntr:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x21
   581  000081                     	ds	1
   582  000082                     ___ftmul@sign:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x22
   586  000082                     	ds	1
   587  000083                     ?_fround:
   588                           	opt stack 0
   589  000083                     ?_scale:
   590                           	opt stack 0
   591                           
   592                           ; 3 bytes @ 0x23
   593  000083                     	ds	3
   594  000086                     _fround$1488:
   595                           	opt stack 0
   596  000086                     _scale$1489:
   597                           	opt stack 0
   598                           
   599                           ; 3 bytes @ 0x26
   600  000086                     	ds	3
   601  000089                     scale@scl:
   602                           	opt stack 0
   603  000089                     _fround$1487:
   604                           	opt stack 0
   605                           
   606                           ; 3 bytes @ 0x29
   607  000089                     	ds	1
   608  00008A                     ?___fttol:
   609                           	opt stack 0
   610  00008A                     ___fttol@f1:
   611                           	opt stack 0
   612                           
   613                           ; 3 bytes @ 0x2A
   614  00008A                     	ds	2
   615  00008C                     fround@prec:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x2C
   619  00008C                     	ds	1
   620  00008D                     ?___ftadd:
   621                           	opt stack 0
   622  00008D                     ___ftadd@f1:
   623                           	opt stack 0
   624                           
   625                           ; 3 bytes @ 0x2D
   626  00008D                     	ds	1
   627  00008E                     ??___fttol:
   628                           
   629                           ; 1 bytes @ 0x2E
   630  00008E                     	ds	2
   631  000090                     ___ftadd@f2:
   632                           	opt stack 0
   633                           
   634                           ; 3 bytes @ 0x30
   635  000090                     	ds	3
   636  000093                     ??___ftadd:
   637  000093                     ___fttol@sign1:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0x33
   641  000093                     	ds	1
   642  000094                     ___fttol@lval:
   643                           	opt stack 0
   644                           
   645                           ; 4 bytes @ 0x34
   646  000094                     	ds	2
   647  000096                     ___ftadd@sign:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x36
   651  000096                     	ds	1
   652  000097                     ___ftadd@exp2:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0x37
   656  000097                     	ds	1
   657  000098                     ___ftadd@exp1:
   658                           	opt stack 0
   659  000098                     ___fttol@exp1:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x38
   663  000098                     	ds	1
   664  000099                     ?___ftsub:
   665                           	opt stack 0
   666  000099                     ___ftsub@f1:
   667                           	opt stack 0
   668                           
   669                           ; 3 bytes @ 0x39
   670  000099                     	ds	3
   671  00009C                     ___ftsub@f2:
   672                           	opt stack 0
   673                           
   674                           ; 3 bytes @ 0x3C
   675  00009C                     	ds	3
   676  00009F                     ?_sprintf:
   677                           	opt stack 0
   678  00009F                     sprintf@sp:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x3F
   682  00009F                     	ds	2
   683  0000A1                     sprintf@f:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x41
   687  0000A1                     	ds	4
   688  0000A5                     ??_sprintf:
   689                           
   690                           ; 1 bytes @ 0x45
   691  0000A5                     	ds	6
   692  0000AB                     _sprintf$1490:
   693                           	opt stack 0
   694                           
   695                           ; 3 bytes @ 0x4B
   696  0000AB                     	ds	3
   697  0000AE                     sprintf@ap:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x4E
   701  0000AE                     	ds	2
   702  0000B0                     sprintf@flag:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x50
   706  0000B0                     	ds	2
   707  0000B2                     sprintf@prec:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0x52
   711  0000B2                     	ds	2
   712  0000B4                     sprintf@val:
   713                           	opt stack 0
   714                           
   715                           ; 4 bytes @ 0x54
   716  0000B4                     	ds	4
   717  0000B8                     sprintf@exp:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x58
   721  0000B8                     	ds	2
   722  0000BA                     sprintf@tmpval:
   723                           	opt stack 0
   724                           
   725                           ; 4 bytes @ 0x5A
   726  0000BA                     	ds	4
   727  0000BE                     sprintf@fval:
   728                           	opt stack 0
   729                           
   730                           ; 3 bytes @ 0x5E
   731  0000BE                     	ds	3
   732  0000C1                     sprintf@c:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0x61
   736  0000C1                     	ds	1
   737  0000C2                     ??_main:
   738                           
   739                           ; 1 bytes @ 0x62
   740  0000C2                     	ds	2
   741                           postinc0	equ	0xFEE
   742                           wreg	equ	0xFE8
   743                           
   744                           	psect	cstackCOMRAM
   745  000001                     __pcstackCOMRAM:
   746                           	opt stack 0
   747  000001                     ?_TMR5_ReadTimer:
   748                           	opt stack 0
   749  000001                     ?i2___ftpack:
   750                           	opt stack 0
   751  000001                     TMR5_WriteTimer@timerVal:
   752                           	opt stack 0
   753  000001                     i2___ftpack@arg:
   754                           	opt stack 0
   755                           
   756                           ; 3 bytes @ 0x0
   757  000001                     	ds	2
   758  000003                     ??_TMR5_ReadTimer:
   759  000003                     
   760                           ; 1 bytes @ 0x2
   761  000003                     	ds	1
   762  000004                     i2___ftpack@exp:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x3
   766  000004                     	ds	1
   767  000005                     i2___ftpack@sign:
   768                           	opt stack 0
   769  000005                     TMR5_ReadTimer@readVal:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x4
   773  000005                     	ds	1
   774  000006                     ??i2___ftpack:
   775                           
   776                           ; 1 bytes @ 0x5
   777  000006                     	ds	1
   778  000007                     TMR5_ReadTimer@readValHigh:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x6
   782  000007                     	ds	1
   783  000008                     TMR5_ReadTimer@readValLow:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0x7
   787  000008                     	ds	1
   788  000009                     ?___lwtoft:
   789                           	opt stack 0
   790  000009                     ___lwtoft@c:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x8
   794  000009                     	ds	3
   795  00000C                     ?i2___ftmul:
   796                           	opt stack 0
   797  00000C                     i2___ftmul@f1:
   798                           	opt stack 0
   799                           
   800                           ; 3 bytes @ 0xB
   801  00000C                     	ds	3
   802  00000F                     i2___ftmul@f2:
   803                           	opt stack 0
   804                           
   805                           ; 3 bytes @ 0xE
   806  00000F                     	ds	3
   807  000012                     ??i2___ftmul:
   808                           
   809                           ; 1 bytes @ 0x11
   810  000012                     	ds	3
   811  000015                     i2___ftmul@exp:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x14
   815  000015                     	ds	1
   816  000016                     i2___ftmul@f3_as_product:
   817                           	opt stack 0
   818                           
   819                           ; 3 bytes @ 0x15
   820  000016                     	ds	3
   821  000019                     i2___ftmul@cntr:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x18
   825  000019                     	ds	1
   826  00001A                     i2___ftmul@sign:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x19
   830  00001A                     	ds	1
   831  00001B                     ?i2___fttol:
   832                           	opt stack 0
   833  00001B                     i2___fttol@f1:
   834                           	opt stack 0
   835                           
   836                           ; 3 bytes @ 0x1A
   837  00001B                     	ds	4
   838  00001F                     ??i2___fttol:
   839                           
   840                           ; 1 bytes @ 0x1E
   841  00001F                     	ds	5
   842  000024                     i2___fttol@sign1:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x23
   846  000024                     	ds	1
   847  000025                     i2___fttol@lval:
   848                           	opt stack 0
   849                           
   850                           ; 4 bytes @ 0x24
   851  000025                     	ds	4
   852  000029                     i2___fttol@exp1:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x28
   856  000029                     	ds	1
   857  00002A                     ??_INTERRUPT_InterruptManager:
   858                           
   859                           ; 1 bytes @ 0x29
   860  00002A                     	ds	18
   861                           postinc0	equ	0xFEE
   862                           wreg	equ	0xFE8
   863                           
   864 ;;
   865 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   866 ;;
   867 ;; *************** function _main *****************
   868 ;; Defined at:
   869 ;;		line 58 in file "main.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;		None
   872 ;; Auto vars:     Size  Location     Type
   873 ;;		None
   874 ;; Return value:  Size  Location     Type
   875 ;;                  1    wreg      void 
   876 ;; Registers used:
   877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   885 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   886 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   887 ;;Total ram usage:        2 bytes
   888 ;; Hardware stack levels required when called:   10
   889 ;; This function calls:
   890 ;;		_INT0_SetInterruptHandler
   891 ;;		_SYSTEM_Initialize
   892 ;;		_TMR5_StopTimer
   893 ;;		_serial_print
   894 ;;		_sprintf
   895 ;; This function is called by:
   896 ;;		Startup code after reset
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           	psect	text0
   901  0028B4                     __ptext0:
   902                           	opt stack 0
   903  0028B4                     _main:
   904                           	opt stack 21
   905                           
   906                           ;main.c: 61: SYSTEM_Initialize();
   907                           
   908                           ;incstack = 0
   909  0028B4  EC76  F016         	call	_SYSTEM_Initialize	;wreg free
   910                           
   911                           ;main.c: 62: INT0_SetInterruptHandler(echoChanged);
   912  0028B8  0E3C               	movlw	low _echoChanged
   913  0028BA  0100               	movlb	0	; () banked
   914  0028BC  6F60               	movwf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
   915  0028BE  0E28               	movlw	high _echoChanged
   916  0028C0  6F61               	movwf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
   917  0028C2  0E00               	movlw	low (_echoChanged shr (0+16))
   918  0028C4  6F62               	movwf	(INT0_SetInterruptHandler@InterruptHandler+2)& (0+255),b
   919  0028C6  ECBC  F016         	call	_INT0_SetInterruptHandler	;wreg free
   920                           
   921                           ;main.c: 63: (INTCONbits.INT0EDG = 1);
   922  0028CA  80F2               	bsf	intcon,0,c	;volatile
   923                           
   924                           ;main.c: 70: (INTCONbits.GIE = 1);
   925  0028CC  8EF2               	bsf	intcon,7,c	;volatile
   926                           
   927                           ;main.c: 76: (INTCONbits.PEIE = 1);
   928  0028CE  8CF2               	bsf	intcon,6,c	;volatile
   929                           
   930                           ;main.c: 81: TMR5_StopTimer();
   931  0028D0  ECD6  F016         	call	_TMR5_StopTimer	;wreg free
   932                           
   933                           ;main.c: 82: PORTBbits.RB1 = 1;
   934  0028D4  828E               	bsf	3982,1,c	;volatile
   935                           
   936                           ;main.c: 83: _delay((unsigned long)((10)*(32000000/4000000.0)));
   937  0028D6  0E1A               	movlw	26
   938  0028D8                     u3217:
   939  0028D8  2EE8               	decfsz	wreg,f,c
   940  0028DA  D7FE               	bra	u3217
   941  0028DC  D000               	nop2	
   942                           
   943                           ;main.c: 84: PORTBbits.RB1 = 0;
   944  0028DE  928E               	bcf	3982,1,c	;volatile
   945  0028E0                     
   946                           ;main.c: 87: {
   947                           ;main.c: 88: _delay((unsigned long)((200)*(32000000/4000.0)));
   948  0028E0  0E09               	movlw	9
   949  0028E2  0100               	movlb	0	; () banked
   950  0028E4  6FC3               	movwf	(??_main+1)& (0+255),b
   951  0028E6  0E1E               	movlw	30
   952  0028E8  6FC2               	movwf	??_main& (0+255),b
   953  0028EA  0EE4               	movlw	228
   954  0028EC                     u3227:
   955  0028EC  2EE8               	decfsz	wreg,f,c
   956  0028EE  D7FE               	bra	u3227
   957  0028F0  2FC2               	decfsz	??_main& (0+255),f,b
   958  0028F2  D7FC               	bra	u3227
   959  0028F4  2FC3               	decfsz	(??_main+1)& (0+255),f,b
   960  0028F6  D7FA               	bra	u3227
   961  0028F8  F000               	nop	
   962                           
   963                           ;main.c: 89: sprintf(vectorString, "%f \n", distancia);
   964  0028FA  0EC9               	movlw	low _vectorString
   965  0028FC  0100               	movlb	0	; () banked
   966  0028FE  6F9F               	movwf	sprintf@sp& (0+255),b
   967  002900  0E00               	movlw	high _vectorString
   968  002902  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
   969  002904  0E77               	movlw	low STR_1
   970  002906  6FA1               	movwf	sprintf@f& (0+255),b
   971  002908  0E0F               	movlw	high STR_1
   972  00290A  6FA2               	movwf	(sprintf@f+1)& (0+255),b
   973  00290C  C0C4  F0A3         	movff	_distancia,?_sprintf+4
   974  002910  C0C5  F0A4         	movff	_distancia+1,?_sprintf+5
   975  002914  ECBF  F007         	call	_sprintf	;wreg free
   976                           
   977                           ;main.c: 90: serial_print(vectorString);
   978  002918  0EC9               	movlw	low _vectorString
   979  00291A  0100               	movlb	0	; () banked
   980  00291C  6F61               	movwf	serial_print@cadena& (0+255),b
   981  00291E  0E00               	movlw	high _vectorString
   982  002920  6F62               	movwf	(serial_print@cadena+1)& (0+255),b
   983  002922  ECA3  F015         	call	_serial_print	;wreg free
   984  002926  D7DC               	goto	l352
   985  002928                     __end_of_main:
   986                           	opt stack 0
   987                           intcon	equ	0xFF2
   988                           postinc0	equ	0xFEE
   989                           wreg	equ	0xFE8
   990                           
   991 ;; *************** function _sprintf *****************
   992 ;; Defined at:
   993 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
   994 ;; Parameters:    Size  Location     Type
   995 ;;  sp              2   63[BANK0 ] PTR unsigned char 
   996 ;;		 -> vectorString(32), 
   997 ;;  f               2   65[BANK0 ] PTR const unsigned char 
   998 ;;		 -> STR_1(5), 
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;  tmpval          4   90[BANK0 ] struct .
  1001 ;;  val             4   84[BANK0 ] unsigned long 
  1002 ;;  fval            3   94[BANK0 ] unsigned long 
  1003 ;;  cp              3    0        PTR const unsigned char 
  1004 ;;  exp             2   88[BANK0 ] int 
  1005 ;;  prec            2   82[BANK0 ] int 
  1006 ;;  flag            2   80[BANK0 ] unsigned short 
  1007 ;;  ap              2   78[BANK0 ] PTR void [1]
  1008 ;;		 -> ?_sprintf(2), 
  1009 ;;  len             2    0        unsigned int 
  1010 ;;  width           2    0        int 
  1011 ;;  c               1   97[BANK0 ] char 
  1012 ;;  d               1    0        unsigned char 
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  2   63[BANK0 ] int 
  1015 ;; Registers used:
  1016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1022 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1023 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1024 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1025 ;;      Totals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1026 ;;Total ram usage:       35 bytes
  1027 ;; Hardware stack levels used:    1
  1028 ;; Hardware stack levels required when called:    9
  1029 ;; This function calls:
  1030 ;;		___awdiv
  1031 ;;		___ftadd
  1032 ;;		___ftge
  1033 ;;		___ftmul
  1034 ;;		___ftneg
  1035 ;;		___ftsub
  1036 ;;		___fttol
  1037 ;;		___lldiv
  1038 ;;		___llmod
  1039 ;;		___lltoft
  1040 ;;		___wmul
  1041 ;;		__div_to_l_
  1042 ;;		__tdiv_to_l_
  1043 ;;		_fround
  1044 ;;		_scale
  1045 ;; This function is called by:
  1046 ;;		_main
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050                           	psect	text1
  1051  000F7E                     __ptext1:
  1052                           	opt stack 0
  1053  000F7E                     _sprintf:
  1054                           	opt stack 21
  1055                           
  1056                           ;doprnt.c: 494: va_list ap;
  1057                           ;doprnt.c: 499: signed char c;
  1058                           ;doprnt.c: 501: int width;
  1059                           ;doprnt.c: 504: int prec;
  1060                           ;doprnt.c: 508: unsigned short flag;
  1061                           ;doprnt.c: 515: char d;
  1062                           ;doprnt.c: 516: double fval;
  1063                           ;doprnt.c: 517: int exp;
  1064                           ;doprnt.c: 523: union {
  1065                           ;doprnt.c: 524: unsigned long vd;
  1066                           ;doprnt.c: 525: double integ;
  1067                           ;doprnt.c: 526: } tmpval;
  1068                           ;doprnt.c: 528: unsigned long val;
  1069                           ;doprnt.c: 529: unsigned len;
  1070                           ;doprnt.c: 530: const char * cp;
  1071                           ;doprnt.c: 533: *ap = __va_start();
  1072                           
  1073                           ;incstack = 0
  1074  000F7E  0EA3               	movlw	low (?_sprintf+4)
  1075  000F80  0100               	movlb	0	; () banked
  1076  000F82  6FAE               	movwf	sprintf@ap& (0+255),b
  1077  000F84  0E00               	movlw	high (?_sprintf+4)
  1078  000F86  6FAF               	movwf	(sprintf@ap+1)& (0+255),b
  1079                           
  1080                           ;doprnt.c: 536: while(c = *f++) {
  1081  000F88  D30F               	goto	l445
  1082  000F8A                     
  1083                           ; BSR set to: 0
  1084                           ;doprnt.c: 538: if(c != '%')
  1085                           
  1086                           ; BSR set to: 0
  1087  000F8A  0E25               	movlw	37
  1088  000F8C  19C1               	xorwf	sprintf@c& (0+255),w,b
  1089  000F8E  B4D8               	btfsc	status,2,c
  1090  000F90  D007               	goto	l401
  1091                           
  1092                           ; BSR set to: 0
  1093                           ;doprnt.c: 540: {
  1094                           ;doprnt.c: 541: ((*sp++ = (c)));
  1095  000F92  C09F  FFD9         	movff	sprintf@sp,fsr2l
  1096  000F96  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  1097  000F9A  C0C1  FFDF         	movff	sprintf@c,indf2
  1098  000F9E  D302               	goto	l3265
  1099  000FA0                     l401:
  1100                           
  1101                           ; BSR set to: 0
  1102                           ;doprnt.c: 543: }
  1103                           ;doprnt.c: 548: flag = 0;
  1104                           
  1105                           ; BSR set to: 0
  1106  000FA0  0E00               	movlw	0
  1107  000FA2  6FB1               	movwf	(sprintf@flag+1)& (0+255),b
  1108  000FA4  0E00               	movlw	0
  1109  000FA6  6FB0               	movwf	sprintf@flag& (0+255),b
  1110                           
  1111                           ;doprnt.c: 635: switch(c = *f++) {
  1112  000FA8  D002               	goto	l402
  1113  000FAA                     
  1114                           ; BSR set to: 0
  1115                           ;doprnt.c: 663: flag |= 0x400;
  1116                           
  1117                           ; BSR set to: 0
  1118  000FAA  85B1               	bsf	(sprintf@flag+1)& (0+255),2,b
  1119                           
  1120                           ;doprnt.c: 664: break;
  1121  000FAC  D013               	goto	l406
  1122  000FAE                     l402:
  1123                           
  1124                           ; BSR set to: 0
  1125                           
  1126                           ; BSR set to: 0
  1127  000FAE  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1128  000FB2  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1129  000FB6  4BA1               	infsnz	sprintf@f& (0+255),f,b
  1130  000FB8  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  1131  000FBA                     	if	0	;tblptru may be non-zero
  1132  000FBA                     	endif
  1133  000FBA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1134  000FBA  0E00               	movlw	low (__mediumconst shr (0+16))
  1135  000FBC  6EF8               	movwf	tblptru,c
  1136  000FBE                     	endif
  1137  000FBE  0008               	tblrd		*
  1138  000FC0  CFF5 F0C1          	movff	tablat,sprintf@c
  1139  000FC4  51C1               	movf	sprintf@c& (0+255),w,b
  1140                           
  1141                           ; Switch size 1, requested type "space"
  1142                           ; Number of cases is 2, Range of values is 0 to 102
  1143                           ; switch strategies available:
  1144                           ; Name         Instructions Cycles
  1145                           ; simple_byte            7     4 (average)
  1146                           ;	Chosen strategy is simple_byte
  1147  000FC6  0A00               	xorlw	0	; case 0
  1148  000FC8  B4D8               	btfsc	status,2,c
  1149  000FCA  D2FC               	goto	u3100
  1150  000FCC  0A66               	xorlw	102	; case 102
  1151  000FCE  B4D8               	btfsc	status,2,c
  1152  000FD0  D7EC               	goto	l405
  1153  000FD2  D2EA               	goto	l445
  1154  000FD4                     l406:
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;doprnt.c: 825: if(flag & (0x700)) {
  1158                           
  1159                           ; BSR set to: 0
  1160  000FD4  0E07               	movlw	7
  1161  000FD6  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  1162  000FD8  B4D8               	btfsc	status,2,c
  1163  000FDA  D2D4               	goto	l408
  1164                           
  1165                           ; BSR set to: 0
  1166                           ;doprnt.c: 829: prec = 6;
  1167  000FDC  0E00               	movlw	0
  1168  000FDE  6FB3               	movwf	(sprintf@prec+1)& (0+255),b
  1169  000FE0  0E06               	movlw	6
  1170  000FE2  6FB2               	movwf	sprintf@prec& (0+255),b
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1174  000FE4  C0AE  FFD9         	movff	sprintf@ap,fsr2l
  1175  000FE8  C0AF  FFDA         	movff	sprintf@ap+1,fsr2h
  1176  000FEC  CFDE F0BE          	movff	postinc2,sprintf@fval
  1177  000FF0  CFDE F0BF          	movff	postinc2,sprintf@fval+1
  1178  000FF4  CFDD F0C0          	movff	postdec2,sprintf@fval+2
  1179                           
  1180                           ; BSR set to: 0
  1181  000FF8  0E03               	movlw	3
  1182  000FFA  27AE               	addwf	sprintf@ap& (0+255),f,b
  1183  000FFC  0E00               	movlw	0
  1184  000FFE  23AF               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;doprnt.c: 831: if(fval < 0.0) {
  1188  001000  AFC0               	btfss	(sprintf@fval+2)& (0+255),7,b
  1189  001002  D011               	goto	l409
  1190                           
  1191                           ; BSR set to: 0
  1192                           ;doprnt.c: 832: fval = -fval;
  1193  001004  C0BE  F060         	movff	sprintf@fval,___ftneg@f1
  1194  001008  C0BF  F061         	movff	sprintf@fval+1,___ftneg@f1+1
  1195  00100C  C0C0  F062         	movff	sprintf@fval+2,___ftneg@f1+2
  1196  001010  EC1F  F016         	call	___ftneg	;wreg free
  1197  001014  C060  F0BE         	movff	?___ftneg,sprintf@fval
  1198  001018  C061  F0BF         	movff	?___ftneg+1,sprintf@fval+1
  1199  00101C  C062  F0C0         	movff	?___ftneg+2,sprintf@fval+2
  1200                           
  1201                           ;doprnt.c: 833: flag |= 0x03;
  1202  001020  0E03               	movlw	3
  1203  001022  0100               	movlb	0	; () banked
  1204  001024  13B0               	iorwf	sprintf@flag& (0+255),f,b
  1205  001026                     l409:
  1206                           
  1207                           ; BSR set to: 0
  1208                           ;doprnt.c: 834: }
  1209                           ;doprnt.c: 835: exp = 0;
  1210                           
  1211                           ; BSR set to: 0
  1212  001026  0E00               	movlw	0
  1213  001028  6FB9               	movwf	(sprintf@exp+1)& (0+255),b
  1214  00102A  0E00               	movlw	0
  1215  00102C  6FB8               	movwf	sprintf@exp& (0+255),b
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;doprnt.c: 836: if( fval!=0) {
  1219  00102E  51BE               	movf	sprintf@fval& (0+255),w,b
  1220  001030  11BF               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1221  001032  11C0               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1222  001034  B4D8               	btfsc	status,2,c
  1223  001036  D088               	goto	l414
  1224                           
  1225                           ; BSR set to: 0
  1226                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1227  001038  0E82               	movlw	130
  1228  00103A  6FA5               	movwf	??_sprintf& (0+255),b
  1229  00103C  0EFF               	movlw	255
  1230  00103E  6FA6               	movwf	(??_sprintf+1)& (0+255),b
  1231  001040  C0BE  F0A7         	movff	sprintf@fval,??_sprintf+2
  1232  001044  C0BF  F0A8         	movff	sprintf@fval+1,??_sprintf+3
  1233  001048  C0C0  F0A9         	movff	sprintf@fval+2,??_sprintf+4
  1234  00104C  C0C1  F0AA         	movff	sprintf@fval+3,??_sprintf+5
  1235  001050  0E10               	movlw	16
  1236  001052  D005               	goto	u2890
  1237  001054                     u2895:
  1238  001054  90D8               	bcf	status,0,c
  1239  001056  33AA               	rrcf	(??_sprintf+5)& (0+255),f,b
  1240  001058  33A9               	rrcf	(??_sprintf+4)& (0+255),f,b
  1241  00105A  33A8               	rrcf	(??_sprintf+3)& (0+255),f,b
  1242  00105C  33A7               	rrcf	(??_sprintf+2)& (0+255),f,b
  1243  00105E                     u2890:
  1244  00105E  2EE8               	decfsz	wreg,f,c
  1245  001060  D7F9               	goto	u2895
  1246  001062  51A7               	movf	(??_sprintf+2)& (0+255),w,b
  1247  001064  25A5               	addwf	??_sprintf& (0+255),w,b
  1248  001066  6FB8               	movwf	sprintf@exp& (0+255),b
  1249  001068  0E00               	movlw	0
  1250  00106A  21A6               	addwfc	(??_sprintf+1)& (0+255),w,b
  1251  00106C  6FB9               	movwf	(sprintf@exp+1)& (0+255),b
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;doprnt.c: 838: exp--;
  1255  00106E  07B8               	decf	sprintf@exp& (0+255),f,b
  1256  001070  A0D8               	btfss	status,0,c
  1257  001072  07B9               	decf	(sprintf@exp+1)& (0+255),f,b
  1258                           
  1259                           ; BSR set to: 0
  1260                           ;doprnt.c: 839: exp *= 3;
  1261  001074  C0B8  F06E         	movff	sprintf@exp,___wmul@multiplier
  1262  001078  C0B9  F06F         	movff	sprintf@exp+1,___wmul@multiplier+1
  1263  00107C  0E00               	movlw	0
  1264  00107E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1265  001080  0E03               	movlw	3
  1266  001082  6F70               	movwf	___wmul@multiplicand& (0+255),b
  1267  001084  EC0B  F016         	call	___wmul	;wreg free
  1268  001088  C06E  F0B8         	movff	?___wmul,sprintf@exp
  1269  00108C  C06F  F0B9         	movff	?___wmul+1,sprintf@exp+1
  1270                           
  1271                           ;doprnt.c: 840: exp /= 10;
  1272  001090  C0B8  F066         	movff	sprintf@exp,___awdiv@dividend
  1273  001094  C0B9  F067         	movff	sprintf@exp+1,___awdiv@dividend+1
  1274  001098  0E00               	movlw	0
  1275  00109A  0100               	movlb	0	; () banked
  1276  00109C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  1277  00109E  0E0A               	movlw	10
  1278  0010A0  6F68               	movwf	___awdiv@divisor& (0+255),b
  1279  0010A2  EC5C  F013         	call	___awdiv	;wreg free
  1280  0010A6  C066  F0B8         	movff	?___awdiv,sprintf@exp
  1281  0010AA  C067  F0B9         	movff	?___awdiv+1,sprintf@exp+1
  1282                           
  1283                           ;doprnt.c: 841: if(exp < 0)
  1284  0010AE  0100               	movlb	0	; () banked
  1285  0010B0  AFB9               	btfss	(sprintf@exp+1)& (0+255),7,b
  1286  0010B2  D003               	goto	l411
  1287                           
  1288                           ; BSR set to: 0
  1289                           ;doprnt.c: 842: exp--;
  1290  0010B4  07B8               	decf	sprintf@exp& (0+255),f,b
  1291  0010B6  A0D8               	btfss	status,0,c
  1292  0010B8  07B9               	decf	(sprintf@exp+1)& (0+255),f,b
  1293  0010BA                     l411:
  1294                           
  1295                           ; BSR set to: 0
  1296                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1297                           
  1298                           ; BSR set to: 0
  1299  0010BA  51B8               	movf	sprintf@exp& (0+255),w,b
  1300  0010BC  0800               	sublw	0
  1301  0010BE  ECE9  F00A         	call	_scale
  1302  0010C2  C083  F0BA         	movff	?_scale,sprintf@tmpval
  1303  0010C6  C084  F0BB         	movff	?_scale+1,sprintf@tmpval+1
  1304  0010CA  C085  F0BC         	movff	?_scale+2,sprintf@tmpval+2
  1305                           
  1306                           ;doprnt.c: 847: tmpval.integ *= fval;
  1307  0010CE  C0BA  F074         	movff	sprintf@tmpval,___ftmul@f1
  1308  0010D2  C0BB  F075         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1309  0010D6  C0BC  F076         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1310  0010DA  C0BE  F077         	movff	sprintf@fval,___ftmul@f2
  1311  0010DE  C0BF  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  1312  0010E2  C0C0  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  1313  0010E6  ECF5  F010         	call	___ftmul	;wreg free
  1314  0010EA  C074  F0BA         	movff	?___ftmul,sprintf@tmpval
  1315  0010EE  C075  F0BB         	movff	?___ftmul+1,sprintf@tmpval+1
  1316  0010F2  C076  F0BC         	movff	?___ftmul+2,sprintf@tmpval+2
  1317                           
  1318                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1319  0010F6  C0BA  F060         	movff	sprintf@tmpval,___ftge@ff1
  1320  0010FA  C0BB  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1321  0010FE  C0BC  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1322  001102  0E00               	movlw	0
  1323  001104  0100               	movlb	0	; () banked
  1324  001106  6F63               	movwf	___ftge@ff2& (0+255),b
  1325  001108  0E80               	movlw	128
  1326  00110A  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  1327  00110C  0E3F               	movlw	63
  1328  00110E  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  1329  001110  EC13  F013         	call	___ftge	;wreg free
  1330  001114  0100               	movlb	0	; () banked
  1331  001116  B0D8               	btfsc	status,0,c
  1332  001118  D004               	goto	l412
  1333                           
  1334                           ; BSR set to: 0
  1335                           ;doprnt.c: 849: exp--;
  1336  00111A  07B8               	decf	sprintf@exp& (0+255),f,b
  1337  00111C  A0D8               	btfss	status,0,c
  1338  00111E  07B9               	decf	(sprintf@exp+1)& (0+255),f,b
  1339  001120  D013               	goto	l414
  1340  001122                     l412:
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1344                           
  1345                           ; BSR set to: 0
  1346  001122  C0BA  F060         	movff	sprintf@tmpval,___ftge@ff1
  1347  001126  C0BB  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1348  00112A  C0BC  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1349  00112E  0E00               	movlw	0
  1350  001130  6F63               	movwf	___ftge@ff2& (0+255),b
  1351  001132  0E20               	movlw	32
  1352  001134  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  1353  001136  0E41               	movlw	65
  1354  001138  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  1355  00113A  EC13  F013         	call	___ftge	;wreg free
  1356  00113E  0100               	movlb	0	; () banked
  1357  001140  A0D8               	btfss	status,0,c
  1358  001142  D002               	goto	l414
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;doprnt.c: 851: exp++;
  1362  001144  4BB8               	infsnz	sprintf@exp& (0+255),f,b
  1363  001146  2BB9               	incf	(sprintf@exp+1)& (0+255),f,b
  1364  001148                     l414:
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;doprnt.c: 852: }
  1368                           ;doprnt.c: 1112: if(prec <= 12)
  1369                           
  1370                           ; BSR set to: 0
  1371                           
  1372                           ; BSR set to: 0
  1373                           
  1374                           ; BSR set to: 0
  1375  001148  BFB3               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1376  00114A  D006               	goto	u2930
  1377  00114C  51B3               	movf	(sprintf@prec+1)& (0+255),w,b
  1378  00114E  E11B               	bnz	l3161
  1379  001150  0E0D               	movlw	13
  1380  001152  5DB2               	subwf	sprintf@prec& (0+255),w,b
  1381  001154  B0D8               	btfsc	status,0,c
  1382  001156  D017               	goto	l415
  1383  001158                     u2930:
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;doprnt.c: 1113: fval += fround(prec);
  1387  001158  C0BE  F08D         	movff	sprintf@fval,___ftadd@f1
  1388  00115C  C0BF  F08E         	movff	sprintf@fval+1,___ftadd@f1+1
  1389  001160  C0C0  F08F         	movff	sprintf@fval+2,___ftadd@f1+2
  1390  001164  51B2               	movf	sprintf@prec& (0+255),w,b
  1391  001166  EC29  F00D         	call	_fround
  1392  00116A  C083  F090         	movff	?_fround,___ftadd@f2
  1393  00116E  C084  F091         	movff	?_fround+1,___ftadd@f2+1
  1394  001172  C085  F092         	movff	?_fround+2,___ftadd@f2+2
  1395  001176  EC73  F00E         	call	___ftadd	;wreg free
  1396  00117A  C08D  F0BE         	movff	?___ftadd,sprintf@fval
  1397  00117E  C08E  F0BF         	movff	?___ftadd+1,sprintf@fval+1
  1398  001182  C08F  F0C0         	movff	?___ftadd+2,sprintf@fval+2
  1399  001186                     l415:
  1400  001186                     l3161:
  1401                           
  1402                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1403  001186  0100               	movlb	0	; () banked
  1404  001188  BFB9               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1405  00118A  D006               	goto	u2940
  1406  00118C  51B9               	movf	(sprintf@exp+1)& (0+255),w,b
  1407  00118E  E11F               	bnz	l3169
  1408  001190  0E0A               	movlw	10
  1409  001192  5DB8               	subwf	sprintf@exp& (0+255),w,b
  1410  001194  B0D8               	btfsc	status,0,c
  1411  001196  D01B               	goto	u2970
  1412  001198                     u2940:
  1413                           
  1414                           ; BSR set to: 0
  1415  001198  51BE               	movf	sprintf@fval& (0+255),w,b
  1416  00119A  11BF               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1417  00119C  11C0               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1418  00119E  B4D8               	btfsc	status,2,c
  1419  0011A0  D054               	goto	l416
  1420                           
  1421                           ; BSR set to: 0
  1422  0011A2  C0BE  F08A         	movff	sprintf@fval,___fttol@f1
  1423  0011A6  C0BF  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  1424  0011AA  C0C0  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  1425  0011AE  EC79  F010         	call	___fttol	;wreg free
  1426  0011B2  0100               	movlb	0	; () banked
  1427  0011B4  518A               	movf	?___fttol& (0+255),w,b
  1428  0011B6  118B               	iorwf	(?___fttol+1)& (0+255),w,b
  1429  0011B8  118C               	iorwf	(?___fttol+2)& (0+255),w,b
  1430  0011BA  118D               	iorwf	(?___fttol+3)& (0+255),w,b
  1431  0011BC  B4D8               	btfsc	status,2,c
  1432                           
  1433                           ; BSR set to: 0
  1434  0011BE  BFB9               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1435  0011C0  D044               	goto	l416
  1436  0011C2  51B9               	movf	(sprintf@exp+1)& (0+255),w,b
  1437  0011C4  E104               	bnz	l3169
  1438  0011C6  0E02               	movlw	2
  1439  0011C8  5DB8               	subwf	sprintf@exp& (0+255),w,b
  1440  0011CA  A0D8               	btfss	status,0,c
  1441  0011CC  D03E               	goto	l416
  1442  0011CE                     u2970:
  1443  0011CE                     l3169:
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1447  0011CE  C0BA  F060         	movff	sprintf@tmpval,___ftge@ff1
  1448  0011D2  C0BB  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1449  0011D6  C0BC  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1450  0011DA  0E70               	movlw	112
  1451  0011DC  6F63               	movwf	___ftge@ff2& (0+255),b
  1452  0011DE  0E89               	movlw	137
  1453  0011E0  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  1454  0011E2  0E40               	movlw	64
  1455  0011E4  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  1456  0011E6  EC13  F013         	call	___ftge	;wreg free
  1457  0011EA  0100               	movlb	0	; () banked
  1458  0011EC  B0D8               	btfsc	status,0,c
  1459  0011EE  D002               	goto	l419
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1463  0011F0  0EF7               	movlw	247
  1464  0011F2  D001               	goto	L1
  1465  0011F4                     l419:
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1469                           
  1470                           ; BSR set to: 0
  1471  0011F4  0EF8               	movlw	248
  1472  0011F6                     L1:
  1473  0011F6  27B8               	addwf	sprintf@exp& (0+255),f,b
  1474  0011F8  0EFF               	movlw	255
  1475  0011FA  23B9               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;doprnt.c: 1124: }
  1479                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1480                           
  1481                           ; BSR set to: 0
  1482  0011FC  51B8               	movf	sprintf@exp& (0+255),w,b
  1483  0011FE  ECE9  F00A         	call	_scale
  1484  001202  C083  F0BA         	movff	?_scale,sprintf@tmpval
  1485  001206  C084  F0BB         	movff	?_scale+1,sprintf@tmpval+1
  1486  00120A  C085  F0BC         	movff	?_scale+2,sprintf@tmpval+2
  1487                           
  1488                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1489  00120E  C0BE  F060         	movff	sprintf@fval,__tdiv_to_l_@f1
  1490  001212  C0BF  F061         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1491  001216  C0C0  F062         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1492  00121A  C0BA  F063         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1493  00121E  C0BB  F064         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1494  001222  C0BC  F065         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1495  001226  EC4A  F00F         	call	__tdiv_to_l_	;wreg free
  1496  00122A  C060  F0B4         	movff	?__tdiv_to_l_,sprintf@val
  1497  00122E  C061  F0B5         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1498  001232  C062  F0B6         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1499  001236  C063  F0B7         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1500                           
  1501                           ;doprnt.c: 1129: fval = 0.0;
  1502  00123A  0E00               	movlw	0
  1503  00123C  0100               	movlb	0	; () banked
  1504  00123E  6FBE               	movwf	sprintf@fval& (0+255),b
  1505  001240  0E00               	movlw	0
  1506  001242  6FBF               	movwf	(sprintf@fval+1)& (0+255),b
  1507  001244  0E00               	movlw	0
  1508  001246  6FC0               	movwf	(sprintf@fval+2)& (0+255),b
  1509                           
  1510                           ;doprnt.c: 1130: } else {
  1511  001248  D033               	goto	l425
  1512  00124A                     l416:
  1513                           
  1514                           ; BSR set to: 0
  1515                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1516                           
  1517                           ; BSR set to: 0
  1518  00124A  C0BE  F08A         	movff	sprintf@fval,___fttol@f1
  1519  00124E  C0BF  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  1520  001252  C0C0  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  1521  001256  EC79  F010         	call	___fttol	;wreg free
  1522  00125A  C08A  F0B4         	movff	?___fttol,sprintf@val
  1523  00125E  C08B  F0B5         	movff	?___fttol+1,sprintf@val+1
  1524  001262  C08C  F0B6         	movff	?___fttol+2,sprintf@val+2
  1525  001266  C08D  F0B7         	movff	?___fttol+3,sprintf@val+3
  1526                           
  1527                           ;doprnt.c: 1132: fval -= (double)val;
  1528  00126A  C0BE  F099         	movff	sprintf@fval,___ftsub@f1
  1529  00126E  C0BF  F09A         	movff	sprintf@fval+1,___ftsub@f1+1
  1530  001272  C0C0  F09B         	movff	sprintf@fval+2,___ftsub@f1+2
  1531  001276  C0B4  F068         	movff	sprintf@val,___lltoft@c
  1532  00127A  C0B5  F069         	movff	sprintf@val+1,___lltoft@c+1
  1533  00127E  C0B6  F06A         	movff	sprintf@val+2,___lltoft@c+2
  1534  001282  C0B7  F06B         	movff	sprintf@val+3,___lltoft@c+3
  1535  001286  EC31  F015         	call	___lltoft	;wreg free
  1536  00128A  C068  F09C         	movff	?___lltoft,___ftsub@f2
  1537  00128E  C069  F09D         	movff	?___lltoft+1,___ftsub@f2+1
  1538  001292  C06A  F09E         	movff	?___lltoft+2,___ftsub@f2+2
  1539  001296  EC82  F015         	call	___ftsub	;wreg free
  1540  00129A  C099  F0BE         	movff	?___ftsub,sprintf@fval
  1541  00129E  C09A  F0BF         	movff	?___ftsub+1,sprintf@fval+1
  1542  0012A2  C09B  F0C0         	movff	?___ftsub+2,sprintf@fval+2
  1543                           
  1544                           ;doprnt.c: 1133: exp = 0;
  1545  0012A6  0E00               	movlw	0
  1546  0012A8  0100               	movlb	0	; () banked
  1547  0012AA  6FB9               	movwf	(sprintf@exp+1)& (0+255),b
  1548  0012AC  0E00               	movlw	0
  1549  0012AE  6FB8               	movwf	sprintf@exp& (0+255),b
  1550  0012B0                     l425:
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;doprnt.c: 1134: }
  1554                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1555                           
  1556                           ; BSR set to: 0
  1557  0012B0  0E01               	movlw	1
  1558  0012B2  6FC1               	movwf	sprintf@c& (0+255),b
  1559  0012B4                     l3189:
  1560                           
  1561                           ; BSR set to: 0
  1562  0012B4  0E0A               	movlw	10
  1563  0012B6  19C1               	xorwf	sprintf@c& (0+255),w,b
  1564  0012B8  B4D8               	btfsc	status,2,c
  1565  0012BA  D01B               	goto	u3010
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;doprnt.c: 1137: if(val < dpowers[c])
  1569                           
  1570                           ; BSR set to: 0
  1571                           
  1572                           ; BSR set to: 0
  1573  0012BC  51C1               	movf	sprintf@c& (0+255),w,b
  1574  0012BE  0D04               	mullw	4
  1575  0012C0  0E01               	movlw	low _dpowers
  1576  0012C2  24F3               	addwf	prodl,w,c
  1577  0012C4  6EF6               	movwf	tblptrl,c
  1578  0012C6  0E0F               	movlw	high _dpowers
  1579  0012C8  20F4               	addwfc	prodh,w,c
  1580  0012CA  6EF7               	movwf	tblptrh,c
  1581  0012CC                     	if	1	;There are 3 active tblptr bytes
  1582  0012CC  6AF8               	clrf	tblptru,c
  1583  0012CE  0E00               	movlw	low (__mediumconst shr (0+16))
  1584  0012D0  22F8               	addwfc	tblptru,f,c
  1585  0012D2                     	endif
  1586  0012D2  0009               	tblrd		*+
  1587  0012D4  50F5               	movf	tablat,w,c
  1588  0012D6  5DB4               	subwf	sprintf@val& (0+255),w,b
  1589  0012D8  0009               	tblrd		*+
  1590  0012DA  50F5               	movf	tablat,w,c
  1591  0012DC  59B5               	subwfb	(sprintf@val+1)& (0+255),w,b
  1592  0012DE  0009               	tblrd		*+
  1593  0012E0  50F5               	movf	tablat,w,c
  1594  0012E2  59B6               	subwfb	(sprintf@val+2)& (0+255),w,b
  1595  0012E4  0009               	tblrd		*+
  1596  0012E6  50F5               	movf	tablat,w,c
  1597  0012E8  59B7               	subwfb	(sprintf@val+3)& (0+255),w,b
  1598  0012EA  A0D8               	btfss	status,0,c
  1599  0012EC  D002               	goto	u3010
  1600                           
  1601                           ; BSR set to: 0
  1602                           
  1603                           ; BSR set to: 0
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;doprnt.c: 1138: break;
  1607  0012EE  2BC1               	incf	sprintf@c& (0+255),f,b
  1608  0012F0  D7E1               	goto	l3189
  1609  0012F2                     u3010:
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;doprnt.c: 1175: {
  1613                           ;doprnt.c: 1188: if(flag & 0x03)
  1614                           
  1615                           ; BSR set to: 0
  1616  0012F2  0E03               	movlw	3
  1617  0012F4  15B0               	andwf	sprintf@flag& (0+255),w,b
  1618  0012F6  6FA5               	movwf	??_sprintf& (0+255),b
  1619  0012F8  0E00               	movlw	0
  1620  0012FA  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  1621  0012FC  6FA6               	movwf	(??_sprintf+1)& (0+255),b
  1622  0012FE  51A5               	movf	??_sprintf& (0+255),w,b
  1623  001300  11A6               	iorwf	(??_sprintf+1)& (0+255),w,b
  1624  001302  B4D8               	btfsc	status,2,c
  1625  001304  D054               	goto	l430
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1629  001306  C09F  FFD9         	movff	sprintf@sp,fsr2l
  1630  00130A  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  1631  00130E  0E2D               	movlw	45
  1632  001310  D04B               	goto	L2
  1633  001312                     
  1634                           ; BSR set to: 0
  1635                           ;doprnt.c: 1200: {
  1636                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1637                           
  1638                           ; BSR set to: 0
  1639  001312  C0B4  F060         	movff	sprintf@val,___lldiv@dividend
  1640  001316  C0B5  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  1641  00131A  C0B6  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  1642  00131E  C0B7  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  1643  001322  51C1               	movf	sprintf@c& (0+255),w,b
  1644  001324  0D04               	mullw	4
  1645  001326  0E01               	movlw	low _dpowers
  1646  001328  24F3               	addwf	prodl,w,c
  1647  00132A  6EF6               	movwf	tblptrl,c
  1648  00132C  0E0F               	movlw	high _dpowers
  1649  00132E  20F4               	addwfc	prodh,w,c
  1650  001330  6EF7               	movwf	tblptrh,c
  1651  001332                     	if	1	;There are 3 active tblptr bytes
  1652  001332  6AF8               	clrf	tblptru,c
  1653  001334  0E00               	movlw	low (__mediumconst shr (0+16))
  1654  001336  22F8               	addwfc	tblptru,f,c
  1655  001338                     	endif
  1656  001338  0009               	tblrd		*+
  1657  00133A  CFF5 F064          	movff	tablat,___lldiv@divisor
  1658  00133E  0009               	tblrd		*+
  1659  001340  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  1660  001344  0009               	tblrd		*+
  1661  001346  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  1662  00134A  000A               	tblrd		*-
  1663  00134C  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  1664  001350  EC9F  F013         	call	___lldiv	;wreg free
  1665  001354  C060  F0BA         	movff	?___lldiv,sprintf@tmpval
  1666  001358  C061  F0BB         	movff	?___lldiv+1,sprintf@tmpval+1
  1667  00135C  C062  F0BC         	movff	?___lldiv+2,sprintf@tmpval+2
  1668  001360  C063  F0BD         	movff	?___lldiv+3,sprintf@tmpval+3
  1669                           
  1670                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1671  001364  C0BA  F060         	movff	sprintf@tmpval,___llmod@dividend
  1672  001368  C0BB  F061         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1673  00136C  C0BC  F062         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1674  001370  C0BD  F063         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1675  001374  0E0A               	movlw	10
  1676  001376  0100               	movlb	0	; () banked
  1677  001378  6F64               	movwf	___llmod@divisor& (0+255),b
  1678  00137A  0E00               	movlw	0
  1679  00137C  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  1680  00137E  0E00               	movlw	0
  1681  001380  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  1682  001382  0E00               	movlw	0
  1683  001384  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  1684  001386  ECCD  F014         	call	___llmod	;wreg free
  1685  00138A  C060  F0BA         	movff	?___llmod,sprintf@tmpval
  1686  00138E  C061  F0BB         	movff	?___llmod+1,sprintf@tmpval+1
  1687  001392  C062  F0BC         	movff	?___llmod+2,sprintf@tmpval+2
  1688  001396  C063  F0BD         	movff	?___llmod+3,sprintf@tmpval+3
  1689                           
  1690                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1691  00139A  0100               	movlb	0	; () banked
  1692  00139C  51BA               	movf	sprintf@tmpval& (0+255),w,b
  1693  00139E  0F30               	addlw	48
  1694  0013A0  C09F  FFD9         	movff	sprintf@sp,fsr2l
  1695  0013A4  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  1696  0013A8                     L2:
  1697  0013A8  6EDF               	movwf	indf2,c
  1698                           
  1699                           ; BSR set to: 0
  1700  0013AA  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  1701  0013AC  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  1702  0013AE                     l430:
  1703                           
  1704                           ; BSR set to: 0
  1705                           
  1706                           ; BSR set to: 0
  1707  0013AE  07C1               	decf	sprintf@c& (0+255),f,b
  1708  0013B0  29C1               	incf	sprintf@c& (0+255),w,b
  1709  0013B2  B4D8               	btfsc	status,2,c
  1710  0013B4  D00C               	goto	l433
  1711  0013B6  D7AD               	goto	l431
  1712  0013B8                     l3217:
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  1716  0013B8  C09F  FFD9         	movff	sprintf@sp,fsr2l
  1717  0013BC  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  1718  0013C0  0E30               	movlw	48
  1719  0013C2  6EDF               	movwf	indf2,c
  1720                           
  1721                           ; BSR set to: 0
  1722  0013C4  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  1723  0013C6  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;doprnt.c: 1209: exp--;
  1727  0013C8  07B8               	decf	sprintf@exp& (0+255),f,b
  1728  0013CA  A0D8               	btfss	status,0,c
  1729  0013CC  07B9               	decf	(sprintf@exp+1)& (0+255),f,b
  1730  0013CE                     l433:
  1731                           
  1732                           ; BSR set to: 0
  1733                           
  1734                           ; BSR set to: 0
  1735  0013CE  BFB9               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1736  0013D0  D005               	goto	u3040
  1737  0013D2  51B9               	movf	(sprintf@exp+1)& (0+255),w,b
  1738  0013D4  E1F1               	bnz	l3217
  1739  0013D6  05B8               	decf	sprintf@exp& (0+255),w,b
  1740  0013D8  B0D8               	btfsc	status,0,c
  1741  0013DA  D7EE               	goto	l434
  1742  0013DC                     u3040:
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;doprnt.c: 1210: }
  1746                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1747                           
  1748                           ; BSR set to: 0
  1749  0013DC  BFB3               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1750  0013DE  D009               	goto	l436
  1751  0013E0  51B3               	movf	(sprintf@prec+1)& (0+255),w,b
  1752  0013E2  E104               	bnz	u3050
  1753  0013E4  0E09               	movlw	9
  1754  0013E6  5DB2               	subwf	sprintf@prec& (0+255),w,b
  1755  0013E8  A0D8               	btfss	status,0,c
  1756  0013EA  D003               	goto	l436
  1757  0013EC                     u3050:
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1761  0013EC  0E08               	movlw	8
  1762  0013EE  6FC1               	movwf	sprintf@c& (0+255),b
  1763  0013F0  D002               	goto	l437
  1764  0013F2                     l436:
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;doprnt.c: 1213: else
  1768                           ;doprnt.c: 1214: c = prec;
  1769  0013F2  C0B2  F0C1         	movff	sprintf@prec,sprintf@c
  1770  0013F6                     l437:
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;doprnt.c: 1215: prec -= c;
  1774                           
  1775                           ; BSR set to: 0
  1776  0013F6  51C1               	movf	sprintf@c& (0+255),w,b
  1777  0013F8  5FB2               	subwf	sprintf@prec& (0+255),f,b
  1778  0013FA  0E00               	movlw	0
  1779  0013FC  BFC1               	btfsc	sprintf@c& (0+255),7,b
  1780  0013FE  0EFF               	movlw	255
  1781  001400  5BB3               	subwfb	(sprintf@prec+1)& (0+255),f,b
  1782                           
  1783                           ; BSR set to: 0
  1784                           ;doprnt.c: 1219: if(c)
  1785  001402  51C1               	movf	sprintf@c& (0+255),w,b
  1786  001404  B4D8               	btfsc	status,2,c
  1787  001406  D008               	goto	l438
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  1791  001408  C09F  FFD9         	movff	sprintf@sp,fsr2l
  1792  00140C  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  1793  001410  0E2E               	movlw	46
  1794  001412  6EDF               	movwf	indf2,c
  1795                           
  1796                           ; BSR set to: 0
  1797  001414  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  1798  001416  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  1799  001418                     l438:
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1803                           
  1804                           ; BSR set to: 0
  1805  001418  51C1               	movf	sprintf@c& (0+255),w,b
  1806  00141A  ECE9  F00A         	call	_scale
  1807  00141E  C083  F0AB         	movff	?_scale,_sprintf$1490
  1808  001422  C084  F0AC         	movff	?_scale+1,_sprintf$1490+1
  1809  001426  C085  F0AD         	movff	?_scale+2,_sprintf$1490+2
  1810                           
  1811                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1812  00142A  C0BE  F077         	movff	sprintf@fval,___ftmul@f2
  1813  00142E  C0BF  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  1814  001432  C0C0  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  1815  001436  C0AB  F074         	movff	_sprintf$1490,___ftmul@f1
  1816  00143A  C0AC  F075         	movff	_sprintf$1490+1,___ftmul@f1+1
  1817  00143E  C0AD  F076         	movff	_sprintf$1490+2,___ftmul@f1+2
  1818  001442  ECF5  F010         	call	___ftmul	;wreg free
  1819  001446  C074  F08A         	movff	?___ftmul,___fttol@f1
  1820  00144A  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  1821  00144E  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  1822  001452  EC79  F010         	call	___fttol	;wreg free
  1823  001456  C08A  F0B4         	movff	?___fttol,sprintf@val
  1824  00145A  C08B  F0B5         	movff	?___fttol+1,sprintf@val+1
  1825  00145E  C08C  F0B6         	movff	?___fttol+2,sprintf@val+2
  1826  001462  C08D  F0B7         	movff	?___fttol+3,sprintf@val+3
  1827                           
  1828                           ;doprnt.c: 1228: while(c--) {
  1829  001466  D078               	goto	l439
  1830  001468                     
  1831                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1832  001468  C0B4  F060         	movff	sprintf@val,___lldiv@dividend
  1833  00146C  C0B5  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  1834  001470  C0B6  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  1835  001474  C0B7  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  1836  001478  0100               	movlb	0	; () banked
  1837  00147A  51C1               	movf	sprintf@c& (0+255),w,b
  1838  00147C  0D04               	mullw	4
  1839  00147E  0E01               	movlw	low _dpowers
  1840  001480  24F3               	addwf	prodl,w,c
  1841  001482  6EF6               	movwf	tblptrl,c
  1842  001484  0E0F               	movlw	high _dpowers
  1843  001486  20F4               	addwfc	prodh,w,c
  1844  001488  6EF7               	movwf	tblptrh,c
  1845  00148A                     	if	1	;There are 3 active tblptr bytes
  1846  00148A  6AF8               	clrf	tblptru,c
  1847  00148C  0E00               	movlw	low (__mediumconst shr (0+16))
  1848  00148E  22F8               	addwfc	tblptru,f,c
  1849  001490                     	endif
  1850  001490  0009               	tblrd		*+
  1851  001492  CFF5 F064          	movff	tablat,___lldiv@divisor
  1852  001496  0009               	tblrd		*+
  1853  001498  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  1854  00149C  0009               	tblrd		*+
  1855  00149E  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  1856  0014A2  000A               	tblrd		*-
  1857  0014A4  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  1858  0014A8  EC9F  F013         	call	___lldiv	;wreg free
  1859  0014AC  C060  F0BA         	movff	?___lldiv,sprintf@tmpval
  1860  0014B0  C061  F0BB         	movff	?___lldiv+1,sprintf@tmpval+1
  1861  0014B4  C062  F0BC         	movff	?___lldiv+2,sprintf@tmpval+2
  1862  0014B8  C063  F0BD         	movff	?___lldiv+3,sprintf@tmpval+3
  1863                           
  1864                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1865  0014BC  C0BA  F060         	movff	sprintf@tmpval,___llmod@dividend
  1866  0014C0  C0BB  F061         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1867  0014C4  C0BC  F062         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1868  0014C8  C0BD  F063         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1869  0014CC  0E0A               	movlw	10
  1870  0014CE  0100               	movlb	0	; () banked
  1871  0014D0  6F64               	movwf	___llmod@divisor& (0+255),b
  1872  0014D2  0E00               	movlw	0
  1873  0014D4  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  1874  0014D6  0E00               	movlw	0
  1875  0014D8  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  1876  0014DA  0E00               	movlw	0
  1877  0014DC  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  1878  0014DE  ECCD  F014         	call	___llmod	;wreg free
  1879  0014E2  C060  F0BA         	movff	?___llmod,sprintf@tmpval
  1880  0014E6  C061  F0BB         	movff	?___llmod+1,sprintf@tmpval+1
  1881  0014EA  C062  F0BC         	movff	?___llmod+2,sprintf@tmpval+2
  1882  0014EE  C063  F0BD         	movff	?___llmod+3,sprintf@tmpval+3
  1883                           
  1884                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  1885  0014F2  0100               	movlb	0	; () banked
  1886  0014F4  51BA               	movf	sprintf@tmpval& (0+255),w,b
  1887  0014F6  0F30               	addlw	48
  1888  0014F8  C09F  FFD9         	movff	sprintf@sp,fsr2l
  1889  0014FC  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  1890  001500  6EDF               	movwf	indf2,c
  1891                           
  1892                           ; BSR set to: 0
  1893  001502  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  1894  001504  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;doprnt.c: 1232: val %= dpowers[c];
  1898  001506  C0B4  F060         	movff	sprintf@val,___llmod@dividend
  1899  00150A  C0B5  F061         	movff	sprintf@val+1,___llmod@dividend+1
  1900  00150E  C0B6  F062         	movff	sprintf@val+2,___llmod@dividend+2
  1901  001512  C0B7  F063         	movff	sprintf@val+3,___llmod@dividend+3
  1902  001516  51C1               	movf	sprintf@c& (0+255),w,b
  1903  001518  0D04               	mullw	4
  1904  00151A  0E01               	movlw	low _dpowers
  1905  00151C  24F3               	addwf	prodl,w,c
  1906  00151E  6EF6               	movwf	tblptrl,c
  1907  001520  0E0F               	movlw	high _dpowers
  1908  001522  20F4               	addwfc	prodh,w,c
  1909  001524  6EF7               	movwf	tblptrh,c
  1910  001526                     	if	1	;There are 3 active tblptr bytes
  1911  001526  6AF8               	clrf	tblptru,c
  1912  001528  0E00               	movlw	low (__mediumconst shr (0+16))
  1913  00152A  22F8               	addwfc	tblptru,f,c
  1914  00152C                     	endif
  1915  00152C  0009               	tblrd		*+
  1916  00152E  CFF5 F064          	movff	tablat,___llmod@divisor
  1917  001532  0009               	tblrd		*+
  1918  001534  CFF5 F065          	movff	tablat,___llmod@divisor+1
  1919  001538  0009               	tblrd		*+
  1920  00153A  CFF5 F066          	movff	tablat,___llmod@divisor+2
  1921  00153E  000A               	tblrd		*-
  1922  001540  CFF5 F067          	movff	tablat,___llmod@divisor+3
  1923  001544  ECCD  F014         	call	___llmod	;wreg free
  1924  001548  C060  F0B4         	movff	?___llmod,sprintf@val
  1925  00154C  C061  F0B5         	movff	?___llmod+1,sprintf@val+1
  1926  001550  C062  F0B6         	movff	?___llmod+2,sprintf@val+2
  1927  001554  C063  F0B7         	movff	?___llmod+3,sprintf@val+3
  1928  001558                     l439:
  1929  001558  0100               	movlb	0	; () banked
  1930  00155A  07C1               	decf	sprintf@c& (0+255),f,b
  1931  00155C  29C1               	incf	sprintf@c& (0+255),w,b
  1932  00155E  B4D8               	btfsc	status,2,c
  1933  001560  D00C               	goto	l442
  1934  001562  D782               	goto	l440
  1935  001564                     
  1936                           ; BSR set to: 0
  1937                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  1938                           
  1939                           ; BSR set to: 0
  1940  001564  C09F  FFD9         	movff	sprintf@sp,fsr2l
  1941  001568  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  1942  00156C  0E30               	movlw	48
  1943  00156E  6EDF               	movwf	indf2,c
  1944                           
  1945                           ; BSR set to: 0
  1946  001570  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  1947  001572  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;doprnt.c: 1237: prec--;
  1951  001574  07B2               	decf	sprintf@prec& (0+255),f,b
  1952  001576  A0D8               	btfss	status,0,c
  1953  001578  07B3               	decf	(sprintf@prec+1)& (0+255),f,b
  1954  00157A                     l442:
  1955                           
  1956                           ; BSR set to: 0
  1957                           
  1958                           ; BSR set to: 0
  1959  00157A  51B2               	movf	sprintf@prec& (0+255),w,b
  1960  00157C  11B3               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1961  00157E  B4D8               	btfsc	status,2,c
  1962  001580  D013               	goto	l445
  1963  001582  D7F0               	goto	l443
  1964  001584                     l408:
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;doprnt.c: 1246: }
  1968                           ;doprnt.c: 1422: {
  1969                           ;doprnt.c: 1438: if(flag & 0x03)
  1970                           
  1971                           ; BSR set to: 0
  1972  001584  0E03               	movlw	3
  1973  001586  15B0               	andwf	sprintf@flag& (0+255),w,b
  1974  001588  6FA5               	movwf	??_sprintf& (0+255),b
  1975  00158A  0E00               	movlw	0
  1976  00158C  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  1977  00158E  6FA6               	movwf	(??_sprintf+1)& (0+255),b
  1978  001590  51A5               	movf	??_sprintf& (0+255),w,b
  1979  001592  11A6               	iorwf	(??_sprintf+1)& (0+255),w,b
  1980  001594  B4D8               	btfsc	status,2,c
  1981  001596  D008               	goto	l445
  1982                           
  1983                           ; BSR set to: 0
  1984                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1985  001598  C09F  FFD9         	movff	sprintf@sp,fsr2l
  1986  00159C  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  1987  0015A0  0E2D               	movlw	45
  1988  0015A2  6EDF               	movwf	indf2,c
  1989  0015A4                     l3265:
  1990                           
  1991                           ; BSR set to: 0
  1992  0015A4  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  1993  0015A6  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  1994  0015A8                     l445:
  1995                           
  1996                           ; BSR set to: 0
  1997                           
  1998                           ; BSR set to: 0
  1999                           
  2000                           ; BSR set to: 0
  2001  0015A8  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2002  0015AC  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2003  0015B0  4BA1               	infsnz	sprintf@f& (0+255),f,b
  2004  0015B2  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  2005  0015B4                     	if	0	;tblptru may be non-zero
  2006  0015B4                     	endif
  2007  0015B4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2008  0015B4  0E00               	movlw	low (__mediumconst shr (0+16))
  2009  0015B6  6EF8               	movwf	tblptru,c
  2010  0015B8                     	endif
  2011  0015B8  0008               	tblrd		*
  2012  0015BA  CFF5 F0C1          	movff	tablat,sprintf@c
  2013  0015BE  51C1               	movf	sprintf@c& (0+255),w,b
  2014  0015C0  A4D8               	btfss	status,2,c
  2015  0015C2  D4E3               	goto	l400
  2016  0015C4                     u3100:
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;doprnt.c: 1538: *sp = 0;
  2020                           
  2021                           ; BSR set to: 0
  2022                           
  2023                           ;doprnt.c: 1469: }
  2024                           ;doprnt.c: 1533: }
  2025                           ;doprnt.c: 1535: alldone:
  2026                           
  2027                           ; BSR set to: 0
  2028  0015C4  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2029  0015C8  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2030  0015CC  0E00               	movlw	0
  2031  0015CE  6EDF               	movwf	indf2,c
  2032  0015D0  0012               	return	
  2033  0015D2                     __end_of_sprintf:
  2034                           	opt stack 0
  2035                           tblptru	equ	0xFF8
  2036                           tblptrh	equ	0xFF7
  2037                           tblptrl	equ	0xFF6
  2038                           tablat	equ	0xFF5
  2039                           prodh	equ	0xFF4
  2040                           prodl	equ	0xFF3
  2041                           intcon	equ	0xFF2
  2042                           postinc0	equ	0xFEE
  2043                           wreg	equ	0xFE8
  2044                           indf2	equ	0xFDF
  2045                           postinc2	equ	0xFDE
  2046                           postdec2	equ	0xFDD
  2047                           fsr2h	equ	0xFDA
  2048                           fsr2l	equ	0xFD9
  2049                           status	equ	0xFD8
  2050                           
  2051 ;; *************** function _scale *****************
  2052 ;; Defined at:
  2053 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;  scl             1    wreg     char 
  2056 ;; Auto vars:     Size  Location     Type
  2057 ;;  scl             1   41[BANK0 ] char 
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  3   35[BANK0 ] char 
  2060 ;; Registers used:
  2061 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2067 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2068 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2070 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2071 ;;Total ram usage:        7 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; Hardware stack levels required when called:    8
  2074 ;; This function calls:
  2075 ;;		___awdiv
  2076 ;;		___awmod
  2077 ;;		___ftmul
  2078 ;;		___wmul
  2079 ;; This function is called by:
  2080 ;;		_sprintf
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text2
  2085  0015D2                     __ptext2:
  2086                           	opt stack 0
  2087  0015D2                     _scale:
  2088                           	opt stack 21
  2089                           
  2090                           ; BSR set to: 0
  2091                           ;incstack = 0
  2092                           ;scale@scl stored from wreg
  2093  0015D2  0100               	movlb	0	; () banked
  2094  0015D4  6F89               	movwf	scale@scl& (0+255),b
  2095                           
  2096                           ;doprnt.c: 428: if(scl < 0) {
  2097  0015D6  0100               	movlb	0	; () banked
  2098  0015D8  AF89               	btfss	scale@scl& (0+255),7,b
  2099  0015DA  D11E               	goto	l389
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;doprnt.c: 429: scl = -scl;
  2103  0015DC  6D89               	negf	scale@scl& (0+255),b
  2104                           
  2105                           ;doprnt.c: 430: if(scl>=110)
  2106  0015DE  5189               	movf	scale@scl& (0+255),w,b
  2107  0015E0  0A80               	xorlw	128
  2108  0015E2  0F12               	addlw	-238
  2109  0015E4  A0D8               	btfss	status,0,c
  2110  0015E6  D0A0               	goto	l390
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2114  0015E8  0E00               	movlw	0
  2115  0015EA  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2116  0015EC  0E03               	movlw	3
  2117  0015EE  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2118  0015F0  0E00               	movlw	0
  2119  0015F2  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2120  0015F4  0E0A               	movlw	10
  2121  0015F6  6F68               	movwf	___awdiv@divisor& (0+255),b
  2122  0015F8  0E00               	movlw	0
  2123  0015FA  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2124  0015FC  0E64               	movlw	100
  2125  0015FE  6F62               	movwf	___awmod@divisor& (0+255),b
  2126  001600  5189               	movf	scale@scl& (0+255),w,b
  2127  001602  6F60               	movwf	___awmod@dividend& (0+255),b
  2128  001604  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  2129  001606  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  2130  001608  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  2131  00160A  EC94  F014         	call	___awmod	;wreg free
  2132  00160E  C060  F066         	movff	?___awmod,___awdiv@dividend
  2133  001612  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  2134  001616  EC5C  F013         	call	___awdiv	;wreg free
  2135  00161A  0E09               	movlw	9
  2136  00161C  0100               	movlb	0	; () banked
  2137  00161E  2566               	addwf	?___awdiv& (0+255),w,b
  2138  001620  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2139  001622  0E00               	movlw	0
  2140  001624  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2141  001626  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2142  001628  EC0B  F016         	call	___wmul	;wreg free
  2143  00162C  0E50               	movlw	low __npowers_
  2144  00162E  0100               	movlb	0	; () banked
  2145  001630  256E               	addwf	?___wmul& (0+255),w,b
  2146  001632  6EF6               	movwf	tblptrl,c
  2147  001634  0E0F               	movlw	high __npowers_
  2148  001636  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2149  001638  6EF7               	movwf	tblptrh,c
  2150  00163A                     	if	1	;There are 3 active tblptr bytes
  2151  00163A  6AF8               	clrf	tblptru,c
  2152  00163C  0E00               	movlw	low (__mediumconst shr (0+16))
  2153  00163E  22F8               	addwfc	tblptru,f,c
  2154  001640                     	endif
  2155  001640  0009               	tblrd		*+
  2156  001642  CFF5 F077          	movff	tablat,___ftmul@f2
  2157  001646  0009               	tblrd		*+
  2158  001648  CFF5 F078          	movff	tablat,___ftmul@f2+1
  2159  00164C  000A               	tblrd		*-
  2160  00164E  CFF5 F079          	movff	tablat,___ftmul@f2+2
  2161  001652  0E00               	movlw	0
  2162  001654  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2163  001656  0E64               	movlw	100
  2164  001658  6F68               	movwf	___awdiv@divisor& (0+255),b
  2165  00165A  5189               	movf	scale@scl& (0+255),w,b
  2166  00165C  6F66               	movwf	___awdiv@dividend& (0+255),b
  2167  00165E  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  2168  001660  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  2169  001662  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  2170  001664  EC5C  F013         	call	___awdiv	;wreg free
  2171  001668  0E12               	movlw	18
  2172  00166A  0100               	movlb	0	; () banked
  2173  00166C  2566               	addwf	?___awdiv& (0+255),w,b
  2174  00166E  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2175  001670  0E00               	movlw	0
  2176  001672  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2177  001674  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2178  001676  0E00               	movlw	0
  2179  001678  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2180  00167A  0E03               	movlw	3
  2181  00167C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2182  00167E  EC0B  F016         	call	___wmul	;wreg free
  2183  001682  0E50               	movlw	low __npowers_
  2184  001684  0100               	movlb	0	; () banked
  2185  001686  256E               	addwf	?___wmul& (0+255),w,b
  2186  001688  6EF6               	movwf	tblptrl,c
  2187  00168A  0E0F               	movlw	high __npowers_
  2188  00168C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2189  00168E  6EF7               	movwf	tblptrh,c
  2190  001690                     	if	1	;There are 3 active tblptr bytes
  2191  001690  6AF8               	clrf	tblptru,c
  2192  001692  0E00               	movlw	low (__mediumconst shr (0+16))
  2193  001694  22F8               	addwfc	tblptru,f,c
  2194  001696                     	endif
  2195  001696  0009               	tblrd		*+
  2196  001698  CFF5 F074          	movff	tablat,___ftmul@f1
  2197  00169C  0009               	tblrd		*+
  2198  00169E  CFF5 F075          	movff	tablat,___ftmul@f1+1
  2199  0016A2  000A               	tblrd		*-
  2200  0016A4  CFF5 F076          	movff	tablat,___ftmul@f1+2
  2201  0016A8  ECF5  F010         	call	___ftmul	;wreg free
  2202  0016AC  C074  F086         	movff	?___ftmul,_scale$1489
  2203  0016B0  C075  F087         	movff	?___ftmul+1,_scale$1489+1
  2204  0016B4  C076  F088         	movff	?___ftmul+2,_scale$1489+2
  2205                           
  2206                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2207  0016B8  C086  F074         	movff	_scale$1489,___ftmul@f1
  2208  0016BC  C087  F075         	movff	_scale$1489+1,___ftmul@f1+1
  2209  0016C0  C088  F076         	movff	_scale$1489+2,___ftmul@f1+2
  2210  0016C4  0E00               	movlw	0
  2211  0016C6  0100               	movlb	0	; () banked
  2212  0016C8  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2213  0016CA  0E03               	movlw	3
  2214  0016CC  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2215  0016CE  0E00               	movlw	0
  2216  0016D0  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2217  0016D2  0E0A               	movlw	10
  2218  0016D4  6F62               	movwf	___awmod@divisor& (0+255),b
  2219  0016D6  5189               	movf	scale@scl& (0+255),w,b
  2220  0016D8  6F60               	movwf	___awmod@dividend& (0+255),b
  2221  0016DA  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  2222  0016DC  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  2223  0016DE  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  2224  0016E0  EC94  F014         	call	___awmod	;wreg free
  2225  0016E4  C060  F06E         	movff	?___awmod,___wmul@multiplier
  2226  0016E8  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  2227  0016EC  EC0B  F016         	call	___wmul	;wreg free
  2228  0016F0  0E50               	movlw	low __npowers_
  2229  0016F2  0100               	movlb	0	; () banked
  2230  0016F4  256E               	addwf	?___wmul& (0+255),w,b
  2231  0016F6  6EF6               	movwf	tblptrl,c
  2232  0016F8  0E0F               	movlw	high __npowers_
  2233  0016FA  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2234  0016FC  6EF7               	movwf	tblptrh,c
  2235  0016FE                     	if	1	;There are 3 active tblptr bytes
  2236  0016FE  6AF8               	clrf	tblptru,c
  2237  001700  0E00               	movlw	low (__mediumconst shr (0+16))
  2238  001702  22F8               	addwfc	tblptru,f,c
  2239  001704                     	endif
  2240  001704  0009               	tblrd		*+
  2241  001706  CFF5 F077          	movff	tablat,___ftmul@f2
  2242  00170A  0009               	tblrd		*+
  2243  00170C  CFF5 F078          	movff	tablat,___ftmul@f2+1
  2244  001710  000A               	tblrd		*-
  2245  001712  CFF5 F079          	movff	tablat,___ftmul@f2+2
  2246  001716  ECF5  F010         	call	___ftmul	;wreg free
  2247  00171A  C074  F083         	movff	?___ftmul,?_scale
  2248  00171E  C075  F084         	movff	?___ftmul+1,?_scale+1
  2249  001722  C076  F085         	movff	?___ftmul+2,?_scale+2
  2250  001726  0012               	return	
  2251  001728                     l390:
  2252                           
  2253                           ;doprnt.c: 432: else if(scl > 10)
  2254  001728  0100               	movlb	0	; () banked
  2255  00172A  5189               	movf	scale@scl& (0+255),w,b
  2256  00172C  0A80               	xorlw	128
  2257  00172E  0F75               	addlw	-139
  2258  001730  A0D8               	btfss	status,0,c
  2259  001732  D05C               	goto	l393
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2263  001734  0E00               	movlw	0
  2264  001736  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2265  001738  0E0A               	movlw	10
  2266  00173A  6F68               	movwf	___awdiv@divisor& (0+255),b
  2267  00173C  5189               	movf	scale@scl& (0+255),w,b
  2268  00173E  6F66               	movwf	___awdiv@dividend& (0+255),b
  2269  001740  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  2270  001742  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  2271  001744  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  2272  001746  EC5C  F013         	call	___awdiv	;wreg free
  2273  00174A  0E09               	movlw	9
  2274  00174C  0100               	movlb	0	; () banked
  2275  00174E  2566               	addwf	?___awdiv& (0+255),w,b
  2276  001750  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2277  001752  0E00               	movlw	0
  2278  001754  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2279  001756  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2280  001758  0E00               	movlw	0
  2281  00175A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2282  00175C  0E03               	movlw	3
  2283  00175E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2284  001760  EC0B  F016         	call	___wmul	;wreg free
  2285  001764  0E50               	movlw	low __npowers_
  2286  001766  0100               	movlb	0	; () banked
  2287  001768  256E               	addwf	?___wmul& (0+255),w,b
  2288  00176A  6EF6               	movwf	tblptrl,c
  2289  00176C  0E0F               	movlw	high __npowers_
  2290  00176E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2291  001770  6EF7               	movwf	tblptrh,c
  2292  001772                     	if	1	;There are 3 active tblptr bytes
  2293  001772  6AF8               	clrf	tblptru,c
  2294  001774  0E00               	movlw	low (__mediumconst shr (0+16))
  2295  001776  22F8               	addwfc	tblptru,f,c
  2296  001778                     	endif
  2297  001778  0009               	tblrd		*+
  2298  00177A  CFF5 F074          	movff	tablat,___ftmul@f1
  2299  00177E  0009               	tblrd		*+
  2300  001780  CFF5 F075          	movff	tablat,___ftmul@f1+1
  2301  001784  000A               	tblrd		*-
  2302  001786  CFF5 F076          	movff	tablat,___ftmul@f1+2
  2303  00178A  0E00               	movlw	0
  2304  00178C  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2305  00178E  0E03               	movlw	3
  2306  001790  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2307  001792  0E00               	movlw	0
  2308  001794  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2309  001796  0E0A               	movlw	10
  2310  001798  6F62               	movwf	___awmod@divisor& (0+255),b
  2311  00179A  5189               	movf	scale@scl& (0+255),w,b
  2312  00179C  6F60               	movwf	___awmod@dividend& (0+255),b
  2313  00179E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  2314  0017A0  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  2315  0017A2  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  2316  0017A4  EC94  F014         	call	___awmod	;wreg free
  2317  0017A8  C060  F06E         	movff	?___awmod,___wmul@multiplier
  2318  0017AC  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  2319  0017B0  EC0B  F016         	call	___wmul	;wreg free
  2320  0017B4  0E50               	movlw	low __npowers_
  2321  0017B6  0100               	movlb	0	; () banked
  2322  0017B8  256E               	addwf	?___wmul& (0+255),w,b
  2323  0017BA  6EF6               	movwf	tblptrl,c
  2324  0017BC  0E0F               	movlw	high __npowers_
  2325  0017BE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2326  0017C0  6EF7               	movwf	tblptrh,c
  2327  0017C2                     	if	1	;There are 3 active tblptr bytes
  2328  0017C2  6AF8               	clrf	tblptru,c
  2329  0017C4  0E00               	movlw	low (__mediumconst shr (0+16))
  2330  0017C6  22F8               	addwfc	tblptru,f,c
  2331  0017C8                     	endif
  2332  0017C8  0009               	tblrd		*+
  2333  0017CA  CFF5 F077          	movff	tablat,___ftmul@f2
  2334  0017CE  0009               	tblrd		*+
  2335  0017D0  CFF5 F078          	movff	tablat,___ftmul@f2+1
  2336  0017D4  000A               	tblrd		*-
  2337  0017D6  CFF5 F079          	movff	tablat,___ftmul@f2+2
  2338  0017DA  ECF5  F010         	call	___ftmul	;wreg free
  2339  0017DE  C074  F083         	movff	?___ftmul,?_scale
  2340  0017E2  C075  F084         	movff	?___ftmul+1,?_scale+1
  2341  0017E6  C076  F085         	movff	?___ftmul+2,?_scale+2
  2342  0017EA  0012               	return	
  2343  0017EC                     l393:
  2344                           
  2345                           ;doprnt.c: 434: return _npowers_[scl];
  2346  0017EC  0100               	movlb	0	; () banked
  2347  0017EE  5189               	movf	scale@scl& (0+255),w,b
  2348  0017F0  0D03               	mullw	3
  2349  0017F2  0E50               	movlw	low __npowers_
  2350  0017F4  24F3               	addwf	prodl,w,c
  2351  0017F6  6EF6               	movwf	tblptrl,c
  2352  0017F8  0E0F               	movlw	high __npowers_
  2353  0017FA  20F4               	addwfc	prodh,w,c
  2354  0017FC  6EF7               	movwf	tblptrh,c
  2355  0017FE                     	if	1	;There are 3 active tblptr bytes
  2356  0017FE  6AF8               	clrf	tblptru,c
  2357  001800  0E00               	movlw	low (__mediumconst shr (0+16))
  2358  001802  22F8               	addwfc	tblptru,f,c
  2359  001804                     	endif
  2360  001804  0009               	tblrd		*+
  2361  001806  CFF5 F083          	movff	tablat,?_scale
  2362  00180A  0009               	tblrd		*+
  2363  00180C  CFF5 F084          	movff	tablat,?_scale+1
  2364  001810  000A               	tblrd		*-
  2365  001812  CFF5 F085          	movff	tablat,?_scale+2
  2366                           
  2367                           ; BSR set to: 0
  2368  001816  0012               	return	
  2369  001818                     l389:
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;doprnt.c: 435: }
  2373                           ;doprnt.c: 436: if(scl>=110)
  2374                           
  2375                           ; BSR set to: 0
  2376  001818  5189               	movf	scale@scl& (0+255),w,b
  2377  00181A  0A80               	xorlw	128
  2378  00181C  0F12               	addlw	-238
  2379  00181E  A0D8               	btfss	status,0,c
  2380  001820  D0A0               	goto	l394
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2384  001822  0E00               	movlw	0
  2385  001824  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2386  001826  0E03               	movlw	3
  2387  001828  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2388  00182A  0E00               	movlw	0
  2389  00182C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2390  00182E  0E0A               	movlw	10
  2391  001830  6F68               	movwf	___awdiv@divisor& (0+255),b
  2392  001832  0E00               	movlw	0
  2393  001834  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2394  001836  0E64               	movlw	100
  2395  001838  6F62               	movwf	___awmod@divisor& (0+255),b
  2396  00183A  5189               	movf	scale@scl& (0+255),w,b
  2397  00183C  6F60               	movwf	___awmod@dividend& (0+255),b
  2398  00183E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  2399  001840  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  2400  001842  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  2401  001844  EC94  F014         	call	___awmod	;wreg free
  2402  001848  C060  F066         	movff	?___awmod,___awdiv@dividend
  2403  00184C  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  2404  001850  EC5C  F013         	call	___awdiv	;wreg free
  2405  001854  0E09               	movlw	9
  2406  001856  0100               	movlb	0	; () banked
  2407  001858  2566               	addwf	?___awdiv& (0+255),w,b
  2408  00185A  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2409  00185C  0E00               	movlw	0
  2410  00185E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2411  001860  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2412  001862  EC0B  F016         	call	___wmul	;wreg free
  2413  001866  0E29               	movlw	low __powers_
  2414  001868  0100               	movlb	0	; () banked
  2415  00186A  256E               	addwf	?___wmul& (0+255),w,b
  2416  00186C  6EF6               	movwf	tblptrl,c
  2417  00186E  0E0F               	movlw	high __powers_
  2418  001870  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2419  001872  6EF7               	movwf	tblptrh,c
  2420  001874                     	if	1	;There are 3 active tblptr bytes
  2421  001874  6AF8               	clrf	tblptru,c
  2422  001876  0E00               	movlw	low (__mediumconst shr (0+16))
  2423  001878  22F8               	addwfc	tblptru,f,c
  2424  00187A                     	endif
  2425  00187A  0009               	tblrd		*+
  2426  00187C  CFF5 F077          	movff	tablat,___ftmul@f2
  2427  001880  0009               	tblrd		*+
  2428  001882  CFF5 F078          	movff	tablat,___ftmul@f2+1
  2429  001886  000A               	tblrd		*-
  2430  001888  CFF5 F079          	movff	tablat,___ftmul@f2+2
  2431  00188C  0E00               	movlw	0
  2432  00188E  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2433  001890  0E64               	movlw	100
  2434  001892  6F68               	movwf	___awdiv@divisor& (0+255),b
  2435  001894  5189               	movf	scale@scl& (0+255),w,b
  2436  001896  6F66               	movwf	___awdiv@dividend& (0+255),b
  2437  001898  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  2438  00189A  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  2439  00189C  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  2440  00189E  EC5C  F013         	call	___awdiv	;wreg free
  2441  0018A2  0E12               	movlw	18
  2442  0018A4  0100               	movlb	0	; () banked
  2443  0018A6  2566               	addwf	?___awdiv& (0+255),w,b
  2444  0018A8  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2445  0018AA  0E00               	movlw	0
  2446  0018AC  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2447  0018AE  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2448  0018B0  0E00               	movlw	0
  2449  0018B2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2450  0018B4  0E03               	movlw	3
  2451  0018B6  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2452  0018B8  EC0B  F016         	call	___wmul	;wreg free
  2453  0018BC  0E29               	movlw	low __powers_
  2454  0018BE  0100               	movlb	0	; () banked
  2455  0018C0  256E               	addwf	?___wmul& (0+255),w,b
  2456  0018C2  6EF6               	movwf	tblptrl,c
  2457  0018C4  0E0F               	movlw	high __powers_
  2458  0018C6  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2459  0018C8  6EF7               	movwf	tblptrh,c
  2460  0018CA                     	if	1	;There are 3 active tblptr bytes
  2461  0018CA  6AF8               	clrf	tblptru,c
  2462  0018CC  0E00               	movlw	low (__mediumconst shr (0+16))
  2463  0018CE  22F8               	addwfc	tblptru,f,c
  2464  0018D0                     	endif
  2465  0018D0  0009               	tblrd		*+
  2466  0018D2  CFF5 F074          	movff	tablat,___ftmul@f1
  2467  0018D6  0009               	tblrd		*+
  2468  0018D8  CFF5 F075          	movff	tablat,___ftmul@f1+1
  2469  0018DC  000A               	tblrd		*-
  2470  0018DE  CFF5 F076          	movff	tablat,___ftmul@f1+2
  2471  0018E2  ECF5  F010         	call	___ftmul	;wreg free
  2472  0018E6  C074  F086         	movff	?___ftmul,_scale$1489
  2473  0018EA  C075  F087         	movff	?___ftmul+1,_scale$1489+1
  2474  0018EE  C076  F088         	movff	?___ftmul+2,_scale$1489+2
  2475                           
  2476                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2477  0018F2  C086  F074         	movff	_scale$1489,___ftmul@f1
  2478  0018F6  C087  F075         	movff	_scale$1489+1,___ftmul@f1+1
  2479  0018FA  C088  F076         	movff	_scale$1489+2,___ftmul@f1+2
  2480  0018FE  0E00               	movlw	0
  2481  001900  0100               	movlb	0	; () banked
  2482  001902  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2483  001904  0E03               	movlw	3
  2484  001906  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2485  001908  0E00               	movlw	0
  2486  00190A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2487  00190C  0E0A               	movlw	10
  2488  00190E  6F62               	movwf	___awmod@divisor& (0+255),b
  2489  001910  5189               	movf	scale@scl& (0+255),w,b
  2490  001912  6F60               	movwf	___awmod@dividend& (0+255),b
  2491  001914  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  2492  001916  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  2493  001918  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  2494  00191A  EC94  F014         	call	___awmod	;wreg free
  2495  00191E  C060  F06E         	movff	?___awmod,___wmul@multiplier
  2496  001922  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  2497  001926  EC0B  F016         	call	___wmul	;wreg free
  2498  00192A  0E29               	movlw	low __powers_
  2499  00192C  0100               	movlb	0	; () banked
  2500  00192E  256E               	addwf	?___wmul& (0+255),w,b
  2501  001930  6EF6               	movwf	tblptrl,c
  2502  001932  0E0F               	movlw	high __powers_
  2503  001934  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2504  001936  6EF7               	movwf	tblptrh,c
  2505  001938                     	if	1	;There are 3 active tblptr bytes
  2506  001938  6AF8               	clrf	tblptru,c
  2507  00193A  0E00               	movlw	low (__mediumconst shr (0+16))
  2508  00193C  22F8               	addwfc	tblptru,f,c
  2509  00193E                     	endif
  2510  00193E  0009               	tblrd		*+
  2511  001940  CFF5 F077          	movff	tablat,___ftmul@f2
  2512  001944  0009               	tblrd		*+
  2513  001946  CFF5 F078          	movff	tablat,___ftmul@f2+1
  2514  00194A  000A               	tblrd		*-
  2515  00194C  CFF5 F079          	movff	tablat,___ftmul@f2+2
  2516  001950  ECF5  F010         	call	___ftmul	;wreg free
  2517  001954  C074  F083         	movff	?___ftmul,?_scale
  2518  001958  C075  F084         	movff	?___ftmul+1,?_scale+1
  2519  00195C  C076  F085         	movff	?___ftmul+2,?_scale+2
  2520  001960  0012               	return	
  2521  001962                     l394:
  2522                           
  2523                           ;doprnt.c: 438: else if(scl > 10)
  2524  001962  0100               	movlb	0	; () banked
  2525  001964  5189               	movf	scale@scl& (0+255),w,b
  2526  001966  0A80               	xorlw	128
  2527  001968  0F75               	addlw	-139
  2528  00196A  A0D8               	btfss	status,0,c
  2529  00196C  D05C               	goto	l396
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2533  00196E  0E00               	movlw	0
  2534  001970  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2535  001972  0E0A               	movlw	10
  2536  001974  6F68               	movwf	___awdiv@divisor& (0+255),b
  2537  001976  5189               	movf	scale@scl& (0+255),w,b
  2538  001978  6F66               	movwf	___awdiv@dividend& (0+255),b
  2539  00197A  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  2540  00197C  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  2541  00197E  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  2542  001980  EC5C  F013         	call	___awdiv	;wreg free
  2543  001984  0E09               	movlw	9
  2544  001986  0100               	movlb	0	; () banked
  2545  001988  2566               	addwf	?___awdiv& (0+255),w,b
  2546  00198A  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2547  00198C  0E00               	movlw	0
  2548  00198E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2549  001990  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2550  001992  0E00               	movlw	0
  2551  001994  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2552  001996  0E03               	movlw	3
  2553  001998  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2554  00199A  EC0B  F016         	call	___wmul	;wreg free
  2555  00199E  0E29               	movlw	low __powers_
  2556  0019A0  0100               	movlb	0	; () banked
  2557  0019A2  256E               	addwf	?___wmul& (0+255),w,b
  2558  0019A4  6EF6               	movwf	tblptrl,c
  2559  0019A6  0E0F               	movlw	high __powers_
  2560  0019A8  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2561  0019AA  6EF7               	movwf	tblptrh,c
  2562  0019AC                     	if	1	;There are 3 active tblptr bytes
  2563  0019AC  6AF8               	clrf	tblptru,c
  2564  0019AE  0E00               	movlw	low (__mediumconst shr (0+16))
  2565  0019B0  22F8               	addwfc	tblptru,f,c
  2566  0019B2                     	endif
  2567  0019B2  0009               	tblrd		*+
  2568  0019B4  CFF5 F074          	movff	tablat,___ftmul@f1
  2569  0019B8  0009               	tblrd		*+
  2570  0019BA  CFF5 F075          	movff	tablat,___ftmul@f1+1
  2571  0019BE  000A               	tblrd		*-
  2572  0019C0  CFF5 F076          	movff	tablat,___ftmul@f1+2
  2573  0019C4  0E00               	movlw	0
  2574  0019C6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2575  0019C8  0E03               	movlw	3
  2576  0019CA  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2577  0019CC  0E00               	movlw	0
  2578  0019CE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2579  0019D0  0E0A               	movlw	10
  2580  0019D2  6F62               	movwf	___awmod@divisor& (0+255),b
  2581  0019D4  5189               	movf	scale@scl& (0+255),w,b
  2582  0019D6  6F60               	movwf	___awmod@dividend& (0+255),b
  2583  0019D8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  2584  0019DA  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  2585  0019DC  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  2586  0019DE  EC94  F014         	call	___awmod	;wreg free
  2587  0019E2  C060  F06E         	movff	?___awmod,___wmul@multiplier
  2588  0019E6  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  2589  0019EA  EC0B  F016         	call	___wmul	;wreg free
  2590  0019EE  0E29               	movlw	low __powers_
  2591  0019F0  0100               	movlb	0	; () banked
  2592  0019F2  256E               	addwf	?___wmul& (0+255),w,b
  2593  0019F4  6EF6               	movwf	tblptrl,c
  2594  0019F6  0E0F               	movlw	high __powers_
  2595  0019F8  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2596  0019FA  6EF7               	movwf	tblptrh,c
  2597  0019FC                     	if	1	;There are 3 active tblptr bytes
  2598  0019FC  6AF8               	clrf	tblptru,c
  2599  0019FE  0E00               	movlw	low (__mediumconst shr (0+16))
  2600  001A00  22F8               	addwfc	tblptru,f,c
  2601  001A02                     	endif
  2602  001A02  0009               	tblrd		*+
  2603  001A04  CFF5 F077          	movff	tablat,___ftmul@f2
  2604  001A08  0009               	tblrd		*+
  2605  001A0A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  2606  001A0E  000A               	tblrd		*-
  2607  001A10  CFF5 F079          	movff	tablat,___ftmul@f2+2
  2608  001A14  ECF5  F010         	call	___ftmul	;wreg free
  2609  001A18  C074  F083         	movff	?___ftmul,?_scale
  2610  001A1C  C075  F084         	movff	?___ftmul+1,?_scale+1
  2611  001A20  C076  F085         	movff	?___ftmul+2,?_scale+2
  2612  001A24  0012               	return	
  2613  001A26                     l396:
  2614                           
  2615                           ;doprnt.c: 440: return _powers_[scl];
  2616  001A26  0100               	movlb	0	; () banked
  2617  001A28  5189               	movf	scale@scl& (0+255),w,b
  2618  001A2A  0D03               	mullw	3
  2619  001A2C  0E29               	movlw	low __powers_
  2620  001A2E  24F3               	addwf	prodl,w,c
  2621  001A30  6EF6               	movwf	tblptrl,c
  2622  001A32  0E0F               	movlw	high __powers_
  2623  001A34  20F4               	addwfc	prodh,w,c
  2624  001A36  6EF7               	movwf	tblptrh,c
  2625  001A38                     	if	1	;There are 3 active tblptr bytes
  2626  001A38  6AF8               	clrf	tblptru,c
  2627  001A3A  0E00               	movlw	low (__mediumconst shr (0+16))
  2628  001A3C  22F8               	addwfc	tblptru,f,c
  2629  001A3E                     	endif
  2630  001A3E  0009               	tblrd		*+
  2631  001A40  CFF5 F083          	movff	tablat,?_scale
  2632  001A44  0009               	tblrd		*+
  2633  001A46  CFF5 F084          	movff	tablat,?_scale+1
  2634  001A4A  000A               	tblrd		*-
  2635  001A4C  CFF5 F085          	movff	tablat,?_scale+2
  2636  001A50  0012               	return	
  2637  001A52                     __end_of_scale:
  2638                           	opt stack 0
  2639                           tblptru	equ	0xFF8
  2640                           tblptrh	equ	0xFF7
  2641                           tblptrl	equ	0xFF6
  2642                           tablat	equ	0xFF5
  2643                           prodh	equ	0xFF4
  2644                           prodl	equ	0xFF3
  2645                           intcon	equ	0xFF2
  2646                           postinc0	equ	0xFEE
  2647                           wreg	equ	0xFE8
  2648                           indf2	equ	0xFDF
  2649                           postinc2	equ	0xFDE
  2650                           postdec2	equ	0xFDD
  2651                           fsr2h	equ	0xFDA
  2652                           fsr2l	equ	0xFD9
  2653                           status	equ	0xFD8
  2654                           
  2655 ;; *************** function _fround *****************
  2656 ;; Defined at:
  2657 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;  prec            1    wreg     unsigned char 
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;  prec            1   44[BANK0 ] unsigned char 
  2662 ;; Return value:  Size  Location     Type
  2663 ;;                  3   35[BANK0 ] unsigned char 
  2664 ;; Registers used:
  2665 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2666 ;; Tracked objects:
  2667 ;;		On entry : 0/0
  2668 ;;		On exit  : 0/0
  2669 ;;		Unchanged: 0/0
  2670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2671 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2672 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2674 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2675 ;;Total ram usage:       10 bytes
  2676 ;; Hardware stack levels used:    1
  2677 ;; Hardware stack levels required when called:    8
  2678 ;; This function calls:
  2679 ;;		___awdiv
  2680 ;;		___awmod
  2681 ;;		___ftmul
  2682 ;;		___wmul
  2683 ;; This function is called by:
  2684 ;;		_sprintf
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           	psect	text3
  2689  001A52                     __ptext3:
  2690                           	opt stack 0
  2691  001A52                     _fround:
  2692                           	opt stack 21
  2693                           
  2694                           ;incstack = 0
  2695                           ;fround@prec stored from wreg
  2696  001A52  0100               	movlb	0	; () banked
  2697  001A54  6F8C               	movwf	fround@prec& (0+255),b
  2698                           
  2699                           ;doprnt.c: 413: if(prec>=110)
  2700  001A56  0E6D               	movlw	109
  2701  001A58  0100               	movlb	0	; () banked
  2702  001A5A  658C               	cpfsgt	fround@prec& (0+255),b
  2703  001A5C  D0AF               	goto	l383
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2707  001A5E  0E00               	movlw	0
  2708  001A60  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2709  001A62  0E03               	movlw	3
  2710  001A64  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2711  001A66  0E00               	movlw	0
  2712  001A68  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2713  001A6A  0E0A               	movlw	10
  2714  001A6C  6F68               	movwf	___awdiv@divisor& (0+255),b
  2715  001A6E  0E00               	movlw	0
  2716  001A70  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2717  001A72  0E64               	movlw	100
  2718  001A74  6F62               	movwf	___awmod@divisor& (0+255),b
  2719  001A76  C08C  F060         	movff	fround@prec,___awmod@dividend
  2720  001A7A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  2721  001A7C  EC94  F014         	call	___awmod	;wreg free
  2722  001A80  C060  F066         	movff	?___awmod,___awdiv@dividend
  2723  001A84  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  2724  001A88  EC5C  F013         	call	___awdiv	;wreg free
  2725  001A8C  0E09               	movlw	9
  2726  001A8E  0100               	movlb	0	; () banked
  2727  001A90  2566               	addwf	?___awdiv& (0+255),w,b
  2728  001A92  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2729  001A94  0E00               	movlw	0
  2730  001A96  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2731  001A98  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2732  001A9A  EC0B  F016         	call	___wmul	;wreg free
  2733  001A9E  0E50               	movlw	low __npowers_
  2734  001AA0  0100               	movlb	0	; () banked
  2735  001AA2  256E               	addwf	?___wmul& (0+255),w,b
  2736  001AA4  6EF6               	movwf	tblptrl,c
  2737  001AA6  0E0F               	movlw	high __npowers_
  2738  001AA8  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2739  001AAA  6EF7               	movwf	tblptrh,c
  2740  001AAC                     	if	1	;There are 3 active tblptr bytes
  2741  001AAC  6AF8               	clrf	tblptru,c
  2742  001AAE  0E00               	movlw	low (__mediumconst shr (0+16))
  2743  001AB0  22F8               	addwfc	tblptru,f,c
  2744  001AB2                     	endif
  2745  001AB2  0009               	tblrd		*+
  2746  001AB4  CFF5 F077          	movff	tablat,___ftmul@f2
  2747  001AB8  0009               	tblrd		*+
  2748  001ABA  CFF5 F078          	movff	tablat,___ftmul@f2+1
  2749  001ABE  000A               	tblrd		*-
  2750  001AC0  CFF5 F079          	movff	tablat,___ftmul@f2+2
  2751  001AC4  0E00               	movlw	0
  2752  001AC6  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2753  001AC8  0E64               	movlw	100
  2754  001ACA  6F68               	movwf	___awdiv@divisor& (0+255),b
  2755  001ACC  C08C  F066         	movff	fround@prec,___awdiv@dividend
  2756  001AD0  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  2757  001AD2  EC5C  F013         	call	___awdiv	;wreg free
  2758  001AD6  0E12               	movlw	18
  2759  001AD8  0100               	movlb	0	; () banked
  2760  001ADA  2566               	addwf	?___awdiv& (0+255),w,b
  2761  001ADC  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2762  001ADE  0E00               	movlw	0
  2763  001AE0  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2764  001AE2  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2765  001AE4  0E00               	movlw	0
  2766  001AE6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2767  001AE8  0E03               	movlw	3
  2768  001AEA  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2769  001AEC  EC0B  F016         	call	___wmul	;wreg free
  2770  001AF0  0E50               	movlw	low __npowers_
  2771  001AF2  0100               	movlb	0	; () banked
  2772  001AF4  256E               	addwf	?___wmul& (0+255),w,b
  2773  001AF6  6EF6               	movwf	tblptrl,c
  2774  001AF8  0E0F               	movlw	high __npowers_
  2775  001AFA  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2776  001AFC  6EF7               	movwf	tblptrh,c
  2777  001AFE                     	if	1	;There are 3 active tblptr bytes
  2778  001AFE  6AF8               	clrf	tblptru,c
  2779  001B00  0E00               	movlw	low (__mediumconst shr (0+16))
  2780  001B02  22F8               	addwfc	tblptru,f,c
  2781  001B04                     	endif
  2782  001B04  0009               	tblrd		*+
  2783  001B06  CFF5 F074          	movff	tablat,___ftmul@f1
  2784  001B0A  0009               	tblrd		*+
  2785  001B0C  CFF5 F075          	movff	tablat,___ftmul@f1+1
  2786  001B10  000A               	tblrd		*-
  2787  001B12  CFF5 F076          	movff	tablat,___ftmul@f1+2
  2788  001B16  ECF5  F010         	call	___ftmul	;wreg free
  2789  001B1A  C074  F089         	movff	?___ftmul,_fround$1487
  2790  001B1E  C075  F08A         	movff	?___ftmul+1,_fround$1487+1
  2791  001B22  C076  F08B         	movff	?___ftmul+2,_fround$1487+2
  2792                           
  2793                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2794  001B26  0E00               	movlw	0
  2795  001B28  0100               	movlb	0	; () banked
  2796  001B2A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2797  001B2C  0E03               	movlw	3
  2798  001B2E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2799  001B30  0E00               	movlw	0
  2800  001B32  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2801  001B34  0E0A               	movlw	10
  2802  001B36  6F62               	movwf	___awmod@divisor& (0+255),b
  2803  001B38  C08C  F060         	movff	fround@prec,___awmod@dividend
  2804  001B3C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  2805  001B3E  EC94  F014         	call	___awmod	;wreg free
  2806  001B42  C060  F06E         	movff	?___awmod,___wmul@multiplier
  2807  001B46  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  2808  001B4A  EC0B  F016         	call	___wmul	;wreg free
  2809  001B4E  0E50               	movlw	low __npowers_
  2810  001B50  0100               	movlb	0	; () banked
  2811  001B52  256E               	addwf	?___wmul& (0+255),w,b
  2812  001B54  6EF6               	movwf	tblptrl,c
  2813  001B56  0E0F               	movlw	high __npowers_
  2814  001B58  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2815  001B5A  6EF7               	movwf	tblptrh,c
  2816  001B5C                     	if	1	;There are 3 active tblptr bytes
  2817  001B5C  6AF8               	clrf	tblptru,c
  2818  001B5E  0E00               	movlw	low (__mediumconst shr (0+16))
  2819  001B60  22F8               	addwfc	tblptru,f,c
  2820  001B62                     	endif
  2821  001B62  0009               	tblrd		*+
  2822  001B64  CFF5 F077          	movff	tablat,___ftmul@f2
  2823  001B68  0009               	tblrd		*+
  2824  001B6A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  2825  001B6E  000A               	tblrd		*-
  2826  001B70  CFF5 F079          	movff	tablat,___ftmul@f2+2
  2827  001B74  C089  F074         	movff	_fround$1487,___ftmul@f1
  2828  001B78  C08A  F075         	movff	_fround$1487+1,___ftmul@f1+1
  2829  001B7C  C08B  F076         	movff	_fround$1487+2,___ftmul@f1+2
  2830  001B80  ECF5  F010         	call	___ftmul	;wreg free
  2831  001B84  C074  F086         	movff	?___ftmul,_fround$1488
  2832  001B88  C075  F087         	movff	?___ftmul+1,_fround$1488+1
  2833  001B8C  C076  F088         	movff	?___ftmul+2,_fround$1488+2
  2834                           
  2835                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2836  001B90  C086  F074         	movff	_fround$1488,___ftmul@f1
  2837  001B94  C087  F075         	movff	_fround$1488+1,___ftmul@f1+1
  2838  001B98  C088  F076         	movff	_fround$1488+2,___ftmul@f1+2
  2839  001B9C  0E00               	movlw	0
  2840  001B9E  0100               	movlb	0	; () banked
  2841  001BA0  6F77               	movwf	___ftmul@f2& (0+255),b
  2842  001BA2  0E00               	movlw	0
  2843  001BA4  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  2844  001BA6  0E3F               	movlw	63
  2845  001BA8  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  2846  001BAA  ECF5  F010         	call	___ftmul	;wreg free
  2847  001BAE  C074  F083         	movff	?___ftmul,?_fround
  2848  001BB2  C075  F084         	movff	?___ftmul+1,?_fround+1
  2849  001BB6  C076  F085         	movff	?___ftmul+2,?_fround+2
  2850  001BBA  0012               	return	
  2851  001BBC                     l383:
  2852                           
  2853                           ;doprnt.c: 415: else if(prec > 10)
  2854  001BBC  0E0A               	movlw	10
  2855  001BBE  0100               	movlb	0	; () banked
  2856  001BC0  658C               	cpfsgt	fround@prec& (0+255),b
  2857  001BC2  D06D               	goto	l386
  2858                           
  2859                           ; BSR set to: 0
  2860                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2861  001BC4  0E00               	movlw	0
  2862  001BC6  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2863  001BC8  0E03               	movlw	3
  2864  001BCA  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2865  001BCC  0E00               	movlw	0
  2866  001BCE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2867  001BD0  0E0A               	movlw	10
  2868  001BD2  6F62               	movwf	___awmod@divisor& (0+255),b
  2869  001BD4  C08C  F060         	movff	fround@prec,___awmod@dividend
  2870  001BD8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  2871  001BDA  EC94  F014         	call	___awmod	;wreg free
  2872  001BDE  C060  F06E         	movff	?___awmod,___wmul@multiplier
  2873  001BE2  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  2874  001BE6  EC0B  F016         	call	___wmul	;wreg free
  2875  001BEA  0E50               	movlw	low __npowers_
  2876  001BEC  0100               	movlb	0	; () banked
  2877  001BEE  256E               	addwf	?___wmul& (0+255),w,b
  2878  001BF0  6EF6               	movwf	tblptrl,c
  2879  001BF2  0E0F               	movlw	high __npowers_
  2880  001BF4  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2881  001BF6  6EF7               	movwf	tblptrh,c
  2882  001BF8                     	if	1	;There are 3 active tblptr bytes
  2883  001BF8  6AF8               	clrf	tblptru,c
  2884  001BFA  0E00               	movlw	low (__mediumconst shr (0+16))
  2885  001BFC  22F8               	addwfc	tblptru,f,c
  2886  001BFE                     	endif
  2887  001BFE  0009               	tblrd		*+
  2888  001C00  CFF5 F077          	movff	tablat,___ftmul@f2
  2889  001C04  0009               	tblrd		*+
  2890  001C06  CFF5 F078          	movff	tablat,___ftmul@f2+1
  2891  001C0A  000A               	tblrd		*-
  2892  001C0C  CFF5 F079          	movff	tablat,___ftmul@f2+2
  2893  001C10  0E00               	movlw	0
  2894  001C12  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2895  001C14  0E0A               	movlw	10
  2896  001C16  6F68               	movwf	___awdiv@divisor& (0+255),b
  2897  001C18  C08C  F066         	movff	fround@prec,___awdiv@dividend
  2898  001C1C  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  2899  001C1E  EC5C  F013         	call	___awdiv	;wreg free
  2900  001C22  0E09               	movlw	9
  2901  001C24  0100               	movlb	0	; () banked
  2902  001C26  2566               	addwf	?___awdiv& (0+255),w,b
  2903  001C28  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2904  001C2A  0E00               	movlw	0
  2905  001C2C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2906  001C2E  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2907  001C30  0E00               	movlw	0
  2908  001C32  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2909  001C34  0E03               	movlw	3
  2910  001C36  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2911  001C38  EC0B  F016         	call	___wmul	;wreg free
  2912  001C3C  0E50               	movlw	low __npowers_
  2913  001C3E  0100               	movlb	0	; () banked
  2914  001C40  256E               	addwf	?___wmul& (0+255),w,b
  2915  001C42  6EF6               	movwf	tblptrl,c
  2916  001C44  0E0F               	movlw	high __npowers_
  2917  001C46  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2918  001C48  6EF7               	movwf	tblptrh,c
  2919  001C4A                     	if	1	;There are 3 active tblptr bytes
  2920  001C4A  6AF8               	clrf	tblptru,c
  2921  001C4C  0E00               	movlw	low (__mediumconst shr (0+16))
  2922  001C4E  22F8               	addwfc	tblptru,f,c
  2923  001C50                     	endif
  2924  001C50  0009               	tblrd		*+
  2925  001C52  CFF5 F074          	movff	tablat,___ftmul@f1
  2926  001C56  0009               	tblrd		*+
  2927  001C58  CFF5 F075          	movff	tablat,___ftmul@f1+1
  2928  001C5C  000A               	tblrd		*-
  2929  001C5E  CFF5 F076          	movff	tablat,___ftmul@f1+2
  2930  001C62  ECF5  F010         	call	___ftmul	;wreg free
  2931  001C66  C074  F089         	movff	?___ftmul,_fround$1487
  2932  001C6A  C075  F08A         	movff	?___ftmul+1,_fround$1487+1
  2933  001C6E  C076  F08B         	movff	?___ftmul+2,_fround$1487+2
  2934                           
  2935                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2936  001C72  C089  F074         	movff	_fround$1487,___ftmul@f1
  2937  001C76  C08A  F075         	movff	_fround$1487+1,___ftmul@f1+1
  2938  001C7A  C08B  F076         	movff	_fround$1487+2,___ftmul@f1+2
  2939  001C7E  0E00               	movlw	0
  2940  001C80  0100               	movlb	0	; () banked
  2941  001C82  6F77               	movwf	___ftmul@f2& (0+255),b
  2942  001C84  0E00               	movlw	0
  2943  001C86  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  2944  001C88  0E3F               	movlw	63
  2945  001C8A  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  2946  001C8C  ECF5  F010         	call	___ftmul	;wreg free
  2947  001C90  C074  F083         	movff	?___ftmul,?_fround
  2948  001C94  C075  F084         	movff	?___ftmul+1,?_fround+1
  2949  001C98  C076  F085         	movff	?___ftmul+2,?_fround+2
  2950  001C9C  0012               	return	
  2951  001C9E                     l386:
  2952                           
  2953                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  2954  001C9E  0100               	movlb	0	; () banked
  2955  001CA0  518C               	movf	fround@prec& (0+255),w,b
  2956  001CA2  0D03               	mullw	3
  2957  001CA4  0E50               	movlw	low __npowers_
  2958  001CA6  24F3               	addwf	prodl,w,c
  2959  001CA8  6EF6               	movwf	tblptrl,c
  2960  001CAA  0E0F               	movlw	high __npowers_
  2961  001CAC  20F4               	addwfc	prodh,w,c
  2962  001CAE  6EF7               	movwf	tblptrh,c
  2963  001CB0                     	if	1	;There are 3 active tblptr bytes
  2964  001CB0  6AF8               	clrf	tblptru,c
  2965  001CB2  0E00               	movlw	low (__mediumconst shr (0+16))
  2966  001CB4  22F8               	addwfc	tblptru,f,c
  2967  001CB6                     	endif
  2968  001CB6  0009               	tblrd		*+
  2969  001CB8  CFF5 F074          	movff	tablat,___ftmul@f1
  2970  001CBC  0009               	tblrd		*+
  2971  001CBE  CFF5 F075          	movff	tablat,___ftmul@f1+1
  2972  001CC2  000A               	tblrd		*-
  2973  001CC4  CFF5 F076          	movff	tablat,___ftmul@f1+2
  2974  001CC8  0E00               	movlw	0
  2975  001CCA  6F77               	movwf	___ftmul@f2& (0+255),b
  2976  001CCC  0E00               	movlw	0
  2977  001CCE  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  2978  001CD0  0E3F               	movlw	63
  2979  001CD2  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  2980  001CD4  ECF5  F010         	call	___ftmul	;wreg free
  2981  001CD8  C074  F083         	movff	?___ftmul,?_fround
  2982  001CDC  C075  F084         	movff	?___ftmul+1,?_fround+1
  2983  001CE0  C076  F085         	movff	?___ftmul+2,?_fround+2
  2984  001CE4  0012               	return	
  2985  001CE6                     __end_of_fround:
  2986                           	opt stack 0
  2987                           tblptru	equ	0xFF8
  2988                           tblptrh	equ	0xFF7
  2989                           tblptrl	equ	0xFF6
  2990                           tablat	equ	0xFF5
  2991                           prodh	equ	0xFF4
  2992                           prodl	equ	0xFF3
  2993                           intcon	equ	0xFF2
  2994                           postinc0	equ	0xFEE
  2995                           wreg	equ	0xFE8
  2996                           indf2	equ	0xFDF
  2997                           postinc2	equ	0xFDE
  2998                           postdec2	equ	0xFDD
  2999                           fsr2h	equ	0xFDA
  3000                           fsr2l	equ	0xFD9
  3001                           status	equ	0xFD8
  3002                           
  3003 ;; *************** function ___wmul *****************
  3004 ;; Defined at:
  3005 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;  multiplier      2   14[BANK0 ] unsigned int 
  3008 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  product         2   18[BANK0 ] unsigned int 
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  2   14[BANK0 ] unsigned int 
  3013 ;; Registers used:
  3014 ;;		wreg, status,2, status,0, prodl, prodh
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3020 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3021 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3023 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3024 ;;Total ram usage:        6 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:    6
  3027 ;; This function calls:
  3028 ;;		Nothing
  3029 ;; This function is called by:
  3030 ;;		_fround
  3031 ;;		_scale
  3032 ;;		_sprintf
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           	psect	text4
  3037  002C16                     __ptext4:
  3038                           	opt stack 0
  3039  002C16                     ___wmul:
  3040                           	opt stack 22
  3041                           
  3042                           ;incstack = 0
  3043  002C16  0100               	movlb	0	; () banked
  3044  002C18  516E               	movf	___wmul@multiplier& (0+255),w,b
  3045  002C1A  0370               	mulwf	___wmul@multiplicand& (0+255),b
  3046  002C1C  CFF3 F072          	movff	prodl,___wmul@product
  3047  002C20  CFF4 F073          	movff	prodh,___wmul@product+1
  3048  002C24  516E               	movf	___wmul@multiplier& (0+255),w,b
  3049  002C26  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3050  002C28  50F3               	movf	prodl,w,c
  3051  002C2A  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  3052  002C2C  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3053  002C2E  0370               	mulwf	___wmul@multiplicand& (0+255),b
  3054  002C30  50F3               	movf	prodl,w,c
  3055  002C32  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  3056                           
  3057                           ; BSR set to: 0
  3058  002C34  C072  F06E         	movff	___wmul@product,?___wmul
  3059  002C38  C073  F06F         	movff	___wmul@product+1,?___wmul+1
  3060  002C3C  0012               	return	
  3061  002C3E                     __end_of___wmul:
  3062                           	opt stack 0
  3063                           tblptru	equ	0xFF8
  3064                           tblptrh	equ	0xFF7
  3065                           tblptrl	equ	0xFF6
  3066                           tablat	equ	0xFF5
  3067                           prodh	equ	0xFF4
  3068                           prodl	equ	0xFF3
  3069                           intcon	equ	0xFF2
  3070                           postinc0	equ	0xFEE
  3071                           wreg	equ	0xFE8
  3072                           indf2	equ	0xFDF
  3073                           postinc2	equ	0xFDE
  3074                           postdec2	equ	0xFDD
  3075                           fsr2h	equ	0xFDA
  3076                           fsr2l	equ	0xFD9
  3077                           status	equ	0xFD8
  3078                           
  3079 ;; *************** function ___ftmul *****************
  3080 ;; Defined at:
  3081 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;  f1              3   20[BANK0 ] float 
  3084 ;;  f2              3   23[BANK0 ] float 
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  3087 ;;  sign            1   34[BANK0 ] unsigned char 
  3088 ;;  cntr            1   33[BANK0 ] unsigned char 
  3089 ;;  exp             1   29[BANK0 ] unsigned char 
  3090 ;; Return value:  Size  Location     Type
  3091 ;;                  3   20[BANK0 ] float 
  3092 ;; Registers used:
  3093 ;;		wreg, status,2, status,0, cstack
  3094 ;; Tracked objects:
  3095 ;;		On entry : 0/0
  3096 ;;		On exit  : 0/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3099 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3100 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3101 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3102 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3103 ;;Total ram usage:       15 bytes
  3104 ;; Hardware stack levels used:    1
  3105 ;; Hardware stack levels required when called:    7
  3106 ;; This function calls:
  3107 ;;		___ftpack
  3108 ;; This function is called by:
  3109 ;;		_fround
  3110 ;;		_scale
  3111 ;;		_sprintf
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           	psect	text5
  3116  0021EA                     __ptext5:
  3117                           	opt stack 0
  3118  0021EA                     ___ftmul:
  3119                           	opt stack 21
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;incstack = 0
  3123  0021EA  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
  3124  0021EE  0100               	movlb	0	; () banked
  3125  0021F0  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  3126  0021F2  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  3127  0021F4  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  3128  0021F6  377A               	rlcf	??___ftmul& (0+255),f,b
  3129  0021F8  E301               	bnc	u2151
  3130  0021FA  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  3131  0021FC                     u2151:
  3132  0021FC  517A               	movf	??___ftmul& (0+255),w,b
  3133  0021FE  6F7D               	movwf	___ftmul@exp& (0+255),b
  3134  002200  517D               	movf	___ftmul@exp& (0+255),w,b
  3135  002202  A4D8               	btfss	status,2,c
  3136  002204  D007               	goto	l775
  3137                           
  3138                           ; BSR set to: 0
  3139  002206  0E00               	movlw	0
  3140  002208  6F74               	movwf	?___ftmul& (0+255),b
  3141  00220A  0E00               	movlw	0
  3142  00220C  6F75               	movwf	(?___ftmul+1)& (0+255),b
  3143  00220E  0E00               	movlw	0
  3144  002210  6F76               	movwf	(?___ftmul+2)& (0+255),b
  3145                           
  3146                           ; BSR set to: 0
  3147  002212  0012               	return	
  3148  002214                     l775:
  3149                           
  3150                           ; BSR set to: 0
  3151                           
  3152                           ; BSR set to: 0
  3153  002214  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
  3154  002218  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  3155  00221A  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  3156  00221C  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  3157  00221E  377A               	rlcf	??___ftmul& (0+255),f,b
  3158  002220  E301               	bnc	u2171
  3159  002222  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  3160  002224                     u2171:
  3161  002224  517A               	movf	??___ftmul& (0+255),w,b
  3162  002226  6F82               	movwf	___ftmul@sign& (0+255),b
  3163  002228  5182               	movf	___ftmul@sign& (0+255),w,b
  3164  00222A  A4D8               	btfss	status,2,c
  3165  00222C  D007               	goto	l777
  3166                           
  3167                           ; BSR set to: 0
  3168  00222E  0E00               	movlw	0
  3169  002230  6F74               	movwf	?___ftmul& (0+255),b
  3170  002232  0E00               	movlw	0
  3171  002234  6F75               	movwf	(?___ftmul+1)& (0+255),b
  3172  002236  0E00               	movlw	0
  3173  002238  6F76               	movwf	(?___ftmul+2)& (0+255),b
  3174                           
  3175                           ; BSR set to: 0
  3176  00223A  0012               	return	
  3177  00223C                     l777:
  3178                           
  3179                           ; BSR set to: 0
  3180                           
  3181                           ; BSR set to: 0
  3182  00223C  5182               	movf	___ftmul@sign& (0+255),w,b
  3183  00223E  0F7B               	addlw	123
  3184  002240  277D               	addwf	___ftmul@exp& (0+255),f,b
  3185                           
  3186                           ; BSR set to: 0
  3187  002242  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
  3188  002246  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  3189  002248  1B82               	xorwf	___ftmul@sign& (0+255),f,b
  3190  00224A  0E80               	movlw	128
  3191  00224C  1782               	andwf	___ftmul@sign& (0+255),f,b
  3192                           
  3193                           ; BSR set to: 0
  3194  00224E  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
  3195                           
  3196                           ; BSR set to: 0
  3197  002250  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
  3198                           
  3199                           ; BSR set to: 0
  3200  002252  0EFF               	movlw	255
  3201  002254  1777               	andwf	___ftmul@f2& (0+255),f,b
  3202  002256  0EFF               	movlw	255
  3203  002258  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
  3204  00225A  0E00               	movlw	0
  3205  00225C  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
  3206                           
  3207                           ; BSR set to: 0
  3208  00225E  0E00               	movlw	0
  3209  002260  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
  3210  002262  0E00               	movlw	0
  3211  002264  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3212  002266  0E00               	movlw	0
  3213  002268  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3214                           
  3215                           ; BSR set to: 0
  3216  00226A  0E07               	movlw	7
  3217  00226C  6F81               	movwf	___ftmul@cntr& (0+255),b
  3218  00226E                     
  3219                           ; BSR set to: 0
  3220                           
  3221                           ; BSR set to: 0
  3222  00226E  A174               	btfss	___ftmul@f1& (0+255),0,b
  3223  002270  D006               	goto	l779
  3224                           
  3225                           ; BSR set to: 0
  3226  002272  5177               	movf	___ftmul@f2& (0+255),w,b
  3227  002274  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3228  002276  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  3229  002278  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3230  00227A  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  3231  00227C  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3232  00227E                     l779:
  3233                           
  3234                           ; BSR set to: 0
  3235                           
  3236                           ; BSR set to: 0
  3237  00227E  90D8               	bcf	status,0,c
  3238  002280  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3239  002282  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3240  002284  3374               	rrcf	___ftmul@f1& (0+255),f,b
  3241  002286  90D8               	bcf	status,0,c
  3242  002288  3777               	rlcf	___ftmul@f2& (0+255),f,b
  3243  00228A  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  3244  00228C  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  3245                           
  3246                           ; BSR set to: 0
  3247  00228E  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  3248  002290  D7EE               	goto	l778
  3249                           
  3250                           ; BSR set to: 0
  3251                           
  3252                           ; BSR set to: 0
  3253  002292  0E09               	movlw	9
  3254  002294  6F81               	movwf	___ftmul@cntr& (0+255),b
  3255  002296                     
  3256                           ; BSR set to: 0
  3257                           
  3258                           ; BSR set to: 0
  3259  002296  A174               	btfss	___ftmul@f1& (0+255),0,b
  3260  002298  D006               	goto	l782
  3261                           
  3262                           ; BSR set to: 0
  3263  00229A  5177               	movf	___ftmul@f2& (0+255),w,b
  3264  00229C  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3265  00229E  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  3266  0022A0  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3267  0022A2  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  3268  0022A4  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3269  0022A6                     l782:
  3270                           
  3271                           ; BSR set to: 0
  3272                           
  3273                           ; BSR set to: 0
  3274  0022A6  90D8               	bcf	status,0,c
  3275  0022A8  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3276  0022AA  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3277  0022AC  3374               	rrcf	___ftmul@f1& (0+255),f,b
  3278  0022AE  90D8               	bcf	status,0,c
  3279  0022B0  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3280  0022B2  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3281  0022B4  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3282                           
  3283                           ; BSR set to: 0
  3284  0022B6  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  3285  0022B8  D7EE               	goto	l781
  3286                           
  3287                           ; BSR set to: 0
  3288                           
  3289                           ; BSR set to: 0
  3290  0022BA  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  3291  0022BE  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3292  0022C2  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3293  0022C6  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
  3294  0022CA  C082  F064         	movff	___ftmul@sign,___ftpack@sign
  3295  0022CE  EC64  F012         	call	___ftpack	;wreg free
  3296  0022D2  C060  F074         	movff	?___ftpack,?___ftmul
  3297  0022D6  C061  F075         	movff	?___ftpack+1,?___ftmul+1
  3298  0022DA  C062  F076         	movff	?___ftpack+2,?___ftmul+2
  3299  0022DE  0012               	return	
  3300  0022E0                     __end_of___ftmul:
  3301                           	opt stack 0
  3302                           tblptru	equ	0xFF8
  3303                           tblptrh	equ	0xFF7
  3304                           tblptrl	equ	0xFF6
  3305                           tablat	equ	0xFF5
  3306                           prodh	equ	0xFF4
  3307                           prodl	equ	0xFF3
  3308                           intcon	equ	0xFF2
  3309                           postinc0	equ	0xFEE
  3310                           wreg	equ	0xFE8
  3311                           indf2	equ	0xFDF
  3312                           postinc2	equ	0xFDE
  3313                           postdec2	equ	0xFDD
  3314                           fsr2h	equ	0xFDA
  3315                           fsr2l	equ	0xFD9
  3316                           status	equ	0xFD8
  3317                           
  3318 ;; *************** function ___awmod *****************
  3319 ;; Defined at:
  3320 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;  dividend        2    0[BANK0 ] int 
  3323 ;;  divisor         2    2[BANK0 ] int 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;  sign            1    5[BANK0 ] unsigned char 
  3326 ;;  counter         1    4[BANK0 ] unsigned char 
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  2    0[BANK0 ] int 
  3329 ;; Registers used:
  3330 ;;		wreg, status,2, status,0
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3336 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3337 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3339 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3340 ;;Total ram usage:        6 bytes
  3341 ;; Hardware stack levels used:    1
  3342 ;; Hardware stack levels required when called:    6
  3343 ;; This function calls:
  3344 ;;		Nothing
  3345 ;; This function is called by:
  3346 ;;		_fround
  3347 ;;		_scale
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           	psect	text6
  3352  002928                     __ptext6:
  3353                           	opt stack 0
  3354  002928                     ___awmod:
  3355                           	opt stack 22
  3356                           
  3357                           ;incstack = 0
  3358  002928  0E00               	movlw	0
  3359  00292A  0100               	movlb	0	; () banked
  3360  00292C  6F65               	movwf	___awmod@sign& (0+255),b
  3361                           
  3362                           ; BSR set to: 0
  3363  00292E  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  3364  002930  D006               	goto	l628
  3365                           
  3366                           ; BSR set to: 0
  3367  002932  6D60               	negf	___awmod@dividend& (0+255),b
  3368  002934  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  3369  002936  B0D8               	btfsc	status,0,c
  3370  002938  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  3371                           
  3372                           ; BSR set to: 0
  3373  00293A  0E01               	movlw	1
  3374  00293C  6F65               	movwf	___awmod@sign& (0+255),b
  3375  00293E                     l628:
  3376                           
  3377                           ; BSR set to: 0
  3378                           
  3379                           ; BSR set to: 0
  3380  00293E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3381  002940  D004               	goto	l629
  3382                           
  3383                           ; BSR set to: 0
  3384  002942  6D62               	negf	___awmod@divisor& (0+255),b
  3385  002944  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  3386  002946  B0D8               	btfsc	status,0,c
  3387  002948  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  3388  00294A                     l629:
  3389                           
  3390                           ; BSR set to: 0
  3391                           
  3392                           ; BSR set to: 0
  3393  00294A  5162               	movf	___awmod@divisor& (0+255),w,b
  3394  00294C  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  3395  00294E  B4D8               	btfsc	status,2,c
  3396  002950  D018               	goto	l636
  3397                           
  3398                           ; BSR set to: 0
  3399  002952  0E01               	movlw	1
  3400  002954  6F64               	movwf	___awmod@counter& (0+255),b
  3401  002956  D004               	goto	l631
  3402  002958                     
  3403                           ; BSR set to: 0
  3404                           
  3405                           ; BSR set to: 0
  3406  002958  90D8               	bcf	status,0,c
  3407  00295A  3762               	rlcf	___awmod@divisor& (0+255),f,b
  3408  00295C  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  3409  00295E  2B64               	incf	___awmod@counter& (0+255),f,b
  3410  002960                     l631:
  3411                           
  3412                           ; BSR set to: 0
  3413                           
  3414                           ; BSR set to: 0
  3415  002960  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3416  002962  D7FA               	goto	l632
  3417  002964                     u2300:
  3418                           
  3419                           ; BSR set to: 0
  3420                           
  3421                           ; BSR set to: 0
  3422                           
  3423                           ; BSR set to: 0
  3424  002964  5162               	movf	___awmod@divisor& (0+255),w,b
  3425  002966  5D60               	subwf	___awmod@dividend& (0+255),w,b
  3426  002968  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  3427  00296A  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  3428  00296C  A0D8               	btfss	status,0,c
  3429  00296E  D004               	goto	l635
  3430                           
  3431                           ; BSR set to: 0
  3432  002970  5162               	movf	___awmod@divisor& (0+255),w,b
  3433  002972  5F60               	subwf	___awmod@dividend& (0+255),f,b
  3434  002974  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  3435  002976  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  3436  002978                     l635:
  3437                           
  3438                           ; BSR set to: 0
  3439                           
  3440                           ; BSR set to: 0
  3441  002978  90D8               	bcf	status,0,c
  3442  00297A  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  3443  00297C  3362               	rrcf	___awmod@divisor& (0+255),f,b
  3444                           
  3445                           ; BSR set to: 0
  3446  00297E  2F64               	decfsz	___awmod@counter& (0+255),f,b
  3447  002980  D7F1               	goto	u2300
  3448  002982                     l636:
  3449                           
  3450                           ; BSR set to: 0
  3451                           
  3452                           ; BSR set to: 0
  3453                           
  3454                           ; BSR set to: 0
  3455  002982  5165               	movf	___awmod@sign& (0+255),w,b
  3456  002984  B4D8               	btfsc	status,2,c
  3457  002986  D004               	goto	l637
  3458                           
  3459                           ; BSR set to: 0
  3460  002988  6D60               	negf	___awmod@dividend& (0+255),b
  3461  00298A  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  3462  00298C  B0D8               	btfsc	status,0,c
  3463  00298E  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  3464  002990                     l637:
  3465                           
  3466                           ; BSR set to: 0
  3467                           
  3468                           ; BSR set to: 0
  3469  002990  C060  F060         	movff	___awmod@dividend,?___awmod
  3470  002994  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  3471  002998  0012               	return	
  3472  00299A                     __end_of___awmod:
  3473                           	opt stack 0
  3474                           tblptru	equ	0xFF8
  3475                           tblptrh	equ	0xFF7
  3476                           tblptrl	equ	0xFF6
  3477                           tablat	equ	0xFF5
  3478                           prodh	equ	0xFF4
  3479                           prodl	equ	0xFF3
  3480                           intcon	equ	0xFF2
  3481                           postinc0	equ	0xFEE
  3482                           wreg	equ	0xFE8
  3483                           indf2	equ	0xFDF
  3484                           postinc2	equ	0xFDE
  3485                           postdec2	equ	0xFDD
  3486                           fsr2h	equ	0xFDA
  3487                           fsr2l	equ	0xFD9
  3488                           status	equ	0xFD8
  3489                           
  3490 ;; *************** function ___awdiv *****************
  3491 ;; Defined at:
  3492 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;  dividend        2    6[BANK0 ] int 
  3495 ;;  divisor         2    8[BANK0 ] int 
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;  quotient        2   12[BANK0 ] int 
  3498 ;;  sign            1   11[BANK0 ] unsigned char 
  3499 ;;  counter         1   10[BANK0 ] unsigned char 
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  2    6[BANK0 ] int 
  3502 ;; Registers used:
  3503 ;;		wreg, status,2, status,0
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3509 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3510 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3512 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3513 ;;Total ram usage:        8 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    6
  3516 ;; This function calls:
  3517 ;;		Nothing
  3518 ;; This function is called by:
  3519 ;;		_fround
  3520 ;;		_scale
  3521 ;;		_sprintf
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           	psect	text7
  3526  0026B8                     __ptext7:
  3527                           	opt stack 0
  3528  0026B8                     ___awdiv:
  3529                           	opt stack 22
  3530                           
  3531                           ; BSR set to: 0
  3532                           ;incstack = 0
  3533  0026B8  0E00               	movlw	0
  3534  0026BA  0100               	movlb	0	; () banked
  3535  0026BC  6F6B               	movwf	___awdiv@sign& (0+255),b
  3536                           
  3537                           ; BSR set to: 0
  3538  0026BE  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3539  0026C0  D006               	goto	l615
  3540                           
  3541                           ; BSR set to: 0
  3542  0026C2  6D68               	negf	___awdiv@divisor& (0+255),b
  3543  0026C4  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  3544  0026C6  B0D8               	btfsc	status,0,c
  3545  0026C8  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  3546                           
  3547                           ; BSR set to: 0
  3548  0026CA  0E01               	movlw	1
  3549  0026CC  6F6B               	movwf	___awdiv@sign& (0+255),b
  3550  0026CE                     l615:
  3551                           
  3552                           ; BSR set to: 0
  3553                           
  3554                           ; BSR set to: 0
  3555  0026CE  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  3556  0026D0  D006               	goto	l616
  3557                           
  3558                           ; BSR set to: 0
  3559  0026D2  6D66               	negf	___awdiv@dividend& (0+255),b
  3560  0026D4  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  3561  0026D6  B0D8               	btfsc	status,0,c
  3562  0026D8  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  3563                           
  3564                           ; BSR set to: 0
  3565  0026DA  0E01               	movlw	1
  3566  0026DC  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  3567  0026DE                     l616:
  3568                           
  3569                           ; BSR set to: 0
  3570                           
  3571                           ; BSR set to: 0
  3572  0026DE  0E00               	movlw	0
  3573  0026E0  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  3574  0026E2  0E00               	movlw	0
  3575  0026E4  6F6C               	movwf	___awdiv@quotient& (0+255),b
  3576                           
  3577                           ; BSR set to: 0
  3578  0026E6  5168               	movf	___awdiv@divisor& (0+255),w,b
  3579  0026E8  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  3580  0026EA  B4D8               	btfsc	status,2,c
  3581  0026EC  D01C               	goto	l623
  3582                           
  3583                           ; BSR set to: 0
  3584  0026EE  0E01               	movlw	1
  3585  0026F0  6F6A               	movwf	___awdiv@counter& (0+255),b
  3586  0026F2  D004               	goto	l618
  3587  0026F4                     
  3588                           ; BSR set to: 0
  3589                           
  3590                           ; BSR set to: 0
  3591  0026F4  90D8               	bcf	status,0,c
  3592  0026F6  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  3593  0026F8  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  3594  0026FA  2B6A               	incf	___awdiv@counter& (0+255),f,b
  3595  0026FC                     l618:
  3596                           
  3597                           ; BSR set to: 0
  3598                           
  3599                           ; BSR set to: 0
  3600  0026FC  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3601  0026FE  D7FA               	goto	l619
  3602  002700                     u2240:
  3603                           
  3604                           ; BSR set to: 0
  3605                           
  3606                           ; BSR set to: 0
  3607                           
  3608                           ; BSR set to: 0
  3609  002700  90D8               	bcf	status,0,c
  3610  002702  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  3611  002704  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  3612                           
  3613                           ; BSR set to: 0
  3614  002706  5168               	movf	___awdiv@divisor& (0+255),w,b
  3615  002708  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  3616  00270A  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3617  00270C  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  3618  00270E  A0D8               	btfss	status,0,c
  3619  002710  D005               	goto	l622
  3620                           
  3621                           ; BSR set to: 0
  3622  002712  5168               	movf	___awdiv@divisor& (0+255),w,b
  3623  002714  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  3624  002716  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3625  002718  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  3626                           
  3627                           ; BSR set to: 0
  3628  00271A  816C               	bsf	___awdiv@quotient& (0+255),0,b
  3629  00271C                     l622:
  3630                           
  3631                           ; BSR set to: 0
  3632                           
  3633                           ; BSR set to: 0
  3634  00271C  90D8               	bcf	status,0,c
  3635  00271E  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  3636  002720  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  3637                           
  3638                           ; BSR set to: 0
  3639  002722  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  3640  002724  D7ED               	goto	u2240
  3641  002726                     l623:
  3642                           
  3643                           ; BSR set to: 0
  3644                           
  3645                           ; BSR set to: 0
  3646                           
  3647                           ; BSR set to: 0
  3648  002726  516B               	movf	___awdiv@sign& (0+255),w,b
  3649  002728  B4D8               	btfsc	status,2,c
  3650  00272A  D004               	goto	l624
  3651                           
  3652                           ; BSR set to: 0
  3653  00272C  6D6C               	negf	___awdiv@quotient& (0+255),b
  3654  00272E  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  3655  002730  B0D8               	btfsc	status,0,c
  3656  002732  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  3657  002734                     l624:
  3658                           
  3659                           ; BSR set to: 0
  3660                           
  3661                           ; BSR set to: 0
  3662  002734  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  3663  002738  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  3664  00273C  0012               	return	
  3665  00273E                     __end_of___awdiv:
  3666                           	opt stack 0
  3667                           tblptru	equ	0xFF8
  3668                           tblptrh	equ	0xFF7
  3669                           tblptrl	equ	0xFF6
  3670                           tablat	equ	0xFF5
  3671                           prodh	equ	0xFF4
  3672                           prodl	equ	0xFF3
  3673                           intcon	equ	0xFF2
  3674                           postinc0	equ	0xFEE
  3675                           wreg	equ	0xFE8
  3676                           indf2	equ	0xFDF
  3677                           postinc2	equ	0xFDE
  3678                           postdec2	equ	0xFDD
  3679                           fsr2h	equ	0xFDA
  3680                           fsr2l	equ	0xFD9
  3681                           status	equ	0xFD8
  3682                           
  3683 ;; *************** function __tdiv_to_l_ *****************
  3684 ;; Defined at:
  3685 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdivl.c"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;  f1              3    0[BANK0 ] float 
  3688 ;;  f2              3    3[BANK0 ] float 
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;  quot            4    9[BANK0 ] unsigned long 
  3691 ;;  exp1            1   14[BANK0 ] unsigned char 
  3692 ;;  cntr            1   13[BANK0 ] unsigned char 
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  4    0[BANK0 ] unsigned long 
  3695 ;; Registers used:
  3696 ;;		wreg, status,2, status,0
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3702 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3703 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3704 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3705 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3706 ;;Total ram usage:       15 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:    6
  3709 ;; This function calls:
  3710 ;;		Nothing
  3711 ;; This function is called by:
  3712 ;;		_sprintf
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           	psect	text8
  3717  001E94                     __ptext8:
  3718                           	opt stack 0
  3719  001E94                     __tdiv_to_l_:
  3720                           	opt stack 23
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;incstack = 0
  3724  001E94  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3725  001E98  0100               	movlb	0	; () banked
  3726  001E9A  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  3727  001E9C  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  3728  001E9E  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  3729  001EA0  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  3730  001EA2  E301               	bnc	u2451
  3731  001EA4  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  3732  001EA6                     u2451:
  3733  001EA6  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  3734  001EA8  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  3735  001EAA  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  3736  001EAC  A4D8               	btfss	status,2,c
  3737  001EAE  D009               	goto	l751
  3738                           
  3739                           ; BSR set to: 0
  3740  001EB0  0E00               	movlw	0
  3741  001EB2  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  3742  001EB4  0E00               	movlw	0
  3743  001EB6  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  3744  001EB8  0E00               	movlw	0
  3745  001EBA  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  3746  001EBC  0E00               	movlw	0
  3747  001EBE  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  3748                           
  3749                           ; BSR set to: 0
  3750  001EC0  0012               	return	
  3751  001EC2                     l751:
  3752                           
  3753                           ; BSR set to: 0
  3754                           
  3755                           ; BSR set to: 0
  3756  001EC2  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3757  001EC6  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  3758  001EC8  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  3759  001ECA  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  3760  001ECC  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  3761  001ECE  E301               	bnc	u2471
  3762  001ED0  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  3763  001ED2                     u2471:
  3764  001ED2  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  3765  001ED4  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  3766  001ED6  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  3767  001ED8  A4D8               	btfss	status,2,c
  3768  001EDA  D009               	goto	l753
  3769                           
  3770                           ; BSR set to: 0
  3771  001EDC  0E00               	movlw	0
  3772  001EDE  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  3773  001EE0  0E00               	movlw	0
  3774  001EE2  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  3775  001EE4  0E00               	movlw	0
  3776  001EE6  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  3777  001EE8  0E00               	movlw	0
  3778  001EEA  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  3779                           
  3780                           ; BSR set to: 0
  3781  001EEC  0012               	return	
  3782  001EEE                     l753:
  3783                           
  3784                           ; BSR set to: 0
  3785                           
  3786                           ; BSR set to: 0
  3787  001EEE  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  3788                           
  3789                           ; BSR set to: 0
  3790  001EF0  0EFF               	movlw	255
  3791  001EF2  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  3792  001EF4  0EFF               	movlw	255
  3793  001EF6  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  3794  001EF8  0E00               	movlw	0
  3795  001EFA  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  3796  001EFC  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  3797                           
  3798                           ; BSR set to: 0
  3799  001EFE  0EFF               	movlw	255
  3800  001F00  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  3801  001F02  0EFF               	movlw	255
  3802  001F04  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  3803  001F06  0E00               	movlw	0
  3804  001F08  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  3805                           
  3806                           ; BSR set to: 0
  3807  001F0A  0E00               	movlw	0
  3808  001F0C  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
  3809  001F0E  0E00               	movlw	0
  3810  001F10  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  3811  001F12  0E00               	movlw	0
  3812  001F14  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  3813  001F16  0E00               	movlw	0
  3814  001F18  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  3815                           
  3816                           ; BSR set to: 0
  3817  001F1A  0E7F               	movlw	127
  3818  001F1C  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  3819                           
  3820                           ; BSR set to: 0
  3821  001F1E  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  3822  001F20  0F98               	addlw	152
  3823  001F22  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  3824                           
  3825                           ; BSR set to: 0
  3826  001F24  0E18               	movlw	24
  3827  001F26  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  3828  001F28                     l754:
  3829                           
  3830                           ; BSR set to: 0
  3831  001F28  90D8               	bcf	status,0,c
  3832  001F2A  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  3833  001F2C  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  3834  001F2E  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  3835  001F30  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  3836                           
  3837                           ; BSR set to: 0
  3838  001F32  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  3839  001F34  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  3840  001F36  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  3841  001F38  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  3842  001F3A  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  3843  001F3C  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  3844  001F3E  A0D8               	btfss	status,0,c
  3845  001F40  D007               	goto	l755
  3846                           
  3847                           ; BSR set to: 0
  3848  001F42  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  3849  001F44  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  3850  001F46  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  3851  001F48  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  3852  001F4A  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  3853  001F4C  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  3854                           
  3855                           ; BSR set to: 0
  3856  001F4E  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  3857  001F50                     l755:
  3858                           
  3859                           ; BSR set to: 0
  3860  001F50  90D8               	bcf	status,0,c
  3861  001F52  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  3862  001F54  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  3863  001F56  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  3864                           
  3865                           ; BSR set to: 0
  3866  001F58  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  3867  001F5A  D7E6               	goto	l754
  3868                           
  3869                           ; BSR set to: 0
  3870                           
  3871                           ; BSR set to: 0
  3872  001F5C  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  3873  001F5E  D016               	goto	l757
  3874                           
  3875                           ; BSR set to: 0
  3876  001F60  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  3877  001F62  0A80               	xorlw	128
  3878  001F64  0F97               	addlw	151
  3879  001F66  B0D8               	btfsc	status,0,c
  3880  001F68  D009               	goto	l758
  3881                           
  3882                           ; BSR set to: 0
  3883  001F6A  0E00               	movlw	0
  3884  001F6C  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  3885  001F6E  0E00               	movlw	0
  3886  001F70  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  3887  001F72  0E00               	movlw	0
  3888  001F74  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  3889  001F76  0E00               	movlw	0
  3890  001F78  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  3891                           
  3892                           ; BSR set to: 0
  3893  001F7A  0012               	return	
  3894  001F7C                     l758:
  3895                           
  3896                           ; BSR set to: 0
  3897                           
  3898                           ; BSR set to: 0
  3899                           
  3900                           ; BSR set to: 0
  3901  001F7C  90D8               	bcf	status,0,c
  3902  001F7E  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  3903  001F80  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  3904  001F82  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  3905  001F84  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  3906                           
  3907                           ; BSR set to: 0
  3908  001F86  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  3909  001F88  D7F9               	goto	l758
  3910                           
  3911                           ; BSR set to: 0
  3912  001F8A  D015               	goto	u2530
  3913  001F8C                     l757:
  3914                           
  3915                           ; BSR set to: 0
  3916                           
  3917                           ; BSR set to: 0
  3918  001F8C  0E17               	movlw	23
  3919  001F8E  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  3920  001F90  D00F               	goto	l763
  3921                           
  3922                           ; BSR set to: 0
  3923  001F92  0E00               	movlw	0
  3924  001F94  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  3925  001F96  0E00               	movlw	0
  3926  001F98  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  3927  001F9A  0E00               	movlw	0
  3928  001F9C  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  3929  001F9E  0E00               	movlw	0
  3930  001FA0  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  3931                           
  3932                           ; BSR set to: 0
  3933  001FA2  0012               	return	
  3934  001FA4                     
  3935                           ; BSR set to: 0
  3936                           
  3937                           ; BSR set to: 0
  3938  001FA4  90D8               	bcf	status,0,c
  3939  001FA6  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  3940  001FA8  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  3941  001FAA  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  3942  001FAC  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  3943  001FAE  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  3944  001FB0                     l763:
  3945                           
  3946                           ; BSR set to: 0
  3947                           
  3948                           ; BSR set to: 0
  3949  001FB0  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  3950  001FB2  A4D8               	btfss	status,2,c
  3951  001FB4  D7F7               	goto	l764
  3952  001FB6                     u2530:
  3953                           
  3954                           ; BSR set to: 0
  3955                           
  3956                           ; BSR set to: 0
  3957  001FB6  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3958  001FBA  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3959  001FBE  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3960  001FC2  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3961                           
  3962                           ; BSR set to: 0
  3963  001FC6  0012               	return		;funcret
  3964  001FC8                     __end_of__tdiv_to_l_:
  3965                           	opt stack 0
  3966                           tblptru	equ	0xFF8
  3967                           tblptrh	equ	0xFF7
  3968                           tblptrl	equ	0xFF6
  3969                           tablat	equ	0xFF5
  3970                           prodh	equ	0xFF4
  3971                           prodl	equ	0xFF3
  3972                           intcon	equ	0xFF2
  3973                           postinc0	equ	0xFEE
  3974                           wreg	equ	0xFE8
  3975                           indf2	equ	0xFDF
  3976                           postinc2	equ	0xFDE
  3977                           postdec2	equ	0xFDD
  3978                           fsr2h	equ	0xFDA
  3979                           fsr2l	equ	0xFD9
  3980                           status	equ	0xFD8
  3981                           
  3982 ;; *************** function __div_to_l_ *****************
  3983 ;; Defined at:
  3984 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fldivl.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;  f1              3    0[BANK0 ] unsigned long 
  3987 ;;  f2              3    3[BANK0 ] unsigned long 
  3988 ;; Auto vars:     Size  Location     Type
  3989 ;;  quot            4    6[BANK0 ] unsigned long 
  3990 ;;  exp1            1   11[BANK0 ] unsigned char 
  3991 ;;  cntr            1   10[BANK0 ] unsigned char 
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  4    0[BANK0 ] unsigned long 
  3994 ;; Registers used:
  3995 ;;		wreg, status,2, status,0
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4001 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4002 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4004 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4005 ;;Total ram usage:       12 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; Hardware stack levels required when called:    6
  4008 ;; This function calls:
  4009 ;;		Nothing
  4010 ;; This function is called by:
  4011 ;;		_sprintf
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           	psect	text9
  4016  001FC8                     __ptext9:
  4017                           	opt stack 0
  4018  001FC8                     __div_to_l_:
  4019                           	opt stack 23
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;incstack = 0
  4023  001FC8  0100               	movlb	0	; () banked
  4024  001FCA  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  4025  001FCC  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  4026  001FCE  6F6B               	movwf	__div_to_l_@exp1& (0+255),b
  4027  001FD0  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  4028  001FD2  A4D8               	btfss	status,2,c
  4029  001FD4  D009               	goto	l647
  4030                           
  4031                           ; BSR set to: 0
  4032  001FD6  0E00               	movlw	0
  4033  001FD8  6F60               	movwf	?__div_to_l_& (0+255),b
  4034  001FDA  0E00               	movlw	0
  4035  001FDC  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  4036  001FDE  0E00               	movlw	0
  4037  001FE0  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  4038  001FE2  0E00               	movlw	0
  4039  001FE4  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  4040                           
  4041                           ; BSR set to: 0
  4042  001FE6  0012               	return	
  4043  001FE8                     l647:
  4044                           
  4045                           ; BSR set to: 0
  4046                           
  4047                           ; BSR set to: 0
  4048  001FE8  3565               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  4049  001FEA  3566               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  4050  001FEC  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  4051  001FEE  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  4052  001FF0  A4D8               	btfss	status,2,c
  4053  001FF2  D009               	goto	l649
  4054                           
  4055                           ; BSR set to: 0
  4056  001FF4  0E00               	movlw	0
  4057  001FF6  6F60               	movwf	?__div_to_l_& (0+255),b
  4058  001FF8  0E00               	movlw	0
  4059  001FFA  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  4060  001FFC  0E00               	movlw	0
  4061  001FFE  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  4062  002000  0E00               	movlw	0
  4063  002002  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  4064                           
  4065                           ; BSR set to: 0
  4066  002004  0012               	return	
  4067  002006                     l649:
  4068                           
  4069                           ; BSR set to: 0
  4070                           
  4071                           ; BSR set to: 0
  4072  002006  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  4073                           
  4074                           ; BSR set to: 0
  4075  002008  0EFF               	movlw	255
  4076  00200A  1760               	andwf	__div_to_l_@f1& (0+255),f,b
  4077  00200C  0EFF               	movlw	255
  4078  00200E  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  4079  002010  0EFF               	movlw	255
  4080  002012  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  4081  002014  0E00               	movlw	0
  4082  002016  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  4083                           
  4084                           ; BSR set to: 0
  4085  002018  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  4086  00201A  0EFF               	movlw	255
  4087  00201C  1763               	andwf	__div_to_l_@f2& (0+255),f,b
  4088  00201E  0EFF               	movlw	255
  4089  002020  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  4090  002022  0EFF               	movlw	255
  4091  002024  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  4092  002026  0E00               	movlw	0
  4093  002028  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  4094                           
  4095                           ; BSR set to: 0
  4096  00202A  0E00               	movlw	0
  4097  00202C  6F66               	movwf	__div_to_l_@quot& (0+255),b
  4098  00202E  0E00               	movlw	0
  4099  002030  6F67               	movwf	(__div_to_l_@quot+1)& (0+255),b
  4100  002032  0E00               	movlw	0
  4101  002034  6F68               	movwf	(__div_to_l_@quot+2)& (0+255),b
  4102  002036  0E00               	movlw	0
  4103  002038  6F69               	movwf	(__div_to_l_@quot+3)& (0+255),b
  4104                           
  4105                           ; BSR set to: 0
  4106  00203A  0E7F               	movlw	127
  4107  00203C  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  4108                           
  4109                           ; BSR set to: 0
  4110  00203E  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  4111  002040  0FA0               	addlw	160
  4112  002042  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  4113                           
  4114                           ; BSR set to: 0
  4115  002044  0E20               	movlw	32
  4116  002046  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  4117  002048                     
  4118                           ; BSR set to: 0
  4119                           
  4120                           ; BSR set to: 0
  4121  002048  90D8               	bcf	status,0,c
  4122  00204A  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  4123  00204C  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  4124  00204E  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  4125  002050  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  4126                           
  4127                           ; BSR set to: 0
  4128  002052  5163               	movf	__div_to_l_@f2& (0+255),w,b
  4129  002054  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
  4130  002056  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  4131  002058  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  4132  00205A  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  4133  00205C  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  4134  00205E  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  4135  002060  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  4136  002062  A0D8               	btfss	status,0,c
  4137  002064  D009               	goto	l651
  4138                           
  4139                           ; BSR set to: 0
  4140  002066  5163               	movf	__div_to_l_@f2& (0+255),w,b
  4141  002068  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
  4142  00206A  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  4143  00206C  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  4144  00206E  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  4145  002070  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  4146  002072  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  4147  002074  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  4148                           
  4149                           ; BSR set to: 0
  4150  002076  8166               	bsf	__div_to_l_@quot& (0+255),0,b
  4151  002078                     l651:
  4152                           
  4153                           ; BSR set to: 0
  4154                           
  4155                           ; BSR set to: 0
  4156  002078  90D8               	bcf	status,0,c
  4157  00207A  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
  4158  00207C  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  4159  00207E  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  4160  002080  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  4161                           
  4162                           ; BSR set to: 0
  4163  002082  2F6A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  4164  002084  D7E1               	goto	l650
  4165                           
  4166                           ; BSR set to: 0
  4167                           
  4168                           ; BSR set to: 0
  4169  002086  AF6B               	btfss	__div_to_l_@exp1& (0+255),7,b
  4170  002088  D016               	goto	l653
  4171                           
  4172                           ; BSR set to: 0
  4173  00208A  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  4174  00208C  0A80               	xorlw	128
  4175  00208E  0F9F               	addlw	159
  4176  002090  B0D8               	btfsc	status,0,c
  4177  002092  D009               	goto	l654
  4178                           
  4179                           ; BSR set to: 0
  4180  002094  0E00               	movlw	0
  4181  002096  6F60               	movwf	?__div_to_l_& (0+255),b
  4182  002098  0E00               	movlw	0
  4183  00209A  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  4184  00209C  0E00               	movlw	0
  4185  00209E  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  4186  0020A0  0E00               	movlw	0
  4187  0020A2  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  4188                           
  4189                           ; BSR set to: 0
  4190  0020A4  0012               	return	
  4191  0020A6                     l654:
  4192                           
  4193                           ; BSR set to: 0
  4194                           
  4195                           ; BSR set to: 0
  4196                           
  4197                           ; BSR set to: 0
  4198  0020A6  90D8               	bcf	status,0,c
  4199  0020A8  3369               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  4200  0020AA  3368               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  4201  0020AC  3367               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  4202  0020AE  3366               	rrcf	__div_to_l_@quot& (0+255),f,b
  4203                           
  4204                           ; BSR set to: 0
  4205  0020B0  3F6B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  4206  0020B2  D7F9               	goto	l654
  4207                           
  4208                           ; BSR set to: 0
  4209  0020B4  D015               	goto	u2600
  4210  0020B6                     l653:
  4211                           
  4212                           ; BSR set to: 0
  4213                           
  4214                           ; BSR set to: 0
  4215  0020B6  0E1F               	movlw	31
  4216  0020B8  656B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  4217  0020BA  D00F               	goto	l659
  4218                           
  4219                           ; BSR set to: 0
  4220  0020BC  0E00               	movlw	0
  4221  0020BE  6F60               	movwf	?__div_to_l_& (0+255),b
  4222  0020C0  0E00               	movlw	0
  4223  0020C2  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  4224  0020C4  0E00               	movlw	0
  4225  0020C6  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  4226  0020C8  0E00               	movlw	0
  4227  0020CA  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  4228                           
  4229                           ; BSR set to: 0
  4230  0020CC  0012               	return	
  4231  0020CE                     
  4232                           ; BSR set to: 0
  4233                           
  4234                           ; BSR set to: 0
  4235  0020CE  90D8               	bcf	status,0,c
  4236  0020D0  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  4237  0020D2  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  4238  0020D4  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  4239  0020D6  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  4240  0020D8  076B               	decf	__div_to_l_@exp1& (0+255),f,b
  4241  0020DA                     l659:
  4242                           
  4243                           ; BSR set to: 0
  4244                           
  4245                           ; BSR set to: 0
  4246  0020DA  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  4247  0020DC  A4D8               	btfss	status,2,c
  4248  0020DE  D7F7               	goto	l660
  4249  0020E0                     u2600:
  4250                           
  4251                           ; BSR set to: 0
  4252                           
  4253                           ; BSR set to: 0
  4254  0020E0  C066  F060         	movff	__div_to_l_@quot,?__div_to_l_
  4255  0020E4  C067  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4256  0020E8  C068  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4257  0020EC  C069  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4258                           
  4259                           ; BSR set to: 0
  4260  0020F0  0012               	return		;funcret
  4261  0020F2                     __end_of__div_to_l_:
  4262                           	opt stack 0
  4263                           tblptru	equ	0xFF8
  4264                           tblptrh	equ	0xFF7
  4265                           tblptrl	equ	0xFF6
  4266                           tablat	equ	0xFF5
  4267                           prodh	equ	0xFF4
  4268                           prodl	equ	0xFF3
  4269                           intcon	equ	0xFF2
  4270                           postinc0	equ	0xFEE
  4271                           wreg	equ	0xFE8
  4272                           indf2	equ	0xFDF
  4273                           postinc2	equ	0xFDE
  4274                           postdec2	equ	0xFDD
  4275                           fsr2h	equ	0xFDA
  4276                           fsr2l	equ	0xFD9
  4277                           status	equ	0xFD8
  4278                           
  4279 ;; *************** function ___lltoft *****************
  4280 ;; Defined at:
  4281 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lltoft.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;  c               4    8[BANK0 ] unsigned long 
  4284 ;; Auto vars:     Size  Location     Type
  4285 ;;  exp             1   16[BANK0 ] unsigned char 
  4286 ;; Return value:  Size  Location     Type
  4287 ;;                  3    8[BANK0 ] float 
  4288 ;; Registers used:
  4289 ;;		wreg, status,2, status,0, cstack
  4290 ;; Tracked objects:
  4291 ;;		On entry : 0/0
  4292 ;;		On exit  : 0/0
  4293 ;;		Unchanged: 0/0
  4294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4295 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4296 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4297 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4298 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4299 ;;Total ram usage:        9 bytes
  4300 ;; Hardware stack levels used:    1
  4301 ;; Hardware stack levels required when called:    7
  4302 ;; This function calls:
  4303 ;;		___ftpack
  4304 ;; This function is called by:
  4305 ;;		_sprintf
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           	psect	text10
  4310  002A62                     __ptext10:
  4311                           	opt stack 0
  4312  002A62                     ___lltoft:
  4313                           	opt stack 22
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;incstack = 0
  4317  002A62  0E8E               	movlw	142
  4318  002A64  0100               	movlb	0	; () banked
  4319  002A66  6F70               	movwf	___lltoft@exp& (0+255),b
  4320  002A68  D006               	goto	l853
  4321  002A6A                     
  4322                           ; BSR set to: 0
  4323                           
  4324                           ; BSR set to: 0
  4325  002A6A  90D8               	bcf	status,0,c
  4326  002A6C  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  4327  002A6E  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  4328  002A70  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
  4329  002A72  3368               	rrcf	___lltoft@c& (0+255),f,b
  4330  002A74  2B70               	incf	___lltoft@exp& (0+255),f,b
  4331  002A76                     l853:
  4332                           
  4333                           ; BSR set to: 0
  4334                           
  4335                           ; BSR set to: 0
  4336  002A76  0E00               	movlw	0
  4337  002A78  1568               	andwf	___lltoft@c& (0+255),w,b
  4338  002A7A  6F6C               	movwf	??___lltoft& (0+255),b
  4339  002A7C  0E00               	movlw	0
  4340  002A7E  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
  4341  002A80  6F6D               	movwf	(??___lltoft+1)& (0+255),b
  4342  002A82  0E00               	movlw	0
  4343  002A84  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
  4344  002A86  6F6E               	movwf	(??___lltoft+2)& (0+255),b
  4345  002A88  0EFF               	movlw	255
  4346  002A8A  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
  4347  002A8C  6F6F               	movwf	(??___lltoft+3)& (0+255),b
  4348  002A8E  516C               	movf	??___lltoft& (0+255),w,b
  4349  002A90  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
  4350  002A92  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
  4351  002A94  116F               	iorwf	(??___lltoft+3)& (0+255),w,b
  4352  002A96  A4D8               	btfss	status,2,c
  4353  002A98  D7E8               	goto	l854
  4354                           
  4355                           ; BSR set to: 0
  4356                           
  4357                           ; BSR set to: 0
  4358  002A9A  C068  F060         	movff	___lltoft@c,___ftpack@arg
  4359  002A9E  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
  4360  002AA2  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
  4361  002AA6  C070  F063         	movff	___lltoft@exp,___ftpack@exp
  4362  002AAA  0E00               	movlw	0
  4363  002AAC  6F64               	movwf	___ftpack@sign& (0+255),b
  4364  002AAE  EC64  F012         	call	___ftpack	;wreg free
  4365  002AB2  C060  F068         	movff	?___ftpack,?___lltoft
  4366  002AB6  C061  F069         	movff	?___ftpack+1,?___lltoft+1
  4367  002ABA  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
  4368  002ABE  0012               	return	
  4369  002AC0                     __end_of___lltoft:
  4370                           	opt stack 0
  4371                           tblptru	equ	0xFF8
  4372                           tblptrh	equ	0xFF7
  4373                           tblptrl	equ	0xFF6
  4374                           tablat	equ	0xFF5
  4375                           prodh	equ	0xFF4
  4376                           prodl	equ	0xFF3
  4377                           intcon	equ	0xFF2
  4378                           postinc0	equ	0xFEE
  4379                           wreg	equ	0xFE8
  4380                           indf2	equ	0xFDF
  4381                           postinc2	equ	0xFDE
  4382                           postdec2	equ	0xFDD
  4383                           fsr2h	equ	0xFDA
  4384                           fsr2l	equ	0xFD9
  4385                           status	equ	0xFD8
  4386                           
  4387 ;; *************** function ___llmod *****************
  4388 ;; Defined at:
  4389 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\llmod.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;  dividend        4    0[BANK0 ] unsigned long 
  4392 ;;  divisor         4    4[BANK0 ] unsigned long 
  4393 ;; Auto vars:     Size  Location     Type
  4394 ;;  counter         1    8[BANK0 ] unsigned char 
  4395 ;; Return value:  Size  Location     Type
  4396 ;;                  4    0[BANK0 ] unsigned long 
  4397 ;; Registers used:
  4398 ;;		wreg, status,2, status,0
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4404 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4407 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4408 ;;Total ram usage:        9 bytes
  4409 ;; Hardware stack levels used:    1
  4410 ;; Hardware stack levels required when called:    6
  4411 ;; This function calls:
  4412 ;;		Nothing
  4413 ;; This function is called by:
  4414 ;;		_sprintf
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           	psect	text11
  4419  00299A                     __ptext11:
  4420                           	opt stack 0
  4421  00299A                     ___llmod:
  4422                           	opt stack 23
  4423                           
  4424                           ;incstack = 0
  4425  00299A  0100               	movlb	0	; () banked
  4426  00299C  5164               	movf	___llmod@divisor& (0+255),w,b
  4427  00299E  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  4428  0029A0  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  4429  0029A2  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  4430  0029A4  B4D8               	btfsc	status,2,c
  4431  0029A6  D024               	goto	l847
  4432                           
  4433                           ; BSR set to: 0
  4434  0029A8  0E01               	movlw	1
  4435  0029AA  6F68               	movwf	___llmod@counter& (0+255),b
  4436  0029AC  D006               	goto	l842
  4437  0029AE                     
  4438                           ; BSR set to: 0
  4439                           
  4440                           ; BSR set to: 0
  4441  0029AE  90D8               	bcf	status,0,c
  4442  0029B0  3764               	rlcf	___llmod@divisor& (0+255),f,b
  4443  0029B2  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  4444  0029B4  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  4445  0029B6  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  4446  0029B8  2B68               	incf	___llmod@counter& (0+255),f,b
  4447  0029BA                     l842:
  4448                           
  4449                           ; BSR set to: 0
  4450                           
  4451                           ; BSR set to: 0
  4452  0029BA  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  4453  0029BC  D7F8               	goto	l843
  4454  0029BE                     u2780:
  4455                           
  4456                           ; BSR set to: 0
  4457                           
  4458                           ; BSR set to: 0
  4459                           
  4460                           ; BSR set to: 0
  4461  0029BE  5164               	movf	___llmod@divisor& (0+255),w,b
  4462  0029C0  5D60               	subwf	___llmod@dividend& (0+255),w,b
  4463  0029C2  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  4464  0029C4  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  4465  0029C6  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  4466  0029C8  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  4467  0029CA  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  4468  0029CC  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  4469  0029CE  A0D8               	btfss	status,0,c
  4470  0029D0  D008               	goto	l846
  4471                           
  4472                           ; BSR set to: 0
  4473  0029D2  5164               	movf	___llmod@divisor& (0+255),w,b
  4474  0029D4  5F60               	subwf	___llmod@dividend& (0+255),f,b
  4475  0029D6  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  4476  0029D8  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  4477  0029DA  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  4478  0029DC  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  4479  0029DE  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  4480  0029E0  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  4481  0029E2                     l846:
  4482                           
  4483                           ; BSR set to: 0
  4484                           
  4485                           ; BSR set to: 0
  4486  0029E2  90D8               	bcf	status,0,c
  4487  0029E4  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  4488  0029E6  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  4489  0029E8  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  4490  0029EA  3364               	rrcf	___llmod@divisor& (0+255),f,b
  4491                           
  4492                           ; BSR set to: 0
  4493  0029EC  2F68               	decfsz	___llmod@counter& (0+255),f,b
  4494  0029EE  D7E7               	goto	u2780
  4495  0029F0                     l847:
  4496                           
  4497                           ; BSR set to: 0
  4498                           
  4499                           ; BSR set to: 0
  4500  0029F0  C060  F060         	movff	___llmod@dividend,?___llmod
  4501  0029F4  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  4502  0029F8  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  4503  0029FC  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  4504                           
  4505                           ; BSR set to: 0
  4506  002A00  0012               	return		;funcret
  4507  002A02                     __end_of___llmod:
  4508                           	opt stack 0
  4509                           tblptru	equ	0xFF8
  4510                           tblptrh	equ	0xFF7
  4511                           tblptrl	equ	0xFF6
  4512                           tablat	equ	0xFF5
  4513                           prodh	equ	0xFF4
  4514                           prodl	equ	0xFF3
  4515                           intcon	equ	0xFF2
  4516                           postinc0	equ	0xFEE
  4517                           wreg	equ	0xFE8
  4518                           indf2	equ	0xFDF
  4519                           postinc2	equ	0xFDE
  4520                           postdec2	equ	0xFDD
  4521                           fsr2h	equ	0xFDA
  4522                           fsr2l	equ	0xFD9
  4523                           status	equ	0xFD8
  4524                           
  4525 ;; *************** function ___lldiv *****************
  4526 ;; Defined at:
  4527 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;  dividend        4    0[BANK0 ] unsigned long 
  4530 ;;  divisor         4    4[BANK0 ] unsigned long 
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;  quotient        4    8[BANK0 ] unsigned long 
  4533 ;;  counter         1   12[BANK0 ] unsigned char 
  4534 ;; Return value:  Size  Location     Type
  4535 ;;                  4    0[BANK0 ] unsigned long 
  4536 ;; Registers used:
  4537 ;;		wreg, status,2, status,0
  4538 ;; Tracked objects:
  4539 ;;		On entry : 0/0
  4540 ;;		On exit  : 0/0
  4541 ;;		Unchanged: 0/0
  4542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4543 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4544 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4546 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4547 ;;Total ram usage:       13 bytes
  4548 ;; Hardware stack levels used:    1
  4549 ;; Hardware stack levels required when called:    6
  4550 ;; This function calls:
  4551 ;;		Nothing
  4552 ;; This function is called by:
  4553 ;;		_sprintf
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           	psect	text12
  4558  00273E                     __ptext12:
  4559                           	opt stack 0
  4560  00273E                     ___lldiv:
  4561                           	opt stack 23
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;incstack = 0
  4565  00273E  0E00               	movlw	0
  4566  002740  0100               	movlb	0	; () banked
  4567  002742  6F68               	movwf	___lldiv@quotient& (0+255),b
  4568  002744  0E00               	movlw	0
  4569  002746  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  4570  002748  0E00               	movlw	0
  4571  00274A  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4572  00274C  0E00               	movlw	0
  4573  00274E  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4574                           
  4575                           ; BSR set to: 0
  4576  002750  5164               	movf	___lldiv@divisor& (0+255),w,b
  4577  002752  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4578  002754  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4579  002756  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4580  002758  B4D8               	btfsc	status,2,c
  4581  00275A  D02A               	goto	l837
  4582                           
  4583                           ; BSR set to: 0
  4584  00275C  0E01               	movlw	1
  4585  00275E  6F6C               	movwf	___lldiv@counter& (0+255),b
  4586  002760  D006               	goto	l832
  4587  002762                     
  4588                           ; BSR set to: 0
  4589                           
  4590                           ; BSR set to: 0
  4591  002762  90D8               	bcf	status,0,c
  4592  002764  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  4593  002766  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4594  002768  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4595  00276A  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4596  00276C  2B6C               	incf	___lldiv@counter& (0+255),f,b
  4597  00276E                     l832:
  4598                           
  4599                           ; BSR set to: 0
  4600                           
  4601                           ; BSR set to: 0
  4602  00276E  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4603  002770  D7F8               	goto	l833
  4604  002772                     u2750:
  4605                           
  4606                           ; BSR set to: 0
  4607                           
  4608                           ; BSR set to: 0
  4609                           
  4610                           ; BSR set to: 0
  4611  002772  90D8               	bcf	status,0,c
  4612  002774  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  4613  002776  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4614  002778  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4615  00277A  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4616                           
  4617                           ; BSR set to: 0
  4618  00277C  5164               	movf	___lldiv@divisor& (0+255),w,b
  4619  00277E  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  4620  002780  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4621  002782  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4622  002784  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4623  002786  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4624  002788  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4625  00278A  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4626  00278C  A0D8               	btfss	status,0,c
  4627  00278E  D009               	goto	l836
  4628                           
  4629                           ; BSR set to: 0
  4630  002790  5164               	movf	___lldiv@divisor& (0+255),w,b
  4631  002792  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  4632  002794  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4633  002796  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4634  002798  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4635  00279A  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4636  00279C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4637  00279E  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4638                           
  4639                           ; BSR set to: 0
  4640  0027A0  8168               	bsf	___lldiv@quotient& (0+255),0,b
  4641  0027A2                     l836:
  4642                           
  4643                           ; BSR set to: 0
  4644                           
  4645                           ; BSR set to: 0
  4646  0027A2  90D8               	bcf	status,0,c
  4647  0027A4  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4648  0027A6  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4649  0027A8  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4650  0027AA  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  4651                           
  4652                           ; BSR set to: 0
  4653  0027AC  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  4654  0027AE  D7E1               	goto	u2750
  4655  0027B0                     l837:
  4656                           
  4657                           ; BSR set to: 0
  4658                           
  4659                           ; BSR set to: 0
  4660  0027B0  C068  F060         	movff	___lldiv@quotient,?___lldiv
  4661  0027B4  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  4662  0027B8  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  4663  0027BC  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  4664                           
  4665                           ; BSR set to: 0
  4666  0027C0  0012               	return		;funcret
  4667  0027C2                     __end_of___lldiv:
  4668                           	opt stack 0
  4669                           tblptru	equ	0xFF8
  4670                           tblptrh	equ	0xFF7
  4671                           tblptrl	equ	0xFF6
  4672                           tablat	equ	0xFF5
  4673                           prodh	equ	0xFF4
  4674                           prodl	equ	0xFF3
  4675                           intcon	equ	0xFF2
  4676                           postinc0	equ	0xFEE
  4677                           wreg	equ	0xFE8
  4678                           indf2	equ	0xFDF
  4679                           postinc2	equ	0xFDE
  4680                           postdec2	equ	0xFDD
  4681                           fsr2h	equ	0xFDA
  4682                           fsr2l	equ	0xFD9
  4683                           status	equ	0xFD8
  4684                           
  4685 ;; *************** function ___fttol *****************
  4686 ;; Defined at:
  4687 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;  f1              3   42[BANK0 ] float 
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;  lval            4   52[BANK0 ] unsigned long 
  4692 ;;  exp1            1   56[BANK0 ] unsigned char 
  4693 ;;  sign1           1   51[BANK0 ] unsigned char 
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  4   42[BANK0 ] long 
  4696 ;; Registers used:
  4697 ;;		wreg, status,2, status,0
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4703 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4704 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4705 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4706 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4707 ;;Total ram usage:       15 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    6
  4710 ;; This function calls:
  4711 ;;		Nothing
  4712 ;; This function is called by:
  4713 ;;		_sprintf
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           	psect	text13
  4718  0020F2                     __ptext13:
  4719                           	opt stack 0
  4720  0020F2                     ___fttol:
  4721                           	opt stack 23
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;incstack = 0
  4725  0020F2  C08C  F08E         	movff	___fttol@f1+2,??___fttol
  4726  0020F6  0100               	movlb	0	; () banked
  4727  0020F8  6B8F               	clrf	(??___fttol+1)& (0+255),b
  4728  0020FA  6B90               	clrf	(??___fttol+2)& (0+255),b
  4729  0020FC  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  4730  0020FE  378E               	rlcf	??___fttol& (0+255),f,b
  4731  002100  E301               	bnc	u2661
  4732  002102  818F               	bsf	(??___fttol+1)& (0+255),0,b
  4733  002104                     u2661:
  4734  002104  518E               	movf	??___fttol& (0+255),w,b
  4735  002106  6F98               	movwf	___fttol@exp1& (0+255),b
  4736  002108  5198               	movf	___fttol@exp1& (0+255),w,b
  4737  00210A  A4D8               	btfss	status,2,c
  4738  00210C  D009               	goto	l796
  4739                           
  4740                           ; BSR set to: 0
  4741  00210E  0E00               	movlw	0
  4742  002110  6F8A               	movwf	?___fttol& (0+255),b
  4743  002112  0E00               	movlw	0
  4744  002114  6F8B               	movwf	(?___fttol+1)& (0+255),b
  4745  002116  0E00               	movlw	0
  4746  002118  6F8C               	movwf	(?___fttol+2)& (0+255),b
  4747  00211A  0E00               	movlw	0
  4748  00211C  6F8D               	movwf	(?___fttol+3)& (0+255),b
  4749                           
  4750                           ; BSR set to: 0
  4751  00211E  0012               	return	
  4752  002120                     l796:
  4753                           
  4754                           ; BSR set to: 0
  4755                           
  4756                           ; BSR set to: 0
  4757  002120  0E17               	movlw	23
  4758  002122  6F8E               	movwf	??___fttol& (0+255),b
  4759  002124  C08A  F08F         	movff	___fttol@f1,??___fttol+1
  4760  002128  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
  4761  00212C  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
  4762  002130  298E               	incf	??___fttol& (0+255),w,b
  4763  002132  6F92               	movwf	(??___fttol+4)& (0+255),b
  4764  002134  D004               	goto	u2680
  4765  002136                     u2685:
  4766  002136  90D8               	bcf	status,0,c
  4767  002138  3391               	rrcf	(??___fttol+3)& (0+255),f,b
  4768  00213A  3390               	rrcf	(??___fttol+2)& (0+255),f,b
  4769  00213C  338F               	rrcf	(??___fttol+1)& (0+255),f,b
  4770  00213E                     u2680:
  4771  00213E  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
  4772  002140  D7FA               	goto	u2685
  4773  002142  0100               	movlb	0	; () banked
  4774  002144  518F               	movf	(??___fttol+1)& (0+255),w,b
  4775  002146  6F93               	movwf	___fttol@sign1& (0+255),b
  4776                           
  4777                           ; BSR set to: 0
  4778  002148  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
  4779                           
  4780                           ; BSR set to: 0
  4781  00214A  0EFF               	movlw	255
  4782  00214C  178A               	andwf	___fttol@f1& (0+255),f,b
  4783  00214E  0EFF               	movlw	255
  4784  002150  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
  4785  002152  0E00               	movlw	0
  4786  002154  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
  4787                           
  4788                           ; BSR set to: 0
  4789  002156  518A               	movf	___fttol@f1& (0+255),w,b
  4790  002158  6F94               	movwf	___fttol@lval& (0+255),b
  4791  00215A  518B               	movf	(___fttol@f1+1)& (0+255),w,b
  4792  00215C  6F95               	movwf	(___fttol@lval+1)& (0+255),b
  4793  00215E  518C               	movf	(___fttol@f1+2)& (0+255),w,b
  4794  002160  6F96               	movwf	(___fttol@lval+2)& (0+255),b
  4795  002162  6B97               	clrf	(___fttol@lval+3)& (0+255),b
  4796                           
  4797                           ; BSR set to: 0
  4798  002164  0E8E               	movlw	142
  4799  002166  5F98               	subwf	___fttol@exp1& (0+255),f,b
  4800                           
  4801                           ; BSR set to: 0
  4802  002168  AF98               	btfss	___fttol@exp1& (0+255),7,b
  4803  00216A  D016               	goto	l798
  4804                           
  4805                           ; BSR set to: 0
  4806  00216C  5198               	movf	___fttol@exp1& (0+255),w,b
  4807  00216E  0A80               	xorlw	128
  4808  002170  0F8F               	addlw	143
  4809  002172  B0D8               	btfsc	status,0,c
  4810  002174  D009               	goto	l799
  4811                           
  4812                           ; BSR set to: 0
  4813  002176  0E00               	movlw	0
  4814  002178  6F8A               	movwf	?___fttol& (0+255),b
  4815  00217A  0E00               	movlw	0
  4816  00217C  6F8B               	movwf	(?___fttol+1)& (0+255),b
  4817  00217E  0E00               	movlw	0
  4818  002180  6F8C               	movwf	(?___fttol+2)& (0+255),b
  4819  002182  0E00               	movlw	0
  4820  002184  6F8D               	movwf	(?___fttol+3)& (0+255),b
  4821                           
  4822                           ; BSR set to: 0
  4823  002186  0012               	return	
  4824  002188                     l799:
  4825                           
  4826                           ; BSR set to: 0
  4827                           
  4828                           ; BSR set to: 0
  4829                           
  4830                           ; BSR set to: 0
  4831  002188  90D8               	bcf	status,0,c
  4832  00218A  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
  4833  00218C  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
  4834  00218E  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
  4835  002190  3394               	rrcf	___fttol@lval& (0+255),f,b
  4836                           
  4837                           ; BSR set to: 0
  4838  002192  3F98               	incfsz	___fttol@exp1& (0+255),f,b
  4839  002194  D7F9               	goto	l799
  4840                           
  4841                           ; BSR set to: 0
  4842  002196  D015               	goto	u2720
  4843  002198                     l798:
  4844                           
  4845                           ; BSR set to: 0
  4846                           
  4847                           ; BSR set to: 0
  4848  002198  0E17               	movlw	23
  4849  00219A  6598               	cpfsgt	___fttol@exp1& (0+255),b
  4850  00219C  D00F               	goto	l804
  4851                           
  4852                           ; BSR set to: 0
  4853  00219E  0E00               	movlw	0
  4854  0021A0  6F8A               	movwf	?___fttol& (0+255),b
  4855  0021A2  0E00               	movlw	0
  4856  0021A4  6F8B               	movwf	(?___fttol+1)& (0+255),b
  4857  0021A6  0E00               	movlw	0
  4858  0021A8  6F8C               	movwf	(?___fttol+2)& (0+255),b
  4859  0021AA  0E00               	movlw	0
  4860  0021AC  6F8D               	movwf	(?___fttol+3)& (0+255),b
  4861                           
  4862                           ; BSR set to: 0
  4863  0021AE  0012               	return	
  4864  0021B0                     
  4865                           ; BSR set to: 0
  4866                           
  4867                           ; BSR set to: 0
  4868  0021B0  90D8               	bcf	status,0,c
  4869  0021B2  3794               	rlcf	___fttol@lval& (0+255),f,b
  4870  0021B4  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
  4871  0021B6  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
  4872  0021B8  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
  4873  0021BA  0798               	decf	___fttol@exp1& (0+255),f,b
  4874  0021BC                     l804:
  4875                           
  4876                           ; BSR set to: 0
  4877                           
  4878                           ; BSR set to: 0
  4879  0021BC  5198               	movf	___fttol@exp1& (0+255),w,b
  4880  0021BE  A4D8               	btfss	status,2,c
  4881  0021C0  D7F7               	goto	l805
  4882  0021C2                     u2720:
  4883                           
  4884                           ; BSR set to: 0
  4885                           
  4886                           ; BSR set to: 0
  4887                           
  4888                           ; BSR set to: 0
  4889  0021C2  5193               	movf	___fttol@sign1& (0+255),w,b
  4890  0021C4  B4D8               	btfsc	status,2,c
  4891  0021C6  D008               	goto	l807
  4892                           
  4893                           ; BSR set to: 0
  4894  0021C8  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
  4895  0021CA  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
  4896  0021CC  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
  4897  0021CE  6D94               	negf	___fttol@lval& (0+255),b
  4898  0021D0  0E00               	movlw	0
  4899  0021D2  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
  4900  0021D4  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
  4901  0021D6  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
  4902  0021D8                     l807:
  4903                           
  4904                           ; BSR set to: 0
  4905                           
  4906                           ; BSR set to: 0
  4907  0021D8  C094  F08A         	movff	___fttol@lval,?___fttol
  4908  0021DC  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
  4909  0021E0  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
  4910  0021E4  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
  4911  0021E8  0012               	return	
  4912  0021EA                     __end_of___fttol:
  4913                           	opt stack 0
  4914                           tblptru	equ	0xFF8
  4915                           tblptrh	equ	0xFF7
  4916                           tblptrl	equ	0xFF6
  4917                           tablat	equ	0xFF5
  4918                           prodh	equ	0xFF4
  4919                           prodl	equ	0xFF3
  4920                           intcon	equ	0xFF2
  4921                           postinc0	equ	0xFEE
  4922                           wreg	equ	0xFE8
  4923                           indf2	equ	0xFDF
  4924                           postinc2	equ	0xFDE
  4925                           postdec2	equ	0xFDD
  4926                           fsr2h	equ	0xFDA
  4927                           fsr2l	equ	0xFD9
  4928                           status	equ	0xFD8
  4929                           
  4930 ;; *************** function ___ftsub *****************
  4931 ;; Defined at:
  4932 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  4933 ;; Parameters:    Size  Location     Type
  4934 ;;  f1              3   57[BANK0 ] float 
  4935 ;;  f2              3   60[BANK0 ] float 
  4936 ;; Auto vars:     Size  Location     Type
  4937 ;;		None
  4938 ;; Return value:  Size  Location     Type
  4939 ;;                  3   57[BANK0 ] float 
  4940 ;; Registers used:
  4941 ;;		wreg, status,2, status,0, cstack
  4942 ;; Tracked objects:
  4943 ;;		On entry : 0/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4947 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4950 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4951 ;;Total ram usage:        6 bytes
  4952 ;; Hardware stack levels used:    1
  4953 ;; Hardware stack levels required when called:    8
  4954 ;; This function calls:
  4955 ;;		___ftadd
  4956 ;; This function is called by:
  4957 ;;		_sprintf
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           	psect	text14
  4962  002B04                     __ptext14:
  4963                           	opt stack 0
  4964  002B04                     ___ftsub:
  4965                           	opt stack 21
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;incstack = 0
  4969  002B04  0100               	movlb	0	; () banked
  4970  002B06  519C               	movf	___ftsub@f2& (0+255),w,b
  4971  002B08  119D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  4972  002B0A  119E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  4973  002B0C  B4D8               	btfsc	status,2,c
  4974  002B0E  D006               	goto	l792
  4975                           
  4976                           ; BSR set to: 0
  4977  002B10  0E00               	movlw	0
  4978  002B12  1B9C               	xorwf	___ftsub@f2& (0+255),f,b
  4979  002B14  0E00               	movlw	0
  4980  002B16  1B9D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  4981  002B18  0E80               	movlw	128
  4982  002B1A  1B9E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  4983  002B1C                     l792:
  4984                           
  4985                           ; BSR set to: 0
  4986                           
  4987                           ; BSR set to: 0
  4988  002B1C  C099  F08D         	movff	___ftsub@f1,___ftadd@f1
  4989  002B20  C09A  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
  4990  002B24  C09B  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
  4991  002B28  C09C  F090         	movff	___ftsub@f2,___ftadd@f2
  4992  002B2C  C09D  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
  4993  002B30  C09E  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
  4994  002B34  EC73  F00E         	call	___ftadd	;wreg free
  4995  002B38  C08D  F099         	movff	?___ftadd,?___ftsub
  4996  002B3C  C08E  F09A         	movff	?___ftadd+1,?___ftsub+1
  4997  002B40  C08F  F09B         	movff	?___ftadd+2,?___ftsub+2
  4998  002B44  0012               	return	
  4999  002B46                     __end_of___ftsub:
  5000                           	opt stack 0
  5001                           tblptru	equ	0xFF8
  5002                           tblptrh	equ	0xFF7
  5003                           tblptrl	equ	0xFF6
  5004                           tablat	equ	0xFF5
  5005                           prodh	equ	0xFF4
  5006                           prodl	equ	0xFF3
  5007                           intcon	equ	0xFF2
  5008                           postinc0	equ	0xFEE
  5009                           wreg	equ	0xFE8
  5010                           indf2	equ	0xFDF
  5011                           postinc2	equ	0xFDE
  5012                           postdec2	equ	0xFDD
  5013                           fsr2h	equ	0xFDA
  5014                           fsr2l	equ	0xFD9
  5015                           status	equ	0xFD8
  5016                           
  5017 ;; *************** function ___ftadd *****************
  5018 ;; Defined at:
  5019 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;  f1              3   45[BANK0 ] float 
  5022 ;;  f2              3   48[BANK0 ] float 
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;  exp1            1   56[BANK0 ] unsigned char 
  5025 ;;  exp2            1   55[BANK0 ] unsigned char 
  5026 ;;  sign            1   54[BANK0 ] unsigned char 
  5027 ;; Return value:  Size  Location     Type
  5028 ;;                  3   45[BANK0 ] float 
  5029 ;; Registers used:
  5030 ;;		wreg, status,2, status,0, cstack
  5031 ;; Tracked objects:
  5032 ;;		On entry : 0/0
  5033 ;;		On exit  : 0/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5036 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5037 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5038 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5039 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5040 ;;Total ram usage:       12 bytes
  5041 ;; Hardware stack levels used:    1
  5042 ;; Hardware stack levels required when called:    7
  5043 ;; This function calls:
  5044 ;;		___ftpack
  5045 ;; This function is called by:
  5046 ;;		_sprintf
  5047 ;;		___ftsub
  5048 ;; This function uses a non-reentrant model
  5049 ;;
  5050                           
  5051                           	psect	text15
  5052  001CE6                     __ptext15:
  5053                           	opt stack 0
  5054  001CE6                     ___ftadd:
  5055                           	opt stack 21
  5056                           
  5057                           ;incstack = 0
  5058  001CE6  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
  5059  001CEA  0100               	movlb	0	; () banked
  5060  001CEC  6B94               	clrf	(??___ftadd+1)& (0+255),b
  5061  001CEE  6B95               	clrf	(??___ftadd+2)& (0+255),b
  5062  001CF0  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  5063  001CF2  3793               	rlcf	??___ftadd& (0+255),f,b
  5064  001CF4  E301               	bnc	u1941
  5065  001CF6  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  5066  001CF8                     u1941:
  5067  001CF8  5193               	movf	??___ftadd& (0+255),w,b
  5068  001CFA  6F98               	movwf	___ftadd@exp1& (0+255),b
  5069  001CFC  C092  F093         	movff	___ftadd@f2+2,??___ftadd
  5070  001D00  6B94               	clrf	(??___ftadd+1)& (0+255),b
  5071  001D02  6B95               	clrf	(??___ftadd+2)& (0+255),b
  5072  001D04  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  5073  001D06  3793               	rlcf	??___ftadd& (0+255),f,b
  5074  001D08  E301               	bnc	u1951
  5075  001D0A  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  5076  001D0C                     u1951:
  5077  001D0C  5193               	movf	??___ftadd& (0+255),w,b
  5078  001D0E  6F97               	movwf	___ftadd@exp2& (0+255),b
  5079                           
  5080                           ; BSR set to: 0
  5081  001D10  5198               	movf	___ftadd@exp1& (0+255),w,b
  5082  001D12  B4D8               	btfsc	status,2,c
  5083  001D14  D00B               	goto	u1980
  5084                           
  5085                           ; BSR set to: 0
  5086  001D16  5197               	movf	___ftadd@exp2& (0+255),w,b
  5087  001D18  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  5088  001D1A  B0D8               	btfsc	status,0,c
  5089  001D1C  D00E               	goto	l710
  5090                           
  5091                           ; BSR set to: 0
  5092  001D1E  5198               	movf	___ftadd@exp1& (0+255),w,b
  5093  001D20  0800               	sublw	0
  5094  001D22  2597               	addwf	___ftadd@exp2& (0+255),w,b
  5095  001D24  6F93               	movwf	??___ftadd& (0+255),b
  5096  001D26  0E18               	movlw	24
  5097  001D28  6593               	cpfsgt	??___ftadd& (0+255),b
  5098  001D2A  D007               	goto	l710
  5099  001D2C                     u1980:
  5100                           
  5101                           ; BSR set to: 0
  5102  001D2C  C090  F08D         	movff	___ftadd@f2,?___ftadd
  5103  001D30  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
  5104  001D34  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
  5105  001D38  0012               	return	
  5106  001D3A                     l710:
  5107                           
  5108                           ; BSR set to: 0
  5109                           
  5110                           ; BSR set to: 0
  5111  001D3A  5197               	movf	___ftadd@exp2& (0+255),w,b
  5112  001D3C  B4D8               	btfsc	status,2,c
  5113  001D3E  D00B               	goto	u2010
  5114                           
  5115                           ; BSR set to: 0
  5116  001D40  5198               	movf	___ftadd@exp1& (0+255),w,b
  5117  001D42  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  5118  001D44  B0D8               	btfsc	status,0,c
  5119  001D46  D00E               	goto	l714
  5120                           
  5121                           ; BSR set to: 0
  5122  001D48  5197               	movf	___ftadd@exp2& (0+255),w,b
  5123  001D4A  0800               	sublw	0
  5124  001D4C  2598               	addwf	___ftadd@exp1& (0+255),w,b
  5125  001D4E  6F93               	movwf	??___ftadd& (0+255),b
  5126  001D50  0E18               	movlw	24
  5127  001D52  6593               	cpfsgt	??___ftadd& (0+255),b
  5128  001D54  D007               	goto	l714
  5129  001D56                     u2010:
  5130                           
  5131                           ; BSR set to: 0
  5132  001D56  C08D  F08D         	movff	___ftadd@f1,?___ftadd
  5133  001D5A  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
  5134  001D5E  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
  5135  001D62  0012               	return	
  5136  001D64                     l714:
  5137                           
  5138                           ; BSR set to: 0
  5139                           
  5140                           ; BSR set to: 0
  5141  001D64  0E06               	movlw	6
  5142  001D66  6F96               	movwf	___ftadd@sign& (0+255),b
  5143                           
  5144                           ; BSR set to: 0
  5145  001D68  BF8F               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  5146                           
  5147                           ; BSR set to: 0
  5148  001D6A  8F96               	bsf	___ftadd@sign& (0+255),7,b
  5149                           
  5150                           ; BSR set to: 0
  5151                           
  5152                           ; BSR set to: 0
  5153  001D6C  BF92               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  5154                           
  5155                           ; BSR set to: 0
  5156  001D6E  8D96               	bsf	___ftadd@sign& (0+255),6,b
  5157                           
  5158                           ; BSR set to: 0
  5159  001D70  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
  5160                           
  5161                           ; BSR set to: 0
  5162  001D72  0EFF               	movlw	255
  5163  001D74  178D               	andwf	___ftadd@f1& (0+255),f,b
  5164  001D76  0EFF               	movlw	255
  5165  001D78  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
  5166  001D7A  0E00               	movlw	0
  5167  001D7C  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
  5168  001D7E  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
  5169                           
  5170                           ; BSR set to: 0
  5171  001D80  0EFF               	movlw	255
  5172  001D82  1790               	andwf	___ftadd@f2& (0+255),f,b
  5173  001D84  0EFF               	movlw	255
  5174  001D86  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
  5175  001D88  0E00               	movlw	0
  5176  001D8A  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
  5177                           
  5178                           ; BSR set to: 0
  5179  001D8C  5197               	movf	___ftadd@exp2& (0+255),w,b
  5180  001D8E  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  5181  001D90  B0D8               	btfsc	status,0,c
  5182  001D92  D01B               	goto	l719
  5183  001D94                     u2040:
  5184                           
  5185                           ; BSR set to: 0
  5186                           
  5187                           ; BSR set to: 0
  5188  001D94  90D8               	bcf	status,0,c
  5189  001D96  3790               	rlcf	___ftadd@f2& (0+255),f,b
  5190  001D98  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  5191  001D9A  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  5192  001D9C  0797               	decf	___ftadd@exp2& (0+255),f,b
  5193                           
  5194                           ; BSR set to: 0
  5195  001D9E  5198               	movf	___ftadd@exp1& (0+255),w,b
  5196  001DA0  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  5197  001DA2  B4D8               	btfsc	status,2,c
  5198  001DA4  D00D               	goto	l724
  5199                           
  5200                           ; BSR set to: 0
  5201  001DA6  0796               	decf	___ftadd@sign& (0+255),f,b
  5202  001DA8  C096  F093         	movff	___ftadd@sign,??___ftadd
  5203  001DAC  0E07               	movlw	7
  5204  001DAE  1793               	andwf	??___ftadd& (0+255),f,b
  5205  001DB0  B4D8               	btfsc	status,2,c
  5206  001DB2  D006               	goto	l724
  5207  001DB4  D7EF               	goto	u2040
  5208  001DB6                     
  5209                           ; BSR set to: 0
  5210                           
  5211                           ; BSR set to: 0
  5212  001DB6  90D8               	bcf	status,0,c
  5213  001DB8  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  5214  001DBA  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  5215  001DBC  338D               	rrcf	___ftadd@f1& (0+255),f,b
  5216  001DBE  2B98               	incf	___ftadd@exp1& (0+255),f,b
  5217  001DC0                     l724:
  5218                           
  5219                           ; BSR set to: 0
  5220                           
  5221                           ; BSR set to: 0
  5222  001DC0  5197               	movf	___ftadd@exp2& (0+255),w,b
  5223  001DC2  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  5224  001DC4  B4D8               	btfsc	status,2,c
  5225  001DC6  D01F               	goto	u2110
  5226  001DC8  D7F6               	goto	l725
  5227  001DCA                     l719:
  5228                           
  5229                           ; BSR set to: 0
  5230                           
  5231                           ; BSR set to: 0
  5232  001DCA  5198               	movf	___ftadd@exp1& (0+255),w,b
  5233  001DCC  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  5234  001DCE  B0D8               	btfsc	status,0,c
  5235  001DD0  D01A               	goto	u2110
  5236  001DD2                     u2080:
  5237                           
  5238                           ; BSR set to: 0
  5239                           
  5240                           ; BSR set to: 0
  5241  001DD2  90D8               	bcf	status,0,c
  5242  001DD4  378D               	rlcf	___ftadd@f1& (0+255),f,b
  5243  001DD6  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  5244  001DD8  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  5245  001DDA  0798               	decf	___ftadd@exp1& (0+255),f,b
  5246                           
  5247                           ; BSR set to: 0
  5248  001DDC  5198               	movf	___ftadd@exp1& (0+255),w,b
  5249  001DDE  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  5250  001DE0  B4D8               	btfsc	status,2,c
  5251  001DE2  D00D               	goto	l733
  5252                           
  5253                           ; BSR set to: 0
  5254  001DE4  0796               	decf	___ftadd@sign& (0+255),f,b
  5255  001DE6  C096  F093         	movff	___ftadd@sign,??___ftadd
  5256  001DEA  0E07               	movlw	7
  5257  001DEC  1793               	andwf	??___ftadd& (0+255),f,b
  5258  001DEE  B4D8               	btfsc	status,2,c
  5259  001DF0  D006               	goto	l733
  5260  001DF2  D7EF               	goto	u2080
  5261  001DF4                     
  5262                           ; BSR set to: 0
  5263                           
  5264                           ; BSR set to: 0
  5265  001DF4  90D8               	bcf	status,0,c
  5266  001DF6  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  5267  001DF8  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  5268  001DFA  3390               	rrcf	___ftadd@f2& (0+255),f,b
  5269  001DFC  2B97               	incf	___ftadd@exp2& (0+255),f,b
  5270  001DFE                     l733:
  5271                           
  5272                           ; BSR set to: 0
  5273                           
  5274                           ; BSR set to: 0
  5275  001DFE  5197               	movf	___ftadd@exp2& (0+255),w,b
  5276  001E00  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  5277  001E02  A4D8               	btfss	status,2,c
  5278  001E04  D7F7               	goto	l734
  5279  001E06                     u2110:
  5280                           
  5281                           ; BSR set to: 0
  5282                           
  5283                           ; BSR set to: 0
  5284                           
  5285                           ; BSR set to: 0
  5286  001E06  AF96               	btfss	___ftadd@sign& (0+255),7,b
  5287  001E08  D00C               	goto	l736
  5288                           
  5289                           ; BSR set to: 0
  5290  001E0A  0EFF               	movlw	255
  5291  001E0C  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
  5292  001E0E  0EFF               	movlw	255
  5293  001E10  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  5294  001E12  0EFF               	movlw	255
  5295  001E14  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  5296  001E16  0E01               	movlw	1
  5297  001E18  278D               	addwf	___ftadd@f1& (0+255),f,b
  5298  001E1A  0E00               	movlw	0
  5299  001E1C  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  5300  001E1E  0E00               	movlw	0
  5301  001E20  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  5302  001E22                     l736:
  5303                           
  5304                           ; BSR set to: 0
  5305  001E22  AD96               	btfss	___ftadd@sign& (0+255),6,b
  5306  001E24  D00C               	goto	l737
  5307                           
  5308                           ; BSR set to: 0
  5309  001E26  0EFF               	movlw	255
  5310  001E28  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  5311  001E2A  0EFF               	movlw	255
  5312  001E2C  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5313  001E2E  0EFF               	movlw	255
  5314  001E30  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5315  001E32  0E01               	movlw	1
  5316  001E34  2790               	addwf	___ftadd@f2& (0+255),f,b
  5317  001E36  0E00               	movlw	0
  5318  001E38  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5319  001E3A  0E00               	movlw	0
  5320  001E3C  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5321  001E3E                     l737:
  5322                           
  5323                           ; BSR set to: 0
  5324                           
  5325                           ; BSR set to: 0
  5326  001E3E  0E00               	movlw	0
  5327  001E40  6F96               	movwf	___ftadd@sign& (0+255),b
  5328                           
  5329                           ; BSR set to: 0
  5330  001E42  518D               	movf	___ftadd@f1& (0+255),w,b
  5331  001E44  2790               	addwf	___ftadd@f2& (0+255),f,b
  5332  001E46  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
  5333  001E48  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5334  001E4A  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
  5335  001E4C  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5336                           
  5337                           ; BSR set to: 0
  5338  001E4E  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5339  001E50  D00E               	goto	l738
  5340                           
  5341                           ; BSR set to: 0
  5342  001E52  0EFF               	movlw	255
  5343  001E54  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  5344  001E56  0EFF               	movlw	255
  5345  001E58  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5346  001E5A  0EFF               	movlw	255
  5347  001E5C  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5348  001E5E  0E01               	movlw	1
  5349  001E60  2790               	addwf	___ftadd@f2& (0+255),f,b
  5350  001E62  0E00               	movlw	0
  5351  001E64  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5352  001E66  0E00               	movlw	0
  5353  001E68  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5354                           
  5355                           ; BSR set to: 0
  5356  001E6A  0E01               	movlw	1
  5357  001E6C  6F96               	movwf	___ftadd@sign& (0+255),b
  5358  001E6E                     l738:
  5359                           
  5360                           ; BSR set to: 0
  5361                           
  5362                           ; BSR set to: 0
  5363  001E6E  C090  F060         	movff	___ftadd@f2,___ftpack@arg
  5364  001E72  C091  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
  5365  001E76  C092  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
  5366  001E7A  C098  F063         	movff	___ftadd@exp1,___ftpack@exp
  5367  001E7E  C096  F064         	movff	___ftadd@sign,___ftpack@sign
  5368  001E82  EC64  F012         	call	___ftpack	;wreg free
  5369  001E86  C060  F08D         	movff	?___ftpack,?___ftadd
  5370  001E8A  C061  F08E         	movff	?___ftpack+1,?___ftadd+1
  5371  001E8E  C062  F08F         	movff	?___ftpack+2,?___ftadd+2
  5372  001E92  0012               	return	
  5373  001E94                     __end_of___ftadd:
  5374                           	opt stack 0
  5375                           tblptru	equ	0xFF8
  5376                           tblptrh	equ	0xFF7
  5377                           tblptrl	equ	0xFF6
  5378                           tablat	equ	0xFF5
  5379                           prodh	equ	0xFF4
  5380                           prodl	equ	0xFF3
  5381                           intcon	equ	0xFF2
  5382                           postinc0	equ	0xFEE
  5383                           wreg	equ	0xFE8
  5384                           indf2	equ	0xFDF
  5385                           postinc2	equ	0xFDE
  5386                           postdec2	equ	0xFDD
  5387                           fsr2h	equ	0xFDA
  5388                           fsr2l	equ	0xFD9
  5389                           status	equ	0xFD8
  5390                           
  5391 ;; *************** function ___ftpack *****************
  5392 ;; Defined at:
  5393 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  5394 ;; Parameters:    Size  Location     Type
  5395 ;;  arg             3    0[BANK0 ] unsigned um
  5396 ;;  exp             1    3[BANK0 ] unsigned char 
  5397 ;;  sign            1    4[BANK0 ] unsigned char 
  5398 ;; Auto vars:     Size  Location     Type
  5399 ;;		None
  5400 ;; Return value:  Size  Location     Type
  5401 ;;                  3    0[BANK0 ] float 
  5402 ;; Registers used:
  5403 ;;		wreg, status,2, status,0
  5404 ;; Tracked objects:
  5405 ;;		On entry : 0/0
  5406 ;;		On exit  : 0/0
  5407 ;;		Unchanged: 0/0
  5408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5409 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5411 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5412 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5413 ;;Total ram usage:        8 bytes
  5414 ;; Hardware stack levels used:    1
  5415 ;; Hardware stack levels required when called:    6
  5416 ;; This function calls:
  5417 ;;		Nothing
  5418 ;; This function is called by:
  5419 ;;		___ftadd
  5420 ;;		___ftmul
  5421 ;;		___lltoft
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           	psect	text16
  5426  0024C8                     __ptext16:
  5427                           	opt stack 0
  5428  0024C8                     ___ftpack:
  5429                           	opt stack 21
  5430                           
  5431                           ;incstack = 0
  5432  0024C8  0100               	movlb	0	; () banked
  5433  0024CA  5163               	movf	___ftpack@exp& (0+255),w,b
  5434  0024CC  B4D8               	btfsc	status,2,c
  5435  0024CE  D005               	goto	u1720
  5436                           
  5437                           ; BSR set to: 0
  5438  0024D0  5160               	movf	___ftpack@arg& (0+255),w,b
  5439  0024D2  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  5440  0024D4  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  5441  0024D6  A4D8               	btfss	status,2,c
  5442  0024D8  D00C               	goto	l679
  5443  0024DA                     u1720:
  5444                           
  5445                           ; BSR set to: 0
  5446                           
  5447                           ; BSR set to: 0
  5448  0024DA  0E00               	movlw	0
  5449  0024DC  6F60               	movwf	?___ftpack& (0+255),b
  5450  0024DE  0E00               	movlw	0
  5451  0024E0  6F61               	movwf	(?___ftpack+1)& (0+255),b
  5452  0024E2  0E00               	movlw	0
  5453  0024E4  6F62               	movwf	(?___ftpack+2)& (0+255),b
  5454                           
  5455                           ; BSR set to: 0
  5456  0024E6  0012               	return	
  5457  0024E8                     
  5458                           ; BSR set to: 0
  5459                           
  5460                           ; BSR set to: 0
  5461  0024E8  2B63               	incf	___ftpack@exp& (0+255),f,b
  5462  0024EA  90D8               	bcf	status,0,c
  5463  0024EC  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  5464  0024EE  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  5465  0024F0  3360               	rrcf	___ftpack@arg& (0+255),f,b
  5466  0024F2                     l679:
  5467                           
  5468                           ; BSR set to: 0
  5469                           
  5470                           ; BSR set to: 0
  5471  0024F2  0E00               	movlw	0
  5472  0024F4  1560               	andwf	___ftpack@arg& (0+255),w,b
  5473  0024F6  6F65               	movwf	??___ftpack& (0+255),b
  5474  0024F8  0E00               	movlw	0
  5475  0024FA  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  5476  0024FC  6F66               	movwf	(??___ftpack+1)& (0+255),b
  5477  0024FE  0EFE               	movlw	254
  5478  002500  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  5479  002502  6F67               	movwf	(??___ftpack+2)& (0+255),b
  5480  002504  5165               	movf	??___ftpack& (0+255),w,b
  5481  002506  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  5482  002508  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  5483  00250A  B4D8               	btfsc	status,2,c
  5484  00250C  D00C               	goto	l682
  5485  00250E  D7EC               	goto	l680
  5486  002510                     
  5487                           ; BSR set to: 0
  5488                           
  5489                           ; BSR set to: 0
  5490  002510  2B63               	incf	___ftpack@exp& (0+255),f,b
  5491                           
  5492                           ; BSR set to: 0
  5493  002512  0E01               	movlw	1
  5494  002514  2760               	addwf	___ftpack@arg& (0+255),f,b
  5495  002516  0E00               	movlw	0
  5496  002518  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  5497  00251A  0E00               	movlw	0
  5498  00251C  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  5499  00251E  90D8               	bcf	status,0,c
  5500  002520  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  5501  002522  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  5502  002524  3360               	rrcf	___ftpack@arg& (0+255),f,b
  5503  002526                     l682:
  5504                           
  5505                           ; BSR set to: 0
  5506                           
  5507                           ; BSR set to: 0
  5508  002526  0E00               	movlw	0
  5509  002528  1560               	andwf	___ftpack@arg& (0+255),w,b
  5510  00252A  6F65               	movwf	??___ftpack& (0+255),b
  5511  00252C  0E00               	movlw	0
  5512  00252E  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  5513  002530  6F66               	movwf	(??___ftpack+1)& (0+255),b
  5514  002532  0EFF               	movlw	255
  5515  002534  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  5516  002536  6F67               	movwf	(??___ftpack+2)& (0+255),b
  5517  002538  5165               	movf	??___ftpack& (0+255),w,b
  5518  00253A  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  5519  00253C  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  5520  00253E  B4D8               	btfsc	status,2,c
  5521  002540  D006               	goto	l685
  5522  002542  D7E6               	goto	l683
  5523  002544                     
  5524                           ; BSR set to: 0
  5525                           
  5526                           ; BSR set to: 0
  5527  002544  0763               	decf	___ftpack@exp& (0+255),f,b
  5528  002546  90D8               	bcf	status,0,c
  5529  002548  3760               	rlcf	___ftpack@arg& (0+255),f,b
  5530  00254A  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  5531  00254C  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  5532  00254E                     l685:
  5533                           
  5534                           ; BSR set to: 0
  5535                           
  5536                           ; BSR set to: 0
  5537  00254E  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  5538  002550  D003               	goto	u1760
  5539                           
  5540                           ; BSR set to: 0
  5541  002552  0E02               	movlw	2
  5542  002554  6163               	cpfslt	___ftpack@exp& (0+255),b
  5543  002556  D7F6               	goto	l686
  5544  002558                     u1760:
  5545                           
  5546                           ; BSR set to: 0
  5547                           
  5548                           ; BSR set to: 0
  5549  002558  A163               	btfss	___ftpack@exp& (0+255),0,b
  5550                           
  5551                           ; BSR set to: 0
  5552  00255A  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  5553                           
  5554                           ; BSR set to: 0
  5555                           
  5556                           ; BSR set to: 0
  5557  00255C  90D8               	bcf	status,0,c
  5558  00255E  3363               	rrcf	___ftpack@exp& (0+255),f,b
  5559  002560  5163               	movf	___ftpack@exp& (0+255),w,b
  5560  002562  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  5561                           
  5562                           ; BSR set to: 0
  5563  002564  5164               	movf	___ftpack@sign& (0+255),w,b
  5564  002566  A4D8               	btfss	status,2,c
  5565                           
  5566                           ; BSR set to: 0
  5567  002568  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  5568                           
  5569                           ; BSR set to: 0
  5570                           
  5571                           ; BSR set to: 0
  5572  00256A  C060  F060         	movff	___ftpack@arg,?___ftpack
  5573  00256E  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  5574  002572  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  5575  002576  0012               	return	
  5576  002578                     __end_of___ftpack:
  5577                           	opt stack 0
  5578                           tblptru	equ	0xFF8
  5579                           tblptrh	equ	0xFF7
  5580                           tblptrl	equ	0xFF6
  5581                           tablat	equ	0xFF5
  5582                           prodh	equ	0xFF4
  5583                           prodl	equ	0xFF3
  5584                           intcon	equ	0xFF2
  5585                           postinc0	equ	0xFEE
  5586                           wreg	equ	0xFE8
  5587                           indf2	equ	0xFDF
  5588                           postinc2	equ	0xFDE
  5589                           postdec2	equ	0xFDD
  5590                           fsr2h	equ	0xFDA
  5591                           fsr2l	equ	0xFD9
  5592                           status	equ	0xFD8
  5593                           
  5594 ;; *************** function ___ftneg *****************
  5595 ;; Defined at:
  5596 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  5597 ;; Parameters:    Size  Location     Type
  5598 ;;  f1              3    0[BANK0 ] float 
  5599 ;; Auto vars:     Size  Location     Type
  5600 ;;		None
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  3    0[BANK0 ] float 
  5603 ;; Registers used:
  5604 ;;		wreg, status,2, status,0
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5610 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5613 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5614 ;;Total ram usage:        3 bytes
  5615 ;; Hardware stack levels used:    1
  5616 ;; Hardware stack levels required when called:    6
  5617 ;; This function calls:
  5618 ;;		Nothing
  5619 ;; This function is called by:
  5620 ;;		_sprintf
  5621 ;; This function uses a non-reentrant model
  5622 ;;
  5623                           
  5624                           	psect	text17
  5625  002C3E                     __ptext17:
  5626                           	opt stack 0
  5627  002C3E                     ___ftneg:
  5628                           	opt stack 23
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;incstack = 0
  5632  002C3E  0100               	movlb	0	; () banked
  5633  002C40  5160               	movf	___ftneg@f1& (0+255),w,b
  5634  002C42  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  5635  002C44  1162               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  5636  002C46  B4D8               	btfsc	status,2,c
  5637  002C48  D006               	goto	l786
  5638                           
  5639                           ; BSR set to: 0
  5640  002C4A  0E00               	movlw	0
  5641  002C4C  1B60               	xorwf	___ftneg@f1& (0+255),f,b
  5642  002C4E  0E00               	movlw	0
  5643  002C50  1B61               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  5644  002C52  0E80               	movlw	128
  5645  002C54  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  5646  002C56                     l786:
  5647                           
  5648                           ; BSR set to: 0
  5649  002C56  C060  F060         	movff	___ftneg@f1,?___ftneg
  5650  002C5A  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
  5651  002C5E  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
  5652                           
  5653                           ; BSR set to: 0
  5654  002C62  0012               	return		;funcret
  5655  002C64                     __end_of___ftneg:
  5656                           	opt stack 0
  5657                           tblptru	equ	0xFF8
  5658                           tblptrh	equ	0xFF7
  5659                           tblptrl	equ	0xFF6
  5660                           tablat	equ	0xFF5
  5661                           prodh	equ	0xFF4
  5662                           prodl	equ	0xFF3
  5663                           intcon	equ	0xFF2
  5664                           postinc0	equ	0xFEE
  5665                           wreg	equ	0xFE8
  5666                           indf2	equ	0xFDF
  5667                           postinc2	equ	0xFDE
  5668                           postdec2	equ	0xFDD
  5669                           fsr2h	equ	0xFDA
  5670                           fsr2l	equ	0xFD9
  5671                           status	equ	0xFD8
  5672                           
  5673 ;; *************** function ___ftge *****************
  5674 ;; Defined at:
  5675 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  5676 ;; Parameters:    Size  Location     Type
  5677 ;;  ff1             3    0[BANK0 ] float 
  5678 ;;  ff2             3    3[BANK0 ] float 
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;		None
  5681 ;; Return value:  Size  Location     Type
  5682 ;;		None               void
  5683 ;; Registers used:
  5684 ;;		wreg, status,2, status,0
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5690 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5692 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5693 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5694 ;;Total ram usage:        9 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; Hardware stack levels required when called:    6
  5697 ;; This function calls:
  5698 ;;		Nothing
  5699 ;; This function is called by:
  5700 ;;		_sprintf
  5701 ;; This function uses a non-reentrant model
  5702 ;;
  5703                           
  5704                           	psect	text18
  5705  002626                     __ptext18:
  5706                           	opt stack 0
  5707  002626                     ___ftge:
  5708                           	opt stack 23
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;incstack = 0
  5712  002626  0100               	movlb	0	; () banked
  5713  002628  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  5714  00262A  D016               	goto	l768
  5715                           
  5716                           ; BSR set to: 0
  5717  00262C  C060  F066         	movff	___ftge@ff1,??___ftge
  5718  002630  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
  5719  002634  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
  5720  002638  1F66               	comf	??___ftge& (0+255),f,b
  5721  00263A  1F67               	comf	(??___ftge+1)& (0+255),f,b
  5722  00263C  1F68               	comf	(??___ftge+2)& (0+255),f,b
  5723  00263E  2B66               	incf	??___ftge& (0+255),f,b
  5724  002640  0E00               	movlw	0
  5725  002642  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  5726  002644  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  5727  002646  0E00               	movlw	0
  5728  002648  2566               	addwf	??___ftge& (0+255),w,b
  5729  00264A  6F60               	movwf	___ftge@ff1& (0+255),b
  5730  00264C  0E00               	movlw	0
  5731  00264E  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  5732  002650  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  5733  002652  0E80               	movlw	128
  5734  002654  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  5735  002656  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  5736  002658                     l768:
  5737                           
  5738                           ; BSR set to: 0
  5739                           
  5740                           ; BSR set to: 0
  5741  002658  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  5742  00265A  D016               	goto	l769
  5743                           
  5744                           ; BSR set to: 0
  5745  00265C  C063  F066         	movff	___ftge@ff2,??___ftge
  5746  002660  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
  5747  002664  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
  5748  002668  1F66               	comf	??___ftge& (0+255),f,b
  5749  00266A  1F67               	comf	(??___ftge+1)& (0+255),f,b
  5750  00266C  1F68               	comf	(??___ftge+2)& (0+255),f,b
  5751  00266E  2B66               	incf	??___ftge& (0+255),f,b
  5752  002670  0E00               	movlw	0
  5753  002672  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  5754  002674  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  5755  002676  0E00               	movlw	0
  5756  002678  2566               	addwf	??___ftge& (0+255),w,b
  5757  00267A  6F63               	movwf	___ftge@ff2& (0+255),b
  5758  00267C  0E00               	movlw	0
  5759  00267E  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  5760  002680  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  5761  002682  0E80               	movlw	128
  5762  002684  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  5763  002686  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  5764  002688                     l769:
  5765                           
  5766                           ; BSR set to: 0
  5767                           
  5768                           ; BSR set to: 0
  5769  002688  0E00               	movlw	0
  5770  00268A  1B60               	xorwf	___ftge@ff1& (0+255),f,b
  5771  00268C  0E00               	movlw	0
  5772  00268E  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  5773  002690  0E80               	movlw	128
  5774  002692  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  5775                           
  5776                           ; BSR set to: 0
  5777  002694  0E00               	movlw	0
  5778  002696  1B63               	xorwf	___ftge@ff2& (0+255),f,b
  5779  002698  0E00               	movlw	0
  5780  00269A  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  5781  00269C  0E80               	movlw	128
  5782  00269E  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  5783  0026A0  5163               	movf	___ftge@ff2& (0+255),w,b
  5784  0026A2  5D60               	subwf	___ftge@ff1& (0+255),w,b
  5785  0026A4  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  5786  0026A6  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  5787  0026A8  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  5788  0026AA  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  5789  0026AC  B0D8               	btfsc	status,0,c
  5790  0026AE  D002               	goto	l2237
  5791                           
  5792                           ; BSR set to: 0
  5793  0026B0  90D8               	bcf	status,0,c
  5794  0026B2  0012               	return	
  5795  0026B4                     l2237:
  5796                           
  5797                           ; BSR set to: 0
  5798                           
  5799                           ; BSR set to: 0
  5800  0026B4  80D8               	bsf	status,0,c
  5801                           
  5802                           ; BSR set to: 0
  5803  0026B6  0012               	return	
  5804  0026B8                     __end_of___ftge:
  5805                           	opt stack 0
  5806                           tblptru	equ	0xFF8
  5807                           tblptrh	equ	0xFF7
  5808                           tblptrl	equ	0xFF6
  5809                           tablat	equ	0xFF5
  5810                           prodh	equ	0xFF4
  5811                           prodl	equ	0xFF3
  5812                           intcon	equ	0xFF2
  5813                           postinc0	equ	0xFEE
  5814                           wreg	equ	0xFE8
  5815                           indf2	equ	0xFDF
  5816                           postinc2	equ	0xFDE
  5817                           postdec2	equ	0xFDD
  5818                           fsr2h	equ	0xFDA
  5819                           fsr2l	equ	0xFD9
  5820                           status	equ	0xFD8
  5821                           
  5822 ;; *************** function _serial_print *****************
  5823 ;; Defined at:
  5824 ;;		line 114 in file "main.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;  cadena          2    1[BANK0 ] PTR unsigned char 
  5827 ;;		 -> vectorString(32), 
  5828 ;; Auto vars:     Size  Location     Type
  5829 ;;  i               1    3[BANK0 ] unsigned char 
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  1    wreg      void 
  5832 ;; Registers used:
  5833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5839 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5842 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5843 ;;Total ram usage:        3 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; Hardware stack levels required when called:    7
  5846 ;; This function calls:
  5847 ;;		_EUSART1_Write
  5848 ;; This function is called by:
  5849 ;;		_main
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853                           	psect	text19
  5854  002B46                     __ptext19:
  5855                           	opt stack 0
  5856  002B46                     _serial_print:
  5857                           	opt stack 23
  5858                           
  5859                           ;main.c: 116: uint8_t i = 0;
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;incstack = 0
  5863  002B46  0E00               	movlw	0
  5864  002B48  0100               	movlb	0	; () banked
  5865  002B4A  6F63               	movwf	serial_print@i& (0+255),b
  5866                           
  5867                           ;main.c: 117: while (cadena[i] != 0)
  5868  002B4C  D00D               	goto	l363
  5869  002B4E                     
  5870                           ; BSR set to: 0
  5871                           ;main.c: 118: {
  5872                           ;main.c: 119: EUSART1_Write(cadena[i]);
  5873                           
  5874                           ; BSR set to: 0
  5875  002B4E  5163               	movf	serial_print@i& (0+255),w,b
  5876  002B50  0D01               	mullw	1
  5877  002B52  50F3               	movf	prodl,w,c
  5878  002B54  2561               	addwf	serial_print@cadena& (0+255),w,b
  5879  002B56  6ED9               	movwf	fsr2l,c
  5880  002B58  50F4               	movf	prodh,w,c
  5881  002B5A  2162               	addwfc	(serial_print@cadena+1)& (0+255),w,b
  5882  002B5C  6EDA               	movwf	fsr2h,c
  5883  002B5E  50DF               	movf	indf2,w,c
  5884  002B60  EC60  F015         	call	_EUSART1_Write
  5885                           
  5886                           ;main.c: 120: i++;
  5887  002B64  0100               	movlb	0	; () banked
  5888  002B66  2B63               	incf	serial_print@i& (0+255),f,b
  5889  002B68                     l363:
  5890                           
  5891                           ; BSR set to: 0
  5892                           
  5893                           ; BSR set to: 0
  5894  002B68  5163               	movf	serial_print@i& (0+255),w,b
  5895  002B6A  0D01               	mullw	1
  5896  002B6C  50F3               	movf	prodl,w,c
  5897  002B6E  2561               	addwf	serial_print@cadena& (0+255),w,b
  5898  002B70  6ED9               	movwf	fsr2l,c
  5899  002B72  50F4               	movf	prodh,w,c
  5900  002B74  2162               	addwfc	(serial_print@cadena+1)& (0+255),w,b
  5901  002B76  6EDA               	movwf	fsr2h,c
  5902  002B78  50DF               	movf	indf2,w,c
  5903  002B7A  B4D8               	btfsc	status,2,c
  5904  002B7C  0012               	return	
  5905  002B7E  D7E7               	goto	l364
  5906  002B80                     __end_of_serial_print:
  5907                           	opt stack 0
  5908                           tblptru	equ	0xFF8
  5909                           tblptrh	equ	0xFF7
  5910                           tblptrl	equ	0xFF6
  5911                           tablat	equ	0xFF5
  5912                           prodh	equ	0xFF4
  5913                           prodl	equ	0xFF3
  5914                           intcon	equ	0xFF2
  5915                           postinc0	equ	0xFEE
  5916                           wreg	equ	0xFE8
  5917                           indf2	equ	0xFDF
  5918                           postinc2	equ	0xFDE
  5919                           postdec2	equ	0xFDD
  5920                           fsr2h	equ	0xFDA
  5921                           fsr2l	equ	0xFD9
  5922                           status	equ	0xFD8
  5923                           
  5924 ;; *************** function _EUSART1_Write *****************
  5925 ;; Defined at:
  5926 ;;		line 148 in file "mcc_generated_files/eusart1.c"
  5927 ;; Parameters:    Size  Location     Type
  5928 ;;  txData          1    wreg     unsigned char 
  5929 ;; Auto vars:     Size  Location     Type
  5930 ;;  txData          1    0[BANK0 ] unsigned char 
  5931 ;; Return value:  Size  Location     Type
  5932 ;;                  1    wreg      void 
  5933 ;; Registers used:
  5934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5935 ;; Tracked objects:
  5936 ;;		On entry : 0/0
  5937 ;;		On exit  : 0/0
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5941 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5943 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5944 ;;Total ram usage:        1 bytes
  5945 ;; Hardware stack levels used:    1
  5946 ;; Hardware stack levels required when called:    6
  5947 ;; This function calls:
  5948 ;;		Nothing
  5949 ;; This function is called by:
  5950 ;;		_serial_print
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           	psect	text20
  5955  002AC0                     __ptext20:
  5956                           	opt stack 0
  5957  002AC0                     _EUSART1_Write:
  5958                           	opt stack 23
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;incstack = 0
  5962                           ;EUSART1_Write@txData stored from wreg
  5963  002AC0  0100               	movlb	0	; () banked
  5964  002AC2  6F60               	movwf	EUSART1_Write@txData& (0+255),b
  5965  002AC4                     
  5966                           ;eusart1.c: 151: {
  5967                           
  5968                           ;eusart1.c: 150: while(0 == eusart1TxBufferRemaining)
  5969  002AC4  0100               	movlb	0	; () banked
  5970  002AC6  51E9               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  5971  002AC8  B4D8               	btfsc	status,2,c
  5972  002ACA  D7FC               	goto	l2735
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;eusart1.c: 152: }
  5976                           ;eusart1.c: 154: if(0 == PIE3bits.TX1IE)
  5977  002ACC  010E               	movlb	14	; () banked
  5978  002ACE  B9C5               	btfsc	197,4,b	;volatile
  5979  002AD0  D003               	goto	l291
  5980                           
  5981                           ; BSR set to: 14
  5982                           ;eusart1.c: 155: {
  5983                           ;eusart1.c: 156: TX1REG = txData;
  5984  002AD2  C060  FF9A         	movff	EUSART1_Write@txData,3994	;volatile
  5985                           
  5986                           ;eusart1.c: 157: }
  5987  002AD6  D013               	goto	l292
  5988  002AD8                     l291:
  5989                           
  5990                           ; BSR set to: 14
  5991                           ;eusart1.c: 158: else
  5992                           ;eusart1.c: 159: {
  5993                           ;eusart1.c: 160: PIE3bits.TX1IE = 0;
  5994  002AD8  99C5               	bcf	197,4,b	;volatile
  5995                           
  5996                           ; BSR set to: 14
  5997                           ;eusart1.c: 161: eusart1TxBuffer[eusart1TxHead++] = txData;
  5998  002ADA  0100               	movlb	0	; () banked
  5999  002ADC  51C8               	movf	_eusart1TxHead& (0+255),w,b	;volatile
  6000  002ADE  0D01               	mullw	1
  6001  002AE0  0E44               	movlw	low _eusart1TxBuffer
  6002  002AE2  24F3               	addwf	prodl,w,c
  6003  002AE4  6ED9               	movwf	fsr2l,c
  6004  002AE6  0E00               	movlw	high _eusart1TxBuffer
  6005  002AE8  20F4               	addwfc	prodh,w,c
  6006  002AEA  6EDA               	movwf	fsr2h,c
  6007  002AEC  C060  FFDF         	movff	EUSART1_Write@txData,indf2
  6008                           
  6009                           ; BSR set to: 0
  6010  002AF0  2BC8               	incf	_eusart1TxHead& (0+255),f,b	;volatile
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;eusart1.c: 162: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  6014  002AF2  0E07               	movlw	7
  6015  002AF4  65C8               	cpfsgt	_eusart1TxHead& (0+255),b	;volatile
  6016  002AF6  D002               	goto	l293
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;eusart1.c: 163: {
  6020                           ;eusart1.c: 164: eusart1TxHead = 0;
  6021  002AF8  0E00               	movlw	0
  6022  002AFA  6FC8               	movwf	_eusart1TxHead& (0+255),b	;volatile
  6023  002AFC                     l293:
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;eusart1.c: 165: }
  6027                           ;eusart1.c: 166: eusart1TxBufferRemaining--;
  6028                           
  6029                           ; BSR set to: 0
  6030  002AFC  07E9               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  6031  002AFE                     l292:
  6032                           
  6033                           ;eusart1.c: 167: }
  6034                           ;eusart1.c: 168: PIE3bits.TX1IE = 1;
  6035                           
  6036                           ; BSR set to: 0
  6037  002AFE  010E               	movlb	14	; () banked
  6038  002B00  89C5               	bsf	197,4,b	;volatile
  6039                           
  6040                           ; BSR set to: 14
  6041  002B02  0012               	return		;funcret
  6042  002B04                     __end_of_EUSART1_Write:
  6043                           	opt stack 0
  6044                           tblptru	equ	0xFF8
  6045                           tblptrh	equ	0xFF7
  6046                           tblptrl	equ	0xFF6
  6047                           tablat	equ	0xFF5
  6048                           prodh	equ	0xFF4
  6049                           prodl	equ	0xFF3
  6050                           intcon	equ	0xFF2
  6051                           postinc0	equ	0xFEE
  6052                           wreg	equ	0xFE8
  6053                           indf2	equ	0xFDF
  6054                           postinc2	equ	0xFDE
  6055                           postdec2	equ	0xFDD
  6056                           fsr2h	equ	0xFDA
  6057                           fsr2l	equ	0xFD9
  6058                           status	equ	0xFD8
  6059                           
  6060 ;; *************** function _TMR5_StopTimer *****************
  6061 ;; Defined at:
  6062 ;;		line 98 in file "mcc_generated_files/tmr5.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;		None
  6065 ;; Auto vars:     Size  Location     Type
  6066 ;;		None
  6067 ;; Return value:  Size  Location     Type
  6068 ;;                  1    wreg      void 
  6069 ;; Registers used:
  6070 ;;		None
  6071 ;; Tracked objects:
  6072 ;;		On entry : 0/0
  6073 ;;		On exit  : 0/0
  6074 ;;		Unchanged: 0/0
  6075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6080 ;;Total ram usage:        0 bytes
  6081 ;; Hardware stack levels used:    1
  6082 ;; Hardware stack levels required when called:    6
  6083 ;; This function calls:
  6084 ;;		Nothing
  6085 ;; This function is called by:
  6086 ;;		_main
  6087 ;; This function uses a non-reentrant model
  6088 ;;
  6089                           
  6090                           	psect	text21
  6091  002DAC                     __ptext21:
  6092                           	opt stack 0
  6093  002DAC                     _TMR5_StopTimer:
  6094                           	opt stack 24
  6095                           
  6096                           ;tmr5.c: 101: T5CONbits.TMR5ON = 0;
  6097                           
  6098                           ; BSR set to: 14
  6099                           ;incstack = 0
  6100  002DAC  90C3               	bcf	4035,0,c	;volatile
  6101  002DAE  0012               	return		;funcret
  6102  002DB0                     __end_of_TMR5_StopTimer:
  6103                           	opt stack 0
  6104                           tblptru	equ	0xFF8
  6105                           tblptrh	equ	0xFF7
  6106                           tblptrl	equ	0xFF6
  6107                           tablat	equ	0xFF5
  6108                           prodh	equ	0xFF4
  6109                           prodl	equ	0xFF3
  6110                           intcon	equ	0xFF2
  6111                           postinc0	equ	0xFEE
  6112                           wreg	equ	0xFE8
  6113                           indf2	equ	0xFDF
  6114                           postinc2	equ	0xFDE
  6115                           postdec2	equ	0xFDD
  6116                           fsr2h	equ	0xFDA
  6117                           fsr2l	equ	0xFD9
  6118                           status	equ	0xFD8
  6119                           
  6120 ;; *************** function _SYSTEM_Initialize *****************
  6121 ;; Defined at:
  6122 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6123 ;; Parameters:    Size  Location     Type
  6124 ;;		None
  6125 ;; Auto vars:     Size  Location     Type
  6126 ;;		None
  6127 ;; Return value:  Size  Location     Type
  6128 ;;                  1    wreg      void 
  6129 ;; Registers used:
  6130 ;;		wreg, status,2, status,0, cstack
  6131 ;; Tracked objects:
  6132 ;;		On entry : 0/0
  6133 ;;		On exit  : 0/0
  6134 ;;		Unchanged: 0/0
  6135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6140 ;;Total ram usage:        0 bytes
  6141 ;; Hardware stack levels used:    1
  6142 ;; Hardware stack levels required when called:    8
  6143 ;; This function calls:
  6144 ;;		_EUSART1_Initialize
  6145 ;;		_EXT_INT_Initialize
  6146 ;;		_INTERRUPT_Initialize
  6147 ;;		_OSCILLATOR_Initialize
  6148 ;;		_PIN_MANAGER_Initialize
  6149 ;;		_PMD_Initialize
  6150 ;;		_TMR5_Initialize
  6151 ;; This function is called by:
  6152 ;;		_main
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           	psect	text22
  6157  002CEC                     __ptext22:
  6158                           	opt stack 0
  6159  002CEC                     _SYSTEM_Initialize:
  6160                           	opt stack 22
  6161                           
  6162                           ;mcc.c: 52: INTERRUPT_Initialize();
  6163                           
  6164                           ;incstack = 0
  6165  002CEC  ECD8  F016         	call	_INTERRUPT_Initialize	;wreg free
  6166                           
  6167                           ;mcc.c: 53: PMD_Initialize();
  6168  002CF0  EC94  F016         	call	_PMD_Initialize	;wreg free
  6169                           
  6170                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  6171  002CF4  ECE1  F013         	call	_PIN_MANAGER_Initialize	;wreg free
  6172                           
  6173                           ;mcc.c: 55: OSCILLATOR_Initialize();
  6174  002CF8  ECB0  F016         	call	_OSCILLATOR_Initialize	;wreg free
  6175                           
  6176                           ;mcc.c: 56: TMR5_Initialize();
  6177  002CFC  ECC0  F015         	call	_TMR5_Initialize	;wreg free
  6178                           
  6179                           ;mcc.c: 57: EXT_INT_Initialize();
  6180  002D00  EC85  F016         	call	_EXT_INT_Initialize	;wreg free
  6181                           
  6182                           ;mcc.c: 58: EUSART1_Initialize();
  6183  002D04  EC01  F015         	call	_EUSART1_Initialize	;wreg free
  6184  002D08  0012               	return		;funcret
  6185  002D0A                     __end_of_SYSTEM_Initialize:
  6186                           	opt stack 0
  6187                           tblptru	equ	0xFF8
  6188                           tblptrh	equ	0xFF7
  6189                           tblptrl	equ	0xFF6
  6190                           tablat	equ	0xFF5
  6191                           prodh	equ	0xFF4
  6192                           prodl	equ	0xFF3
  6193                           intcon	equ	0xFF2
  6194                           postinc0	equ	0xFEE
  6195                           wreg	equ	0xFE8
  6196                           indf2	equ	0xFDF
  6197                           postinc2	equ	0xFDE
  6198                           postdec2	equ	0xFDD
  6199                           fsr2h	equ	0xFDA
  6200                           fsr2l	equ	0xFD9
  6201                           status	equ	0xFD8
  6202                           
  6203 ;; *************** function _TMR5_Initialize *****************
  6204 ;; Defined at:
  6205 ;;		line 63 in file "mcc_generated_files/tmr5.c"
  6206 ;; Parameters:    Size  Location     Type
  6207 ;;		None
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;		None
  6210 ;; Return value:  Size  Location     Type
  6211 ;;                  1    wreg      void 
  6212 ;; Registers used:
  6213 ;;		wreg, status,2, status,0
  6214 ;; Tracked objects:
  6215 ;;		On entry : 0/0
  6216 ;;		On exit  : 0/0
  6217 ;;		Unchanged: 0/0
  6218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6222 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6223 ;;Total ram usage:        2 bytes
  6224 ;; Hardware stack levels used:    1
  6225 ;; Hardware stack levels required when called:    6
  6226 ;; This function calls:
  6227 ;;		Nothing
  6228 ;; This function is called by:
  6229 ;;		_SYSTEM_Initialize
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           	psect	text23
  6234  002B80                     __ptext23:
  6235                           	opt stack 0
  6236  002B80                     _TMR5_Initialize:
  6237                           	opt stack 23
  6238                           
  6239                           ;tmr5.c: 68: T5GCON = 0x00;
  6240                           
  6241                           ;incstack = 0
  6242  002B80  0E00               	movlw	0
  6243  002B82  6EC4               	movwf	4036,c	;volatile
  6244                           
  6245                           ;tmr5.c: 71: T5GATE = 0x00;
  6246  002B84  0E00               	movlw	0
  6247  002B86  6EC5               	movwf	4037,c	;volatile
  6248                           
  6249                           ;tmr5.c: 74: T5CLK = 0x01;
  6250  002B88  0E01               	movlw	1
  6251  002B8A  6EC6               	movwf	4038,c	;volatile
  6252                           
  6253                           ;tmr5.c: 77: TMR5H = 0x00;
  6254  002B8C  0E00               	movlw	0
  6255  002B8E  6EC2               	movwf	4034,c	;volatile
  6256                           
  6257                           ;tmr5.c: 80: TMR5L = 0x00;
  6258  002B90  0E00               	movlw	0
  6259  002B92  6EC1               	movwf	4033,c	;volatile
  6260                           
  6261                           ;tmr5.c: 83: timer5ReloadVal=(uint16_t)((TMR5H << 8) | TMR5L);
  6262  002B94  50C1               	movf	4033,w,c	;volatile
  6263  002B96  CFC2 F060          	movff	4034,??_TMR5_Initialize	;volatile
  6264  002B9A  0100               	movlb	0	; () banked
  6265  002B9C  6B61               	clrf	(??_TMR5_Initialize+1)& (0+255),b
  6266  002B9E  C060  F061         	movff	??_TMR5_Initialize,??_TMR5_Initialize+1
  6267  002BA2  6B60               	clrf	??_TMR5_Initialize& (0+255),b
  6268  002BA4  1160               	iorwf	??_TMR5_Initialize& (0+255),w,b
  6269  002BA6  6E59               	movwf	_timer5ReloadVal,c	;volatile
  6270  002BA8  5161               	movf	(??_TMR5_Initialize+1)& (0+255),w,b
  6271  002BAA  6E5A               	movwf	_timer5ReloadVal+1,c	;volatile
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;tmr5.c: 86: PIR4bits.TMR5IF = 0;
  6275  002BAC  010E               	movlb	14	; () banked
  6276  002BAE  99CE               	bcf	206,4,b	;volatile
  6277                           
  6278                           ; BSR set to: 14
  6279                           ;tmr5.c: 89: T5CON = 0x33;
  6280  002BB0  0E33               	movlw	51
  6281  002BB2  6EC3               	movwf	4035,c	;volatile
  6282                           
  6283                           ; BSR set to: 14
  6284  002BB4  0012               	return		;funcret
  6285  002BB6                     __end_of_TMR5_Initialize:
  6286                           	opt stack 0
  6287                           tblptru	equ	0xFF8
  6288                           tblptrh	equ	0xFF7
  6289                           tblptrl	equ	0xFF6
  6290                           tablat	equ	0xFF5
  6291                           prodh	equ	0xFF4
  6292                           prodl	equ	0xFF3
  6293                           intcon	equ	0xFF2
  6294                           postinc0	equ	0xFEE
  6295                           wreg	equ	0xFE8
  6296                           indf2	equ	0xFDF
  6297                           postinc2	equ	0xFDE
  6298                           postdec2	equ	0xFDD
  6299                           fsr2h	equ	0xFDA
  6300                           fsr2l	equ	0xFD9
  6301                           status	equ	0xFD8
  6302                           
  6303 ;; *************** function _PMD_Initialize *****************
  6304 ;; Defined at:
  6305 ;;		line 75 in file "mcc_generated_files/mcc.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;		None
  6308 ;; Auto vars:     Size  Location     Type
  6309 ;;		None
  6310 ;; Return value:  Size  Location     Type
  6311 ;;                  1    wreg      void 
  6312 ;; Registers used:
  6313 ;;		wreg, status,2
  6314 ;; Tracked objects:
  6315 ;;		On entry : 0/0
  6316 ;;		On exit  : 0/0
  6317 ;;		Unchanged: 0/0
  6318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6323 ;;Total ram usage:        0 bytes
  6324 ;; Hardware stack levels used:    1
  6325 ;; Hardware stack levels required when called:    6
  6326 ;; This function calls:
  6327 ;;		Nothing
  6328 ;; This function is called by:
  6329 ;;		_SYSTEM_Initialize
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           	psect	text24
  6334  002D28                     __ptext24:
  6335                           	opt stack 0
  6336  002D28                     _PMD_Initialize:
  6337                           	opt stack 23
  6338                           
  6339                           ;mcc.c: 78: PMD0 = 0x00;
  6340                           
  6341                           ; BSR set to: 14
  6342                           ;incstack = 0
  6343  002D28  0E00               	movlw	0
  6344  002D2A  010E               	movlb	14	; () banked
  6345  002D2C  6FE1               	movwf	225,b	;volatile
  6346                           
  6347                           ;mcc.c: 80: PMD1 = 0x00;
  6348  002D2E  0E00               	movlw	0
  6349  002D30  6FE2               	movwf	226,b	;volatile
  6350                           
  6351                           ;mcc.c: 82: PMD2 = 0x00;
  6352  002D32  0E00               	movlw	0
  6353  002D34  6FE3               	movwf	227,b	;volatile
  6354                           
  6355                           ;mcc.c: 84: PMD3 = 0x00;
  6356  002D36  0E00               	movlw	0
  6357  002D38  6FE4               	movwf	228,b	;volatile
  6358                           
  6359                           ;mcc.c: 86: PMD4 = 0x00;
  6360  002D3A  0E00               	movlw	0
  6361  002D3C  6FE5               	movwf	229,b	;volatile
  6362                           
  6363                           ;mcc.c: 88: PMD5 = 0x00;
  6364  002D3E  0E00               	movlw	0
  6365  002D40  6FE6               	movwf	230,b	;volatile
  6366                           
  6367                           ; BSR set to: 14
  6368  002D42  0012               	return		;funcret
  6369  002D44                     __end_of_PMD_Initialize:
  6370                           	opt stack 0
  6371                           tblptru	equ	0xFF8
  6372                           tblptrh	equ	0xFF7
  6373                           tblptrl	equ	0xFF6
  6374                           tablat	equ	0xFF5
  6375                           prodh	equ	0xFF4
  6376                           prodl	equ	0xFF3
  6377                           intcon	equ	0xFF2
  6378                           postinc0	equ	0xFEE
  6379                           wreg	equ	0xFE8
  6380                           indf2	equ	0xFDF
  6381                           postinc2	equ	0xFDE
  6382                           postdec2	equ	0xFDD
  6383                           fsr2h	equ	0xFDA
  6384                           fsr2l	equ	0xFD9
  6385                           status	equ	0xFD8
  6386                           
  6387 ;; *************** function _PIN_MANAGER_Initialize *****************
  6388 ;; Defined at:
  6389 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  6390 ;; Parameters:    Size  Location     Type
  6391 ;;		None
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;		None
  6394 ;; Return value:  Size  Location     Type
  6395 ;;                  1    wreg      void 
  6396 ;; Registers used:
  6397 ;;		wreg, status,2
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6407 ;;Total ram usage:        0 bytes
  6408 ;; Hardware stack levels used:    1
  6409 ;; Hardware stack levels required when called:    6
  6410 ;; This function calls:
  6411 ;;		Nothing
  6412 ;; This function is called by:
  6413 ;;		_SYSTEM_Initialize
  6414 ;; This function uses a non-reentrant model
  6415 ;;
  6416                           
  6417                           	psect	text25
  6418  0027C2                     __ptext25:
  6419                           	opt stack 0
  6420  0027C2                     _PIN_MANAGER_Initialize:
  6421                           	opt stack 23
  6422                           
  6423                           ;pin_manager.c: 62: LATE = 0x00;
  6424                           
  6425                           ; BSR set to: 14
  6426                           ;incstack = 0
  6427  0027C2  0E00               	movlw	0
  6428  0027C4  6E87               	movwf	3975,c	;volatile
  6429                           
  6430                           ;pin_manager.c: 63: LATD = 0x00;
  6431  0027C6  0E00               	movlw	0
  6432  0027C8  6E86               	movwf	3974,c	;volatile
  6433                           
  6434                           ;pin_manager.c: 64: LATA = 0x00;
  6435  0027CA  0E00               	movlw	0
  6436  0027CC  6E83               	movwf	3971,c	;volatile
  6437                           
  6438                           ;pin_manager.c: 65: LATB = 0x00;
  6439  0027CE  0E00               	movlw	0
  6440  0027D0  6E84               	movwf	3972,c	;volatile
  6441                           
  6442                           ;pin_manager.c: 66: LATC = 0x00;
  6443  0027D2  0E00               	movlw	0
  6444  0027D4  6E85               	movwf	3973,c	;volatile
  6445                           
  6446                           ;pin_manager.c: 71: TRISE = 0x07;
  6447  0027D6  0E07               	movlw	7
  6448  0027D8  6E8C               	movwf	3980,c	;volatile
  6449                           
  6450                           ;pin_manager.c: 72: TRISA = 0xFF;
  6451  0027DA  6888               	setf	3976,c	;volatile
  6452                           
  6453                           ;pin_manager.c: 73: TRISB = 0xFD;
  6454  0027DC  0EFD               	movlw	253
  6455  0027DE  6E89               	movwf	3977,c	;volatile
  6456                           
  6457                           ;pin_manager.c: 74: TRISC = 0xBF;
  6458  0027E0  0EBF               	movlw	191
  6459  0027E2  6E8A               	movwf	3978,c	;volatile
  6460                           
  6461                           ;pin_manager.c: 75: TRISD = 0xFF;
  6462  0027E4  688B               	setf	3979,c	;volatile
  6463                           
  6464                           ;pin_manager.c: 80: ANSELD = 0xFF;
  6465  0027E6  010F               	movlb	15	; () banked
  6466  0027E8  6926               	setf	38,b	;volatile
  6467                           
  6468                           ;pin_manager.c: 81: ANSELC = 0x3F;
  6469  0027EA  0E3F               	movlw	63
  6470  0027EC  6F21               	movwf	33,b	;volatile
  6471                           
  6472                           ;pin_manager.c: 82: ANSELB = 0xFC;
  6473  0027EE  0EFC               	movlw	252
  6474  0027F0  6F19               	movwf	25,b	;volatile
  6475                           
  6476                           ;pin_manager.c: 83: ANSELE = 0x07;
  6477  0027F2  0E07               	movlw	7
  6478  0027F4  6F2E               	movwf	46,b	;volatile
  6479                           
  6480                           ; BSR set to: 15
  6481                           ;pin_manager.c: 84: ANSELA = 0xFF;
  6482  0027F6  6911               	setf	17,b	;volatile
  6483                           
  6484                           ;pin_manager.c: 89: WPUD = 0x00;
  6485  0027F8  0E00               	movlw	0
  6486  0027FA  6F25               	movwf	37,b	;volatile
  6487                           
  6488                           ;pin_manager.c: 90: WPUE = 0x00;
  6489  0027FC  0E00               	movlw	0
  6490  0027FE  6F2D               	movwf	45,b	;volatile
  6491                           
  6492                           ;pin_manager.c: 91: WPUB = 0x00;
  6493  002800  0E00               	movlw	0
  6494  002802  6F18               	movwf	24,b	;volatile
  6495                           
  6496                           ;pin_manager.c: 92: WPUA = 0x00;
  6497  002804  0E00               	movlw	0
  6498  002806  6F10               	movwf	16,b	;volatile
  6499                           
  6500                           ;pin_manager.c: 93: WPUC = 0x00;
  6501  002808  0E00               	movlw	0
  6502  00280A  6F20               	movwf	32,b	;volatile
  6503                           
  6504                           ;pin_manager.c: 98: ODCONE = 0x00;
  6505  00280C  0E00               	movlw	0
  6506  00280E  6F2C               	movwf	44,b	;volatile
  6507                           
  6508                           ;pin_manager.c: 99: ODCONA = 0x00;
  6509  002810  0E00               	movlw	0
  6510  002812  6F0F               	movwf	15,b	;volatile
  6511                           
  6512                           ;pin_manager.c: 100: ODCONB = 0x00;
  6513  002814  0E00               	movlw	0
  6514  002816  6F17               	movwf	23,b	;volatile
  6515                           
  6516                           ;pin_manager.c: 101: ODCONC = 0x00;
  6517  002818  0E00               	movlw	0
  6518  00281A  6F1F               	movwf	31,b	;volatile
  6519                           
  6520                           ;pin_manager.c: 102: ODCOND = 0x00;
  6521  00281C  0E00               	movlw	0
  6522  00281E  6F24               	movwf	36,b	;volatile
  6523                           
  6524                           ; BSR set to: 15
  6525                           ;pin_manager.c: 111: INT0PPSbits.INT0PPS = 0x08;
  6526  002820  010E               	movlb	14	; () banked
  6527  002822  91A1               	bcf	161,0,b	;volatile
  6528  002824  93A1               	bcf	161,1,b	;volatile
  6529  002826  95A1               	bcf	161,2,b	;volatile
  6530  002828  87A1               	bsf	161,3,b	;volatile
  6531  00282A  99A1               	bcf	161,4,b	;volatile
  6532                           
  6533                           ; BSR set to: 14
  6534                           ;pin_manager.c: 112: RX1PPSbits.RXPPS = 0x17;
  6535  00282C  81B5               	bsf	181,0,b	;volatile
  6536  00282E  83B5               	bsf	181,1,b	;volatile
  6537  002830  85B5               	bsf	181,2,b	;volatile
  6538  002832  97B5               	bcf	181,3,b	;volatile
  6539  002834  89B5               	bsf	181,4,b	;volatile
  6540                           
  6541                           ;pin_manager.c: 113: RC6PPS = 0x09;
  6542  002836  0E09               	movlw	9
  6543  002838  6FFD               	movwf	253,b	;volatile
  6544                           
  6545                           ; BSR set to: 14
  6546  00283A  0012               	return		;funcret
  6547  00283C                     __end_of_PIN_MANAGER_Initialize:
  6548                           	opt stack 0
  6549                           tblptru	equ	0xFF8
  6550                           tblptrh	equ	0xFF7
  6551                           tblptrl	equ	0xFF6
  6552                           tablat	equ	0xFF5
  6553                           prodh	equ	0xFF4
  6554                           prodl	equ	0xFF3
  6555                           intcon	equ	0xFF2
  6556                           postinc0	equ	0xFEE
  6557                           wreg	equ	0xFE8
  6558                           indf2	equ	0xFDF
  6559                           postinc2	equ	0xFDE
  6560                           postdec2	equ	0xFDD
  6561                           fsr2h	equ	0xFDA
  6562                           fsr2l	equ	0xFD9
  6563                           status	equ	0xFD8
  6564                           
  6565 ;; *************** function _OSCILLATOR_Initialize *****************
  6566 ;; Defined at:
  6567 ;;		line 61 in file "mcc_generated_files/mcc.c"
  6568 ;; Parameters:    Size  Location     Type
  6569 ;;		None
  6570 ;; Auto vars:     Size  Location     Type
  6571 ;;		None
  6572 ;; Return value:  Size  Location     Type
  6573 ;;                  1    wreg      void 
  6574 ;; Registers used:
  6575 ;;		wreg, status,2
  6576 ;; Tracked objects:
  6577 ;;		On entry : 0/0
  6578 ;;		On exit  : 0/0
  6579 ;;		Unchanged: 0/0
  6580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6585 ;;Total ram usage:        0 bytes
  6586 ;; Hardware stack levels used:    1
  6587 ;; Hardware stack levels required when called:    6
  6588 ;; This function calls:
  6589 ;;		Nothing
  6590 ;; This function is called by:
  6591 ;;		_SYSTEM_Initialize
  6592 ;; This function uses a non-reentrant model
  6593 ;;
  6594                           
  6595                           	psect	text26
  6596  002D60                     __ptext26:
  6597                           	opt stack 0
  6598  002D60                     _OSCILLATOR_Initialize:
  6599                           	opt stack 23
  6600                           
  6601                           ;mcc.c: 64: OSCCON1 = 0x60;
  6602                           
  6603                           ; BSR set to: 14
  6604                           ;incstack = 0
  6605  002D60  0E60               	movlw	96
  6606  002D62  010E               	movlb	14	; () banked
  6607  002D64  6FD8               	movwf	216,b	;volatile
  6608                           
  6609                           ;mcc.c: 66: OSCCON3 = 0x00;
  6610  002D66  0E00               	movlw	0
  6611  002D68  6FDA               	movwf	218,b	;volatile
  6612                           
  6613                           ;mcc.c: 68: OSCEN = 0x00;
  6614  002D6A  0E00               	movlw	0
  6615  002D6C  6FDC               	movwf	220,b	;volatile
  6616                           
  6617                           ;mcc.c: 70: OSCFRQ = 0x06;
  6618  002D6E  0E06               	movlw	6
  6619  002D70  6FDE               	movwf	222,b	;volatile
  6620                           
  6621                           ;mcc.c: 72: OSCTUNE = 0x00;
  6622  002D72  0E00               	movlw	0
  6623  002D74  6FDD               	movwf	221,b	;volatile
  6624                           
  6625                           ; BSR set to: 14
  6626  002D76  0012               	return		;funcret
  6627  002D78                     __end_of_OSCILLATOR_Initialize:
  6628                           	opt stack 0
  6629                           tblptru	equ	0xFF8
  6630                           tblptrh	equ	0xFF7
  6631                           tblptrl	equ	0xFF6
  6632                           tablat	equ	0xFF5
  6633                           prodh	equ	0xFF4
  6634                           prodl	equ	0xFF3
  6635                           intcon	equ	0xFF2
  6636                           postinc0	equ	0xFEE
  6637                           wreg	equ	0xFE8
  6638                           indf2	equ	0xFDF
  6639                           postinc2	equ	0xFDE
  6640                           postdec2	equ	0xFDD
  6641                           fsr2h	equ	0xFDA
  6642                           fsr2l	equ	0xFD9
  6643                           status	equ	0xFD8
  6644                           
  6645 ;; *************** function _INTERRUPT_Initialize *****************
  6646 ;; Defined at:
  6647 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;		None
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;		None
  6652 ;; Return value:  Size  Location     Type
  6653 ;;                  1    wreg      void 
  6654 ;; Registers used:
  6655 ;;		None
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6665 ;;Total ram usage:        0 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    6
  6668 ;; This function calls:
  6669 ;;		Nothing
  6670 ;; This function is called by:
  6671 ;;		_SYSTEM_Initialize
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           	psect	text27
  6676  002DB0                     __ptext27:
  6677                           	opt stack 0
  6678  002DB0                     _INTERRUPT_Initialize:
  6679                           	opt stack 23
  6680                           
  6681                           ;interrupt_manager.c: 55: INTCONbits.IPEN = 0;
  6682                           
  6683                           ; BSR set to: 14
  6684                           ;incstack = 0
  6685  002DB0  9AF2               	bcf	intcon,5,c	;volatile
  6686  002DB2  0012               	return		;funcret
  6687  002DB4                     __end_of_INTERRUPT_Initialize:
  6688                           	opt stack 0
  6689                           tblptru	equ	0xFF8
  6690                           tblptrh	equ	0xFF7
  6691                           tblptrl	equ	0xFF6
  6692                           tablat	equ	0xFF5
  6693                           prodh	equ	0xFF4
  6694                           prodl	equ	0xFF3
  6695                           intcon	equ	0xFF2
  6696                           postinc0	equ	0xFEE
  6697                           wreg	equ	0xFE8
  6698                           indf2	equ	0xFDF
  6699                           postinc2	equ	0xFDE
  6700                           postdec2	equ	0xFDD
  6701                           fsr2h	equ	0xFDA
  6702                           fsr2l	equ	0xFD9
  6703                           status	equ	0xFD8
  6704                           
  6705 ;; *************** function _EXT_INT_Initialize *****************
  6706 ;; Defined at:
  6707 ;;		line 59 in file "mcc_generated_files/ext_int.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;		None
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;		None
  6712 ;; Return value:  Size  Location     Type
  6713 ;;                  1    wreg      void 
  6714 ;; Registers used:
  6715 ;;		wreg, status,2, status,0, cstack
  6716 ;; Tracked objects:
  6717 ;;		On entry : 0/0
  6718 ;;		On exit  : 0/0
  6719 ;;		Unchanged: 0/0
  6720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6725 ;;Total ram usage:        0 bytes
  6726 ;; Hardware stack levels used:    1
  6727 ;; Hardware stack levels required when called:    7
  6728 ;; This function calls:
  6729 ;;		_INT0_SetInterruptHandler
  6730 ;; This function is called by:
  6731 ;;		_SYSTEM_Initialize
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           	psect	text28
  6736  002D0A                     __ptext28:
  6737                           	opt stack 0
  6738  002D0A                     _EXT_INT_Initialize:
  6739                           	opt stack 22
  6740                           
  6741                           ;ext_int.c: 64: (PIR0bits.INT0IF = 0);
  6742                           
  6743                           ;incstack = 0
  6744  002D0A  010E               	movlb	14	; () banked
  6745  002D0C  91CA               	bcf	202,0,b	;volatile
  6746                           
  6747                           ;ext_int.c: 65: (INTCONbits.INT0EDG = 1);
  6748  002D0E  80F2               	bsf	intcon,0,c	;volatile
  6749                           
  6750                           ; BSR set to: 14
  6751                           ;ext_int.c: 67: INT0_SetInterruptHandler(INT0_DefaultInterruptHandler);
  6752  002D10  0EBC               	movlw	low _INT0_DefaultInterruptHandler
  6753  002D12  0100               	movlb	0	; () banked
  6754  002D14  6F60               	movwf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  6755  002D16  0E2D               	movlw	high _INT0_DefaultInterruptHandler
  6756  002D18  6F61               	movwf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  6757  002D1A  0E00               	movlw	low (_INT0_DefaultInterruptHandler shr (0+16))
  6758  002D1C  6F62               	movwf	(INT0_SetInterruptHandler@InterruptHandler+2)& (0+255),b
  6759  002D1E  ECBC  F016         	call	_INT0_SetInterruptHandler	;wreg free
  6760                           
  6761                           ;ext_int.c: 68: (PIE0bits.INT0IE = 1);
  6762  002D22  010E               	movlb	14	; () banked
  6763  002D24  81C2               	bsf	194,0,b	;volatile
  6764                           
  6765                           ; BSR set to: 14
  6766  002D26  0012               	return		;funcret
  6767  002D28                     __end_of_EXT_INT_Initialize:
  6768                           	opt stack 0
  6769                           tblptru	equ	0xFF8
  6770                           tblptrh	equ	0xFF7
  6771                           tblptrl	equ	0xFF6
  6772                           tablat	equ	0xFF5
  6773                           prodh	equ	0xFF4
  6774                           prodl	equ	0xFF3
  6775                           intcon	equ	0xFF2
  6776                           postinc0	equ	0xFEE
  6777                           wreg	equ	0xFE8
  6778                           indf2	equ	0xFDF
  6779                           postinc2	equ	0xFDE
  6780                           postdec2	equ	0xFDD
  6781                           fsr2h	equ	0xFDA
  6782                           fsr2l	equ	0xFD9
  6783                           status	equ	0xFD8
  6784                           
  6785 ;; *************** function _INT0_SetInterruptHandler *****************
  6786 ;; Defined at:
  6787 ;;		line 50 in file "mcc_generated_files/ext_int.c"
  6788 ;; Parameters:    Size  Location     Type
  6789 ;;  InterruptHan    3    0[BANK0 ] PTR FTN()void 
  6790 ;;		 -> echoChanged(1), INT0_DefaultInterruptHandler(1), 
  6791 ;; Auto vars:     Size  Location     Type
  6792 ;;		None
  6793 ;; Return value:  Size  Location     Type
  6794 ;;                  1    wreg      void 
  6795 ;; Registers used:
  6796 ;;		wreg, status,2, status,0
  6797 ;; Tracked objects:
  6798 ;;		On entry : 0/0
  6799 ;;		On exit  : 0/0
  6800 ;;		Unchanged: 0/0
  6801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6802 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6805 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6806 ;;Total ram usage:        3 bytes
  6807 ;; Hardware stack levels used:    1
  6808 ;; Hardware stack levels required when called:    6
  6809 ;; This function calls:
  6810 ;;		Nothing
  6811 ;; This function is called by:
  6812 ;;		_EXT_INT_Initialize
  6813 ;;		_main
  6814 ;; This function uses a non-reentrant model
  6815 ;;
  6816                           
  6817                           	psect	text29
  6818  002D78                     __ptext29:
  6819                           	opt stack 0
  6820  002D78                     _INT0_SetInterruptHandler:
  6821                           	opt stack 22
  6822                           
  6823                           ;ext_int.c: 51: INT0_InterruptHandler = InterruptHandler;
  6824                           
  6825                           ; BSR set to: 14
  6826                           ;incstack = 0
  6827  002D78  C060  F056         	movff	INT0_SetInterruptHandler@InterruptHandler,_INT0_InterruptHandler
  6828  002D7C  C061  F057         	movff	INT0_SetInterruptHandler@InterruptHandler+1,_INT0_InterruptHandler+1
  6829  002D80  C062  F058         	movff	INT0_SetInterruptHandler@InterruptHandler+2,_INT0_InterruptHandler+2
  6830  002D84  0012               	return		;funcret
  6831  002D86                     __end_of_INT0_SetInterruptHandler:
  6832                           	opt stack 0
  6833                           tblptru	equ	0xFF8
  6834                           tblptrh	equ	0xFF7
  6835                           tblptrl	equ	0xFF6
  6836                           tablat	equ	0xFF5
  6837                           prodh	equ	0xFF4
  6838                           prodl	equ	0xFF3
  6839                           intcon	equ	0xFF2
  6840                           postinc0	equ	0xFEE
  6841                           wreg	equ	0xFE8
  6842                           indf2	equ	0xFDF
  6843                           postinc2	equ	0xFDE
  6844                           postdec2	equ	0xFDD
  6845                           fsr2h	equ	0xFDA
  6846                           fsr2l	equ	0xFD9
  6847                           status	equ	0xFD8
  6848                           
  6849 ;; *************** function _EUSART1_Initialize *****************
  6850 ;; Defined at:
  6851 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;		None
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;		None
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      void 
  6858 ;; Registers used:
  6859 ;;		wreg, status,2, status,0, cstack
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6869 ;;Total ram usage:        0 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:    7
  6872 ;; This function calls:
  6873 ;;		_EUSART1_SetRxInterruptHandler
  6874 ;;		_EUSART1_SetTxInterruptHandler
  6875 ;; This function is called by:
  6876 ;;		_SYSTEM_Initialize
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           	psect	text30
  6881  002A02                     __ptext30:
  6882                           	opt stack 0
  6883  002A02                     _EUSART1_Initialize:
  6884                           	opt stack 22
  6885                           
  6886                           ;eusart1.c: 78: PIE3bits.RC1IE = 0;
  6887                           
  6888                           ;incstack = 0
  6889  002A02  010E               	movlb	14	; () banked
  6890  002A04  9BC5               	bcf	197,5,b	;volatile
  6891                           
  6892                           ; BSR set to: 14
  6893                           ;eusart1.c: 79: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  6894  002A06  0EE8               	movlw	low _EUSART1_Receive_ISR
  6895  002A08  0100               	movlb	0	; () banked
  6896  002A0A  6F60               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler& (0+255),b
  6897  002A0C  0E2B               	movlw	high _EUSART1_Receive_ISR
  6898  002A0E  6F61               	movwf	(EUSART1_SetRxInterruptHandler@interruptHandler+1)& (0+255),b
  6899  002A10  0E00               	movlw	low (_EUSART1_Receive_ISR shr (0+16))
  6900  002A12  6F62               	movwf	(EUSART1_SetRxInterruptHandler@interruptHandler+2)& (0+255),b
  6901  002A14  ECCA  F016         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  6902                           
  6903                           ;eusart1.c: 80: PIE3bits.TX1IE = 0;
  6904  002A18  010E               	movlb	14	; () banked
  6905  002A1A  99C5               	bcf	197,4,b	;volatile
  6906                           
  6907                           ;eusart1.c: 81: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  6908  002A1C  0EB6               	movlw	low _EUSART1_Transmit_ISR
  6909  002A1E  0100               	movlb	0	; () banked
  6910  002A20  6F60               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler& (0+255),b
  6911  002A22  0E2B               	movlw	high _EUSART1_Transmit_ISR
  6912  002A24  6F61               	movwf	(EUSART1_SetTxInterruptHandler@interruptHandler+1)& (0+255),b
  6913  002A26  0E00               	movlw	low (_EUSART1_Transmit_ISR shr (0+16))
  6914  002A28  6F62               	movwf	(EUSART1_SetTxInterruptHandler@interruptHandler+2)& (0+255),b
  6915  002A2A  ECC3  F016         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  6916                           
  6917                           ;eusart1.c: 85: BAUD1CON = 0x08;
  6918  002A2E  0E08               	movlw	8
  6919  002A30  6E9F               	movwf	3999,c	;volatile
  6920                           
  6921                           ;eusart1.c: 88: RC1STA = 0x90;
  6922  002A32  0E90               	movlw	144
  6923  002A34  6E9D               	movwf	3997,c	;volatile
  6924                           
  6925                           ;eusart1.c: 91: TX1STA = 0x24;
  6926  002A36  0E24               	movlw	36
  6927  002A38  6E9E               	movwf	3998,c	;volatile
  6928                           
  6929                           ;eusart1.c: 94: SP1BRGL = 0x40;
  6930  002A3A  0E40               	movlw	64
  6931  002A3C  6E9B               	movwf	3995,c	;volatile
  6932                           
  6933                           ;eusart1.c: 97: SP1BRGH = 0x03;
  6934  002A3E  0E03               	movlw	3
  6935  002A40  6E9C               	movwf	3996,c	;volatile
  6936                           
  6937                           ;eusart1.c: 101: eusart1TxHead = 0;
  6938  002A42  0E00               	movlw	0
  6939  002A44  0100               	movlb	0	; () banked
  6940  002A46  6FC8               	movwf	_eusart1TxHead& (0+255),b	;volatile
  6941                           
  6942                           ; BSR set to: 0
  6943                           ;eusart1.c: 102: eusart1TxTail = 0;
  6944  002A48  0E00               	movlw	0
  6945  002A4A  6FC7               	movwf	_eusart1TxTail& (0+255),b	;volatile
  6946                           
  6947                           ; BSR set to: 0
  6948                           ;eusart1.c: 103: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  6949  002A4C  0E08               	movlw	8
  6950  002A4E  6FE9               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  6951                           
  6952                           ; BSR set to: 0
  6953                           ;eusart1.c: 105: eusart1RxHead = 0;
  6954  002A50  0E00               	movlw	0
  6955  002A52  6FC6               	movwf	_eusart1RxHead& (0+255),b	;volatile
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;eusart1.c: 106: eusart1RxTail = 0;
  6959  002A54  0E00               	movlw	0
  6960  002A56  6E4F               	movwf	_eusart1RxTail,c	;volatile
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;eusart1.c: 107: eusart1RxCount = 0;
  6964  002A58  0E00               	movlw	0
  6965  002A5A  6E4E               	movwf	_eusart1RxCount,c	;volatile
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;eusart1.c: 110: PIE3bits.RC1IE = 1;
  6969  002A5C  010E               	movlb	14	; () banked
  6970  002A5E  8BC5               	bsf	197,5,b	;volatile
  6971                           
  6972                           ; BSR set to: 14
  6973  002A60  0012               	return		;funcret
  6974  002A62                     __end_of_EUSART1_Initialize:
  6975                           	opt stack 0
  6976                           tblptru	equ	0xFF8
  6977                           tblptrh	equ	0xFF7
  6978                           tblptrl	equ	0xFF6
  6979                           tablat	equ	0xFF5
  6980                           prodh	equ	0xFF4
  6981                           prodl	equ	0xFF3
  6982                           intcon	equ	0xFF2
  6983                           postinc0	equ	0xFEE
  6984                           wreg	equ	0xFE8
  6985                           indf2	equ	0xFDF
  6986                           postinc2	equ	0xFDE
  6987                           postdec2	equ	0xFDD
  6988                           fsr2h	equ	0xFDA
  6989                           fsr2l	equ	0xFD9
  6990                           status	equ	0xFD8
  6991                           
  6992 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  6993 ;; Defined at:
  6994 ;;		line 211 in file "mcc_generated_files/eusart1.c"
  6995 ;; Parameters:    Size  Location     Type
  6996 ;;  interruptHan    3    0[BANK0 ] PTR FTN()void 
  6997 ;;		 -> EUSART1_Transmit_ISR(1), 
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;		None
  7000 ;; Return value:  Size  Location     Type
  7001 ;;                  1    wreg      void 
  7002 ;; Registers used:
  7003 ;;		wreg, status,2, status,0
  7004 ;; Tracked objects:
  7005 ;;		On entry : 0/0
  7006 ;;		On exit  : 0/0
  7007 ;;		Unchanged: 0/0
  7008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7009 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7012 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7013 ;;Total ram usage:        3 bytes
  7014 ;; Hardware stack levels used:    1
  7015 ;; Hardware stack levels required when called:    6
  7016 ;; This function calls:
  7017 ;;		Nothing
  7018 ;; This function is called by:
  7019 ;;		_EUSART1_Initialize
  7020 ;; This function uses a non-reentrant model
  7021 ;;
  7022                           
  7023                           	psect	text31
  7024  002D86                     __ptext31:
  7025                           	opt stack 0
  7026  002D86                     _EUSART1_SetTxInterruptHandler:
  7027                           	opt stack 22
  7028                           
  7029                           ;eusart1.c: 212: EUSART1_TxDefaultInterruptHandler = interruptHandler;
  7030                           
  7031                           ; BSR set to: 14
  7032                           ;incstack = 0
  7033  002D86  C060  F053         	movff	EUSART1_SetTxInterruptHandler@interruptHandler,_EUSART1_TxDefaultInterruptHandler
  7034  002D8A  C061  F054         	movff	EUSART1_SetTxInterruptHandler@interruptHandler+1,_EUSART1_TxDefaultInterruptHandl
      +                          er+1
  7035  002D8E  C062  F055         	movff	EUSART1_SetTxInterruptHandler@interruptHandler+2,_EUSART1_TxDefaultInterruptHandl
      +                          er+2
  7036  002D92  0012               	return		;funcret
  7037  002D94                     __end_of_EUSART1_SetTxInterruptHandler:
  7038                           	opt stack 0
  7039                           tblptru	equ	0xFF8
  7040                           tblptrh	equ	0xFF7
  7041                           tblptrl	equ	0xFF6
  7042                           tablat	equ	0xFF5
  7043                           prodh	equ	0xFF4
  7044                           prodl	equ	0xFF3
  7045                           intcon	equ	0xFF2
  7046                           postinc0	equ	0xFEE
  7047                           wreg	equ	0xFE8
  7048                           indf2	equ	0xFDF
  7049                           postinc2	equ	0xFDE
  7050                           postdec2	equ	0xFDD
  7051                           fsr2h	equ	0xFDA
  7052                           fsr2l	equ	0xFD9
  7053                           status	equ	0xFD8
  7054                           
  7055 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  7056 ;; Defined at:
  7057 ;;		line 215 in file "mcc_generated_files/eusart1.c"
  7058 ;; Parameters:    Size  Location     Type
  7059 ;;  interruptHan    3    0[BANK0 ] PTR FTN()void 
  7060 ;;		 -> EUSART1_Receive_ISR(1), 
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;		None
  7063 ;; Return value:  Size  Location     Type
  7064 ;;                  1    wreg      void 
  7065 ;; Registers used:
  7066 ;;		wreg, status,2, status,0
  7067 ;; Tracked objects:
  7068 ;;		On entry : 0/0
  7069 ;;		On exit  : 0/0
  7070 ;;		Unchanged: 0/0
  7071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7072 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7075 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7076 ;;Total ram usage:        3 bytes
  7077 ;; Hardware stack levels used:    1
  7078 ;; Hardware stack levels required when called:    6
  7079 ;; This function calls:
  7080 ;;		Nothing
  7081 ;; This function is called by:
  7082 ;;		_EUSART1_Initialize
  7083 ;; This function uses a non-reentrant model
  7084 ;;
  7085                           
  7086                           	psect	text32
  7087  002D94                     __ptext32:
  7088                           	opt stack 0
  7089  002D94                     _EUSART1_SetRxInterruptHandler:
  7090                           	opt stack 22
  7091                           
  7092                           ;eusart1.c: 216: EUSART1_RxDefaultInterruptHandler = interruptHandler;
  7093                           
  7094                           ;incstack = 0
  7095  002D94  C060  F050         	movff	EUSART1_SetRxInterruptHandler@interruptHandler,_EUSART1_RxDefaultInterruptHandler
  7096  002D98  C061  F051         	movff	EUSART1_SetRxInterruptHandler@interruptHandler+1,_EUSART1_RxDefaultInterruptHandl
      +                          er+1
  7097  002D9C  C062  F052         	movff	EUSART1_SetRxInterruptHandler@interruptHandler+2,_EUSART1_RxDefaultInterruptHandl
      +                          er+2
  7098  002DA0  0012               	return		;funcret
  7099  002DA2                     __end_of_EUSART1_SetRxInterruptHandler:
  7100                           	opt stack 0
  7101                           tblptru	equ	0xFF8
  7102                           tblptrh	equ	0xFF7
  7103                           tblptrl	equ	0xFF6
  7104                           tablat	equ	0xFF5
  7105                           prodh	equ	0xFF4
  7106                           prodl	equ	0xFF3
  7107                           intcon	equ	0xFF2
  7108                           postinc0	equ	0xFEE
  7109                           wreg	equ	0xFE8
  7110                           indf2	equ	0xFDF
  7111                           postinc2	equ	0xFDE
  7112                           postdec2	equ	0xFDD
  7113                           fsr2h	equ	0xFDA
  7114                           fsr2l	equ	0xFD9
  7115                           status	equ	0xFD8
  7116                           
  7117 ;; *************** function _INTERRUPT_InterruptManager *****************
  7118 ;; Defined at:
  7119 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;		None
  7122 ;; Auto vars:     Size  Location     Type
  7123 ;;		None
  7124 ;; Return value:  Size  Location     Type
  7125 ;;                  1    wreg      void 
  7126 ;; Registers used:
  7127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  7128 ;; Tracked objects:
  7129 ;;		On entry : 0/0
  7130 ;;		On exit  : 0/0
  7131 ;;		Unchanged: 0/0
  7132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7135 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7136 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7137 ;;Total ram usage:       18 bytes
  7138 ;; Hardware stack levels used:    1
  7139 ;; Hardware stack levels required when called:    5
  7140 ;; This function calls:
  7141 ;;		Absolute function
  7142 ;;		_EUSART1_Receive_ISR
  7143 ;;		_EUSART1_Transmit_ISR
  7144 ;;		_INT0_ISR
  7145 ;; This function is called by:
  7146 ;;		Interrupt level 2
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           	psect	intcode
  7151  000008                     __pintcode:
  7152                           	opt stack 0
  7153  000008                     _INTERRUPT_InterruptManager:
  7154                           	opt stack 21
  7155                           
  7156                           ;incstack = 0
  7157  000008  825B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7158  00000A  CFFA F02A          	movff	pclath,??_INTERRUPT_InterruptManager
  7159  00000E  CFFB F02B          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7160  000012  CFE9 F02C          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7161  000016  CFEA F02D          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7162  00001A  CFE1 F02E          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7163  00001E  CFE2 F02F          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7164  000022  CFD9 F030          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7165  000026  CFDA F031          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7166  00002A  CFF3 F032          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7167  00002E  CFF4 F033          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7168  000032  CFF6 F034          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7169  000036  CFF7 F035          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7170  00003A  CFF8 F036          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7171  00003E  CFF5 F037          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7172  000042  C05B  F038         	movff	btemp,??_INTERRUPT_InterruptManager+14
  7173  000046  C05C  F039         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  7174  00004A  C05D  F03A         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  7175  00004E  C05E  F03B         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  7176                           
  7177                           ;interrupt_manager.c: 61: if(PIE0bits.INT0IE == 1 && PIR0bits.INT0IF == 1)
  7178  000052  010E               	movlb	14	; () banked
  7179  000054  B1C2               	btfsc	194,0,b	;volatile
  7180                           
  7181                           ; BSR set to: 14
  7182  000056  A1CA               	btfss	202,0,b	;volatile
  7183  000058  D003               	goto	i2l99
  7184                           
  7185                           ; BSR set to: 14
  7186                           ;interrupt_manager.c: 62: {
  7187                           ;interrupt_manager.c: 63: INT0_ISR();
  7188  00005A  ECD1  F016         	call	_INT0_ISR	;wreg free
  7189                           
  7190                           ;interrupt_manager.c: 64: }
  7191  00005E  D01E               	goto	i2u320_49
  7192  000060                     i2l99:
  7193                           
  7194                           ; BSR set to: 14
  7195                           ;interrupt_manager.c: 65: else if(INTCONbits.PEIE == 1)
  7196  000060  ACF2               	btfss	intcon,6,c	;volatile
  7197  000062  D01C               	goto	i2u320_49
  7198                           
  7199                           ; BSR set to: 14
  7200                           ;interrupt_manager.c: 66: {
  7201                           ;interrupt_manager.c: 67: if(PIE3bits.TX1IE == 1 && PIR3bits.TX1IF == 1)
  7202  000064  B9C5               	btfsc	197,4,b	;volatile
  7203                           
  7204                           ; BSR set to: 14
  7205  000066  A9CD               	btfss	205,4,b	;volatile
  7206  000068  D00A               	goto	i2l102
  7207                           
  7208                           ; BSR set to: 14
  7209                           ;interrupt_manager.c: 68: {
  7210                           ;interrupt_manager.c: 69: EUSART1_TxDefaultInterruptHandler();
  7211  00006A  D801               	call	i2u317_48
  7212  00006C  D017               	goto	i2u320_49
  7213  00006E                     i2u317_48:
  7214  00006E  0005               	push	
  7215  000070  6EFA               	movwf	pclath,c
  7216  000072  5053               	movf	_EUSART1_TxDefaultInterruptHandler,w,c
  7217  000074  6EFD               	movwf	tosl,c
  7218  000076  5054               	movf	_EUSART1_TxDefaultInterruptHandler+1,w,c
  7219  000078  6EFE               	movwf	tosh,c
  7220  00007A  5055               	movf	_EUSART1_TxDefaultInterruptHandler+2,w,c
  7221  00007C  D00C               	goto	L3
  7222  00007E                     i2l102:
  7223                           
  7224                           ; BSR set to: 14
  7225                           ;interrupt_manager.c: 71: else if(PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1)
  7226  00007E  BBC5               	btfsc	197,5,b	;volatile
  7227                           
  7228                           ; BSR set to: 14
  7229  000080  ABCD               	btfss	205,5,b	;volatile
  7230  000082  D00C               	goto	i2u320_49
  7231                           
  7232                           ; BSR set to: 14
  7233                           ;interrupt_manager.c: 72: {
  7234                           ;interrupt_manager.c: 73: EUSART1_RxDefaultInterruptHandler();
  7235  000084  D801               	call	i2u320_48
  7236  000086  D00A               	goto	i2u320_49
  7237  000088                     i2u320_48:
  7238  000088  0005               	push	
  7239  00008A  6EFA               	movwf	pclath,c
  7240  00008C  5050               	movf	_EUSART1_RxDefaultInterruptHandler,w,c
  7241  00008E  6EFD               	movwf	tosl,c
  7242  000090  5051               	movf	_EUSART1_RxDefaultInterruptHandler+1,w,c
  7243  000092  6EFE               	movwf	tosh,c
  7244  000094  5052               	movf	_EUSART1_RxDefaultInterruptHandler+2,w,c
  7245  000096                     L3:
  7246  000096  6EFF               	movwf	tosu,c
  7247  000098  50FA               	movf	pclath,w,c
  7248  00009A  0012               	return		;indir
  7249  00009C                     i2u320_49:
  7250                           
  7251                           ;interrupt_manager.c: 80: else
  7252                           ;interrupt_manager.c: 81: {
  7253                           
  7254                           ;interrupt_manager.c: 78: }
  7255                           ;interrupt_manager.c: 79: }
  7256                           
  7257                           ;interrupt_manager.c: 75: else
  7258                           ;interrupt_manager.c: 76: {
  7259                           
  7260                           ;interrupt_manager.c: 74: }
  7261  00009C  C03B  F05E         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  7262  0000A0  C03A  F05D         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  7263  0000A4  C039  F05C         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  7264  0000A8  C038  F05B         	movff	??_INTERRUPT_InterruptManager+14,btemp
  7265  0000AC  C037  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7266  0000B0  C036  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7267  0000B4  C035  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7268  0000B8  C034  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7269  0000BC  C033  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7270  0000C0  C032  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7271  0000C4  C031  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7272  0000C8  C030  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7273  0000CC  C02F  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7274  0000D0  C02E  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7275  0000D4  C02D  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7276  0000D8  C02C  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7277  0000DC  C02B  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7278  0000E0  C02A  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7279  0000E4  925B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7280  0000E6  0011               	retfie		f
  7281  0000E8                     __end_of_INTERRUPT_InterruptManager:
  7282                           	opt stack 0
  7283                           tosu	equ	0xFFF
  7284                           tosh	equ	0xFFE
  7285                           tosl	equ	0xFFD
  7286                           pclatu	equ	0xFFB
  7287                           pclath	equ	0xFFA
  7288                           tblptru	equ	0xFF8
  7289                           tblptrh	equ	0xFF7
  7290                           tblptrl	equ	0xFF6
  7291                           tablat	equ	0xFF5
  7292                           prodh	equ	0xFF4
  7293                           prodl	equ	0xFF3
  7294                           intcon	equ	0xFF2
  7295                           postinc0	equ	0xFEE
  7296                           fsr0h	equ	0xFEA
  7297                           fsr0l	equ	0xFE9
  7298                           wreg	equ	0xFE8
  7299                           fsr1h	equ	0xFE2
  7300                           fsr1l	equ	0xFE1
  7301                           indf2	equ	0xFDF
  7302                           postinc2	equ	0xFDE
  7303                           postdec2	equ	0xFDD
  7304                           fsr2h	equ	0xFDA
  7305                           fsr2l	equ	0xFD9
  7306                           status	equ	0xFD8
  7307                           
  7308 ;; *************** function _INT0_ISR *****************
  7309 ;; Defined at:
  7310 ;;		line 32 in file "mcc_generated_files/ext_int.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;		None
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;		None
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  1    wreg      void 
  7317 ;; Registers used:
  7318 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7328 ;;Total ram usage:        0 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    4
  7331 ;; This function calls:
  7332 ;;		_INT0_CallBack
  7333 ;; This function is called by:
  7334 ;;		_INTERRUPT_InterruptManager
  7335 ;; This function uses a non-reentrant model
  7336 ;;
  7337                           
  7338                           	psect	text34
  7339  002DA2                     __ptext34:
  7340                           	opt stack 0
  7341  002DA2                     _INT0_ISR:
  7342                           	opt stack 21
  7343                           
  7344                           ;ext_int.c: 34: (PIR0bits.INT0IF = 0);
  7345                           
  7346                           ;incstack = 0
  7347  002DA2  010E               	movlb	14	; () banked
  7348  002DA4  91CA               	bcf	202,0,b	;volatile
  7349                           
  7350                           ; BSR set to: 14
  7351                           ;ext_int.c: 37: INT0_CallBack();
  7352  002DA6  EC55  F016         	call	_INT0_CallBack	;wreg free
  7353  002DAA  0012               	return		;funcret
  7354  002DAC                     __end_of_INT0_ISR:
  7355                           	opt stack 0
  7356                           tosu	equ	0xFFF
  7357                           tosh	equ	0xFFE
  7358                           tosl	equ	0xFFD
  7359                           pclatu	equ	0xFFB
  7360                           pclath	equ	0xFFA
  7361                           tblptru	equ	0xFF8
  7362                           tblptrh	equ	0xFF7
  7363                           tblptrl	equ	0xFF6
  7364                           tablat	equ	0xFF5
  7365                           prodh	equ	0xFF4
  7366                           prodl	equ	0xFF3
  7367                           intcon	equ	0xFF2
  7368                           postinc0	equ	0xFEE
  7369                           fsr0h	equ	0xFEA
  7370                           fsr0l	equ	0xFE9
  7371                           wreg	equ	0xFE8
  7372                           fsr1h	equ	0xFE2
  7373                           fsr1l	equ	0xFE1
  7374                           indf2	equ	0xFDF
  7375                           postinc2	equ	0xFDE
  7376                           postdec2	equ	0xFDD
  7377                           fsr2h	equ	0xFDA
  7378                           fsr2l	equ	0xFD9
  7379                           status	equ	0xFD8
  7380                           
  7381 ;; *************** function _INT0_CallBack *****************
  7382 ;; Defined at:
  7383 ;;		line 41 in file "mcc_generated_files/ext_int.c"
  7384 ;; Parameters:    Size  Location     Type
  7385 ;;		None
  7386 ;; Auto vars:     Size  Location     Type
  7387 ;;		None
  7388 ;; Return value:  Size  Location     Type
  7389 ;;                  1    wreg      void 
  7390 ;; Registers used:
  7391 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  7392 ;; Tracked objects:
  7393 ;;		On entry : 0/0
  7394 ;;		On exit  : 0/0
  7395 ;;		Unchanged: 0/0
  7396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7401 ;;Total ram usage:        0 bytes
  7402 ;; Hardware stack levels used:    1
  7403 ;; Hardware stack levels required when called:    3
  7404 ;; This function calls:
  7405 ;;		Absolute function
  7406 ;;		_INT0_DefaultInterruptHandler
  7407 ;;		_echoChanged
  7408 ;; This function is called by:
  7409 ;;		_INT0_ISR
  7410 ;; This function uses a non-reentrant model
  7411 ;;
  7412                           
  7413                           	psect	text35
  7414  002CAA                     __ptext35:
  7415                           	opt stack 0
  7416  002CAA                     _INT0_CallBack:
  7417                           	opt stack 21
  7418                           
  7419                           ;ext_int.c: 44: if(INT0_InterruptHandler)
  7420                           
  7421                           ;incstack = 0
  7422  002CAA  5056               	movf	_INT0_InterruptHandler,w,c
  7423  002CAC  1057               	iorwf	_INT0_InterruptHandler+1,w,c
  7424  002CAE  1058               	iorwf	_INT0_InterruptHandler+2,w,c
  7425  002CB0  B4D8               	btfsc	status,2,c
  7426  002CB2  0012               	return	
  7427                           
  7428                           ;ext_int.c: 45: {
  7429                           ;ext_int.c: 46: INT0_InterruptHandler();
  7430  002CB4  D801               	call	i2u234_48
  7431  002CB6  0012               	return	
  7432  002CB8                     i2u234_48:
  7433  002CB8  0005               	push	
  7434  002CBA  6EFA               	movwf	pclath,c
  7435  002CBC  5056               	movf	_INT0_InterruptHandler,w,c
  7436  002CBE  6EFD               	movwf	tosl,c
  7437  002CC0  5057               	movf	_INT0_InterruptHandler+1,w,c
  7438  002CC2  6EFE               	movwf	tosh,c
  7439  002CC4  5058               	movf	_INT0_InterruptHandler+2,w,c
  7440  002CC6  6EFF               	movwf	tosu,c
  7441  002CC8  50FA               	movf	pclath,w,c
  7442  002CCA  0012               	return		;indir
  7443  002CCC                     __end_of_INT0_CallBack:
  7444                           	opt stack 0
  7445                           tosu	equ	0xFFF
  7446                           tosh	equ	0xFFE
  7447                           tosl	equ	0xFFD
  7448                           pclatu	equ	0xFFB
  7449                           pclath	equ	0xFFA
  7450                           tblptru	equ	0xFF8
  7451                           tblptrh	equ	0xFF7
  7452                           tblptrl	equ	0xFF6
  7453                           tablat	equ	0xFF5
  7454                           prodh	equ	0xFF4
  7455                           prodl	equ	0xFF3
  7456                           intcon	equ	0xFF2
  7457                           postinc0	equ	0xFEE
  7458                           fsr0h	equ	0xFEA
  7459                           fsr0l	equ	0xFE9
  7460                           wreg	equ	0xFE8
  7461                           fsr1h	equ	0xFE2
  7462                           fsr1l	equ	0xFE1
  7463                           indf2	equ	0xFDF
  7464                           postinc2	equ	0xFDE
  7465                           postdec2	equ	0xFDD
  7466                           fsr2h	equ	0xFDA
  7467                           fsr2l	equ	0xFD9
  7468                           status	equ	0xFD8
  7469                           
  7470 ;; *************** function _INT0_DefaultInterruptHandler *****************
  7471 ;; Defined at:
  7472 ;;		line 54 in file "mcc_generated_files/ext_int.c"
  7473 ;; Parameters:    Size  Location     Type
  7474 ;;		None
  7475 ;; Auto vars:     Size  Location     Type
  7476 ;;		None
  7477 ;; Return value:  Size  Location     Type
  7478 ;;                  1    wreg      void 
  7479 ;; Registers used:
  7480 ;;		None
  7481 ;; Tracked objects:
  7482 ;;		On entry : 0/0
  7483 ;;		On exit  : 0/0
  7484 ;;		Unchanged: 0/0
  7485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7490 ;;Total ram usage:        0 bytes
  7491 ;; Hardware stack levels used:    1
  7492 ;; This function calls:
  7493 ;;		Nothing
  7494 ;; This function is called by:
  7495 ;;		_EXT_INT_Initialize
  7496 ;;		_INT0_CallBack
  7497 ;; This function uses a non-reentrant model
  7498 ;;
  7499                           
  7500                           	psect	text36
  7501  002DBC                     __ptext36:
  7502                           	opt stack 0
  7503  002DBC                     _INT0_DefaultInterruptHandler:
  7504                           	opt stack 23
  7505                           
  7506                           ;incstack = 0
  7507  002DBC  0012               	return		;funcret
  7508  002DBE                     __end_of_INT0_DefaultInterruptHandler:
  7509                           	opt stack 0
  7510                           tosu	equ	0xFFF
  7511                           tosh	equ	0xFFE
  7512                           tosl	equ	0xFFD
  7513                           pclatu	equ	0xFFB
  7514                           pclath	equ	0xFFA
  7515                           tblptru	equ	0xFF8
  7516                           tblptrh	equ	0xFF7
  7517                           tblptrl	equ	0xFF6
  7518                           tablat	equ	0xFF5
  7519                           prodh	equ	0xFF4
  7520                           prodl	equ	0xFF3
  7521                           intcon	equ	0xFF2
  7522                           postinc0	equ	0xFEE
  7523                           fsr0h	equ	0xFEA
  7524                           fsr0l	equ	0xFE9
  7525                           wreg	equ	0xFE8
  7526                           fsr1h	equ	0xFE2
  7527                           fsr1l	equ	0xFE1
  7528                           indf2	equ	0xFDF
  7529                           postinc2	equ	0xFDE
  7530                           postdec2	equ	0xFDD
  7531                           fsr2h	equ	0xFDA
  7532                           fsr2l	equ	0xFD9
  7533                           status	equ	0xFD8
  7534                           
  7535 ;; *************** function _echoChanged *****************
  7536 ;; Defined at:
  7537 ;;		line 94 in file "main.c"
  7538 ;; Parameters:    Size  Location     Type
  7539 ;;		None
  7540 ;; Auto vars:     Size  Location     Type
  7541 ;;		None
  7542 ;; Return value:  Size  Location     Type
  7543 ;;                  1    wreg      void 
  7544 ;; Registers used:
  7545 ;;		wreg, status,2, status,0, cstack
  7546 ;; Tracked objects:
  7547 ;;		On entry : 0/0
  7548 ;;		On exit  : 0/0
  7549 ;;		Unchanged: 0/0
  7550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7555 ;;Total ram usage:        0 bytes
  7556 ;; Hardware stack levels used:    1
  7557 ;; Hardware stack levels required when called:    2
  7558 ;; This function calls:
  7559 ;;		_TMR5_ReadTimer
  7560 ;;		_TMR5_StartTimer
  7561 ;;		_TMR5_WriteTimer
  7562 ;;		___lwtoft
  7563 ;;		i2_TMR5_StopTimer
  7564 ;;		i2___ftmul
  7565 ;;		i2___fttol
  7566 ;; This function is called by:
  7567 ;;		_main
  7568 ;;		_INT0_CallBack
  7569 ;; This function uses a non-reentrant model
  7570 ;;
  7571                           
  7572                           	psect	text37
  7573  00283C                     __ptext37:
  7574                           	opt stack 0
  7575  00283C                     _echoChanged:
  7576                           	opt stack 21
  7577                           
  7578                           ;main.c: 96: if (INTCONbits.INT0EDG)
  7579                           
  7580                           ;incstack = 0
  7581  00283C  A0F2               	btfss	intcon,0,c	;volatile
  7582  00283E  D00A               	goto	i2l358
  7583                           
  7584                           ;main.c: 97: {
  7585                           ;main.c: 98: INTCONbits.INT0EDG = 0;
  7586  002840  90F2               	bcf	intcon,0,c	;volatile
  7587                           
  7588                           ;main.c: 99: TMR5_WriteTimer(0);
  7589  002842  0E00               	movlw	0
  7590  002844  6E02               	movwf	TMR5_WriteTimer@timerVal+1,c
  7591  002846  0E00               	movlw	0
  7592  002848  6E01               	movwf	TMR5_WriteTimer@timerVal,c
  7593  00284A  ECA2  F016         	call	_TMR5_WriteTimer	;wreg free
  7594                           
  7595                           ;main.c: 100: TMR5_StartTimer();
  7596  00284E  ECDC  F016         	call	_TMR5_StartTimer	;wreg free
  7597                           
  7598                           ;main.c: 101: } else
  7599  002852  0012               	return	
  7600  002854                     i2l358:
  7601                           
  7602                           ;main.c: 102: {
  7603                           ;main.c: 103: INTCONbits.INT0EDG = 1;
  7604  002854  80F2               	bsf	intcon,0,c	;volatile
  7605                           
  7606                           ;main.c: 104: TMR5_StopTimer();
  7607  002856  ECDA  F016         	call	i2_TMR5_StopTimer	;wreg free
  7608                           
  7609                           ;main.c: 105: timerCount = TMR5_ReadTimer();
  7610  00285A  EC66  F016         	call	_TMR5_ReadTimer	;wreg free
  7611  00285E  C001  F04C         	movff	?_TMR5_ReadTimer,_timerCount
  7612  002862  C002  F04D         	movff	?_TMR5_ReadTimer+1,_timerCount+1
  7613                           
  7614                           ;main.c: 106: distancia = timerCount * 0.017;
  7615  002866  0E44               	movlw	68
  7616  002868  6E0F               	movwf	i2___ftmul@f2,c
  7617  00286A  0E8B               	movlw	139
  7618  00286C  6E10               	movwf	i2___ftmul@f2+1,c
  7619  00286E  0E3C               	movlw	60
  7620  002870  6E11               	movwf	i2___ftmul@f2+2,c
  7621  002872  C04C  F009         	movff	_timerCount,___lwtoft@c
  7622  002876  C04D  F00A         	movff	_timerCount+1,___lwtoft@c+1
  7623  00287A  EC32  F016         	call	___lwtoft	;wreg free
  7624  00287E  C009  F00C         	movff	?___lwtoft,i2___ftmul@f1
  7625  002882  C00A  F00D         	movff	?___lwtoft+1,i2___ftmul@f1+1
  7626  002886  C00B  F00E         	movff	?___lwtoft+2,i2___ftmul@f1+2
  7627  00288A  ECEA  F011         	call	i2___ftmul	;wreg free
  7628  00288E  C00C  F01B         	movff	?i2___ftmul,i2___fttol@f1
  7629  002892  C00D  F01C         	movff	?i2___ftmul+1,i2___fttol@f1+1
  7630  002896  C00E  F01D         	movff	?i2___ftmul+2,i2___fttol@f1+2
  7631  00289A  EC70  F011         	call	i2___fttol	;wreg free
  7632  00289E  C01B  F0C4         	movff	?i2___fttol,_distancia
  7633  0028A2  C01C  F0C5         	movff	?i2___fttol+1,_distancia+1
  7634                           
  7635                           ;main.c: 108: PORTBbits.RB1 = 1;
  7636  0028A6  828E               	bsf	3982,1,c	;volatile
  7637                           
  7638                           ;main.c: 109: _delay((unsigned long)((10)*(32000000/4000000.0)));
  7639  0028A8  0E1A               	movlw	26
  7640  0028AA                     i2u323_47:
  7641  0028AA  2EE8               	decfsz	wreg,f,c
  7642  0028AC  D7FE               	bra	i2u323_47
  7643  0028AE  D000               	nop2	
  7644                           
  7645                           ;main.c: 110: PORTBbits.RB1 = 0;
  7646  0028B0  928E               	bcf	3982,1,c	;volatile
  7647  0028B2  0012               	return	
  7648  0028B4                     __end_of_echoChanged:
  7649                           	opt stack 0
  7650                           tosu	equ	0xFFF
  7651                           tosh	equ	0xFFE
  7652                           tosl	equ	0xFFD
  7653                           pclatu	equ	0xFFB
  7654                           pclath	equ	0xFFA
  7655                           tblptru	equ	0xFF8
  7656                           tblptrh	equ	0xFF7
  7657                           tblptrl	equ	0xFF6
  7658                           tablat	equ	0xFF5
  7659                           prodh	equ	0xFF4
  7660                           prodl	equ	0xFF3
  7661                           intcon	equ	0xFF2
  7662                           postinc0	equ	0xFEE
  7663                           fsr0h	equ	0xFEA
  7664                           fsr0l	equ	0xFE9
  7665                           wreg	equ	0xFE8
  7666                           fsr1h	equ	0xFE2
  7667                           fsr1l	equ	0xFE1
  7668                           indf2	equ	0xFDF
  7669                           postinc2	equ	0xFDE
  7670                           postdec2	equ	0xFDD
  7671                           fsr2h	equ	0xFDA
  7672                           fsr2l	equ	0xFD9
  7673                           status	equ	0xFD8
  7674                           
  7675 ;; *************** function i2___fttol *****************
  7676 ;; Defined at:
  7677 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  7678 ;; Parameters:    Size  Location     Type
  7679 ;;  f1              3   26[COMRAM] float 
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;  __fttol         4   36[COMRAM] unsigned long 
  7682 ;;  __fttol         1   40[COMRAM] unsigned char 
  7683 ;;  __fttol         1   35[COMRAM] unsigned char 
  7684 ;; Return value:  Size  Location     Type
  7685 ;;                  4   26[COMRAM] long 
  7686 ;; Registers used:
  7687 ;;		wreg, status,2, status,0
  7688 ;; Tracked objects:
  7689 ;;		On entry : 0/0
  7690 ;;		On exit  : 0/0
  7691 ;;		Unchanged: 0/0
  7692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7693 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7694 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7695 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7696 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7697 ;;Total ram usage:       15 bytes
  7698 ;; Hardware stack levels used:    1
  7699 ;; This function calls:
  7700 ;;		Nothing
  7701 ;; This function is called by:
  7702 ;;		_echoChanged
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           	psect	text38
  7707  0022E0                     __ptext38:
  7708                           	opt stack 0
  7709  0022E0                     i2___fttol:
  7710                           	opt stack 22
  7711                           
  7712                           ;incstack = 0
  7713  0022E0  C01D  F01F         	movff	i2___fttol@f1+2,??i2___fttol
  7714  0022E4  6A20               	clrf	(??i2___fttol+1)& (0+255),c
  7715  0022E6  6A21               	clrf	(??i2___fttol+2)& (0+255),c
  7716  0022E8  341C               	rlcf	i2___fttol@f1+1,w,c
  7717  0022EA  361F               	rlcf	??i2___fttol& (0+255),f,c
  7718  0022EC  E301               	bnc	u185_41
  7719  0022EE  8020               	bsf	(??i2___fttol+1)& (0+255),0,c
  7720  0022F0                     u185_41:
  7721  0022F0  501F               	movf	??i2___fttol,w,c
  7722  0022F2  6E29               	movwf	i2___fttol@exp1,c
  7723  0022F4  5029               	movf	i2___fttol@exp1,w,c
  7724  0022F6  A4D8               	btfss	status,2,c
  7725  0022F8  D009               	goto	i2l796
  7726  0022FA  0E00               	movlw	0
  7727  0022FC  6E1B               	movwf	?i2___fttol,c
  7728  0022FE  0E00               	movlw	0
  7729  002300  6E1C               	movwf	?i2___fttol+1,c
  7730  002302  0E00               	movlw	0
  7731  002304  6E1D               	movwf	?i2___fttol+2,c
  7732  002306  0E00               	movlw	0
  7733  002308  6E1E               	movwf	?i2___fttol+3,c
  7734  00230A  0012               	return	
  7735  00230C                     i2l796:
  7736  00230C  0E17               	movlw	23
  7737  00230E  6E1F               	movwf	??i2___fttol& (0+255),c
  7738  002310  C01B  F020         	movff	i2___fttol@f1,??i2___fttol+1
  7739  002314  C01C  F021         	movff	i2___fttol@f1+1,??i2___fttol+2
  7740  002318  C01D  F022         	movff	i2___fttol@f1+2,??i2___fttol+3
  7741  00231C  281F               	incf	??i2___fttol,w,c
  7742  00231E  6E23               	movwf	(??i2___fttol+4)& (0+255),c
  7743  002320  D004               	goto	i2u187_40
  7744  002322                     i2u187_45:
  7745  002322  90D8               	bcf	status,0,c
  7746  002324  3222               	rrcf	??i2___fttol+3,f,c
  7747  002326  3221               	rrcf	??i2___fttol+2,f,c
  7748  002328  3220               	rrcf	??i2___fttol+1,f,c
  7749  00232A                     i2u187_40:
  7750  00232A  2E23               	decfsz	(??i2___fttol+4)& (0+255),f,c
  7751  00232C  D7FA               	goto	i2u187_45
  7752  00232E  5020               	movf	??i2___fttol+1,w,c
  7753  002330  6E24               	movwf	i2___fttol@sign1,c
  7754  002332  8E1C               	bsf	i2___fttol@f1+1,7,c
  7755  002334  0EFF               	movlw	255
  7756  002336  161B               	andwf	i2___fttol@f1,f,c
  7757  002338  0EFF               	movlw	255
  7758  00233A  161C               	andwf	i2___fttol@f1+1,f,c
  7759  00233C  0E00               	movlw	0
  7760  00233E  161D               	andwf	i2___fttol@f1+2,f,c
  7761  002340  501B               	movf	i2___fttol@f1,w,c
  7762  002342  6E25               	movwf	i2___fttol@lval,c
  7763  002344  501C               	movf	i2___fttol@f1+1,w,c
  7764  002346  6E26               	movwf	i2___fttol@lval+1,c
  7765  002348  501D               	movf	i2___fttol@f1+2,w,c
  7766  00234A  6E27               	movwf	i2___fttol@lval+2,c
  7767  00234C  6A28               	clrf	i2___fttol@lval+3,c
  7768  00234E  0E8E               	movlw	142
  7769  002350  5E29               	subwf	i2___fttol@exp1,f,c
  7770  002352  AE29               	btfss	i2___fttol@exp1,7,c
  7771  002354  D016               	goto	i2l798
  7772  002356  5029               	movf	i2___fttol@exp1,w,c
  7773  002358  0A80               	xorlw	128
  7774  00235A  0F8F               	addlw	143
  7775  00235C  B0D8               	btfsc	status,0,c
  7776  00235E  D009               	goto	i2l799
  7777  002360  0E00               	movlw	0
  7778  002362  6E1B               	movwf	?i2___fttol,c
  7779  002364  0E00               	movlw	0
  7780  002366  6E1C               	movwf	?i2___fttol+1,c
  7781  002368  0E00               	movlw	0
  7782  00236A  6E1D               	movwf	?i2___fttol+2,c
  7783  00236C  0E00               	movlw	0
  7784  00236E  6E1E               	movwf	?i2___fttol+3,c
  7785  002370  0012               	return	
  7786  002372                     i2l799:
  7787  002372  90D8               	bcf	status,0,c
  7788  002374  3228               	rrcf	i2___fttol@lval+3,f,c
  7789  002376  3227               	rrcf	i2___fttol@lval+2,f,c
  7790  002378  3226               	rrcf	i2___fttol@lval+1,f,c
  7791  00237A  3225               	rrcf	i2___fttol@lval,f,c
  7792  00237C  3E29               	incfsz	i2___fttol@exp1,f,c
  7793  00237E  D7F9               	goto	i2l799
  7794  002380  D015               	goto	i2u191_40
  7795  002382                     i2l798:
  7796  002382  0E17               	movlw	23
  7797  002384  6429               	cpfsgt	i2___fttol@exp1,c
  7798  002386  D00F               	goto	i2l804
  7799  002388  0E00               	movlw	0
  7800  00238A  6E1B               	movwf	?i2___fttol,c
  7801  00238C  0E00               	movlw	0
  7802  00238E  6E1C               	movwf	?i2___fttol+1,c
  7803  002390  0E00               	movlw	0
  7804  002392  6E1D               	movwf	?i2___fttol+2,c
  7805  002394  0E00               	movlw	0
  7806  002396  6E1E               	movwf	?i2___fttol+3,c
  7807  002398  0012               	return	
  7808  00239A  90D8               	bcf	status,0,c
  7809  00239C  3625               	rlcf	i2___fttol@lval,f,c
  7810  00239E  3626               	rlcf	i2___fttol@lval+1,f,c
  7811  0023A0  3627               	rlcf	i2___fttol@lval+2,f,c
  7812  0023A2  3628               	rlcf	i2___fttol@lval+3,f,c
  7813  0023A4  0629               	decf	i2___fttol@exp1,f,c
  7814  0023A6                     i2l804:
  7815  0023A6  5029               	movf	i2___fttol@exp1,w,c
  7816  0023A8  A4D8               	btfss	status,2,c
  7817  0023AA  D7F7               	goto	i2l805
  7818  0023AC                     i2u191_40:
  7819  0023AC  5024               	movf	i2___fttol@sign1,w,c
  7820  0023AE  B4D8               	btfsc	status,2,c
  7821  0023B0  D008               	goto	i2l807
  7822  0023B2  1E28               	comf	i2___fttol@lval+3,f,c
  7823  0023B4  1E27               	comf	i2___fttol@lval+2,f,c
  7824  0023B6  1E26               	comf	i2___fttol@lval+1,f,c
  7825  0023B8  6C25               	negf	i2___fttol@lval,c
  7826  0023BA  0E00               	movlw	0
  7827  0023BC  2226               	addwfc	i2___fttol@lval+1,f,c
  7828  0023BE  2227               	addwfc	i2___fttol@lval+2,f,c
  7829  0023C0  2228               	addwfc	i2___fttol@lval+3,f,c
  7830  0023C2                     i2l807:
  7831  0023C2  C025  F01B         	movff	i2___fttol@lval,?i2___fttol
  7832  0023C6  C026  F01C         	movff	i2___fttol@lval+1,?i2___fttol+1
  7833  0023CA  C027  F01D         	movff	i2___fttol@lval+2,?i2___fttol+2
  7834  0023CE  C028  F01E         	movff	i2___fttol@lval+3,?i2___fttol+3
  7835  0023D2  0012               	return	
  7836  0023D4                     __end_ofi2___fttol:
  7837                           	opt stack 0
  7838                           tosu	equ	0xFFF
  7839                           tosh	equ	0xFFE
  7840                           tosl	equ	0xFFD
  7841                           pclatu	equ	0xFFB
  7842                           pclath	equ	0xFFA
  7843                           tblptru	equ	0xFF8
  7844                           tblptrh	equ	0xFF7
  7845                           tblptrl	equ	0xFF6
  7846                           tablat	equ	0xFF5
  7847                           prodh	equ	0xFF4
  7848                           prodl	equ	0xFF3
  7849                           intcon	equ	0xFF2
  7850                           postinc0	equ	0xFEE
  7851                           fsr0h	equ	0xFEA
  7852                           fsr0l	equ	0xFE9
  7853                           wreg	equ	0xFE8
  7854                           fsr1h	equ	0xFE2
  7855                           fsr1l	equ	0xFE1
  7856                           indf2	equ	0xFDF
  7857                           postinc2	equ	0xFDE
  7858                           postdec2	equ	0xFDD
  7859                           fsr2h	equ	0xFDA
  7860                           fsr2l	equ	0xFD9
  7861                           status	equ	0xFD8
  7862                           
  7863 ;; *************** function i2___ftmul *****************
  7864 ;; Defined at:
  7865 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  7866 ;; Parameters:    Size  Location     Type
  7867 ;;  f1              3   11[COMRAM] float 
  7868 ;;  f2              3   14[COMRAM] float 
  7869 ;; Auto vars:     Size  Location     Type
  7870 ;;  __ftmul         3   21[COMRAM] unsigned um
  7871 ;;  __ftmul         1   25[COMRAM] unsigned char 
  7872 ;;  __ftmul         1   24[COMRAM] unsigned char 
  7873 ;;  __ftmul         1   20[COMRAM] unsigned char 
  7874 ;; Return value:  Size  Location     Type
  7875 ;;                  3   11[COMRAM] float 
  7876 ;; Registers used:
  7877 ;;		wreg, status,2, status,0, cstack
  7878 ;; Tracked objects:
  7879 ;;		On entry : 0/0
  7880 ;;		On exit  : 0/0
  7881 ;;		Unchanged: 0/0
  7882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7883 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7884 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7885 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7886 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7887 ;;Total ram usage:       15 bytes
  7888 ;; Hardware stack levels used:    1
  7889 ;; Hardware stack levels required when called:    1
  7890 ;; This function calls:
  7891 ;;		i2___ftpack
  7892 ;; This function is called by:
  7893 ;;		_echoChanged
  7894 ;; This function uses a non-reentrant model
  7895 ;;
  7896                           
  7897                           	psect	text39
  7898  0023D4                     __ptext39:
  7899                           	opt stack 0
  7900  0023D4                     i2___ftmul:
  7901                           	opt stack 21
  7902                           
  7903                           ;incstack = 0
  7904  0023D4  C00E  F012         	movff	i2___ftmul@f1+2,??i2___ftmul
  7905  0023D8  6A13               	clrf	(??i2___ftmul+1)& (0+255),c
  7906  0023DA  6A14               	clrf	(??i2___ftmul+2)& (0+255),c
  7907  0023DC  340D               	rlcf	i2___ftmul@f1+1,w,c
  7908  0023DE  3612               	rlcf	??i2___ftmul& (0+255),f,c
  7909  0023E0  E301               	bnc	u179_41
  7910  0023E2  8013               	bsf	(??i2___ftmul+1)& (0+255),0,c
  7911  0023E4                     u179_41:
  7912  0023E4  5012               	movf	??i2___ftmul,w,c
  7913  0023E6  6E15               	movwf	i2___ftmul@exp,c
  7914  0023E8  5015               	movf	i2___ftmul@exp,w,c
  7915  0023EA  A4D8               	btfss	status,2,c
  7916  0023EC  D007               	goto	i2l775
  7917  0023EE  0E00               	movlw	0
  7918  0023F0  6E0C               	movwf	?i2___ftmul,c
  7919  0023F2  0E00               	movlw	0
  7920  0023F4  6E0D               	movwf	?i2___ftmul+1,c
  7921  0023F6  0E00               	movlw	0
  7922  0023F8  6E0E               	movwf	?i2___ftmul+2,c
  7923  0023FA  0012               	return	
  7924  0023FC                     i2l775:
  7925  0023FC  C011  F012         	movff	i2___ftmul@f2+2,??i2___ftmul
  7926  002400  6A13               	clrf	(??i2___ftmul+1)& (0+255),c
  7927  002402  6A14               	clrf	(??i2___ftmul+2)& (0+255),c
  7928  002404  3410               	rlcf	i2___ftmul@f2+1,w,c
  7929  002406  3612               	rlcf	??i2___ftmul& (0+255),f,c
  7930  002408  E301               	bnc	u181_41
  7931  00240A  8013               	bsf	(??i2___ftmul+1)& (0+255),0,c
  7932  00240C                     u181_41:
  7933  00240C  5012               	movf	??i2___ftmul,w,c
  7934  00240E  6E1A               	movwf	i2___ftmul@sign,c
  7935  002410  501A               	movf	i2___ftmul@sign,w,c
  7936  002412  A4D8               	btfss	status,2,c
  7937  002414  D007               	goto	i2l777
  7938  002416  0E00               	movlw	0
  7939  002418  6E0C               	movwf	?i2___ftmul,c
  7940  00241A  0E00               	movlw	0
  7941  00241C  6E0D               	movwf	?i2___ftmul+1,c
  7942  00241E  0E00               	movlw	0
  7943  002420  6E0E               	movwf	?i2___ftmul+2,c
  7944  002422  0012               	return	
  7945  002424                     i2l777:
  7946  002424  501A               	movf	i2___ftmul@sign,w,c
  7947  002426  0F7B               	addlw	123
  7948  002428  2615               	addwf	i2___ftmul@exp,f,c
  7949  00242A  C00E  F01A         	movff	i2___ftmul@f1+2,i2___ftmul@sign
  7950  00242E  5011               	movf	i2___ftmul@f2+2,w,c
  7951  002430  1A1A               	xorwf	i2___ftmul@sign,f,c
  7952  002432  0E80               	movlw	128
  7953  002434  161A               	andwf	i2___ftmul@sign,f,c
  7954  002436  8E0D               	bsf	i2___ftmul@f1+1,7,c
  7955  002438  8E10               	bsf	i2___ftmul@f2+1,7,c
  7956  00243A  0EFF               	movlw	255
  7957  00243C  160F               	andwf	i2___ftmul@f2,f,c
  7958  00243E  0EFF               	movlw	255
  7959  002440  1610               	andwf	i2___ftmul@f2+1,f,c
  7960  002442  0E00               	movlw	0
  7961  002444  1611               	andwf	i2___ftmul@f2+2,f,c
  7962  002446  0E00               	movlw	0
  7963  002448  6E16               	movwf	i2___ftmul@f3_as_product,c
  7964  00244A  0E00               	movlw	0
  7965  00244C  6E17               	movwf	i2___ftmul@f3_as_product+1,c
  7966  00244E  0E00               	movlw	0
  7967  002450  6E18               	movwf	i2___ftmul@f3_as_product+2,c
  7968  002452  0E07               	movlw	7
  7969  002454  6E19               	movwf	i2___ftmul@cntr,c
  7970  002456  A00C               	btfss	i2___ftmul@f1,0,c
  7971  002458  D006               	goto	i2l779
  7972  00245A  500F               	movf	i2___ftmul@f2,w,c
  7973  00245C  2616               	addwf	i2___ftmul@f3_as_product,f,c
  7974  00245E  5010               	movf	i2___ftmul@f2+1,w,c
  7975  002460  2217               	addwfc	i2___ftmul@f3_as_product+1,f,c
  7976  002462  5011               	movf	i2___ftmul@f2+2,w,c
  7977  002464  2218               	addwfc	i2___ftmul@f3_as_product+2,f,c
  7978  002466                     i2l779:
  7979  002466  90D8               	bcf	status,0,c
  7980  002468  320E               	rrcf	i2___ftmul@f1+2,f,c
  7981  00246A  320D               	rrcf	i2___ftmul@f1+1,f,c
  7982  00246C  320C               	rrcf	i2___ftmul@f1,f,c
  7983  00246E  90D8               	bcf	status,0,c
  7984  002470  360F               	rlcf	i2___ftmul@f2,f,c
  7985  002472  3610               	rlcf	i2___ftmul@f2+1,f,c
  7986  002474  3611               	rlcf	i2___ftmul@f2+2,f,c
  7987  002476  2E19               	decfsz	i2___ftmul@cntr,f,c
  7988  002478  D7EE               	goto	i2l778
  7989  00247A  0E09               	movlw	9
  7990  00247C  6E19               	movwf	i2___ftmul@cntr,c
  7991  00247E  A00C               	btfss	i2___ftmul@f1,0,c
  7992  002480  D006               	goto	i2l782
  7993  002482  500F               	movf	i2___ftmul@f2,w,c
  7994  002484  2616               	addwf	i2___ftmul@f3_as_product,f,c
  7995  002486  5010               	movf	i2___ftmul@f2+1,w,c
  7996  002488  2217               	addwfc	i2___ftmul@f3_as_product+1,f,c
  7997  00248A  5011               	movf	i2___ftmul@f2+2,w,c
  7998  00248C  2218               	addwfc	i2___ftmul@f3_as_product+2,f,c
  7999  00248E                     i2l782:
  8000  00248E  90D8               	bcf	status,0,c
  8001  002490  320E               	rrcf	i2___ftmul@f1+2,f,c
  8002  002492  320D               	rrcf	i2___ftmul@f1+1,f,c
  8003  002494  320C               	rrcf	i2___ftmul@f1,f,c
  8004  002496  90D8               	bcf	status,0,c
  8005  002498  3218               	rrcf	i2___ftmul@f3_as_product+2,f,c
  8006  00249A  3217               	rrcf	i2___ftmul@f3_as_product+1,f,c
  8007  00249C  3216               	rrcf	i2___ftmul@f3_as_product,f,c
  8008  00249E  2E19               	decfsz	i2___ftmul@cntr,f,c
  8009  0024A0  D7EE               	goto	i2l781
  8010  0024A2  C016  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
  8011  0024A6  C017  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
  8012  0024AA  C018  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
  8013  0024AE  C015  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
  8014  0024B2  C01A  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
  8015  0024B6  ECBC  F012         	call	i2___ftpack	;wreg free
  8016  0024BA  C001  F00C         	movff	?i2___ftpack,?i2___ftmul
  8017  0024BE  C002  F00D         	movff	?i2___ftpack+1,?i2___ftmul+1
  8018  0024C2  C003  F00E         	movff	?i2___ftpack+2,?i2___ftmul+2
  8019  0024C6  0012               	return	
  8020  0024C8                     __end_ofi2___ftmul:
  8021                           	opt stack 0
  8022                           tosu	equ	0xFFF
  8023                           tosh	equ	0xFFE
  8024                           tosl	equ	0xFFD
  8025                           pclatu	equ	0xFFB
  8026                           pclath	equ	0xFFA
  8027                           tblptru	equ	0xFF8
  8028                           tblptrh	equ	0xFF7
  8029                           tblptrl	equ	0xFF6
  8030                           tablat	equ	0xFF5
  8031                           prodh	equ	0xFF4
  8032                           prodl	equ	0xFF3
  8033                           intcon	equ	0xFF2
  8034                           postinc0	equ	0xFEE
  8035                           fsr0h	equ	0xFEA
  8036                           fsr0l	equ	0xFE9
  8037                           wreg	equ	0xFE8
  8038                           fsr1h	equ	0xFE2
  8039                           fsr1l	equ	0xFE1
  8040                           indf2	equ	0xFDF
  8041                           postinc2	equ	0xFDE
  8042                           postdec2	equ	0xFDD
  8043                           fsr2h	equ	0xFDA
  8044                           fsr2l	equ	0xFD9
  8045                           status	equ	0xFD8
  8046                           
  8047 ;; *************** function i2_TMR5_StopTimer *****************
  8048 ;; Defined at:
  8049 ;;		line 98 in file "mcc_generated_files/tmr5.c"
  8050 ;; Parameters:    Size  Location     Type
  8051 ;;		None
  8052 ;; Auto vars:     Size  Location     Type
  8053 ;;		None
  8054 ;; Return value:  Size  Location     Type
  8055 ;;                  1    wreg      void 
  8056 ;; Registers used:
  8057 ;;		None
  8058 ;; Tracked objects:
  8059 ;;		On entry : 0/0
  8060 ;;		On exit  : 0/0
  8061 ;;		Unchanged: 0/0
  8062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8067 ;;Total ram usage:        0 bytes
  8068 ;; Hardware stack levels used:    1
  8069 ;; This function calls:
  8070 ;;		Nothing
  8071 ;; This function is called by:
  8072 ;;		_echoChanged
  8073 ;; This function uses a non-reentrant model
  8074 ;;
  8075                           
  8076                           	psect	text40
  8077  002DB4                     __ptext40:
  8078                           	opt stack 0
  8079  002DB4                     i2_TMR5_StopTimer:
  8080                           	opt stack 22
  8081                           
  8082                           ;tmr5.c: 101: T5CONbits.TMR5ON = 0;
  8083                           
  8084                           ;incstack = 0
  8085  002DB4  90C3               	bcf	4035,0,c	;volatile
  8086  002DB6  0012               	return		;funcret
  8087  002DB8                     __end_ofi2_TMR5_StopTimer:
  8088                           	opt stack 0
  8089                           tosu	equ	0xFFF
  8090                           tosh	equ	0xFFE
  8091                           tosl	equ	0xFFD
  8092                           pclatu	equ	0xFFB
  8093                           pclath	equ	0xFFA
  8094                           tblptru	equ	0xFF8
  8095                           tblptrh	equ	0xFF7
  8096                           tblptrl	equ	0xFF6
  8097                           tablat	equ	0xFF5
  8098                           prodh	equ	0xFF4
  8099                           prodl	equ	0xFF3
  8100                           intcon	equ	0xFF2
  8101                           postinc0	equ	0xFEE
  8102                           fsr0h	equ	0xFEA
  8103                           fsr0l	equ	0xFE9
  8104                           wreg	equ	0xFE8
  8105                           fsr1h	equ	0xFE2
  8106                           fsr1l	equ	0xFE1
  8107                           indf2	equ	0xFDF
  8108                           postinc2	equ	0xFDE
  8109                           postdec2	equ	0xFDD
  8110                           fsr2h	equ	0xFDA
  8111                           fsr2l	equ	0xFD9
  8112                           status	equ	0xFD8
  8113                           
  8114 ;; *************** function ___lwtoft *****************
  8115 ;; Defined at:
  8116 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwtoft.c"
  8117 ;; Parameters:    Size  Location     Type
  8118 ;;  c               2    8[COMRAM] unsigned int 
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;		None
  8121 ;; Return value:  Size  Location     Type
  8122 ;;                  3    8[COMRAM] float 
  8123 ;; Registers used:
  8124 ;;		wreg, status,2, status,0, cstack
  8125 ;; Tracked objects:
  8126 ;;		On entry : 0/0
  8127 ;;		On exit  : 0/0
  8128 ;;		Unchanged: 0/0
  8129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8130 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8133 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8134 ;;Total ram usage:        3 bytes
  8135 ;; Hardware stack levels used:    1
  8136 ;; Hardware stack levels required when called:    1
  8137 ;; This function calls:
  8138 ;;		i2___ftpack
  8139 ;; This function is called by:
  8140 ;;		_echoChanged
  8141 ;; This function uses a non-reentrant model
  8142 ;;
  8143                           
  8144                           	psect	text41
  8145  002C64                     __ptext41:
  8146                           	opt stack 0
  8147  002C64                     ___lwtoft:
  8148                           	opt stack 21
  8149                           
  8150                           ;incstack = 0
  8151  002C64  C009  F001         	movff	___lwtoft@c,i2___ftpack@arg
  8152  002C68  C00A  F002         	movff	___lwtoft@c+1,i2___ftpack@arg+1
  8153  002C6C  6A03               	clrf	i2___ftpack@arg+2,c
  8154  002C6E  0E8E               	movlw	142
  8155  002C70  6E04               	movwf	i2___ftpack@exp,c
  8156  002C72  0E00               	movlw	0
  8157  002C74  6E05               	movwf	i2___ftpack@sign,c
  8158  002C76  ECBC  F012         	call	i2___ftpack	;wreg free
  8159  002C7A  C001  F009         	movff	?i2___ftpack,?___lwtoft
  8160  002C7E  C002  F00A         	movff	?i2___ftpack+1,?___lwtoft+1
  8161  002C82  C003  F00B         	movff	?i2___ftpack+2,?___lwtoft+2
  8162  002C86  0012               	return	
  8163  002C88                     __end_of___lwtoft:
  8164                           	opt stack 0
  8165                           tosu	equ	0xFFF
  8166                           tosh	equ	0xFFE
  8167                           tosl	equ	0xFFD
  8168                           pclatu	equ	0xFFB
  8169                           pclath	equ	0xFFA
  8170                           tblptru	equ	0xFF8
  8171                           tblptrh	equ	0xFF7
  8172                           tblptrl	equ	0xFF6
  8173                           tablat	equ	0xFF5
  8174                           prodh	equ	0xFF4
  8175                           prodl	equ	0xFF3
  8176                           intcon	equ	0xFF2
  8177                           postinc0	equ	0xFEE
  8178                           fsr0h	equ	0xFEA
  8179                           fsr0l	equ	0xFE9
  8180                           wreg	equ	0xFE8
  8181                           fsr1h	equ	0xFE2
  8182                           fsr1l	equ	0xFE1
  8183                           indf2	equ	0xFDF
  8184                           postinc2	equ	0xFDE
  8185                           postdec2	equ	0xFDD
  8186                           fsr2h	equ	0xFDA
  8187                           fsr2l	equ	0xFD9
  8188                           status	equ	0xFD8
  8189                           
  8190 ;; *************** function i2___ftpack *****************
  8191 ;; Defined at:
  8192 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;  arg             3    0[COMRAM] unsigned um
  8195 ;;  exp             1    3[COMRAM] unsigned char 
  8196 ;;  sign            1    4[COMRAM] unsigned char 
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;		None
  8199 ;; Return value:  Size  Location     Type
  8200 ;;                  3    0[COMRAM] float 
  8201 ;; Registers used:
  8202 ;;		wreg, status,2, status,0
  8203 ;; Tracked objects:
  8204 ;;		On entry : 0/0
  8205 ;;		On exit  : 0/0
  8206 ;;		Unchanged: 0/0
  8207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8208 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8210 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8211 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8212 ;;Total ram usage:        8 bytes
  8213 ;; Hardware stack levels used:    1
  8214 ;; This function calls:
  8215 ;;		Nothing
  8216 ;; This function is called by:
  8217 ;;		___lwtoft
  8218 ;;		i2___ftmul
  8219 ;; This function uses a non-reentrant model
  8220 ;;
  8221                           
  8222                           	psect	text42
  8223  002578                     __ptext42:
  8224                           	opt stack 0
  8225  002578                     i2___ftpack:
  8226                           	opt stack 21
  8227                           
  8228                           ;incstack = 0
  8229  002578  5004               	movf	i2___ftpack@exp,w,c
  8230  00257A  B4D8               	btfsc	status,2,c
  8231  00257C  D005               	goto	i2u163_40
  8232  00257E  5001               	movf	i2___ftpack@arg,w,c
  8233  002580  1002               	iorwf	i2___ftpack@arg+1,w,c
  8234  002582  1003               	iorwf	i2___ftpack@arg+2,w,c
  8235  002584  A4D8               	btfss	status,2,c
  8236  002586  D00C               	goto	i2l679
  8237  002588                     i2u163_40:
  8238  002588  0E00               	movlw	0
  8239  00258A  6E01               	movwf	?i2___ftpack,c
  8240  00258C  0E00               	movlw	0
  8241  00258E  6E02               	movwf	?i2___ftpack+1,c
  8242  002590  0E00               	movlw	0
  8243  002592  6E03               	movwf	?i2___ftpack+2,c
  8244  002594  0012               	return	
  8245  002596  2A04               	incf	i2___ftpack@exp,f,c
  8246  002598  90D8               	bcf	status,0,c
  8247  00259A  3203               	rrcf	i2___ftpack@arg+2,f,c
  8248  00259C  3202               	rrcf	i2___ftpack@arg+1,f,c
  8249  00259E  3201               	rrcf	i2___ftpack@arg,f,c
  8250  0025A0                     i2l679:
  8251  0025A0  0E00               	movlw	0
  8252  0025A2  1401               	andwf	i2___ftpack@arg,w,c
  8253  0025A4  6E06               	movwf	??i2___ftpack& (0+255),c
  8254  0025A6  0E00               	movlw	0
  8255  0025A8  1402               	andwf	i2___ftpack@arg+1,w,c
  8256  0025AA  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  8257  0025AC  0EFE               	movlw	254
  8258  0025AE  1403               	andwf	i2___ftpack@arg+2,w,c
  8259  0025B0  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  8260  0025B2  5006               	movf	??i2___ftpack,w,c
  8261  0025B4  1007               	iorwf	??i2___ftpack+1,w,c
  8262  0025B6  1008               	iorwf	??i2___ftpack+2,w,c
  8263  0025B8  B4D8               	btfsc	status,2,c
  8264  0025BA  D00C               	goto	i2l682
  8265  0025BC  D7EC               	goto	i2l680
  8266  0025BE  2A04               	incf	i2___ftpack@exp,f,c
  8267  0025C0  0E01               	movlw	1
  8268  0025C2  2601               	addwf	i2___ftpack@arg,f,c
  8269  0025C4  0E00               	movlw	0
  8270  0025C6  2202               	addwfc	i2___ftpack@arg+1,f,c
  8271  0025C8  0E00               	movlw	0
  8272  0025CA  2203               	addwfc	i2___ftpack@arg+2,f,c
  8273  0025CC  90D8               	bcf	status,0,c
  8274  0025CE  3203               	rrcf	i2___ftpack@arg+2,f,c
  8275  0025D0  3202               	rrcf	i2___ftpack@arg+1,f,c
  8276  0025D2  3201               	rrcf	i2___ftpack@arg,f,c
  8277  0025D4                     i2l682:
  8278  0025D4  0E00               	movlw	0
  8279  0025D6  1401               	andwf	i2___ftpack@arg,w,c
  8280  0025D8  6E06               	movwf	??i2___ftpack& (0+255),c
  8281  0025DA  0E00               	movlw	0
  8282  0025DC  1402               	andwf	i2___ftpack@arg+1,w,c
  8283  0025DE  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  8284  0025E0  0EFF               	movlw	255
  8285  0025E2  1403               	andwf	i2___ftpack@arg+2,w,c
  8286  0025E4  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  8287  0025E6  5006               	movf	??i2___ftpack,w,c
  8288  0025E8  1007               	iorwf	??i2___ftpack+1,w,c
  8289  0025EA  1008               	iorwf	??i2___ftpack+2,w,c
  8290  0025EC  B4D8               	btfsc	status,2,c
  8291  0025EE  D006               	goto	i2l685
  8292  0025F0  D7E6               	goto	i2l683
  8293  0025F2  0604               	decf	i2___ftpack@exp,f,c
  8294  0025F4  90D8               	bcf	status,0,c
  8295  0025F6  3601               	rlcf	i2___ftpack@arg,f,c
  8296  0025F8  3602               	rlcf	i2___ftpack@arg+1,f,c
  8297  0025FA  3603               	rlcf	i2___ftpack@arg+2,f,c
  8298  0025FC                     i2l685:
  8299  0025FC  BE02               	btfsc	i2___ftpack@arg+1,7,c
  8300  0025FE  D003               	goto	i2u167_40
  8301  002600  0E02               	movlw	2
  8302  002602  6004               	cpfslt	i2___ftpack@exp,c
  8303  002604  D7F6               	goto	i2l686
  8304  002606                     i2u167_40:
  8305  002606  A004               	btfss	i2___ftpack@exp,0,c
  8306  002608  9E02               	bcf	i2___ftpack@arg+1,7,c
  8307  00260A  90D8               	bcf	status,0,c
  8308  00260C  3204               	rrcf	i2___ftpack@exp,f,c
  8309  00260E  5004               	movf	i2___ftpack@exp,w,c
  8310  002610  1203               	iorwf	i2___ftpack@arg+2,f,c
  8311  002612  5005               	movf	i2___ftpack@sign,w,c
  8312  002614  A4D8               	btfss	status,2,c
  8313  002616  8E03               	bsf	i2___ftpack@arg+2,7,c
  8314  002618  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
  8315  00261C  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
  8316  002620  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
  8317  002624  0012               	return	
  8318  002626                     __end_ofi2___ftpack:
  8319                           	opt stack 0
  8320                           tosu	equ	0xFFF
  8321                           tosh	equ	0xFFE
  8322                           tosl	equ	0xFFD
  8323                           pclatu	equ	0xFFB
  8324                           pclath	equ	0xFFA
  8325                           tblptru	equ	0xFF8
  8326                           tblptrh	equ	0xFF7
  8327                           tblptrl	equ	0xFF6
  8328                           tablat	equ	0xFF5
  8329                           prodh	equ	0xFF4
  8330                           prodl	equ	0xFF3
  8331                           intcon	equ	0xFF2
  8332                           postinc0	equ	0xFEE
  8333                           fsr0h	equ	0xFEA
  8334                           fsr0l	equ	0xFE9
  8335                           wreg	equ	0xFE8
  8336                           fsr1h	equ	0xFE2
  8337                           fsr1l	equ	0xFE1
  8338                           indf2	equ	0xFDF
  8339                           postinc2	equ	0xFDE
  8340                           postdec2	equ	0xFDD
  8341                           fsr2h	equ	0xFDA
  8342                           fsr2l	equ	0xFD9
  8343                           status	equ	0xFD8
  8344                           
  8345 ;; *************** function _TMR5_WriteTimer *****************
  8346 ;; Defined at:
  8347 ;;		line 120 in file "mcc_generated_files/tmr5.c"
  8348 ;; Parameters:    Size  Location     Type
  8349 ;;  timerVal        2    0[COMRAM] unsigned int 
  8350 ;; Auto vars:     Size  Location     Type
  8351 ;;		None
  8352 ;; Return value:  Size  Location     Type
  8353 ;;                  1    wreg      void 
  8354 ;; Registers used:
  8355 ;;		wreg, status,2
  8356 ;; Tracked objects:
  8357 ;;		On entry : 0/0
  8358 ;;		On exit  : 0/0
  8359 ;;		Unchanged: 0/0
  8360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8361 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8364 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8365 ;;Total ram usage:        2 bytes
  8366 ;; Hardware stack levels used:    1
  8367 ;; This function calls:
  8368 ;;		Nothing
  8369 ;; This function is called by:
  8370 ;;		_echoChanged
  8371 ;;		_TMR5_Reload
  8372 ;; This function uses a non-reentrant model
  8373 ;;
  8374                           
  8375                           	psect	text43
  8376  002D44                     __ptext43:
  8377                           	opt stack 0
  8378  002D44                     _TMR5_WriteTimer:
  8379                           	opt stack 22
  8380                           
  8381                           ;tmr5.c: 122: if (T5CONbits.nT5SYNC == 1)
  8382                           
  8383                           ;incstack = 0
  8384  002D44  A4C3               	btfss	4035,2,c	;volatile
  8385  002D46  D007               	goto	i2l61
  8386                           
  8387                           ;tmr5.c: 123: {
  8388                           ;tmr5.c: 125: T5CONbits.TMR5ON = 0;
  8389  002D48  90C3               	bcf	4035,0,c	;volatile
  8390                           
  8391                           ;tmr5.c: 128: TMR5H = (timerVal >> 8);
  8392  002D4A  5002               	movf	TMR5_WriteTimer@timerVal+1,w,c
  8393  002D4C  6EC2               	movwf	4034,c	;volatile
  8394                           
  8395                           ;tmr5.c: 129: TMR5L = timerVal;
  8396  002D4E  C001  FFC1         	movff	TMR5_WriteTimer@timerVal,4033	;volatile
  8397                           
  8398                           ;tmr5.c: 132: T5CONbits.TMR5ON =1;
  8399  002D52  80C3               	bsf	4035,0,c	;volatile
  8400                           
  8401                           ;tmr5.c: 133: }
  8402  002D54  0012               	return	
  8403  002D56                     i2l61:
  8404                           
  8405                           ;tmr5.c: 134: else
  8406                           ;tmr5.c: 135: {
  8407                           ;tmr5.c: 137: TMR5H = (timerVal >> 8);
  8408  002D56  5002               	movf	TMR5_WriteTimer@timerVal+1,w,c
  8409  002D58  6EC2               	movwf	4034,c	;volatile
  8410                           
  8411                           ;tmr5.c: 138: TMR5L = timerVal;
  8412  002D5A  C001  FFC1         	movff	TMR5_WriteTimer@timerVal,4033	;volatile
  8413  002D5E  0012               	return	
  8414  002D60                     __end_of_TMR5_WriteTimer:
  8415                           	opt stack 0
  8416                           tosu	equ	0xFFF
  8417                           tosh	equ	0xFFE
  8418                           tosl	equ	0xFFD
  8419                           pclatu	equ	0xFFB
  8420                           pclath	equ	0xFFA
  8421                           tblptru	equ	0xFF8
  8422                           tblptrh	equ	0xFF7
  8423                           tblptrl	equ	0xFF6
  8424                           tablat	equ	0xFF5
  8425                           prodh	equ	0xFF4
  8426                           prodl	equ	0xFF3
  8427                           intcon	equ	0xFF2
  8428                           postinc0	equ	0xFEE
  8429                           fsr0h	equ	0xFEA
  8430                           fsr0l	equ	0xFE9
  8431                           wreg	equ	0xFE8
  8432                           fsr1h	equ	0xFE2
  8433                           fsr1l	equ	0xFE1
  8434                           indf2	equ	0xFDF
  8435                           postinc2	equ	0xFDE
  8436                           postdec2	equ	0xFDD
  8437                           fsr2h	equ	0xFDA
  8438                           fsr2l	equ	0xFD9
  8439                           status	equ	0xFD8
  8440                           
  8441 ;; *************** function _TMR5_StartTimer *****************
  8442 ;; Defined at:
  8443 ;;		line 92 in file "mcc_generated_files/tmr5.c"
  8444 ;; Parameters:    Size  Location     Type
  8445 ;;		None
  8446 ;; Auto vars:     Size  Location     Type
  8447 ;;		None
  8448 ;; Return value:  Size  Location     Type
  8449 ;;                  1    wreg      void 
  8450 ;; Registers used:
  8451 ;;		None
  8452 ;; Tracked objects:
  8453 ;;		On entry : 0/0
  8454 ;;		On exit  : 0/0
  8455 ;;		Unchanged: 0/0
  8456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8461 ;;Total ram usage:        0 bytes
  8462 ;; Hardware stack levels used:    1
  8463 ;; This function calls:
  8464 ;;		Nothing
  8465 ;; This function is called by:
  8466 ;;		_echoChanged
  8467 ;; This function uses a non-reentrant model
  8468 ;;
  8469                           
  8470                           	psect	text44
  8471  002DB8                     __ptext44:
  8472                           	opt stack 0
  8473  002DB8                     _TMR5_StartTimer:
  8474                           	opt stack 22
  8475                           
  8476                           ;tmr5.c: 95: T5CONbits.TMR5ON = 1;
  8477                           
  8478                           ;incstack = 0
  8479  002DB8  80C3               	bsf	4035,0,c	;volatile
  8480  002DBA  0012               	return		;funcret
  8481  002DBC                     __end_of_TMR5_StartTimer:
  8482                           	opt stack 0
  8483                           tosu	equ	0xFFF
  8484                           tosh	equ	0xFFE
  8485                           tosl	equ	0xFFD
  8486                           pclatu	equ	0xFFB
  8487                           pclath	equ	0xFFA
  8488                           tblptru	equ	0xFF8
  8489                           tblptrh	equ	0xFF7
  8490                           tblptrl	equ	0xFF6
  8491                           tablat	equ	0xFF5
  8492                           prodh	equ	0xFF4
  8493                           prodl	equ	0xFF3
  8494                           intcon	equ	0xFF2
  8495                           postinc0	equ	0xFEE
  8496                           fsr0h	equ	0xFEA
  8497                           fsr0l	equ	0xFE9
  8498                           wreg	equ	0xFE8
  8499                           fsr1h	equ	0xFE2
  8500                           fsr1l	equ	0xFE1
  8501                           indf2	equ	0xFDF
  8502                           postinc2	equ	0xFDE
  8503                           postdec2	equ	0xFDD
  8504                           fsr2h	equ	0xFDA
  8505                           fsr2l	equ	0xFD9
  8506                           status	equ	0xFD8
  8507                           
  8508 ;; *************** function _TMR5_ReadTimer *****************
  8509 ;; Defined at:
  8510 ;;		line 104 in file "mcc_generated_files/tmr5.c"
  8511 ;; Parameters:    Size  Location     Type
  8512 ;;		None
  8513 ;; Auto vars:     Size  Location     Type
  8514 ;;  readVal         2    4[COMRAM] unsigned int 
  8515 ;;  readValLow      1    7[COMRAM] unsigned char 
  8516 ;;  readValHigh     1    6[COMRAM] unsigned char 
  8517 ;; Return value:  Size  Location     Type
  8518 ;;                  2    0[COMRAM] unsigned int 
  8519 ;; Registers used:
  8520 ;;		wreg, status,2
  8521 ;; Tracked objects:
  8522 ;;		On entry : 0/0
  8523 ;;		On exit  : 0/0
  8524 ;;		Unchanged: 0/0
  8525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8526 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8527 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8528 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8529 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8530 ;;Total ram usage:        8 bytes
  8531 ;; Hardware stack levels used:    1
  8532 ;; This function calls:
  8533 ;;		Nothing
  8534 ;; This function is called by:
  8535 ;;		_echoChanged
  8536 ;; This function uses a non-reentrant model
  8537 ;;
  8538                           
  8539                           	psect	text45
  8540  002CCC                     __ptext45:
  8541                           	opt stack 0
  8542  002CCC                     _TMR5_ReadTimer:
  8543                           	opt stack 22
  8544                           
  8545                           ;tmr5.c: 106: uint16_t readVal;
  8546                           ;tmr5.c: 107: uint8_t readValHigh;
  8547                           ;tmr5.c: 108: uint8_t readValLow;
  8548                           ;tmr5.c: 110: T5CONbits.T5RD16 = 1;
  8549                           
  8550                           ;incstack = 0
  8551  002CCC  82C3               	bsf	4035,1,c	;volatile
  8552                           
  8553                           ;tmr5.c: 112: readValLow = TMR5L;
  8554  002CCE  CFC1 F008          	movff	4033,TMR5_ReadTimer@readValLow	;volatile
  8555                           
  8556                           ;tmr5.c: 113: readValHigh = TMR5H;
  8557  002CD2  CFC2 F007          	movff	4034,TMR5_ReadTimer@readValHigh	;volatile
  8558                           
  8559                           ;tmr5.c: 115: readVal = ((uint16_t)readValHigh << 8) | readValLow;
  8560  002CD6  5007               	movf	TMR5_ReadTimer@readValHigh,w,c
  8561  002CD8  6E03               	movwf	??_TMR5_ReadTimer& (0+255),c
  8562  002CDA  5008               	movf	TMR5_ReadTimer@readValLow,w,c
  8563  002CDC  6E05               	movwf	TMR5_ReadTimer@readVal,c
  8564  002CDE  C003  F006         	movff	??_TMR5_ReadTimer,TMR5_ReadTimer@readVal+1
  8565                           
  8566                           ;tmr5.c: 117: return readVal;
  8567  002CE2  C005  F001         	movff	TMR5_ReadTimer@readVal,?_TMR5_ReadTimer
  8568  002CE6  C006  F002         	movff	TMR5_ReadTimer@readVal+1,?_TMR5_ReadTimer+1
  8569  002CEA  0012               	return	
  8570  002CEC                     __end_of_TMR5_ReadTimer:
  8571                           	opt stack 0
  8572                           tosu	equ	0xFFF
  8573                           tosh	equ	0xFFE
  8574                           tosl	equ	0xFFD
  8575                           pclatu	equ	0xFFB
  8576                           pclath	equ	0xFFA
  8577                           tblptru	equ	0xFF8
  8578                           tblptrh	equ	0xFF7
  8579                           tblptrl	equ	0xFF6
  8580                           tablat	equ	0xFF5
  8581                           prodh	equ	0xFF4
  8582                           prodl	equ	0xFF3
  8583                           intcon	equ	0xFF2
  8584                           postinc0	equ	0xFEE
  8585                           fsr0h	equ	0xFEA
  8586                           fsr0l	equ	0xFE9
  8587                           wreg	equ	0xFE8
  8588                           fsr1h	equ	0xFE2
  8589                           fsr1l	equ	0xFE1
  8590                           indf2	equ	0xFDF
  8591                           postinc2	equ	0xFDE
  8592                           postdec2	equ	0xFDD
  8593                           fsr2h	equ	0xFDA
  8594                           fsr2l	equ	0xFD9
  8595                           status	equ	0xFD8
  8596                           
  8597 ;; *************** function _EUSART1_Transmit_ISR *****************
  8598 ;; Defined at:
  8599 ;;		line 172 in file "mcc_generated_files/eusart1.c"
  8600 ;; Parameters:    Size  Location     Type
  8601 ;;		None
  8602 ;; Auto vars:     Size  Location     Type
  8603 ;;		None
  8604 ;; Return value:  Size  Location     Type
  8605 ;;                  1    wreg      void 
  8606 ;; Registers used:
  8607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8608 ;; Tracked objects:
  8609 ;;		On entry : 0/0
  8610 ;;		On exit  : 0/0
  8611 ;;		Unchanged: 0/0
  8612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8617 ;;Total ram usage:        0 bytes
  8618 ;; Hardware stack levels used:    1
  8619 ;; This function calls:
  8620 ;;		Nothing
  8621 ;; This function is called by:
  8622 ;;		_EUSART1_Initialize
  8623 ;;		_INTERRUPT_InterruptManager
  8624 ;; This function uses a non-reentrant model
  8625 ;;
  8626                           
  8627                           	psect	text46
  8628  002BB6                     __ptext46:
  8629                           	opt stack 0
  8630  002BB6                     _EUSART1_Transmit_ISR:
  8631                           	opt stack 25
  8632                           
  8633                           ;eusart1.c: 176: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  8634                           
  8635                           ;incstack = 0
  8636  002BB6  0E08               	movlw	8
  8637  002BB8  0100               	movlb	0	; () banked
  8638  002BBA  61E9               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
  8639  002BBC  D012               	goto	i2l297
  8640                           
  8641                           ; BSR set to: 0
  8642                           ;eusart1.c: 177: {
  8643                           ;eusart1.c: 178: TX1REG = eusart1TxBuffer[eusart1TxTail++];
  8644  002BBE  51C7               	movf	_eusart1TxTail& (0+255),w,b	;volatile
  8645  002BC0  0D01               	mullw	1
  8646  002BC2  0E44               	movlw	low _eusart1TxBuffer
  8647  002BC4  24F3               	addwf	prodl,w,c
  8648  002BC6  6ED9               	movwf	fsr2l,c
  8649  002BC8  0E00               	movlw	high _eusart1TxBuffer
  8650  002BCA  20F4               	addwfc	prodh,w,c
  8651  002BCC  6EDA               	movwf	fsr2h,c
  8652  002BCE  50DF               	movf	indf2,w,c
  8653  002BD0  6E9A               	movwf	3994,c	;volatile
  8654                           
  8655                           ; BSR set to: 0
  8656  002BD2  2BC7               	incf	_eusart1TxTail& (0+255),f,b	;volatile
  8657                           
  8658                           ; BSR set to: 0
  8659                           ;eusart1.c: 179: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  8660  002BD4  0E07               	movlw	7
  8661  002BD6  65C7               	cpfsgt	_eusart1TxTail& (0+255),b	;volatile
  8662  002BD8  D002               	goto	i2l298
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;eusart1.c: 180: {
  8666                           ;eusart1.c: 181: eusart1TxTail = 0;
  8667  002BDA  0E00               	movlw	0
  8668  002BDC  6FC7               	movwf	_eusart1TxTail& (0+255),b	;volatile
  8669  002BDE                     i2l298:
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;eusart1.c: 182: }
  8673                           ;eusart1.c: 183: eusart1TxBufferRemaining++;
  8674                           
  8675                           ; BSR set to: 0
  8676  002BDE  2BE9               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  8677                           
  8678                           ;eusart1.c: 184: }
  8679  002BE0  0012               	return	
  8680  002BE2                     i2l297:
  8681                           
  8682                           ; BSR set to: 0
  8683                           ;eusart1.c: 185: else
  8684                           ;eusart1.c: 186: {
  8685                           ;eusart1.c: 187: PIE3bits.TX1IE = 0;
  8686  002BE2  010E               	movlb	14	; () banked
  8687  002BE4  99C5               	bcf	197,4,b	;volatile
  8688  002BE6  0012               	return	
  8689  002BE8                     __end_of_EUSART1_Transmit_ISR:
  8690                           	opt stack 0
  8691                           tosu	equ	0xFFF
  8692                           tosh	equ	0xFFE
  8693                           tosl	equ	0xFFD
  8694                           pclatu	equ	0xFFB
  8695                           pclath	equ	0xFFA
  8696                           tblptru	equ	0xFF8
  8697                           tblptrh	equ	0xFF7
  8698                           tblptrl	equ	0xFF6
  8699                           tablat	equ	0xFF5
  8700                           prodh	equ	0xFF4
  8701                           prodl	equ	0xFF3
  8702                           intcon	equ	0xFF2
  8703                           postinc0	equ	0xFEE
  8704                           fsr0h	equ	0xFEA
  8705                           fsr0l	equ	0xFE9
  8706                           wreg	equ	0xFE8
  8707                           fsr1h	equ	0xFE2
  8708                           fsr1l	equ	0xFE1
  8709                           indf2	equ	0xFDF
  8710                           postinc2	equ	0xFDE
  8711                           postdec2	equ	0xFDD
  8712                           fsr2h	equ	0xFDA
  8713                           fsr2l	equ	0xFD9
  8714                           status	equ	0xFD8
  8715                           
  8716 ;; *************** function _EUSART1_Receive_ISR *****************
  8717 ;; Defined at:
  8718 ;;		line 191 in file "mcc_generated_files/eusart1.c"
  8719 ;; Parameters:    Size  Location     Type
  8720 ;;		None
  8721 ;; Auto vars:     Size  Location     Type
  8722 ;;		None
  8723 ;; Return value:  Size  Location     Type
  8724 ;;                  1    wreg      void 
  8725 ;; Registers used:
  8726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8727 ;; Tracked objects:
  8728 ;;		On entry : 0/0
  8729 ;;		On exit  : 0/0
  8730 ;;		Unchanged: 0/0
  8731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8736 ;;Total ram usage:        0 bytes
  8737 ;; Hardware stack levels used:    1
  8738 ;; This function calls:
  8739 ;;		Nothing
  8740 ;; This function is called by:
  8741 ;;		_EUSART1_Initialize
  8742 ;;		_INTERRUPT_InterruptManager
  8743 ;; This function uses a non-reentrant model
  8744 ;;
  8745                           
  8746                           	psect	text47
  8747  002BE8                     __ptext47:
  8748                           	opt stack 0
  8749  002BE8                     _EUSART1_Receive_ISR:
  8750                           	opt stack 25
  8751                           
  8752                           ;eusart1.c: 194: if(1 == RC1STAbits.OERR)
  8753                           
  8754                           ;incstack = 0
  8755  002BE8  A29D               	btfss	3997,1,c	;volatile
  8756  002BEA  D002               	goto	i2l303
  8757                           
  8758                           ;eusart1.c: 195: {
  8759                           ;eusart1.c: 198: RC1STAbits.CREN = 0;
  8760  002BEC  989D               	bcf	3997,4,c	;volatile
  8761                           
  8762                           ;eusart1.c: 199: RC1STAbits.CREN = 1;
  8763  002BEE  889D               	bsf	3997,4,c	;volatile
  8764  002BF0                     i2l303:
  8765                           
  8766                           ;eusart1.c: 200: }
  8767                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RC1REG;
  8768  002BF0  0100               	movlb	0	; () banked
  8769  002BF2  51C6               	movf	_eusart1RxHead& (0+255),w,b	;volatile
  8770  002BF4  0D01               	mullw	1
  8771  002BF6  0E3C               	movlw	low _eusart1RxBuffer
  8772  002BF8  24F3               	addwf	prodl,w,c
  8773  002BFA  6ED9               	movwf	fsr2l,c
  8774  002BFC  0E00               	movlw	high _eusart1RxBuffer
  8775  002BFE  20F4               	addwfc	prodh,w,c
  8776  002C00  6EDA               	movwf	fsr2h,c
  8777  002C02  CF99 FFDF          	movff	3993,indf2	;volatile
  8778                           
  8779                           ; BSR set to: 0
  8780  002C06  2BC6               	incf	_eusart1RxHead& (0+255),f,b	;volatile
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  8784  002C08  0E07               	movlw	7
  8785  002C0A  65C6               	cpfsgt	_eusart1RxHead& (0+255),b	;volatile
  8786  002C0C  D002               	goto	i2l304
  8787                           
  8788                           ; BSR set to: 0
  8789                           ;eusart1.c: 205: {
  8790                           ;eusart1.c: 206: eusart1RxHead = 0;
  8791  002C0E  0E00               	movlw	0
  8792  002C10  6FC6               	movwf	_eusart1RxHead& (0+255),b	;volatile
  8793  002C12                     i2l304:
  8794                           
  8795                           ; BSR set to: 0
  8796                           ;eusart1.c: 207: }
  8797                           ;eusart1.c: 208: eusart1RxCount++;
  8798                           
  8799                           ; BSR set to: 0
  8800  002C12  2A4E               	incf	_eusart1RxCount,f,c	;volatile
  8801                           
  8802                           ; BSR set to: 0
  8803  002C14  0012               	return		;funcret
  8804  002C16                     __end_of_EUSART1_Receive_ISR:
  8805                           	opt stack 0
  8806                           tosu	equ	0xFFF
  8807                           tosh	equ	0xFFE
  8808                           tosl	equ	0xFFD
  8809                           pclatu	equ	0xFFB
  8810                           pclath	equ	0xFFA
  8811                           tblptru	equ	0xFF8
  8812                           tblptrh	equ	0xFF7
  8813                           tblptrl	equ	0xFF6
  8814                           tablat	equ	0xFF5
  8815                           prodh	equ	0xFF4
  8816                           prodl	equ	0xFF3
  8817                           intcon	equ	0xFF2
  8818                           postinc0	equ	0xFEE
  8819                           fsr0h	equ	0xFEA
  8820                           fsr0l	equ	0xFE9
  8821                           wreg	equ	0xFE8
  8822                           fsr1h	equ	0xFE2
  8823                           fsr1l	equ	0xFE1
  8824                           indf2	equ	0xFDF
  8825                           postinc2	equ	0xFDE
  8826                           postdec2	equ	0xFDD
  8827                           fsr2h	equ	0xFDA
  8828                           fsr2l	equ	0xFD9
  8829                           status	equ	0xFD8
  8830                           tosu	equ	0xFFF
  8831                           tosh	equ	0xFFE
  8832                           tosl	equ	0xFFD
  8833                           pclatu	equ	0xFFB
  8834                           pclath	equ	0xFFA
  8835                           tblptru	equ	0xFF8
  8836                           tblptrh	equ	0xFF7
  8837                           tblptrl	equ	0xFF6
  8838                           tablat	equ	0xFF5
  8839                           prodh	equ	0xFF4
  8840                           prodl	equ	0xFF3
  8841                           intcon	equ	0xFF2
  8842                           postinc0	equ	0xFEE
  8843                           fsr0h	equ	0xFEA
  8844                           fsr0l	equ	0xFE9
  8845                           wreg	equ	0xFE8
  8846                           fsr1h	equ	0xFE2
  8847                           fsr1l	equ	0xFE1
  8848                           indf2	equ	0xFDF
  8849                           postinc2	equ	0xFDE
  8850                           postdec2	equ	0xFDD
  8851                           fsr2h	equ	0xFDA
  8852                           fsr2l	equ	0xFD9
  8853                           status	equ	0xFD8
  8854                           
  8855                           	psect	text48
  8856  000000                     __ptext48:
  8857                           	opt stack 0
  8858                           tosu	equ	0xFFF
  8859                           tosh	equ	0xFFE
  8860                           tosl	equ	0xFFD
  8861                           pclatu	equ	0xFFB
  8862                           pclath	equ	0xFFA
  8863                           tblptru	equ	0xFF8
  8864                           tblptrh	equ	0xFF7
  8865                           tblptrl	equ	0xFF6
  8866                           tablat	equ	0xFF5
  8867                           prodh	equ	0xFF4
  8868                           prodl	equ	0xFF3
  8869                           intcon	equ	0xFF2
  8870                           postinc0	equ	0xFEE
  8871                           fsr0h	equ	0xFEA
  8872                           fsr0l	equ	0xFE9
  8873                           wreg	equ	0xFE8
  8874                           fsr1h	equ	0xFE2
  8875                           fsr1l	equ	0xFE1
  8876                           indf2	equ	0xFDF
  8877                           postinc2	equ	0xFDE
  8878                           postdec2	equ	0xFDD
  8879                           fsr2h	equ	0xFDA
  8880                           fsr2l	equ	0xFD9
  8881                           status	equ	0xFD8
  8882                           
  8883                           	psect	rparam
  8884  0000                     tosu	equ	0xFFF
  8885                           tosh	equ	0xFFE
  8886                           tosl	equ	0xFFD
  8887                           pclatu	equ	0xFFB
  8888                           pclath	equ	0xFFA
  8889                           tblptru	equ	0xFF8
  8890                           tblptrh	equ	0xFF7
  8891                           tblptrl	equ	0xFF6
  8892                           tablat	equ	0xFF5
  8893                           prodh	equ	0xFF4
  8894                           prodl	equ	0xFF3
  8895                           intcon	equ	0xFF2
  8896                           postinc0	equ	0xFEE
  8897                           fsr0h	equ	0xFEA
  8898                           fsr0l	equ	0xFE9
  8899                           wreg	equ	0xFE8
  8900                           fsr1h	equ	0xFE2
  8901                           fsr1l	equ	0xFE1
  8902                           indf2	equ	0xFDF
  8903                           postinc2	equ	0xFDE
  8904                           postdec2	equ	0xFDD
  8905                           fsr2h	equ	0xFDA
  8906                           fsr2l	equ	0xFD9
  8907                           status	equ	0xFD8
  8908                           
  8909                           	psect	temp
  8910  00005B                     btemp:
  8911                           	opt stack 0
  8912  00005B                     	ds	1
  8913  0000                     int$flags	set	btemp
  8914  0000                     wtemp6	set	btemp+1
  8915                           tosu	equ	0xFFF
  8916                           tosh	equ	0xFFE
  8917                           tosl	equ	0xFFD
  8918                           pclatu	equ	0xFFB
  8919                           pclath	equ	0xFFA
  8920                           tblptru	equ	0xFF8
  8921                           tblptrh	equ	0xFF7
  8922                           tblptrl	equ	0xFF6
  8923                           tablat	equ	0xFF5
  8924                           prodh	equ	0xFF4
  8925                           prodl	equ	0xFF3
  8926                           intcon	equ	0xFF2
  8927                           postinc0	equ	0xFEE
  8928                           fsr0h	equ	0xFEA
  8929                           fsr0l	equ	0xFE9
  8930                           wreg	equ	0xFE8
  8931                           fsr1h	equ	0xFE2
  8932                           fsr1l	equ	0xFE1
  8933                           indf2	equ	0xFDF
  8934                           postinc2	equ	0xFDE
  8935                           postdec2	equ	0xFDD
  8936                           fsr2h	equ	0xFDA
  8937                           fsr2l	equ	0xFD9
  8938                           status	equ	0xFD8


Data Sizes:
    Strings     5
    Constant    118
    Data        0
    BSS         57
    Persistent  12
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     59      90
    BANK0           160    100     138
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          136      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> vectorString(BANK0[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    serial_print@cadena	PTR unsigned char  size(2) Largest target is 32
		 -> vectorString(BANK0[32]), 

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART1_Transmit_ISR(), Absolute function(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> echoChanged(), INT0_DefaultInterruptHandler(), 

    INT0_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> echoChanged(), INT0_DefaultInterruptHandler(), Absolute function(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _echoChanged->i2___fttol
    i2___fttol->i2___ftmul
    i2___ftmul->___lwtoft
    ___lwtoft->i2___ftpack

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _serial_print->_EUSART1_Write
    _EXT_INT_Initialize->_INT0_SetInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   48523
                                             98 BANK0      2     2      0
           _INT0_SetInterruptHandler
                  _SYSTEM_Initialize
                     _TMR5_StopTimer
                       _serial_print
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             43    37      6   47769
                                             63 BANK0     35    29      6
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   11586
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11388
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2591
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5068
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2533
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     530
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4003
                                             57 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3658
                                             45 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2388
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _serial_print                                         3     1      2     210
                                              1 BANK0      3     1      2
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Write                                        1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR5_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     370
                 _EUSART1_Initialize
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     174
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT0_SetInterruptHandler                             3     0      3     174
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     196
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        3     0      3      98
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        3     0      3      98
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                          18    18      0    1837
                                             41 COMRAM    18    18      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                           _INT0_ISR
 ---------------------------------------------------------------------------------
 (6) _INT0_ISR                                             0     0      0    1837
                      _INT0_CallBack
 ---------------------------------------------------------------------------------
 (7) _INT0_CallBack                                        0     0      0    1837
                   Absolute function *
       _INT0_DefaultInterruptHandler *
                        _echoChanged *
 ---------------------------------------------------------------------------------
 (8) _echoChanged                                          0     0      0    1837
                     _TMR5_ReadTimer
                    _TMR5_StartTimer
                    _TMR5_WriteTimer
                           ___lwtoft
                   i2_TMR5_StopTimer
                          i2___ftmul
                          i2___fttol
 ---------------------------------------------------------------------------------
 (9) i2___fttol                                           15    11      4     278
                                             26 COMRAM    15    11      4
                           ___lwtoft (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftmul                                           15     9      6     765
                                             11 COMRAM    15     9      6
                           ___lwtoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) i2_TMR5_StopTimer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) ___lwtoft                                             3     0      3     485
                                              8 COMRAM     3     0      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     387
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _TMR5_WriteTimer                                      2     0      2     240
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _TMR5_ReadTimer                                       8     6      2      69
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (8) _INT0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _INT0_SetInterruptHandler
   _SYSTEM_Initialize
     _EUSART1_Initialize
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _EXT_INT_Initialize
       _INT0_SetInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _TMR5_Initialize
   _TMR5_StopTimer
   _serial_print
     _EUSART1_Write
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
   _EUSART1_Transmit_ISR *
   _INT0_ISR *
     _INT0_CallBack
       Absolute function(Fake) *
       _INT0_DefaultInterruptHandler *
       _echoChanged *
         _TMR5_ReadTimer
         _TMR5_StartTimer
         _TMR5_WriteTimer
         ___lwtoft
           i2___ftpack
         i2_TMR5_StopTimer
         i2___ftmul
           ___lwtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___fttol
           ___lwtoft (ARG)
             i2___ftpack
           i2___ftmul (ARG)
             ___lwtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E87      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     64      8A       5       86.3%
BITBANK14           88      0       0      33        0.0%
BANK14              88      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3B      5A       1       95.7%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E4       6        0.0%
DATA                 0      0      E4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Jun 16 15:49:11 2018

                     _eusart1TxBufferRemaining 00E9                                    __CFG_CP$OFF 000000  
                                 ___awdiv@sign 006B                            ___wmul@multiplicand 0070  
                            ??_TMR5_WriteTimer 0003                                     i2___ftpack 2578  
                                 ___ftadd@exp1 0098                                   ___ftadd@exp2 0097  
                                  __CFG_LVP$ON 000000                                   ___ftadd@sign 0096  
                                          l400 0F8A                                            l401 0FA0  
                                          l402 0FAE                                            l411 10BA  
                                          l412 1122                                            l405 0FAA  
                                          l430 13AE                                            l414 1148  
                                          l406 0FD4                                            l431 1312  
                                          l415 1186                                            l408 1584  
                                          l440 1468                                            l416 124A  
                                          l352 28E0                                            l433 13CE  
                                          l425 12B0                                            l409 1026  
                                          l442 157A                                            l434 13B8  
                                          l291 2AD8                                            l363 2B68  
                                          l443 1564                                            l419 11F4  
                                          l292 2AFE                                            l364 2B4E  
                                          l436 13F2                                            l293 2AFC  
                                          l445 15A8                                            l437 13F6  
                                          l710 1D3A                                            l622 271C  
                                          l390 1728                                            l438 1418  
                                          l623 2726                                            l615 26CE  
                                          l631 2960                                            l383 1BBC  
                                          l439 1558                                            l624 2734  
                                          l616 26DE                                            l632 2958  
                                          l393 17EC                                            l714 1D64  
                                          l650 2048                                            l618 26FC  
                                          l386 1C9E                                            l394 1962  
                                          l651 2078                                            l619 26F4  
                                          l635 2978                                            l724 1DC0  
                                          l804 21BC                                            l660 20CE  
                                          l636 2982                                            l628 293E  
                                          l396 1A26                                            l733 1DFE  
                                          l725 1DB6                                            l805 21B0  
                                          l653 20B6                                            l637 2990  
                                          l629 294A                                            l389 1818  
                                          l734 1DF4                                            l654 20A6  
                                          l719 1DCA                                            l807 21D8  
                                          l647 1FE8                                            l751 1EC2  
                                          l680 24E8                                            l736 1E22  
                                          l832 276E                                            l737 1E3E  
                                          l833 2762                                            l649 2006  
                                          l753 1EEE                                            l682 2526  
                                          l738 1E6E                                            l842 29BA  
                                          l754 1F28                                            l683 2510  
                                          l843 29AE                                            l659 20DA  
                                          l763 1FB0                                            l755 1F50  
                                          l836 27A2                                            l764 1FA4  
                                          l685 254E                                            l837 27B0  
                                          l853 2A76                                            l757 1F8C  
                                          l781 2296                                            l686 2544  
                                          l846 29E2                                            l854 2A6A  
                                          l758 1F7C                                            l782 22A6  
                                          l679 24F2                                            l847 29F0  
                                          l775 2214                                            l768 2658  
                                          l792 2B1C                                            l769 2688  
                                          l777 223C                                            l786 2C56  
                                          l778 226E                                            l779 227E  
                                          l796 2120                                            l798 2198  
                                          l799 2188                                   __CFG_CPD$OFF 000000  
                   ??_INT0_SetInterruptHandler 0063                        __size_of_PMD_Initialize 001C  
                                 ___awmod@sign 0065                                            prod 000FF3  
                                          tosl 000FFD                                            wreg 000FE8  
                                _INT0_CallBack 2CAA                                   __CFG_ZCD$OFF 000000  
                                         l2237 26B4                                           l3217 13B8  
                                         l3161 1186                                           l3265 15A4  
                                         l3169 11CE                                           l3189 12B4  
                                         l2735 2AC4                                           STR_1 0F77  
                                         u2010 1D56                                           u2110 1E06  
                                         u2040 1D94                                           u3010 12F2  
                                         u2300 2964                                           u3100 15C4  
                                         _LATA 000F83                                           _LATB 000F84  
                                         u2151 21FC                                           _LATC 000F85  
                                         u2080 1DD2                                           u2240 2700  
                                         u3040 13DC                                           _LATD 000F86  
                                         _LATE 000F87                                           u3050 13EC  
                                         u2171 2224                                           u1720 24DA  
                                         u2600 20E0                                           u3217 28D8  
                                         u2530 1FB6                                           u2451 1EA6  
                                         u3227 28EC                                           u2471 1ED2  
                                         u1760 2558                                           u2720 21C2  
                                         u1941 1CF8                                           u2661 2104  
                                         u2750 2772                                           u1951 1D0C  
                                         u2680 213E                                           u2930 1158  
                                         u1980 1D2C                                           u2780 29BE  
                                         u2940 1198                                           _PMD0 000EE1  
                                         u2685 2136                                           _PMD1 000EE2  
                                         _PMD2 000EE3                                           _PMD3 000EE4  
                                         _PMD4 000EE5                                           _PMD5 000EE6  
                                         u2970 11CE                                           u2890 105E  
                                         u2895 1054                                           i2l61 2D56  
                                         i2l99 0060                                           _WPUA 000F10  
                                         _WPUB 000F18                                           _WPUC 000F20  
                                         _WPUD 000F25                                           _WPUE 000F2D  
                                _EUSART1_Write 2AC0                                  __CFG_FCMEN$ON 000000  
                                         _main 28B4                                   ___ftpack@arg 0060  
                                 ___ftpack@exp 0063                                           fsr0h 000FEA  
                                         fsr1h 000FE2                                           fsr2h 000FDA  
                                         fsr0l 000FE9                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                                         btemp 005B                                           prodh 000FF4  
                                         prodl 000FF3                                           start 00E8  
                              _timer5ReloadVal 0059                                   _sprintf$1490 00AB  
                                __CFG_CSWEN$ON 000000                                   ___ftmul@cntr 0081  
                                 i2___ftmul@f1 000C                                   i2___ftmul@f2 000F  
                                 ___param_bank 000000                                   ___ftmul@sign 0082  
                                 i2___fttol@f1 001B                                  __CFG_SCANE$ON 000000  
                                 ___fttol@exp1 0098                                   ___fttol@lval 0094  
                             __end_of_INT0_ISR 2DAC                 __size_of_OSCILLATOR_Initialize 0018  
                __end_of_OSCILLATOR_Initialize 2D78                                          ?_main 0001  
                              __end_of___awdiv 273E                                __end_of___ftadd 1E94  
                                __CFG_WDTE$OFF 000000                                __end_of___awmod 299A  
                     TMR5_ReadTimer@readValLow 0008                                __end_of___ftneg 2C64  
                              __end_of___lldiv 27C2                                __end_of___ftmul 22E0  
                              ___awdiv@divisor 0068                                __end_of___llmod 2A02  
                              __end_of___ftsub 2B46                                __end_of___fttol 21EA  
                                        _T5CLK 000FC6                                          _T5CON 000FC3  
                               __CFG_DEBUG$OFF 000000                                          i2l102 007E  
                                        i2l303 2BF0                                          i2l304 2C12  
                                        i2l358 2854                                          i2l297 2BE2  
                                        i2l298 2BDE                                          i2l804 23A6  
                                        i2l805 239A                                          i2l807 23C2  
                                        i2l680 2596                                          i2l682 25D4  
                                        i2l683 25BE                                          i2l685 25FC  
                                        i2l781 247E                                          i2l686 25F2  
                                        i2l782 248E                                          i2l679 25A0  
                                        i2l775 23FC                                          i2l777 2424  
                                        i2l778 2456                                          i2l779 2466  
                                        i2l796 230C                                ___awdiv@counter 006A  
                                        i2l798 2382                                          i2l799 2372  
                                        _OSCEN 000EDC                                          _TMR5H 000FC2  
                                        _TMR5L 000FC1                                          _TRISA 000F88  
                                        _TRISB 000F89                                 ?_INT0_CallBack 0001  
                                        _TRISC 000F8A                                          _TRISD 000F8B  
                                        _TRISE 000F8C                           __size_of_echoChanged 0078  
                                __CFG_WRT0$OFF 000000                                  __CFG_WRT1$OFF 000000  
                                __CFG_WRT2$OFF 000000                                  __CFG_WRT3$OFF 000000  
                                __CFG_WRT4$OFF 000000                                  __CFG_WRT5$OFF 000000  
                                 ___lltoft@exp 0070                                  __CFG_WRT6$OFF 000000  
                                __CFG_WRT7$OFF 000000                           _EUSART1_Transmit_ISR 2BB6  
                               __CFG_EBTR0$OFF 000000                                 __CFG_EBTR1$OFF 000000  
                               __CFG_EBTR2$OFF 000000                                 __CFG_EBTR3$OFF 000000  
                               __CFG_EBTR4$OFF 000000                                 __CFG_EBTR5$OFF 000000  
                               __CFG_EBTR6$OFF 000000                                 __CFG_EBTR7$OFF 000000  
                                __CFG_WRTB$OFF 000000                                  __CFG_WRTC$OFF 000000  
                                __CFG_WRTD$OFF 000000                                 __CFG_EBTRB$OFF 000000  
                              __end_of_dpowers 0F29                                          _scale 15D2  
                           __CFG_MCLRE$EXTMCLR 000000                                  ___ftpack@sign 0064  
                               ?_EUSART1_Write 0001                                          pclath 000FFA  
                                        tablat 000FF5                                          status 000FD8  
                                        wtemp6 005C                                __end_of_sprintf 15D2  
                           __size_ofi2___ftmul 00F4                             __size_ofi2___fttol 00F4  
                              _TMR5_Initialize 2B80                                __initialization 2C88  
                        TMR5_ReadTimer@readVal 0005                     __end_of_EUSART1_Initialize 2A62  
                                 __end_of_main 2928                                  i2___ftmul@exp 0015  
                  ?_INTERRUPT_InterruptManager 0001                                    ?i2___ftpack 0001  
                                       ??_main 00C2                                  ___fttol@sign1 0093  
                                __activetblptr 000003                           __size_of__tdiv_to_l_ 0134  
                        ?_EUSART1_Transmit_ISR 0001                               ___llmod@dividend 0060  
                                       ?_scale 0083                               ___awdiv@dividend 0066  
                                       _ANSELA 000F11                                         _ANSELB 000F19  
                                       _ANSELC 000F21                                         _ANSELD 000F26  
                                       _ANSELE 000F2E                               __end_of___ftpack 2578  
                                       _T5GATE 000FC5                                         _T5GCON 000FC4  
                                       _RC1REG 000F99                                         _RC1STA 000F9D  
                             __end_of___lltoft 2AC0                                         _ODCONA 000F0F  
                                       _ODCONB 000F17                                         _ODCONC 000F1F  
                                       _RC6PPS 000EFD                                         _ODCOND 000F24  
                                       _ODCONE 000F2C                                 __CFG_WDTCCS$SC 000000  
                                       u181_41 240C                                         u185_41 22F0  
                             __end_of___lwtoft 2C88                                         u179_41 23E4  
                                       _OSCFRQ 000EDE                                         _TX1REG 000F9A  
                                       _TX1STA 000F9E                                 __CFG_PWRTE$OFF 000000  
                               __CFG_XINST$OFF 000000                               __end_of__powers_ 0F50  
                    __CFG_RSTOSC$HFINTOSC_1MHZ 000000                                         ___ftge 2626  
                                       ___wmul 2C16                                      ??___awdiv 006A  
                                    ??___ftadd 0093                                 __CFG_STVREN$ON 000000  
                                    ??___awmod 0064                                      ??___ftneg 0063  
                                    ??___lldiv 0068                                      ??___ftmul 007A  
                                    ??___llmod 0068                                      ??___ftsub 009F  
                                    ??___fttol 008E                                         _fround 1A52  
                                       clear_0 2C8E                                         clear_1 2C9A  
                             ___awdiv@quotient 006C                                ___awmod@divisor 0062  
                              ___awmod@counter 0064                                ??_INT0_CallBack 002A  
                        ___ftmul@f3_as_product 007E                                _TMR5_StartTimer 2DB8  
                               _PMD_Initialize 2D28                              __end_ofi2___ftmul 24C8  
                            __end_ofi2___fttol 23D4                                   __mediumconst 0000  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                                ??_EUSART1_Write 0060  
     INT0_SetInterruptHandler@InterruptHandler 0060                                      ??_sprintf 00A5  
                              _eusart1RxBuffer 003C                  __size_of_INTERRUPT_Initialize 0004  
                              _eusart1TxBuffer 0044                        __end_of_TMR5_Initialize 2BB6  
                            _SYSTEM_Initialize 2CEC                                     __accesstop 0060  
                      __end_of__initialization 2CA0                                      ?_INT0_ISR 0001  
                                   ___ftadd@f1 008D                                     ___ftadd@f2 0090  
                          __size_ofi2___ftpack 00AE                                     ___ftge@ff1 0060  
                                   ___ftge@ff2 0063                             ?_SYSTEM_Initialize 0001  
                    __size_ofi2_TMR5_StopTimer 0004                                  ___rparam_used 000001  
                              _TMR5_WriteTimer 2D44                                     ___ftneg@f1 0060  
                               i2___ftpack@arg 0001                                 i2___ftpack@exp 0004  
                                   ___ftmul@f1 0074                                     ___ftmul@f2 0077  
                                   ___ftsub@f1 0099                                     ___ftsub@f2 009C  
                                   ___fttol@f1 008A                                 __pcstackCOMRAM 0001  
                          ??_SYSTEM_Initialize 0063                                     ___lltoft@c 0068  
                               i2___ftmul@cntr 0019                                  __end_of_scale 1A52  
                               i2___ftmul@sign 001A                         __end_of_PMD_Initialize 2D44  
                               i2___fttol@exp1 0029                                     ___lwtoft@c 0009  
                               i2___fttol@lval 0025                         ??_EUSART1_Transmit_ISR 0001  
                  __size_of_EXT_INT_Initialize 001E                                     __div_to_l_ 1FC8  
                  __end_of_EUSART1_Receive_ISR 2C16                                __div_to_l_@exp1 006B  
                              __div_to_l_@cntr 006A                                        ??_scale 0086  
                    __end_of_SYSTEM_Initialize 2D0A                                __div_to_l_@quot 0066  
                                _eusart1RxHead 00C6                                  _eusart1TxHead 00C8  
                                _eusart1RxTail 004F                                     __pbssBANK0 00C4  
                                _eusart1TxTail 00C7              _EUSART1_TxDefaultInterruptHandler 0053  
              ??_EUSART1_SetRxInterruptHandler 0063                          _INT0_InterruptHandler 0056  
                                   ??_INT0_ISR 002A                                     __pnvCOMRAM 0050  
                                __div_to_l_@f1 0060                                  __div_to_l_@f2 0063  
                                      ?___ftge 0060                                        ?___wmul 006E  
                      __end_of_TMR5_StartTimer 2DBC                                __CFG_PPS1WAY$ON 000000  
                                      ?_fround 0083                                      ?___ftpack 0060  
                              ?_PMD_Initialize 0001                                      ?___lltoft 0068  
                                    ?___lwtoft 0009                                        _SP1BRGH 000F9C  
                                      _SP1BRGL 000F9B                        __size_of_TMR5_ReadTimer 0020  
                                      _OSCCON1 000ED8                                        _OSCCON3 000EDA  
                                      _OSCTUNE 000EDD                        __end_of_TMR5_WriteTimer 2D60  
                             ?_TMR5_Initialize 0001              __size_of_INT0_SetInterruptHandler 000E  
                    ?_INT0_SetInterruptHandler 0060                             serial_print@cadena 0061  
                            __end_of__npowers_ 0F77                                        __Hparam 0000  
                                   _scale$1489 0086                                        __Lparam 0000  
                                ?_serial_print 0061                                __size_of___ftge 0092  
                                      ___awdiv 26B8                                        ___ftadd 1CE6  
                                      ___awmod 2928                                        ___ftneg 2C3E  
                                      ___lldiv 273E                                __size_of___wmul 0028  
                                      ___ftmul 21EA                                        ___llmod 299A  
                                      ___ftsub 2B04                                        ___fttol 20F2  
                                 __psmallconst 0F00                                        __pcinit 2C88  
                                 ??i2___ftpack 0006                                  ??_echoChanged 002A  
                                   ??___ftpack 0065                                __size_of_fround 0294  
                      i2___ftmul@f3_as_product 0016                                        __ramtop 0F00  
                                   ??___lltoft 006C                                        __ptext0 28B4  
                                      __ptext1 0F7E                                        __ptext2 15D2  
                                      __ptext3 1A52                                        __ptext4 2C16  
                                      __ptext5 21EA                                        __ptext6 2928  
                                      __ptext7 26B8                                        __ptext8 1E94  
                                      __ptext9 1FC8                                     ??___lwtoft 000C  
                      __size_of_TMR5_StopTimer 0004                                    ?__div_to_l_ 0060  
                                      _dpowers 0F01                          _OSCILLATOR_Initialize 2D60  
                             ___awmod@dividend 0060                             _EUSART1_Initialize 2A02  
                     ??_PIN_MANAGER_Initialize 0060                                      _T5CONbits 000FC3  
                   __size_of_SYSTEM_Initialize 001E                                        _sprintf 0F7E  
                         end_of_initialization 2CA0                            ?_EUSART1_Initialize 0001  
                             i2_TMR5_StopTimer 2DB4                             __end_ofi2___ftpack 2626  
                              ___lldiv@divisor 0064          __end_of_EUSART1_SetRxInterruptHandler 2DA2  
       __size_of_EUSART1_SetRxInterruptHandler 000E                  _EUSART1_SetRxInterruptHandler 2D94  
                              ___lldiv@counter 006C                                 ??_serial_print 0063  
                                      postdec2 000FDD                                        postinc0 000FEE  
                                      postinc2 000FDE                               ?_TMR5_StartTimer 0001  
                               __tdiv_to_l_@f1 0060                                 __tdiv_to_l_@f2 0063  
                         ??_EUSART1_Initialize 0063                                     _timerCount 004C  
                        __CFG_WDTCPS$WDTCPS_31 000000                                  ??__tdiv_to_l_ 0066  
                                    _PORTBbits 000F8E                            __end_of_echoChanged 28B4  
                          EUSART1_Write@txData 0060                               __CFG_FEXTOSC$OFF 000000  
                                    i2___ftmul 23D4                                      i2___fttol 22E0  
                             ?_TMR5_WriteTimer 0001                        TMR5_WriteTimer@timerVal 0001  
                              i2___ftpack@sign 0005                              __size_of_INT0_ISR 000A  
                          __size_of__div_to_l_ 012A                                    ___ftmul@exp 007D  
                 __end_of_INTERRUPT_Initialize 2DB4           __end_of_INT0_DefaultInterruptHandler 2DBE  
        __size_of_INT0_DefaultInterruptHandler 0002                   _INT0_DefaultInterruptHandler 2DBC  
                               __end_of___ftge 26B8                                 __end_of___wmul 2C3E  
                       ?_OSCILLATOR_Initialize 0001                                 __end_of_fround 1CE6  
                        __end_of_INT0_CallBack 2CCC                                 _TMR5_ReadTimer 2CCC  
                          start_initialization 2C88                __size_of_PIN_MANAGER_Initialize 007A  
                          __end_of__tdiv_to_l_ 1FC8                                i2___fttol@sign1 0024  
EUSART1_SetRxInterruptHandler@interruptHandler 0060  EUSART1_SetTxInterruptHandler@interruptHandler 0060  
                                   ?i2___ftmul 000C                                     ?i2___fttol 001B  
                        __end_of_EUSART1_Write 2B04                                ___llmod@divisor 0064  
                              ___llmod@counter 0068                               __CFG_LPBOREN$OFF 000000  
                             ??_PMD_Initialize 0060                                       ??___ftge 0066  
                                     ??___wmul 0072                 ?_EUSART1_SetRxInterruptHandler 0060  
                                     ??_fround 0086                     __end_of_EXT_INT_Initialize 2D28  
                ?_INT0_DefaultInterruptHandler 0001                                    _echoChanged 283C  
                                sprintf@tmpval 00BA                                 _TMR5_StopTimer 2DAC  
                       __end_of_TMR5_ReadTimer 2CEC                                 _eusart1RxCount 004E  
                                   fround@prec 008C                              __size_of___ftpack 00B0  
                            __size_of___lltoft 005E                                    __pbssCOMRAM 003C  
            _EUSART1_RxDefaultInterruptHandler 0050               __end_of_INT0_SetInterruptHandler 2D86  
                            __size_of___lwtoft 0024                  __size_of_EUSART1_Transmit_ISR 0032  
                                __pcstackBANK0 0060                           __end_of_serial_print 2B80  
              ??_EUSART1_SetTxInterruptHandler 0063                   __size_of_EUSART1_Receive_ISR 002E  
                                  sprintf@flag 00B0                                    sprintf@fval 00BE  
                                  sprintf@prec 00B2                                      __pnvBANK0 00E9  
                       _PIN_MANAGER_Initialize 27C2                                      __pintcode 0008  
                                     ?___awdiv 0066                                       ?___ftadd 008D  
                                     ?___awmod 0060                                       ?___ftneg 0060  
                                     ?___lldiv 0060                                       ?___ftmul 0074  
                                     ?___llmod 0060                                       ?___ftsub 0099  
                                    __npowers_ 0F50                                       ?___fttol 008A  
                       __end_of_TMR5_StopTimer 2DB0                   ??_INTERRUPT_InterruptManager 002A  
                                  __tdiv_to_l_ 1E94                                      _distancia 00C4  
                              ?_TMR5_ReadTimer 0001                                   ??__div_to_l_ 0066  
                                     _BAUD1CON 000F9F                                    __smallconst 0F00  
                     __end_ofi2_TMR5_StopTimer 2DB8                                       ?_sprintf 009F  
                                  ??i2___ftmul 0012                                 __size_of_scale 0480  
                                  ??i2___fttol 001F                           _INTERRUPT_Initialize 2DB0  
                                     _INT0_ISR 2DA2                                 ___wmul@product 0072  
                                     _PIE0bits 000EC2                                       _PIE3bits 000EC5  
                          __CFG_BORV$VBOR_2P45 000000            __size_of_INTERRUPT_InterruptManager 00E0  
                                     i2u320_48 0088                                       i2u320_49 009C  
                                     i2u163_40 2588                                       i2u234_48 2CB8  
                                     i2u323_47 28AA                                       i2u317_48 006E  
                                     i2u167_40 2606                                       i2u191_40 23AC  
                                     _PIR0bits 000ECA                             __end_of__div_to_l_ 20F2  
                                     i2u187_40 232A                                       i2u187_45 2322  
                                     _PIR3bits 000ECD                                       _PIR4bits 000ECE  
                     __size_of_TMR5_Initialize 0036                                    _INT0PPSbits 000EA1  
                              ?_TMR5_StopTimer 0001                              ___wmul@multiplier 006E  
                                serial_print@i 0063                      TMR5_ReadTimer@readValHigh 0007  
               ??_INT0_DefaultInterruptHandler 0001                          ?_INTERRUPT_Initialize 0001  
                     _INT0_SetInterruptHandler 2D78          __end_of_EUSART1_SetTxInterruptHandler 2D94  
       __size_of_EUSART1_SetTxInterruptHandler 000E                  _EUSART1_SetTxInterruptHandler 2D86  
                                     __Hrparam 0000                                       __Lrparam 0000  
                           __CFG_BOREN$SBORDIS 000000                        ??_OSCILLATOR_Initialize 0060  
                             __size_of___awdiv 0086                               __size_of___ftadd 01AE  
                             __size_of___awmod 0072                               __size_of___ftneg 0026  
                             __size_of___lldiv 0084                               __size_of___ftmul 00F6  
                             __size_of___llmod 0068                               __size_of___ftsub 0042  
                             __size_of___fttol 00F8                    __size_of_EUSART1_Initialize 0060  
                                     ___ftpack 24C8                                    _fround$1487 0089  
                                  _fround$1488 0086                                       ___lltoft 2A62  
                                     ___lwtoft 2C64                          __size_of_serial_print 003A  
                                   sprintf@exp 00B8                                     sprintf@val 00B4  
                     __size_of_TMR5_StartTimer 0004                                       __ptext10 2A62  
                                     __ptext11 299A                                       __ptext20 2AC0  
                                     __ptext12 273E                                       __ptext21 2DAC  
                                     __ptext13 20F2                                       __ptext30 2A02  
                                     __ptext22 2CEC                                       __ptext14 2B04  
                                     __ptext31 2D86                                       __ptext23 2B80  
                                     __ptext15 1CE6                                       __ptext40 2DB4  
                                     __ptext32 2D94                                       __ptext24 2D28  
                                     __ptext16 24C8                                       __ptext41 2C64  
                                     __ptext25 27C2                                       __ptext17 2C3E  
                                     __ptext42 2578                                       __ptext34 2DA2  
                                     __ptext26 2D60                                       __ptext18 2626  
                                     __ptext43 2D44                                       __ptext35 2CAA  
                                     __ptext27 2DB0                                       __ptext19 2B46  
                                     __ptext44 2DB8                                       __ptext36 2DBC  
                                     __ptext28 2D0A                                       __ptext45 2CCC  
                                     __ptext37 283C                                       __ptext29 2D78  
                                     __ptext46 2BB6                                       __ptext38 22E0  
                                     __ptext47 2BE8                                       __ptext39 23D4  
                                     __ptext48 0000                                       __powers_ 0F29  
                             __size_of_sprintf 0654                                  __size_of_main 0074  
                                   _T5GCONbits 000FC4                           __CFG_WDTCWS$WDTCWS_7 000000  
                     __size_of_TMR5_WriteTimer 001C                                     _RC1STAbits 000F9D  
                                 _serial_print 2B46                                       int$flags 005B  
           __end_of_INTERRUPT_InterruptManager 00E8                     _INTERRUPT_InterruptManager 0008  
                                 ?_echoChanged 0001                            _EUSART1_Receive_ISR 2BE8  
                            ??_TMR5_Initialize 0060                                     _INTCONbits 000FF2  
                       ??_INTERRUPT_Initialize 0060                                       scale@scl 0089  
                           _EXT_INT_Initialize 2D0A                                       intlevel2 0000  
                                    sprintf@ap 00AE                               __tdiv_to_l_@exp1 006E  
                                    sprintf@sp 009F                               __tdiv_to_l_@cntr 006D  
                             __tdiv_to_l_@quot 0069                           ?_EUSART1_Receive_ISR 0001  
                             ___lldiv@dividend 0060                        ?_PIN_MANAGER_Initialize 0001  
                            __CFG_CLKOUTEN$OFF 000000                            ?_EXT_INT_Initialize 0001  
                                 _vectorString 00C9                   __end_of_EUSART1_Transmit_ISR 2BE8  
                       __size_of_INT0_CallBack 0022                               ??_TMR5_ReadTimer 0003  
               ?_EUSART1_SetTxInterruptHandler 0060                         __size_of_EUSART1_Write 0044  
                                 ?__tdiv_to_l_ 0060                                     _RX1PPSbits 000EB5  
                         ??_EXT_INT_Initialize 0063                                       sprintf@c 00C1  
                                     sprintf@f 00A1                               ___lldiv@quotient 0068  
                            ?i2_TMR5_StopTimer 0001                             ??i2_TMR5_StopTimer 0001  
                                   _TX1STAbits 000F9E                              ??_TMR5_StartTimer 0001  
                        ??_EUSART1_Receive_ISR 0001                 __end_of_PIN_MANAGER_Initialize 283C  
                             ??_TMR5_StopTimer 0060  
