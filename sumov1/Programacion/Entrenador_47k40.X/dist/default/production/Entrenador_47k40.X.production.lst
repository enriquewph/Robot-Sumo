

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Thu Jun 21 13:43:30 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F47K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           ; Version 1.44
    86                           ; Generated 14/09/2017 GMT
    87                           ; 
    88                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    89                           ; All rights reserved.
    90                           ; 
    91                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    92                           ; 
    93                           ; Redistribution and use in source and binary forms, with or without modification, are
    94                           ; permitted provided that the following conditions are met:
    95                           ; 
    96                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    97                           ;        conditions and the following disclaimer.
    98                           ; 
    99                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   100                           ;        of conditions and the following disclaimer in the documentation and/or other
   101                           ;        materials provided with the distribution.
   102                           ; 
   103                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   104                           ;        software without specific prior written permission.
   105                           ; 
   106                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   107                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   108                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   109                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   110                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   111                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   112                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   113                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   114                           ; 
   115                           ; 
   116                           ; Code-generator required, PIC18F47K40 Definitions
   117                           ; 
   118                           ; SFR Addresses
   119  0000                     
   120                           	psect	idataBANK0
   121  00328E                     __pidataBANK0:
   122                           	opt stack 0
   123                           
   124                           ;initializer for _simboloGrados
   125  00328E  18                 	db	24
   126  00328F  18                 	db	24
   127  003290  00                 	db	0
   128  003291  0F                 	db	15
   129  003292  08                 	db	8
   130  003293  08                 	db	8
   131  003294  08                 	db	8
   132  003295  0F                 	db	15
   133                           
   134                           	psect	smallconst
   135  000F00                     __psmallconst:
   136                           	opt stack 0
   137  000F00  00                 	db	0
   138  000F01                     _dpowers:
   139                           	opt stack 0
   140  000F01  0001               	dw	1
   141  000F03  0000               	dw	0
   142  000F05  000A               	dw	10
   143  000F07  0000               	dw	0
   144  000F09  0064               	dw	100
   145  000F0B  0000               	dw	0
   146  000F0D  03E8               	dw	1000
   147  000F0F  0000               	dw	0
   148  000F11  2710               	dw	10000
   149  000F13  0000               	dw	0
   150  000F15  86A0               	dw	34464
   151  000F17  0001               	dw	1
   152  000F19  4240               	dw	16960
   153  000F1B  000F               	dw	15
   154  000F1D  9680               	dw	38528
   155  000F1F  0098               	dw	152
   156  000F21  E100               	dw	57600
   157  000F23  05F5               	dw	1525
   158  000F25  CA00               	dw	51712
   159  000F27  3B9A               	dw	15258
   160  000F29                     __end_of_dpowers:
   161                           	opt stack 0
   162  000F29                     __powers_:
   163                           	opt stack 0
   164  000F29  00                 	db	0
   165  000F2A  80                 	db	128
   166  000F2B  3F                 	db	63
   167  000F2C  00                 	db	0
   168  000F2D  20                 	db	32
   169  000F2E  41                 	db	65
   170  000F2F  00                 	db	0
   171  000F30  C8                 	db	200
   172  000F31  42                 	db	66
   173  000F32  00                 	db	0
   174  000F33  7A                 	db	122
   175  000F34  44                 	db	68
   176  000F35  40                 	db	64
   177  000F36  1C                 	db	28
   178  000F37  46                 	db	70
   179  000F38  50                 	db	80
   180  000F39  C3                 	db	195
   181  000F3A  47                 	db	71
   182  000F3B  24                 	db	36
   183  000F3C  74                 	db	116
   184  000F3D  49                 	db	73
   185  000F3E  97                 	db	151
   186  000F3F  18                 	db	24
   187  000F40  4B                 	db	75
   188  000F41  BC                 	db	188
   189  000F42  BE                 	db	190
   190  000F43  4C                 	db	76
   191  000F44  6B                 	db	107
   192  000F45  6E                 	db	110
   193  000F46  4E                 	db	78
   194  000F47  03                 	db	3
   195  000F48  15                 	db	21
   196  000F49  50                 	db	80
   197  000F4A  79                 	db	121
   198  000F4B  AD                 	db	173
   199  000F4C  60                 	db	96
   200  000F4D  F3                 	db	243
   201  000F4E  49                 	db	73
   202  000F4F  71                 	db	113
   203  000F50                     __end_of__powers_:
   204                           	opt stack 0
   205  000F50                     __npowers_:
   206                           	opt stack 0
   207  000F50  00                 	db	0
   208  000F51  80                 	db	128
   209  000F52  3F                 	db	63
   210  000F53  CD                 	db	205
   211  000F54  CC                 	db	204
   212  000F55  3D                 	db	61
   213  000F56  D7                 	db	215
   214  000F57  23                 	db	35
   215  000F58  3C                 	db	60
   216  000F59  12                 	db	18
   217  000F5A  83                 	db	131
   218  000F5B  3A                 	db	58
   219  000F5C  B7                 	db	183
   220  000F5D  D1                 	db	209
   221  000F5E  38                 	db	56
   222  000F5F  C6                 	db	198
   223  000F60  27                 	db	39
   224  000F61  37                 	db	55
   225  000F62  38                 	db	56
   226  000F63  86                 	db	134
   227  000F64  35                 	db	53
   228  000F65  C0                 	db	192
   229  000F66  D6                 	db	214
   230  000F67  33                 	db	51
   231  000F68  CC                 	db	204
   232  000F69  2B                 	db	43
   233  000F6A  32                 	db	50
   234  000F6B  70                 	db	112
   235  000F6C  89                 	db	137
   236  000F6D  30                 	db	48
   237  000F6E  E7                 	db	231
   238  000F6F  DB                 	db	219
   239  000F70  2E                 	db	46
   240  000F71  E5                 	db	229
   241  000F72  3C                 	db	60
   242  000F73  1E                 	db	30
   243  000F74  42                 	db	66
   244  000F75  A2                 	db	162
   245  000F76  0D                 	db	13
   246  000F77                     __end_of__npowers_:
   247                           	opt stack 0
   248  000F77                     STR_1:
   249  000F77  54                 	db	84	;'T'
   250  000F78  65                 	db	101	;'e'
   251  000F79  6D                 	db	109	;'m'
   252  000F7A  70                 	db	112	;'p'
   253  000F7B  65                 	db	101	;'e'
   254  000F7C  72                 	db	114	;'r'
   255  000F7D  61                 	db	97	;'a'
   256  000F7E  74                 	db	116	;'t'
   257  000F7F  75                 	db	117	;'u'
   258  000F80  72                 	db	114	;'r'
   259  000F81  61                 	db	97	;'a'
   260  000F82  3A                 	db	58	;':'
   261  000F83  00                 	db	0
   262  000F84                     STR_3:
   263  000F84  20                 	db	32
   264  000F85  20                 	db	32
   265  000F86  20                 	db	32
   266  000F87  20                 	db	32
   267  000F88  20                 	db	32
   268  000F89  00                 	db	0
   269  000F8A                     STR_2:
   270  000F8A  25                 	db	37
   271  000F8B  2E                 	db	46
   272  000F8C  33                 	db	51	;'3'
   273  000F8D  66                 	db	102	;'f'
   274  000F8E  00                 	db	0
   275                           
   276                           ; #config settings
   277  000F8F  00                 	db	0	; dummy byte at the end
   278  0000                     
   279                           	psect	nvBANK0
   280  0000D3                     __pnvBANK0:
   281                           	opt stack 0
   282  0000D3                     _TMR0_InterruptHandler:
   283                           	opt stack 0
   284  0000D3                     	ds	3
   285  0000D6                     __displayfunction:
   286                           	opt stack 0
   287  0000D6                     	ds	1
   288  0000                     _PIR3bits	set	3789
   289  0000                     _PIE3bits	set	3781
   290  0000                     _PIR0bits	set	3786
   291  0000                     _PIE0bits	set	3778
   292  0000                     _SSP1DATPPSbits	set	3768
   293  0000                     _ADACTPPSbits	set	3758
   294  0000                     _RC4PPS	set	3835
   295  0000                     _RC3PPS	set	3834
   296  0000                     _SSP1CLKPPSbits	set	3767
   297  0000                     _PPSLOCKbits	set	3744
   298  0000                     _PPSLOCK	set	3744
   299  0000                     _OSCTUNE	set	3805
   300  0000                     _OSCFRQ	set	3806
   301  0000                     _OSCEN	set	3804
   302  0000                     _OSCCON3	set	3802
   303  0000                     _OSCCON1	set	3800
   304  0000                     _ADCON1bits	set	3929
   305  0000                     _ADCON2bits	set	3930
   306  0000                     _ADPRE	set	3934
   307  0000                     _ADACQ	set	3932
   308  0000                     _ADCON3bits	set	3931
   309  0000                     _ADCLK	set	3927
   310  0000                     _ADACT	set	3926
   311  0000                     _ADREF	set	3928
   312  0000                     _ADCON3	set	3931
   313  0000                     _ADCON2	set	3930
   314  0000                     _ADCON1	set	3929
   315  0000                     _ADCAP	set	3933
   316  0000                     _ADPCH	set	3935
   317  0000                     _ODCOND	set	3876
   318  0000                     _ODCONC	set	3871
   319  0000                     _ODCONB	set	3863
   320  0000                     _ODCONA	set	3855
   321  0000                     _ODCONE	set	3884
   322  0000                     _WPUC	set	3872
   323  0000                     _WPUA	set	3856
   324  0000                     _WPUB	set	3864
   325  0000                     _WPUE	set	3885
   326  0000                     _WPUD	set	3877
   327  0000                     _ANSELA	set	3857
   328  0000                     _ANSELE	set	3886
   329  0000                     _ANSELD	set	3878
   330  0000                     _ANSELB	set	3865
   331  0000                     _ANSELC	set	3873
   332  0000                     _PORTEbits	set	3985
   333  0000                     _PORTDbits	set	3984
   334  0000                     _SSP1BUF	set	3986
   335  0000                     _SSP1CON2bits	set	3991
   336  0000                     _SSP1CON1bits	set	3990
   337  0000                     _SSP1ADD	set	3987
   338  0000                     _SSP1CON3	set	3992
   339  0000                     _SSP1CON1	set	3990
   340  0000                     _SSP1STAT	set	3989
   341  0000                     _T0CON0bits	set	4053
   342  0000                     _T0CON0	set	4053
   343  0000                     _TMR0L	set	4051
   344  0000                     _TMR0H	set	4052
   345  0000                     _T0CON1	set	4054
   346  0000                     _INTCONbits	set	4082
   347  0000                     _ADERRL	set	3950
   348  0000                     _ADERRH	set	3951
   349  0000                     _ADPREVL	set	3937
   350  0000                     _ADPREVH	set	3938
   351  0000                     _ADFLTRL	set	3954
   352  0000                     _ADFLTRH	set	3955
   353  0000                     _ADSTATbits	set	3941
   354  0000                     _ADACCL	set	3952
   355  0000                     _ADACCH	set	3953
   356  0000                     _ADCNT	set	3943
   357  0000                     _ADRESL	set	3939
   358  0000                     _ADRESH	set	3940
   359  0000                     _ADCON0bits	set	3936
   360  0000                     _ADCON0	set	3936
   361  0000                     _ADSTAT	set	3941
   362  0000                     _ADRPT	set	3942
   363  0000                     _ADSTPTH	set	3945
   364  0000                     _ADSTPTL	set	3944
   365  0000                     _ADUTHH	set	3949
   366  0000                     _ADUTHL	set	3948
   367  0000                     _ADLTHH	set	3947
   368  0000                     _ADLTHL	set	3946
   369  0000                     _TRISD	set	3979
   370  0000                     _TRISC	set	3978
   371  0000                     _TRISB	set	3977
   372  0000                     _TRISA	set	3976
   373  0000                     _TRISE	set	3980
   374  0000                     _LATC	set	3973
   375  0000                     _LATB	set	3972
   376  0000                     _LATA	set	3971
   377  0000                     _LATD	set	3974
   378  0000                     _LATE	set	3975
   379  0000                     _GIE	set	32663
   380                           
   381                           	psect	cinit
   382  002EEE                     __pcinit:
   383                           	opt stack 0
   384  002EEE                     start_initialization:
   385                           	opt stack 0
   386  002EEE                     __initialization:
   387                           	opt stack 0
   388                           
   389                           ; Initialize objects allocated to BANK0 (8 bytes)
   390                           ; load TBLPTR registers with __pidataBANK0
   391  002EEE  0E8E               	movlw	low __pidataBANK0
   392  002EF0  6EF6               	movwf	tblptrl,c
   393  002EF2  0E32               	movlw	high __pidataBANK0
   394  002EF4  6EF7               	movwf	tblptrh,c
   395  002EF6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   396  002EF8  6EF8               	movwf	tblptru,c
   397  002EFA  EE00  F0CB         	lfsr	0,__pdataBANK0
   398  002EFE  EE10 F008          	lfsr	1,8
   399  002F02                     copy_data0:
   400  002F02  0009               	tblrd		*+
   401  002F04  CFF5 FFEE          	movff	tablat,postinc0
   402  002F08  50E5               	movf	postdec1,w,c
   403  002F0A  50E1               	movf	fsr1l,w,c
   404  002F0C  E1FA               	bnz	copy_data0
   405                           
   406                           ; Clear objects allocated to BANK0 (59 bytes)
   407  002F0E  EE00  F060         	lfsr	0,__pbssBANK0
   408  002F12  0E3B               	movlw	59
   409  002F14                     clear_0:
   410  002F14  6AEE               	clrf	postinc0,c
   411  002F16  06E8               	decf	wreg,f,c
   412  002F18  E1FD               	bnz	clear_0
   413                           
   414                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   415  002F1A  6A5E               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   416                           
   417                           ; Clear objects allocated to COMRAM (14 bytes)
   418  002F1C  EE00  F050         	lfsr	0,__pbssCOMRAM
   419  002F20  0E0E               	movlw	14
   420  002F22                     clear_1:
   421  002F22  6AEE               	clrf	postinc0,c
   422  002F24  06E8               	decf	wreg,f,c
   423  002F26  E1FD               	bnz	clear_1
   424  002F28                     end_of_initialization:
   425                           	opt stack 0
   426  002F28                     __end_of__initialization:
   427                           	opt stack 0
   428  002F28  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   429  002F2A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   430  002F2C  0100               	movlb	0
   431  002F2E  EF09  F017         	goto	_main	;jump to C main() function
   432                           tblptru	equ	0xFF8
   433                           tblptrh	equ	0xFF7
   434                           tblptrl	equ	0xFF6
   435                           tablat	equ	0xFF5
   436                           postinc0	equ	0xFEE
   437                           wreg	equ	0xFE8
   438                           postdec1	equ	0xFE5
   439                           fsr1l	equ	0xFE1
   440                           
   441                           	psect	bitbssCOMRAM
   442  0002F0                     __pbitbssCOMRAM:
   443                           	opt stack 0
   444  0002F0                     _aireacondicionadoON:
   445                           	opt stack 0
   446  0002F0                     	ds	1
   447  0002F1                     _calefactorON:
   448                           	opt stack 0
   449  0002F1                     	ds	1
   450                           tblptru	equ	0xFF8
   451                           tblptrh	equ	0xFF7
   452                           tblptrl	equ	0xFF6
   453                           tablat	equ	0xFF5
   454                           postinc0	equ	0xFEE
   455                           wreg	equ	0xFE8
   456                           postdec1	equ	0xFE5
   457                           fsr1l	equ	0xFE1
   458                           
   459                           	psect	bssCOMRAM
   460  000050                     __pbssCOMRAM:
   461                           	opt stack 0
   462  000050                     I2C1_ISR@pi2c_buf_ptr:
   463                           	opt stack 0
   464  000050                     	ds	2
   465  000052                     _p_i2c1_current:
   466                           	opt stack 0
   467  000052                     	ds	2
   468  000054                     _p_i2c1_trb_current:
   469                           	opt stack 0
   470  000054                     	ds	2
   471  000056                     TMR0_ISR@CountCallBack:
   472                           	opt stack 0
   473  000056                     	ds	2
   474  000058                     I2C1_ISR@i2c_10bit_address_restart:
   475                           	opt stack 0
   476  000058                     	ds	1
   477  000059                     I2C1_ISR@i2c_bytes_left:
   478                           	opt stack 0
   479  000059                     	ds	1
   480  00005A                     _i2c1_trb_count:
   481                           	opt stack 0
   482  00005A                     	ds	1
   483  00005B                     _i2c1_state:
   484                           	opt stack 0
   485  00005B                     	ds	1
   486  00005C                     I2C1_ISR@i2c_address:
   487                           	opt stack 0
   488  00005C                     	ds	2
   489                           tblptru	equ	0xFF8
   490                           tblptrh	equ	0xFF7
   491                           tblptrl	equ	0xFF6
   492                           tablat	equ	0xFF5
   493                           postinc0	equ	0xFEE
   494                           wreg	equ	0xFE8
   495                           postdec1	equ	0xFE5
   496                           fsr1l	equ	0xFE1
   497                           
   498                           	psect	bssBANK0
   499  000060                     __pbssBANK0:
   500                           	opt stack 0
   501  000060                     _i2c1_object:
   502                           	opt stack 0
   503  000060                     	ds	7
   504  000067                     __displaymode:
   505                           	opt stack 0
   506  000067                     	ds	1
   507  000068                     __displaycontrol:
   508                           	opt stack 0
   509  000068                     	ds	1
   510  000069                     _vectorString:
   511                           	opt stack 0
   512  000069                     	ds	32
   513  000089                     I2C1_MasterRead@trBlock:
   514                           	opt stack 0
   515  000089                     	ds	6
   516  00008F                     I2C1_MasterWrite@trBlock:
   517                           	opt stack 0
   518  00008F                     	ds	6
   519  000095                     _i2c1_tr_queue:
   520                           	opt stack 0
   521  000095                     	ds	6
   522                           tblptru	equ	0xFF8
   523                           tblptrh	equ	0xFF7
   524                           tblptrl	equ	0xFF6
   525                           tablat	equ	0xFF5
   526                           postinc0	equ	0xFEE
   527                           wreg	equ	0xFE8
   528                           postdec1	equ	0xFE5
   529                           fsr1l	equ	0xFE1
   530                           
   531                           	psect	dataBANK0
   532  0000CB                     __pdataBANK0:
   533                           	opt stack 0
   534  0000CB                     _simboloGrados:
   535                           	opt stack 0
   536  0000CB                     	ds	8
   537                           tblptru	equ	0xFF8
   538                           tblptrh	equ	0xFF7
   539                           tblptrl	equ	0xFF6
   540                           tablat	equ	0xFF5
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           postdec1	equ	0xFE5
   544                           fsr1l	equ	0xFE1
   545                           
   546                           	psect	cstackBANK1
   547  000100                     __pcstackBANK1:
   548                           	opt stack 0
   549  000100                     LCD_print@cs:
   550                           	opt stack 0
   551  000100                     LCD_createChar@location:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x0
   555  000100                     	ds	1
   556  000101                     LCD_createChar@i:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x1
   560  000101                     	ds	2
   561                           tblptru	equ	0xFF8
   562                           tblptrh	equ	0xFF7
   563                           tblptrl	equ	0xFF6
   564                           tablat	equ	0xFF5
   565                           postinc0	equ	0xFEE
   566                           wreg	equ	0xFE8
   567                           postdec1	equ	0xFE5
   568                           fsr1l	equ	0xFE1
   569                           
   570                           	psect	cstackBANK0
   571  00009B                     __pcstackBANK0:
   572                           	opt stack 0
   573  00009B                     _sprintf$2174:
   574                           	opt stack 0
   575                           
   576                           ; 3 bytes @ 0x0
   577  00009B                     	ds	3
   578  00009E                     sprintf@ap:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x3
   582  00009E                     	ds	2
   583  0000A0                     sprintf@flag:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x5
   587  0000A0                     	ds	2
   588  0000A2                     sprintf@val:
   589                           	opt stack 0
   590                           
   591                           ; 4 bytes @ 0x7
   592  0000A2                     	ds	4
   593  0000A6                     sprintf@exp:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0xB
   597  0000A6                     	ds	2
   598  0000A8                     sprintf@tmpval:
   599                           	opt stack 0
   600                           
   601                           ; 4 bytes @ 0xD
   602  0000A8                     	ds	4
   603  0000AC                     sprintf@prec:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x11
   607  0000AC                     	ds	2
   608  0000AE                     sprintf@fval:
   609                           	opt stack 0
   610                           
   611                           ; 3 bytes @ 0x13
   612  0000AE                     	ds	3
   613  0000B1                     sprintf@c:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x16
   617  0000B1                     	ds	1
   618  0000B2                     ??_INTERRUPT_InterruptManager:
   619                           
   620                           ; 1 bytes @ 0x17
   621  0000B2                     	ds	18
   622  0000C4                     PIN_MANAGER_Initialize@state:
   623                           	opt stack 0
   624  0000C4                     LCD_RS_SET@value:
   625                           	opt stack 0
   626  0000C4                     LCD_EN_SET@value:
   627                           	opt stack 0
   628  0000C4                     TMR0_SetInterruptHandler@InterruptHandler:
   629                           	opt stack 0
   630                           
   631                           ; 3 bytes @ 0x29
   632  0000C4                     	ds	1
   633  0000C5                     LCD_write4bits@a:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x2A
   637  0000C5                     	ds	1
   638  0000C6                     LCD_send@mode:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x2B
   642  0000C6                     	ds	1
   643  0000C7                     LCD_send@value:
   644                           	opt stack 0
   645                           
   646                           ; 1 bytes @ 0x2C
   647  0000C7                     	ds	1
   648  0000C8                     LCD_command@value:
   649                           	opt stack 0
   650  0000C8                     LCD_write@value:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x2D
   654  0000C8                     	ds	1
   655  0000C9                     ??_LCD_init:
   656  0000C9                     LCD_setCursor@fila:
   657                           	opt stack 0
   658  0000C9                     LCD_print@s:
   659                           	opt stack 0
   660  0000C9                     LCD_createChar@charmap:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x2E
   664  0000C9                     	ds	1
   665  0000CA                     LCD_setCursor@columna:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x2F
   669  0000CA                     	ds	1
   670  0000CB                     tblptru	equ	0xFF8
   671                           tblptrh	equ	0xFF7
   672                           tblptrl	equ	0xFF6
   673                           tablat	equ	0xFF5
   674                           postinc0	equ	0xFEE
   675                           wreg	equ	0xFE8
   676                           postdec1	equ	0xFE5
   677                           fsr1l	equ	0xFE1
   678                           
   679                           ; 1 bytes @ 0x30
   680                           
   681                           	psect	cstackCOMRAM
   682  000001                     __pcstackCOMRAM:
   683                           	opt stack 0
   684  000001                     ??_I2C1_ISR:
   685  000001                     ??_isdigit:
   686  000001                     ?_ADCC_GetSingleConversion:
   687                           	opt stack 0
   688  000001                     ?___awmod:
   689                           	opt stack 0
   690  000001                     ?___ftpack:
   691                           	opt stack 0
   692  000001                     ?___ftneg:
   693                           	opt stack 0
   694  000001                     ?__tdiv_to_l_:
   695                           	opt stack 0
   696  000001                     ?__div_to_l_:
   697                           	opt stack 0
   698  000001                     ?___lldiv:
   699                           	opt stack 0
   700  000001                     ?___llmod:
   701                           	opt stack 0
   702  000001                     i2LCD_RS_SET@value:
   703                           	opt stack 0
   704  000001                     i2LCD_EN_SET@value:
   705                           	opt stack 0
   706  000001                     ___awmod@dividend:
   707                           	opt stack 0
   708  000001                     __div_to_l_@f1:
   709                           	opt stack 0
   710  000001                     ___ftpack@arg:
   711                           	opt stack 0
   712  000001                     __tdiv_to_l_@f1:
   713                           	opt stack 0
   714  000001                     ___ftge@ff1:
   715                           	opt stack 0
   716  000001                     ___ftneg@f1:
   717                           	opt stack 0
   718  000001                     ___lldiv@dividend:
   719                           	opt stack 0
   720  000001                     ___llmod@dividend:
   721                           	opt stack 0
   722                           
   723                           ; 4 bytes @ 0x0
   724  000001                     	ds	1
   725  000002                     _isdigit$1691:
   726                           	opt stack 0
   727  000002                     i2LCD_write4bits@a:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0x1
   731  000002                     	ds	1
   732  000003                     ??_ADCC_GetSingleConversion:
   733  000003                     isdigit@c:
   734                           	opt stack 0
   735  000003                     i2LCD_send@mode:
   736                           	opt stack 0
   737  000003                     ___awmod@divisor:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x2
   741  000003                     	ds	1
   742  000004                     ___ftpack@exp:
   743                           	opt stack 0
   744  000004                     i2LCD_send@value:
   745                           	opt stack 0
   746  000004                     __div_to_l_@f2:
   747                           	opt stack 0
   748  000004                     __tdiv_to_l_@f2:
   749                           	opt stack 0
   750  000004                     ___ftge@ff2:
   751                           	opt stack 0
   752                           
   753                           ; 3 bytes @ 0x3
   754  000004                     	ds	1
   755  000005                     ADCC_GetSingleConversion@channel:
   756                           	opt stack 0
   757  000005                     ___awmod@counter:
   758                           	opt stack 0
   759  000005                     ___ftpack@sign:
   760                           	opt stack 0
   761  000005                     i2LCD_command@value:
   762                           	opt stack 0
   763  000005                     i2LCD_write@value:
   764                           	opt stack 0
   765  000005                     ___lldiv@divisor:
   766                           	opt stack 0
   767  000005                     ___llmod@divisor:
   768                           	opt stack 0
   769                           
   770                           ; 4 bytes @ 0x4
   771  000005                     	ds	1
   772  000006                     ??___ftpack:
   773  000006                     ___awmod@sign:
   774                           	opt stack 0
   775  000006                     i2LCD_setCursor@fila:
   776                           	opt stack 0
   777  000006                     i2LCD_print@s:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x5
   781  000006                     	ds	1
   782  000007                     ??__tdiv_to_l_:
   783  000007                     ??___ftge:
   784  000007                     ?___awdiv:
   785                           	opt stack 0
   786  000007                     i2LCD_setCursor@columna:
   787                           	opt stack 0
   788  000007                     ___awdiv@dividend:
   789                           	opt stack 0
   790  000007                     __div_to_l_@quot:
   791                           	opt stack 0
   792                           
   793                           ; 4 bytes @ 0x6
   794  000007                     	ds	1
   795  000008                     i2LCD_print@cs:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x7
   799  000008                     	ds	1
   800  000009                     ?___lltoft:
   801                           	opt stack 0
   802  000009                     ?___lwtoft:
   803                           	opt stack 0
   804  000009                     ___llmod@counter:
   805                           	opt stack 0
   806  000009                     ___awdiv@divisor:
   807                           	opt stack 0
   808  000009                     ___lwtoft@c:
   809                           	opt stack 0
   810  000009                     ___lldiv@quotient:
   811                           	opt stack 0
   812  000009                     ___lltoft@c:
   813                           	opt stack 0
   814                           
   815                           ; 4 bytes @ 0x8
   816  000009                     	ds	1
   817  00000A                     regularTemperatura@temp:
   818                           	opt stack 0
   819  00000A                     __tdiv_to_l_@quot:
   820                           	opt stack 0
   821                           
   822                           ; 4 bytes @ 0x9
   823  00000A                     	ds	1
   824  00000B                     ___awdiv@counter:
   825                           	opt stack 0
   826  00000B                     __div_to_l_@cntr:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0xA
   830  00000B                     	ds	1
   831  00000C                     ___awdiv@sign:
   832                           	opt stack 0
   833  00000C                     __div_to_l_@exp1:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0xB
   837  00000C                     	ds	1
   838  00000D                     ??___lltoft:
   839  00000D                     ___lldiv@counter:
   840                           	opt stack 0
   841  00000D                     ___awdiv@quotient:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0xC
   845  00000D                     	ds	1
   846  00000E                     __tdiv_to_l_@cntr:
   847                           	opt stack 0
   848                           
   849                           ; 1 bytes @ 0xD
   850  00000E                     	ds	1
   851  00000F                     ?___wmul:
   852                           	opt stack 0
   853  00000F                     __tdiv_to_l_@exp1:
   854                           	opt stack 0
   855  00000F                     ___wmul@multiplier:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0xE
   859  00000F                     	ds	2
   860  000011                     ___lltoft@exp:
   861                           	opt stack 0
   862  000011                     ___wmul@multiplicand:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x10
   866  000011                     	ds	2
   867  000013                     ___wmul@product:
   868                           	opt stack 0
   869                           
   870                           ; 2 bytes @ 0x12
   871  000013                     	ds	2
   872  000015                     ?___ftmul:
   873                           	opt stack 0
   874  000015                     ___ftmul@f1:
   875                           	opt stack 0
   876                           
   877                           ; 3 bytes @ 0x14
   878  000015                     	ds	3
   879  000018                     ___ftmul@f2:
   880                           	opt stack 0
   881                           
   882                           ; 3 bytes @ 0x17
   883  000018                     	ds	3
   884  00001B                     ??___ftmul:
   885                           
   886                           ; 1 bytes @ 0x1A
   887  00001B                     	ds	3
   888  00001E                     ___ftmul@exp:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0x1D
   892  00001E                     	ds	1
   893  00001F                     ___ftmul@f3_as_product:
   894                           	opt stack 0
   895                           
   896                           ; 3 bytes @ 0x1E
   897  00001F                     	ds	3
   898  000022                     ___ftmul@cntr:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x21
   902  000022                     	ds	1
   903  000023                     ___ftmul@sign:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x22
   907  000023                     	ds	1
   908  000024                     ?___ftdiv:
   909                           	opt stack 0
   910  000024                     ?_fround:
   911                           	opt stack 0
   912  000024                     ?_scale:
   913                           	opt stack 0
   914  000024                     ?___fttol:
   915                           	opt stack 0
   916  000024                     ___ftdiv@f1:
   917                           	opt stack 0
   918  000024                     ___fttol@f1:
   919                           	opt stack 0
   920                           
   921                           ; 3 bytes @ 0x23
   922  000024                     	ds	3
   923  000027                     ___ftdiv@f2:
   924                           	opt stack 0
   925  000027                     _fround$2172:
   926                           	opt stack 0
   927  000027                     _scale$2173:
   928                           	opt stack 0
   929                           
   930                           ; 3 bytes @ 0x26
   931  000027                     	ds	1
   932  000028                     ??___fttol:
   933                           
   934                           ; 1 bytes @ 0x27
   935  000028                     	ds	2
   936  00002A                     ??___ftdiv:
   937  00002A                     scale@scl:
   938                           	opt stack 0
   939  00002A                     _fround$2171:
   940                           	opt stack 0
   941                           
   942                           ; 3 bytes @ 0x29
   943  00002A                     	ds	3
   944  00002D                     fround@prec:
   945                           	opt stack 0
   946  00002D                     ___ftdiv@cntr:
   947                           	opt stack 0
   948  00002D                     ___fttol@sign1:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x2C
   952  00002D                     	ds	1
   953  00002E                     ?___ftadd:
   954                           	opt stack 0
   955  00002E                     ___ftadd@f1:
   956                           	opt stack 0
   957  00002E                     ___ftdiv@f3:
   958                           	opt stack 0
   959  00002E                     ___fttol@lval:
   960                           	opt stack 0
   961                           
   962                           ; 4 bytes @ 0x2D
   963  00002E                     	ds	3
   964  000031                     ___ftdiv@exp:
   965                           	opt stack 0
   966  000031                     ___ftadd@f2:
   967                           	opt stack 0
   968                           
   969                           ; 3 bytes @ 0x30
   970  000031                     	ds	1
   971  000032                     ___ftdiv@sign:
   972                           	opt stack 0
   973  000032                     ___fttol@exp1:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x31
   977  000032                     	ds	1
   978  000033                     ?_getTemperatura:
   979                           	opt stack 0
   980                           
   981                           ; 3 bytes @ 0x32
   982  000033                     	ds	1
   983  000034                     ??___ftadd:
   984                           
   985                           ; 1 bytes @ 0x33
   986  000034                     	ds	2
   987  000036                     getTemperatura@valorADC:
   988                           	opt stack 0
   989                           
   990                           ; 2 bytes @ 0x35
   991  000036                     	ds	1
   992  000037                     ___ftadd@sign:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x36
   996  000037                     	ds	1
   997  000038                     ___ftadd@exp2:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x37
  1001  000038                     	ds	1
  1002  000039                     ___ftadd@exp1:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x38
  1006  000039                     	ds	1
  1007  00003A                     ?___ftsub:
  1008                           	opt stack 0
  1009  00003A                     ___ftsub@f1:
  1010                           	opt stack 0
  1011                           
  1012                           ; 3 bytes @ 0x39
  1013  00003A                     	ds	3
  1014  00003D                     ___ftsub@f2:
  1015                           	opt stack 0
  1016                           
  1017                           ; 3 bytes @ 0x3C
  1018  00003D                     	ds	3
  1019  000040                     ?_sprintf:
  1020                           	opt stack 0
  1021  000040                     sprintf@sp:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x3F
  1025  000040                     	ds	2
  1026  000042                     sprintf@f:
  1027                           	opt stack 0
  1028                           
  1029                           ; 2 bytes @ 0x41
  1030  000042                     	ds	5
  1031  000047                     ??_sprintf:
  1032                           
  1033                           ; 1 bytes @ 0x46
  1034  000047                     	ds	6
  1035  00004D                     timerInt@temperatura:
  1036                           	opt stack 0
  1037                           
  1038                           ; 3 bytes @ 0x4C
  1039  00004D                     	ds	3
  1040  000050                     tblptru	equ	0xFF8
  1041                           tblptrh	equ	0xFF7
  1042                           tblptrl	equ	0xFF6
  1043                           tablat	equ	0xFF5
  1044                           postinc0	equ	0xFEE
  1045                           wreg	equ	0xFE8
  1046                           postdec1	equ	0xFE5
  1047                           fsr1l	equ	0xFE1
  1048                           
  1049                           ; 1 bytes @ 0x4F
  1050 ;;
  1051 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1052 ;;
  1053 ;; *************** function _main *****************
  1054 ;; Defined at:
  1055 ;;		line 24 in file "main.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;		None
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;		None
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1073 ;;Total ram usage:        0 bytes
  1074 ;; Hardware stack levels required when called:   17
  1075 ;; This function calls:
  1076 ;;		_LCD_createChar
  1077 ;;		_LCD_init
  1078 ;;		_LCD_print
  1079 ;;		_LCD_setCursor
  1080 ;;		_SYSTEM_Initialize
  1081 ;;		_TMR0_SetInterruptHandler
  1082 ;; This function is called by:
  1083 ;;		Startup code after reset
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086                           
  1087                           	psect	text0
  1088  002E12                     __ptext0:
  1089                           	opt stack 0
  1090  002E12                     _main:
  1091                           	opt stack 14
  1092                           
  1093                           ;main.c: 28: SYSTEM_Initialize();
  1094                           
  1095                           ;incstack = 0
  1096  002E12  ECC0  F018         	call	_SYSTEM_Initialize	;wreg free
  1097                           
  1098                           ;main.c: 29: TMR0_SetInterruptHandler(timerInt);
  1099  002E16  0E92               	movlw	low _timerInt
  1100  002E18  0100               	movlb	0	; () banked
  1101  002E1A  6FC4               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  1102  002E1C  0E2A               	movlw	high _timerInt
  1103  002E1E  6FC5               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  1104  002E20  0E00               	movlw	low (_timerInt shr (0+16))
  1105  002E22  6FC6               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+2)& (0+255),b
  1106  002E24  EC1D  F019         	call	_TMR0_SetInterruptHandler	;wreg free
  1107                           
  1108                           ;main.c: 32: calefactorON = 0;
  1109  002E28  925E               	bcf	_calefactorON/(0+8),_calefactorON& (0+7),c
  1110                           
  1111                           ;main.c: 33: aireacondicionadoON = 0;
  1112  002E2A  905E               	bcf	_aireacondicionadoON/(0+8),_aireacondicionadoON& (0+7),c
  1113                           
  1114                           ;main.c: 52: (INTCONbits.GIE = 1);
  1115  002E2C  8EF2               	bsf	intcon,7,c	;volatile
  1116                           
  1117                           ;main.c: 63: LCD_init();
  1118  002E2E  EC84  F014         	call	_LCD_init	;wreg free
  1119                           
  1120                           ;main.c: 65: LCD_createChar(0, simboloGrados);
  1121  002E32  0ECB               	movlw	low _simboloGrados
  1122  002E34  0100               	movlb	0	; () banked
  1123  002E36  6FC9               	movwf	LCD_createChar@charmap& (0+255),b
  1124  002E38  0E00               	movlw	high _simboloGrados
  1125  002E3A  6FCA               	movwf	(LCD_createChar@charmap+1)& (0+255),b
  1126  002E3C  0E00               	movlw	0
  1127  002E3E  ECE0  F016         	call	_LCD_createChar
  1128                           
  1129                           ;main.c: 67: LCD_setCursor(0, 0);
  1130  002E42  0E00               	movlw	0
  1131  002E44  0100               	movlb	0	; () banked
  1132  002E46  6FC9               	movwf	LCD_setCursor@fila& (0+255),b
  1133  002E48  0E00               	movlw	0
  1134  002E4A  ECB6  F016         	call	_LCD_setCursor
  1135                           
  1136                           ;main.c: 68: LCD_print("Temperatura:");
  1137  002E4E  0E77               	movlw	low STR_1
  1138  002E50  0100               	movlb	0	; () banked
  1139  002E52  6FC9               	movwf	LCD_print@s& (0+255),b
  1140  002E54  0E0F               	movlw	high STR_1
  1141  002E56  6FCA               	movwf	(LCD_print@s+1)& (0+255),b
  1142  002E58  EC29  F016         	call	_LCD_print	;wreg free
  1143  002E5C                     l534:
  1144                           
  1145                           ;main.c: 71: {
  1146  002E5C  D7FF               	goto	l534
  1147  002E5E                     __end_of_main:
  1148                           	opt stack 0
  1149                           tblptru	equ	0xFF8
  1150                           tblptrh	equ	0xFF7
  1151                           tblptrl	equ	0xFF6
  1152                           tablat	equ	0xFF5
  1153                           intcon	equ	0xFF2
  1154                           postinc0	equ	0xFEE
  1155                           wreg	equ	0xFE8
  1156                           postdec1	equ	0xFE5
  1157                           fsr1l	equ	0xFE1
  1158                           
  1159 ;; *************** function _SYSTEM_Initialize *****************
  1160 ;; Defined at:
  1161 ;;		line 116 in file "mcc_generated_files/mcc.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;		None
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;		None
  1166 ;; Return value:  Size  Location     Type
  1167 ;;                  1    wreg      void 
  1168 ;; Registers used:
  1169 ;;		wreg, status,2, status,0, cstack
  1170 ;; Tracked objects:
  1171 ;;		On entry : 0/0
  1172 ;;		On exit  : 0/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1179 ;;Total ram usage:        0 bytes
  1180 ;; Hardware stack levels used:    1
  1181 ;; Hardware stack levels required when called:   12
  1182 ;; This function calls:
  1183 ;;		_ADCC_Initialize
  1184 ;;		_I2C1_Initialize
  1185 ;;		_INTERRUPT_Initialize
  1186 ;;		_OSCILLATOR_Initialize
  1187 ;;		_PIN_MANAGER_Initialize
  1188 ;;		_TMR0_Initialize
  1189 ;; This function is called by:
  1190 ;;		_main
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           	psect	text1
  1195  003180                     __ptext1:
  1196                           	opt stack 0
  1197  003180                     _SYSTEM_Initialize:
  1198                           	opt stack 18
  1199                           
  1200                           ;mcc.c: 118: INTERRUPT_Initialize();
  1201                           
  1202                           ;incstack = 0
  1203  003180  EC4F  F019         	call	_INTERRUPT_Initialize	;wreg free
  1204                           
  1205                           ;mcc.c: 119: PIN_MANAGER_Initialize();
  1206  003184  EC45  F013         	call	_PIN_MANAGER_Initialize	;wreg free
  1207                           
  1208                           ;mcc.c: 120: OSCILLATOR_Initialize();
  1209  003188  ECCD  F018         	call	_OSCILLATOR_Initialize	;wreg free
  1210                           
  1211                           ;mcc.c: 121: I2C1_Initialize();
  1212  00318C  ECD3  F017         	call	_I2C1_Initialize	;wreg free
  1213                           
  1214                           ;mcc.c: 122: ADCC_Initialize();
  1215  003190  EC2F  F017         	call	_ADCC_Initialize	;wreg free
  1216                           
  1217                           ;mcc.c: 123: TMR0_Initialize();
  1218  003194  EC04  F018         	call	_TMR0_Initialize	;wreg free
  1219  003198  0012               	return		;funcret
  1220  00319A                     __end_of_SYSTEM_Initialize:
  1221                           	opt stack 0
  1222                           tblptru	equ	0xFF8
  1223                           tblptrh	equ	0xFF7
  1224                           tblptrl	equ	0xFF6
  1225                           tablat	equ	0xFF5
  1226                           intcon	equ	0xFF2
  1227                           postinc0	equ	0xFEE
  1228                           wreg	equ	0xFE8
  1229                           postdec1	equ	0xFE5
  1230                           fsr1l	equ	0xFE1
  1231                           
  1232 ;; *************** function _TMR0_Initialize *****************
  1233 ;; Defined at:
  1234 ;;		line 60 in file "mcc_generated_files/tmr0.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;		None
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;		None
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, status,2, status,0, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1252 ;;Total ram usage:        0 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; Hardware stack levels required when called:   11
  1255 ;; This function calls:
  1256 ;;		_TMR0_SetInterruptHandler
  1257 ;; This function is called by:
  1258 ;;		_SYSTEM_Initialize
  1259 ;; This function uses a non-reentrant model
  1260 ;;
  1261                           
  1262                           	psect	text2
  1263  003008                     __ptext2:
  1264                           	opt stack 0
  1265  003008                     _TMR0_Initialize:
  1266                           	opt stack 18
  1267                           
  1268                           ;tmr0.c: 65: T0CON1 = 0x40;
  1269                           
  1270                           ;incstack = 0
  1271  003008  0E40               	movlw	64
  1272  00300A  6ED6               	movwf	4054,c	;volatile
  1273                           
  1274                           ;tmr0.c: 68: TMR0H = 0xF9;
  1275  00300C  0EF9               	movlw	249
  1276  00300E  6ED4               	movwf	4052,c	;volatile
  1277                           
  1278                           ;tmr0.c: 71: TMR0L = 0x00;
  1279  003010  0E00               	movlw	0
  1280  003012  6ED3               	movwf	4051,c	;volatile
  1281                           
  1282                           ;tmr0.c: 74: PIR0bits.TMR0IF = 0;
  1283  003014  010E               	movlb	14	; () banked
  1284  003016  9BCA               	bcf	202,5,b	;volatile
  1285                           
  1286                           ; BSR set to: 14
  1287                           ;tmr0.c: 77: PIE0bits.TMR0IE = 1;
  1288  003018  8BC2               	bsf	194,5,b	;volatile
  1289                           
  1290                           ; BSR set to: 14
  1291                           ;tmr0.c: 80: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  1292  00301A  0EA2               	movlw	low _TMR0_DefaultInterruptHandler
  1293  00301C  0100               	movlb	0	; () banked
  1294  00301E  6FC4               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  1295  003020  0E32               	movlw	high _TMR0_DefaultInterruptHandler
  1296  003022  6FC5               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  1297  003024  0E00               	movlw	low (_TMR0_DefaultInterruptHandler shr (0+16))
  1298  003026  6FC6               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+2)& (0+255),b
  1299  003028  EC1D  F019         	call	_TMR0_SetInterruptHandler	;wreg free
  1300                           
  1301                           ;tmr0.c: 83: T0CON0 = 0x80;
  1302  00302C  0E80               	movlw	128
  1303  00302E  6ED5               	movwf	4053,c	;volatile
  1304  003030  0012               	return		;funcret
  1305  003032                     __end_of_TMR0_Initialize:
  1306                           	opt stack 0
  1307                           tblptru	equ	0xFF8
  1308                           tblptrh	equ	0xFF7
  1309                           tblptrl	equ	0xFF6
  1310                           tablat	equ	0xFF5
  1311                           intcon	equ	0xFF2
  1312                           postinc0	equ	0xFEE
  1313                           wreg	equ	0xFE8
  1314                           postdec1	equ	0xFE5
  1315                           fsr1l	equ	0xFE1
  1316                           
  1317 ;; *************** function _TMR0_SetInterruptHandler *****************
  1318 ;; Defined at:
  1319 ;;		line 149 in file "mcc_generated_files/tmr0.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;  InterruptHan    3   41[BANK0 ] PTR FTN()void 
  1322 ;;		 -> timerInt(1), TMR0_DefaultInterruptHandler(1), 
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;		None
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  1    wreg      void 
  1327 ;; Registers used:
  1328 ;;		wreg, status,2, status,0
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1334 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1337 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1338 ;;Total ram usage:        3 bytes
  1339 ;; Hardware stack levels used:    1
  1340 ;; Hardware stack levels required when called:   10
  1341 ;; This function calls:
  1342 ;;		Nothing
  1343 ;; This function is called by:
  1344 ;;		_TMR0_Initialize
  1345 ;;		_main
  1346 ;; This function uses a non-reentrant model
  1347 ;;
  1348                           
  1349                           	psect	text3
  1350  00323A                     __ptext3:
  1351                           	opt stack 0
  1352  00323A                     _TMR0_SetInterruptHandler:
  1353                           	opt stack 20
  1354                           
  1355                           ;tmr0.c: 150: TMR0_InterruptHandler = InterruptHandler;
  1356                           
  1357                           ;incstack = 0
  1358  00323A  C0C4  F0D3         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  1359  00323E  C0C5  F0D4         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  1360  003242  C0C6  F0D5         	movff	TMR0_SetInterruptHandler@InterruptHandler+2,_TMR0_InterruptHandler+2
  1361  003246  0012               	return		;funcret
  1362  003248                     __end_of_TMR0_SetInterruptHandler:
  1363                           	opt stack 0
  1364                           tblptru	equ	0xFF8
  1365                           tblptrh	equ	0xFF7
  1366                           tblptrl	equ	0xFF6
  1367                           tablat	equ	0xFF5
  1368                           intcon	equ	0xFF2
  1369                           postinc0	equ	0xFEE
  1370                           wreg	equ	0xFE8
  1371                           postdec1	equ	0xFE5
  1372                           fsr1l	equ	0xFE1
  1373                           
  1374 ;; *************** function _PIN_MANAGER_Initialize *****************
  1375 ;; Defined at:
  1376 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;		None
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;  state           1   41[BANK0 ] unsigned char 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		wreg, status,2
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1393 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1394 ;;Total ram usage:        1 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:   10
  1397 ;; This function calls:
  1398 ;;		Nothing
  1399 ;; This function is called by:
  1400 ;;		_SYSTEM_Initialize
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           	psect	text4
  1405  00268A                     __ptext4:
  1406                           	opt stack 0
  1407  00268A                     _PIN_MANAGER_Initialize:
  1408                           	opt stack 19
  1409                           
  1410                           ;pin_manager.c: 57: LATE = 0x00;
  1411                           
  1412                           ;incstack = 0
  1413  00268A  0E00               	movlw	0
  1414  00268C  6E87               	movwf	3975,c	;volatile
  1415                           
  1416                           ;pin_manager.c: 58: LATD = 0x00;
  1417  00268E  0E00               	movlw	0
  1418  002690  6E86               	movwf	3974,c	;volatile
  1419                           
  1420                           ;pin_manager.c: 59: LATA = 0x00;
  1421  002692  0E00               	movlw	0
  1422  002694  6E83               	movwf	3971,c	;volatile
  1423                           
  1424                           ;pin_manager.c: 60: LATB = 0x00;
  1425  002696  0E00               	movlw	0
  1426  002698  6E84               	movwf	3972,c	;volatile
  1427                           
  1428                           ;pin_manager.c: 61: LATC = 0x00;
  1429  00269A  0E00               	movlw	0
  1430  00269C  6E85               	movwf	3973,c	;volatile
  1431                           
  1432                           ;pin_manager.c: 66: TRISE = 0x04;
  1433  00269E  0E04               	movlw	4
  1434  0026A0  6E8C               	movwf	3980,c	;volatile
  1435                           
  1436                           ;pin_manager.c: 67: TRISA = 0xFF;
  1437  0026A2  6888               	setf	3976,c	;volatile
  1438                           
  1439                           ;pin_manager.c: 68: TRISB = 0xFF;
  1440  0026A4  6889               	setf	3977,c	;volatile
  1441                           
  1442                           ;pin_manager.c: 69: TRISC = 0xFF;
  1443  0026A6  688A               	setf	3978,c	;volatile
  1444                           
  1445                           ;pin_manager.c: 70: TRISD = 0x00;
  1446  0026A8  0E00               	movlw	0
  1447  0026AA  6E8B               	movwf	3979,c	;volatile
  1448                           
  1449                           ;pin_manager.c: 75: ANSELC = 0x05;
  1450  0026AC  0E05               	movlw	5
  1451  0026AE  010F               	movlb	15	; () banked
  1452  0026B0  6F21               	movwf	33,b	;volatile
  1453                           
  1454                           ;pin_manager.c: 76: ANSELB = 0xEF;
  1455  0026B2  0EEF               	movlw	239
  1456  0026B4  6F19               	movwf	25,b	;volatile
  1457                           
  1458                           ;pin_manager.c: 77: ANSELD = 0x00;
  1459  0026B6  0E00               	movlw	0
  1460  0026B8  6F26               	movwf	38,b	;volatile
  1461                           
  1462                           ;pin_manager.c: 78: ANSELE = 0x04;
  1463  0026BA  0E04               	movlw	4
  1464  0026BC  6F2E               	movwf	46,b	;volatile
  1465                           
  1466                           ; BSR set to: 15
  1467                           ;pin_manager.c: 79: ANSELA = 0xFF;
  1468  0026BE  6911               	setf	17,b	;volatile
  1469                           
  1470                           ;pin_manager.c: 84: WPUD = 0x00;
  1471  0026C0  0E00               	movlw	0
  1472  0026C2  6F25               	movwf	37,b	;volatile
  1473                           
  1474                           ;pin_manager.c: 85: WPUE = 0x00;
  1475  0026C4  0E00               	movlw	0
  1476  0026C6  6F2D               	movwf	45,b	;volatile
  1477                           
  1478                           ;pin_manager.c: 86: WPUB = 0x00;
  1479  0026C8  0E00               	movlw	0
  1480  0026CA  6F18               	movwf	24,b	;volatile
  1481                           
  1482                           ;pin_manager.c: 87: WPUA = 0x00;
  1483  0026CC  0E00               	movlw	0
  1484  0026CE  6F10               	movwf	16,b	;volatile
  1485                           
  1486                           ;pin_manager.c: 88: WPUC = 0x00;
  1487  0026D0  0E00               	movlw	0
  1488  0026D2  6F20               	movwf	32,b	;volatile
  1489                           
  1490                           ;pin_manager.c: 93: ODCONE = 0x00;
  1491  0026D4  0E00               	movlw	0
  1492  0026D6  6F2C               	movwf	44,b	;volatile
  1493                           
  1494                           ;pin_manager.c: 94: ODCONA = 0x00;
  1495  0026D8  0E00               	movlw	0
  1496  0026DA  6F0F               	movwf	15,b	;volatile
  1497                           
  1498                           ;pin_manager.c: 95: ODCONB = 0x00;
  1499  0026DC  0E00               	movlw	0
  1500  0026DE  6F17               	movwf	23,b	;volatile
  1501                           
  1502                           ;pin_manager.c: 96: ODCONC = 0x00;
  1503  0026E0  0E00               	movlw	0
  1504  0026E2  6F1F               	movwf	31,b	;volatile
  1505                           
  1506                           ;pin_manager.c: 97: ODCOND = 0x00;
  1507  0026E4  0E00               	movlw	0
  1508  0026E6  6F24               	movwf	36,b	;volatile
  1509                           
  1510                           ;pin_manager.c: 104: bool state = (unsigned char)GIE;
  1511  0026E8  0E00               	movlw	0
  1512  0026EA  BEF2               	btfsc	intcon,7,c	;volatile
  1513  0026EC  0E01               	movlw	1
  1514  0026EE  0100               	movlb	0	; () banked
  1515  0026F0  6FC4               	movwf	PIN_MANAGER_Initialize@state& (0+255),b
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;pin_manager.c: 105: GIE = 0;
  1519  0026F2  9EF2               	bcf	intcon,7,c	;volatile
  1520                           
  1521                           ;pin_manager.c: 106: PPSLOCK = 0x55;
  1522  0026F4  0E55               	movlw	85
  1523  0026F6  010E               	movlb	14	; () banked
  1524  0026F8  6FA0               	movwf	160,b	;volsfr
  1525                           
  1526                           ;pin_manager.c: 107: PPSLOCK = 0xAA;
  1527  0026FA  0EAA               	movlw	170
  1528  0026FC  6FA0               	movwf	160,b	;volsfr
  1529                           
  1530                           ; BSR set to: 14
  1531                           ;pin_manager.c: 108: PPSLOCKbits.PPSLOCKED = 0x00;
  1532  0026FE  91A0               	bcf	160,0,b	;volsfr
  1533                           
  1534                           ; BSR set to: 14
  1535                           ;pin_manager.c: 110: SSP1CLKPPSbits.SSPCLKPPS = 0x13;
  1536  002700  81B7               	bsf	183,0,b	;volatile
  1537  002702  83B7               	bsf	183,1,b	;volatile
  1538  002704  95B7               	bcf	183,2,b	;volatile
  1539  002706  97B7               	bcf	183,3,b	;volatile
  1540  002708  89B7               	bsf	183,4,b	;volatile
  1541                           
  1542                           ;pin_manager.c: 111: RC3PPS = 0x0F;
  1543  00270A  0E0F               	movlw	15
  1544  00270C  6FFA               	movwf	250,b	;volatile
  1545                           
  1546                           ;pin_manager.c: 112: RC4PPS = 0x10;
  1547  00270E  0E10               	movlw	16
  1548  002710  6FFB               	movwf	251,b	;volatile
  1549                           
  1550                           ; BSR set to: 14
  1551                           ;pin_manager.c: 113: ADACTPPSbits.ADACTPPS = 0x0C;
  1552  002712  91AE               	bcf	174,0,b	;volatile
  1553  002714  93AE               	bcf	174,1,b	;volatile
  1554  002716  85AE               	bsf	174,2,b	;volatile
  1555  002718  87AE               	bsf	174,3,b	;volatile
  1556  00271A  99AE               	bcf	174,4,b	;volatile
  1557                           
  1558                           ; BSR set to: 14
  1559                           ;pin_manager.c: 114: SSP1DATPPSbits.SSPDATPPS = 0x14;
  1560  00271C  91B8               	bcf	184,0,b	;volatile
  1561  00271E  93B8               	bcf	184,1,b	;volatile
  1562  002720  85B8               	bsf	184,2,b	;volatile
  1563  002722  97B8               	bcf	184,3,b	;volatile
  1564  002724  89B8               	bsf	184,4,b	;volatile
  1565                           
  1566                           ;pin_manager.c: 116: PPSLOCK = 0x55;
  1567  002726  0E55               	movlw	85
  1568  002728  6FA0               	movwf	160,b	;volsfr
  1569                           
  1570                           ;pin_manager.c: 117: PPSLOCK = 0xAA;
  1571  00272A  0EAA               	movlw	170
  1572  00272C  6FA0               	movwf	160,b	;volsfr
  1573                           
  1574                           ; BSR set to: 14
  1575                           ;pin_manager.c: 118: PPSLOCKbits.PPSLOCKED = 0x01;
  1576  00272E  81A0               	bsf	160,0,b	;volsfr
  1577                           
  1578                           ; BSR set to: 14
  1579                           ;pin_manager.c: 120: GIE = state;
  1580  002730  0100               	movlb	0	; () banked
  1581  002732  A1C4               	btfss	PIN_MANAGER_Initialize@state& (0+255),0,b
  1582  002734  D002               	goto	u3490
  1583  002736  8EF2               	bsf	intcon,7,c	;volatile
  1584  002738  0012               	return	
  1585  00273A                     u3490:
  1586  00273A  9EF2               	bcf	intcon,7,c	;volatile
  1587  00273C  0012               	return		;funcret
  1588  00273E                     __end_of_PIN_MANAGER_Initialize:
  1589                           	opt stack 0
  1590                           tblptru	equ	0xFF8
  1591                           tblptrh	equ	0xFF7
  1592                           tblptrl	equ	0xFF6
  1593                           tablat	equ	0xFF5
  1594                           intcon	equ	0xFF2
  1595                           postinc0	equ	0xFEE
  1596                           wreg	equ	0xFE8
  1597                           postdec1	equ	0xFE5
  1598                           fsr1l	equ	0xFE1
  1599                           
  1600 ;; *************** function _OSCILLATOR_Initialize *****************
  1601 ;; Defined at:
  1602 ;;		line 126 in file "mcc_generated_files/mcc.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;		None
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;		None
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, status,2
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1620 ;;Total ram usage:        0 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:   10
  1623 ;; This function calls:
  1624 ;;		Nothing
  1625 ;; This function is called by:
  1626 ;;		_SYSTEM_Initialize
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text5
  1631  00319A                     __ptext5:
  1632                           	opt stack 0
  1633  00319A                     _OSCILLATOR_Initialize:
  1634                           	opt stack 19
  1635                           
  1636                           ;mcc.c: 129: OSCCON1 = 0x62;
  1637                           
  1638                           ;incstack = 0
  1639  00319A  0E62               	movlw	98
  1640  00319C  010E               	movlb	14	; () banked
  1641  00319E  6FD8               	movwf	216,b	;volatile
  1642                           
  1643                           ;mcc.c: 131: OSCCON3 = 0x00;
  1644  0031A0  0E00               	movlw	0
  1645  0031A2  6FDA               	movwf	218,b	;volatile
  1646                           
  1647                           ;mcc.c: 133: OSCEN = 0x00;
  1648  0031A4  0E00               	movlw	0
  1649  0031A6  6FDC               	movwf	220,b	;volatile
  1650                           
  1651                           ;mcc.c: 135: OSCFRQ = 0x02;
  1652  0031A8  0E02               	movlw	2
  1653  0031AA  6FDE               	movwf	222,b	;volatile
  1654                           
  1655                           ;mcc.c: 137: OSCTUNE = 0x00;
  1656  0031AC  0E00               	movlw	0
  1657  0031AE  6FDD               	movwf	221,b	;volatile
  1658                           
  1659                           ; BSR set to: 14
  1660  0031B0  0012               	return		;funcret
  1661  0031B2                     __end_of_OSCILLATOR_Initialize:
  1662                           	opt stack 0
  1663                           tblptru	equ	0xFF8
  1664                           tblptrh	equ	0xFF7
  1665                           tblptrl	equ	0xFF6
  1666                           tablat	equ	0xFF5
  1667                           intcon	equ	0xFF2
  1668                           postinc0	equ	0xFEE
  1669                           wreg	equ	0xFE8
  1670                           postdec1	equ	0xFE5
  1671                           fsr1l	equ	0xFE1
  1672                           
  1673 ;; *************** function _INTERRUPT_Initialize *****************
  1674 ;; Defined at:
  1675 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  1676 ;; Parameters:    Size  Location     Type
  1677 ;;		None
  1678 ;; Auto vars:     Size  Location     Type
  1679 ;;		None
  1680 ;; Return value:  Size  Location     Type
  1681 ;;                  1    wreg      void 
  1682 ;; Registers used:
  1683 ;;		None
  1684 ;; Tracked objects:
  1685 ;;		On entry : 0/0
  1686 ;;		On exit  : 0/0
  1687 ;;		Unchanged: 0/0
  1688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1693 ;;Total ram usage:        0 bytes
  1694 ;; Hardware stack levels used:    1
  1695 ;; Hardware stack levels required when called:   10
  1696 ;; This function calls:
  1697 ;;		Nothing
  1698 ;; This function is called by:
  1699 ;;		_SYSTEM_Initialize
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           	psect	text6
  1704  00329E                     __ptext6:
  1705                           	opt stack 0
  1706  00329E                     _INTERRUPT_Initialize:
  1707                           	opt stack 19
  1708                           
  1709                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
  1710                           
  1711                           ; BSR set to: 14
  1712                           ;incstack = 0
  1713  00329E  9AF2               	bcf	intcon,5,c	;volatile
  1714  0032A0  0012               	return		;funcret
  1715  0032A2                     __end_of_INTERRUPT_Initialize:
  1716                           	opt stack 0
  1717                           tblptru	equ	0xFF8
  1718                           tblptrh	equ	0xFF7
  1719                           tblptrl	equ	0xFF6
  1720                           tablat	equ	0xFF5
  1721                           intcon	equ	0xFF2
  1722                           postinc0	equ	0xFEE
  1723                           wreg	equ	0xFE8
  1724                           postdec1	equ	0xFE5
  1725                           fsr1l	equ	0xFE1
  1726                           
  1727 ;; *************** function _I2C1_Initialize *****************
  1728 ;; Defined at:
  1729 ;;		line 198 in file "mcc_generated_files/i2c1.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;		None
  1734 ;; Return value:  Size  Location     Type
  1735 ;;                  1    wreg      void 
  1736 ;; Registers used:
  1737 ;;		wreg, status,2, status,0
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1747 ;;Total ram usage:        0 bytes
  1748 ;; Hardware stack levels used:    1
  1749 ;; Hardware stack levels required when called:   10
  1750 ;; This function calls:
  1751 ;;		Nothing
  1752 ;; This function is called by:
  1753 ;;		_SYSTEM_Initialize
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           	psect	text7
  1758  002FA6                     __ptext7:
  1759                           	opt stack 0
  1760  002FA6                     _I2C1_Initialize:
  1761                           	opt stack 19
  1762                           
  1763                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
  1764                           
  1765                           ;incstack = 0
  1766  002FA6  0E95               	movlw	low _i2c1_tr_queue
  1767  002FA8  0100               	movlb	0	; () banked
  1768  002FAA  6F62               	movwf	(_i2c1_object+2)& (0+255),b
  1769  002FAC  0E00               	movlw	high _i2c1_tr_queue
  1770  002FAE  6F63               	movwf	(_i2c1_object+3)& (0+255),b
  1771                           
  1772                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
  1773  002FB0  0E95               	movlw	low _i2c1_tr_queue
  1774  002FB2  6F60               	movwf	_i2c1_object& (0+255),b
  1775  002FB4  0E00               	movlw	high _i2c1_tr_queue
  1776  002FB6  6F61               	movwf	(_i2c1_object+1)& (0+255),b
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
  1780  002FB8  8364               	bsf	(_i2c1_object+4)& (0+255),1,b
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
  1784  002FBA  9164               	bcf	(_i2c1_object+4)& (0+255),0,b
  1785                           
  1786                           ; BSR set to: 0
  1787                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
  1788  002FBC  0E00               	movlw	0
  1789  002FBE  6F66               	movwf	(_i2c1_object+6)& (0+255),b
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;i2c1.c: 208: SSP1STAT = 0xC0;
  1793  002FC0  0EC0               	movlw	192
  1794  002FC2  6E95               	movwf	3989,c	;volatile
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;i2c1.c: 210: SSP1CON1 = 0x28;
  1798  002FC4  0E28               	movlw	40
  1799  002FC6  6E96               	movwf	3990,c	;volatile
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;i2c1.c: 212: SSP1CON3 = 0x00;
  1803  002FC8  0E00               	movlw	0
  1804  002FCA  6E98               	movwf	3992,c	;volatile
  1805                           
  1806                           ; BSR set to: 0
  1807                           ;i2c1.c: 214: SSP1ADD = 0x03;
  1808  002FCC  0E03               	movlw	3
  1809  002FCE  6E93               	movwf	3987,c	;volatile
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;i2c1.c: 218: PIR3bits.SSP1IF = 0;
  1813  002FD0  010E               	movlb	14	; () banked
  1814  002FD2  91CD               	bcf	205,0,b	;volatile
  1815                           
  1816                           ; BSR set to: 14
  1817                           ;i2c1.c: 220: PIE3bits.SSP1IE = 1;
  1818  002FD4  81C5               	bsf	197,0,b	;volatile
  1819                           
  1820                           ; BSR set to: 14
  1821  002FD6  0012               	return		;funcret
  1822  002FD8                     __end_of_I2C1_Initialize:
  1823                           	opt stack 0
  1824                           tblptru	equ	0xFF8
  1825                           tblptrh	equ	0xFF7
  1826                           tblptrl	equ	0xFF6
  1827                           tablat	equ	0xFF5
  1828                           intcon	equ	0xFF2
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           postdec1	equ	0xFE5
  1832                           fsr1l	equ	0xFE1
  1833                           
  1834 ;; *************** function _ADCC_Initialize *****************
  1835 ;; Defined at:
  1836 ;;		line 61 in file "mcc_generated_files/adcc.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;		None
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;		None
  1841 ;; Return value:  Size  Location     Type
  1842 ;;                  1    wreg      void 
  1843 ;; Registers used:
  1844 ;;		wreg, status,2
  1845 ;; Tracked objects:
  1846 ;;		On entry : 0/0
  1847 ;;		On exit  : 0/0
  1848 ;;		Unchanged: 0/0
  1849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1854 ;;Total ram usage:        0 bytes
  1855 ;; Hardware stack levels used:    1
  1856 ;; Hardware stack levels required when called:   10
  1857 ;; This function calls:
  1858 ;;		Nothing
  1859 ;; This function is called by:
  1860 ;;		_SYSTEM_Initialize
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           	psect	text8
  1865  002E5E                     __ptext8:
  1866                           	opt stack 0
  1867  002E5E                     _ADCC_Initialize:
  1868                           	opt stack 19
  1869                           
  1870                           ;adcc.c: 65: ADLTHL = 0x00;
  1871                           
  1872                           ; BSR set to: 14
  1873                           ;incstack = 0
  1874  002E5E  0E00               	movlw	0
  1875  002E60  6E6A               	movwf	3946,c	;volatile
  1876                           
  1877                           ;adcc.c: 67: ADLTHH = 0x00;
  1878  002E62  0E00               	movlw	0
  1879  002E64  6E6B               	movwf	3947,c	;volatile
  1880                           
  1881                           ;adcc.c: 69: ADUTHL = 0x00;
  1882  002E66  0E00               	movlw	0
  1883  002E68  6E6C               	movwf	3948,c	;volatile
  1884                           
  1885                           ;adcc.c: 71: ADUTHH = 0x00;
  1886  002E6A  0E00               	movlw	0
  1887  002E6C  6E6D               	movwf	3949,c	;volatile
  1888                           
  1889                           ;adcc.c: 73: ADSTPTL = 0x00;
  1890  002E6E  0E00               	movlw	0
  1891  002E70  6E68               	movwf	3944,c	;volatile
  1892                           
  1893                           ;adcc.c: 75: ADSTPTH = 0x00;
  1894  002E72  0E00               	movlw	0
  1895  002E74  6E69               	movwf	3945,c	;volatile
  1896                           
  1897                           ;adcc.c: 77: ADRPT = 0x00;
  1898  002E76  0E00               	movlw	0
  1899  002E78  6E66               	movwf	3942,c	;volatile
  1900                           
  1901                           ;adcc.c: 79: ADPCH = 0x00;
  1902  002E7A  0E00               	movlw	0
  1903  002E7C  010F               	movlb	15	; () banked
  1904  002E7E  6F5F               	movwf	95,b	;volatile
  1905                           
  1906                           ;adcc.c: 81: ADCAP = 0x00;
  1907  002E80  0E00               	movlw	0
  1908  002E82  6F5D               	movwf	93,b	;volatile
  1909                           
  1910                           ;adcc.c: 83: ADCON1 = 0x00;
  1911  002E84  0E00               	movlw	0
  1912  002E86  6F59               	movwf	89,b	;volatile
  1913                           
  1914                           ;adcc.c: 85: ADCON2 = 0x00;
  1915  002E88  0E00               	movlw	0
  1916  002E8A  6F5A               	movwf	90,b	;volatile
  1917                           
  1918                           ;adcc.c: 87: ADCON3 = 0x00;
  1919  002E8C  0E00               	movlw	0
  1920  002E8E  6F5B               	movwf	91,b	;volatile
  1921                           
  1922                           ;adcc.c: 89: ADSTAT = 0x00;
  1923  002E90  0E00               	movlw	0
  1924  002E92  6E65               	movwf	3941,c	;volatile
  1925                           
  1926                           ;adcc.c: 91: ADREF = 0x00;
  1927  002E94  0E00               	movlw	0
  1928  002E96  6F58               	movwf	88,b	;volatile
  1929                           
  1930                           ;adcc.c: 93: ADACT = 0x00;
  1931  002E98  0E00               	movlw	0
  1932  002E9A  6F56               	movwf	86,b	;volatile
  1933                           
  1934                           ;adcc.c: 95: ADCLK = 0x00;
  1935  002E9C  0E00               	movlw	0
  1936  002E9E  6F57               	movwf	87,b	;volatile
  1937                           
  1938                           ;adcc.c: 97: ADCON0 = 0x84;
  1939  002EA0  0E84               	movlw	132
  1940  002EA2  6E60               	movwf	3936,c	;volatile
  1941                           
  1942                           ; BSR set to: 15
  1943  002EA4  0012               	return		;funcret
  1944  002EA6                     __end_of_ADCC_Initialize:
  1945                           	opt stack 0
  1946                           tblptru	equ	0xFF8
  1947                           tblptrh	equ	0xFF7
  1948                           tblptrl	equ	0xFF6
  1949                           tablat	equ	0xFF5
  1950                           intcon	equ	0xFF2
  1951                           postinc0	equ	0xFEE
  1952                           wreg	equ	0xFE8
  1953                           postdec1	equ	0xFE5
  1954                           fsr1l	equ	0xFE1
  1955                           
  1956 ;; *************** function _LCD_setCursor *****************
  1957 ;; Defined at:
  1958 ;;		line 82 in file "drv_lcd.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;  columna         1    wreg     unsigned char 
  1961 ;;  fila            1   46[BANK0 ] unsigned char 
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  columna         1   47[BANK0 ] unsigned char 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      void 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1973 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1976 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1977 ;;Total ram usage:        2 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:   15
  1980 ;; This function calls:
  1981 ;;		_LCD_command
  1982 ;; This function is called by:
  1983 ;;		_main
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           	psect	text9
  1988  002D6C                     __ptext9:
  1989                           	opt stack 0
  1990  002D6C                     _LCD_setCursor:
  1991                           	opt stack 15
  1992                           
  1993                           ; BSR set to: 15
  1994                           ;incstack = 0
  1995                           ;LCD_setCursor@columna stored from wreg
  1996  002D6C  0100               	movlb	0	; () banked
  1997  002D6E  6FCA               	movwf	LCD_setCursor@columna& (0+255),b
  1998                           
  1999                           ;drv_lcd.c: 84: switch (fila)
  2000  002D70  D018               	goto	l590
  2001  002D72                     
  2002                           ;drv_lcd.c: 87: LCD_command(0x80 + columna);
  2003  002D72  0100               	movlb	0	; () banked
  2004  002D74  51CA               	movf	LCD_setCursor@columna& (0+255),w,b
  2005  002D76  0F80               	addlw	128
  2006  002D78  ECFA  F018         	call	_LCD_command
  2007                           
  2008                           ;drv_lcd.c: 88: break;
  2009  002D7C  0012               	return	
  2010  002D7E                     
  2011                           ;drv_lcd.c: 90: LCD_command(0xC0 + columna);
  2012  002D7E  0100               	movlb	0	; () banked
  2013  002D80  51CA               	movf	LCD_setCursor@columna& (0+255),w,b
  2014  002D82  0FC0               	addlw	192
  2015  002D84  ECFA  F018         	call	_LCD_command
  2016                           
  2017                           ;drv_lcd.c: 91: break;
  2018  002D88  0012               	return	
  2019  002D8A                     
  2020                           ;drv_lcd.c: 93: LCD_command(0x94 + columna);
  2021  002D8A  0100               	movlb	0	; () banked
  2022  002D8C  51CA               	movf	LCD_setCursor@columna& (0+255),w,b
  2023  002D8E  0F94               	addlw	148
  2024  002D90  ECFA  F018         	call	_LCD_command
  2025                           
  2026                           ;drv_lcd.c: 94: break;
  2027  002D94  0012               	return	
  2028  002D96                     
  2029                           ;drv_lcd.c: 96: LCD_command(0xD4 + columna);
  2030  002D96  0100               	movlb	0	; () banked
  2031  002D98  51CA               	movf	LCD_setCursor@columna& (0+255),w,b
  2032  002D9A  0FD4               	addlw	212
  2033  002D9C  ECFA  F018         	call	_LCD_command
  2034                           
  2035                           ;drv_lcd.c: 98: }
  2036                           
  2037                           ;drv_lcd.c: 97: break;
  2038  002DA0  0012               	return	
  2039  002DA2                     l590:
  2040  002DA2  0100               	movlb	0	; () banked
  2041  002DA4  51C9               	movf	LCD_setCursor@fila& (0+255),w,b
  2042                           
  2043                           ; Switch size 1, requested type "space"
  2044                           ; Number of cases is 4, Range of values is 0 to 3
  2045                           ; switch strategies available:
  2046                           ; Name         Instructions Cycles
  2047                           ; simple_byte           13     7 (average)
  2048                           ;	Chosen strategy is simple_byte
  2049  002DA6  0A00               	xorlw	0	; case 0
  2050  002DA8  B4D8               	btfsc	status,2,c
  2051  002DAA  D7E3               	goto	l591
  2052  002DAC  0A01               	xorlw	1	; case 1
  2053  002DAE  B4D8               	btfsc	status,2,c
  2054  002DB0  D7E6               	goto	l593
  2055  002DB2  0A03               	xorlw	3	; case 2
  2056  002DB4  B4D8               	btfsc	status,2,c
  2057  002DB6  D7E9               	goto	l594
  2058  002DB8  0A01               	xorlw	1	; case 3
  2059  002DBA  A4D8               	btfss	status,2,c
  2060  002DBC  0012               	return	
  2061  002DBE  D7EB               	goto	l595
  2062  002DC0                     __end_of_LCD_setCursor:
  2063                           	opt stack 0
  2064                           tblptru	equ	0xFF8
  2065                           tblptrh	equ	0xFF7
  2066                           tblptrl	equ	0xFF6
  2067                           tablat	equ	0xFF5
  2068                           intcon	equ	0xFF2
  2069                           postinc0	equ	0xFEE
  2070                           wreg	equ	0xFE8
  2071                           postdec1	equ	0xFE5
  2072                           fsr1l	equ	0xFE1
  2073                           status	equ	0xFD8
  2074                           
  2075 ;; *************** function _LCD_print *****************
  2076 ;; Defined at:
  2077 ;;		line 101 in file "drv_lcd.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;  s               2   46[BANK0 ] PTR const unsigned char 
  2080 ;;		 -> STR_3(6), vectorString(32), STR_1(13), 
  2081 ;; Auto vars:     Size  Location     Type
  2082 ;;  cs              1    0[BANK1 ] unsigned char 
  2083 ;; Return value:  Size  Location     Type
  2084 ;;                  1    wreg      unsigned char 
  2085 ;; Registers used:
  2086 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2092 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2093 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2095 ;;      Totals:         0       2       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2096 ;;Total ram usage:        3 bytes
  2097 ;; Hardware stack levels used:    1
  2098 ;; Hardware stack levels required when called:   15
  2099 ;; This function calls:
  2100 ;;		_LCD_write
  2101 ;; This function is called by:
  2102 ;;		_main
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           	psect	text10
  2107  002C52                     __ptext10:
  2108                           	opt stack 0
  2109  002C52                     _LCD_print:
  2110                           	opt stack 15
  2111                           
  2112                           ;drv_lcd.c: 103: char cs = 0;
  2113                           
  2114                           ;incstack = 0
  2115  002C52  0E00               	movlw	0
  2116  002C54  0101               	movlb	1	; () banked
  2117  002C56  6F00               	movwf	LCD_print@cs& (0+255),b
  2118                           
  2119                           ;drv_lcd.c: 104: while (*s)
  2120  002C58  D018               	goto	l599
  2121  002C5A                     
  2122                           ;drv_lcd.c: 105: {
  2123                           ;drv_lcd.c: 106: LCD_write(*s++);
  2124                           
  2125                           ; BSR set to: 1
  2126  002C5A  C0C9  FFF6         	movff	LCD_print@s,tblptrl
  2127  002C5E  C0CA  FFF7         	movff	LCD_print@s+1,tblptrh
  2128  002C62  0E00               	movlw	low (__smallconst shr (0+16))
  2129  002C64  6EF8               	movwf	tblptru,c
  2130  002C66  0E0E               	movlw	(high __ramtop+-1)
  2131  002C68  64F7               	cpfsgt	tblptrh,c
  2132  002C6A  D003               	bra	u3977
  2133  002C6C  0008               	tblrd		*
  2134  002C6E  50F5               	movf	tablat,w,c
  2135  002C70  D005               	bra	u3970
  2136  002C72                     u3977:
  2137  002C72  CFF6 FFE9          	movff	tblptrl,fsr0l
  2138  002C76  CFF7 FFEA          	movff	tblptrh,fsr0h
  2139  002C7A  50EF               	movf	indf0,w,c
  2140  002C7C                     u3970:
  2141  002C7C  ECF1  F018         	call	_LCD_write
  2142  002C80  0100               	movlb	0	; () banked
  2143  002C82  4BC9               	infsnz	LCD_print@s& (0+255),f,b
  2144  002C84  2BCA               	incf	(LCD_print@s+1)& (0+255),f,b
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;drv_lcd.c: 107: cs++;
  2148  002C86  0101               	movlb	1	; () banked
  2149  002C88  2B00               	incf	LCD_print@cs& (0+255),f,b
  2150  002C8A                     l599:
  2151                           
  2152                           ; BSR set to: 1
  2153                           
  2154                           ; BSR set to: 1
  2155  002C8A  C0C9  FFF6         	movff	LCD_print@s,tblptrl
  2156  002C8E  C0CA  FFF7         	movff	LCD_print@s+1,tblptrh
  2157  002C92  0E00               	movlw	low (__smallconst shr (0+16))
  2158  002C94  6EF8               	movwf	tblptru,c
  2159  002C96  0E0E               	movlw	(high __ramtop+-1)
  2160  002C98  64F7               	cpfsgt	tblptrh,c
  2161  002C9A  D003               	bra	u3987
  2162  002C9C  0008               	tblrd		*
  2163  002C9E  50F5               	movf	tablat,w,c
  2164  002CA0  D005               	bra	u3980
  2165  002CA2                     u3987:
  2166  002CA2  CFF6 FFE9          	movff	tblptrl,fsr0l
  2167  002CA6  CFF7 FFEA          	movff	tblptrh,fsr0h
  2168  002CAA  50EF               	movf	indf0,w,c
  2169  002CAC                     u3980:
  2170  002CAC  0900               	iorlw	0
  2171  002CAE  B4D8               	btfsc	status,2,c
  2172  002CB0  0012               	return	
  2173  002CB2  D7D3               	goto	l600
  2174  002CB4                     __end_of_LCD_print:
  2175                           	opt stack 0
  2176                           tblptru	equ	0xFF8
  2177                           tblptrh	equ	0xFF7
  2178                           tblptrl	equ	0xFF6
  2179                           tablat	equ	0xFF5
  2180                           intcon	equ	0xFF2
  2181                           indf0	equ	0xFEF
  2182                           postinc0	equ	0xFEE
  2183                           fsr0h	equ	0xFEA
  2184                           fsr0l	equ	0xFE9
  2185                           wreg	equ	0xFE8
  2186                           postdec1	equ	0xFE5
  2187                           fsr1l	equ	0xFE1
  2188                           status	equ	0xFD8
  2189                           
  2190 ;; *************** function _LCD_init *****************
  2191 ;; Defined at:
  2192 ;;		line 6 in file "drv_lcd.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;		None
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;		None
  2197 ;; Return value:  Size  Location     Type
  2198 ;;                  1    wreg      void 
  2199 ;; Registers used:
  2200 ;;		wreg, status,2, status,0, cstack
  2201 ;; Tracked objects:
  2202 ;;		On entry : 0/0
  2203 ;;		On exit  : 0/0
  2204 ;;		Unchanged: 0/0
  2205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2208 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2209 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2210 ;;Total ram usage:        1 bytes
  2211 ;; Hardware stack levels used:    1
  2212 ;; Hardware stack levels required when called:   16
  2213 ;; This function calls:
  2214 ;;		_LCD_EN_SET
  2215 ;;		_LCD_RS_SET
  2216 ;;		_LCD_clear
  2217 ;;		_LCD_command
  2218 ;;		_LCD_display
  2219 ;;		_LCD_write4bits
  2220 ;; This function is called by:
  2221 ;;		_main
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           	psect	text11
  2226  002908                     __ptext11:
  2227                           	opt stack 0
  2228  002908                     _LCD_init:
  2229                           	opt stack 14
  2230                           
  2231                           ;drv_lcd.c: 8: _displayfunction = (0x00 | 0x08);
  2232                           
  2233                           ;incstack = 0
  2234  002908  0E08               	movlw	8
  2235  00290A  0100               	movlb	0	; () banked
  2236  00290C  6FD6               	movwf	__displayfunction& (0+255),b
  2237                           
  2238                           ; BSR set to: 0
  2239                           ;drv_lcd.c: 22: _delay((unsigned long)((50)*(1000000/4000.0)));
  2240  00290E  0E11               	movlw	17
  2241  002910  0100               	movlb	0	; () banked
  2242  002912  6FC9               	movwf	??_LCD_init& (0+255),b
  2243  002914  0E3A               	movlw	58
  2244  002916                     u4007:
  2245  002916  2EE8               	decfsz	wreg,f,c
  2246  002918  D7FE               	bra	u4007
  2247  00291A  2FC9               	decfsz	??_LCD_init& (0+255),f,b
  2248  00291C  D7FC               	bra	u4007
  2249  00291E  F000               	nop	
  2250                           
  2251                           ;drv_lcd.c: 26: LCD_RS_SET(0);
  2252  002920  0E00               	movlw	0
  2253  002922  EC0C  F019         	call	_LCD_RS_SET
  2254                           
  2255                           ;drv_lcd.c: 27: LCD_EN_SET(0);
  2256  002926  0E00               	movlw	0
  2257  002928  EC03  F019         	call	_LCD_EN_SET
  2258                           
  2259                           ;drv_lcd.c: 28: (PORTDbits.RD3) = 0;
  2260  00292C  9690               	bcf	3984,3,c	;volatile
  2261                           
  2262                           ;drv_lcd.c: 29: (PORTDbits.RD2) = 0;
  2263  00292E  9490               	bcf	3984,2,c	;volatile
  2264                           
  2265                           ;drv_lcd.c: 30: (PORTDbits.RD1) = 0;
  2266  002930  9290               	bcf	3984,1,c	;volatile
  2267                           
  2268                           ;drv_lcd.c: 31: (PORTDbits.RD0) = 0;
  2269  002932  9090               	bcf	3984,0,c	;volatile
  2270                           
  2271                           ;drv_lcd.c: 38: LCD_write4bits(0x03);
  2272  002934  0E03               	movlw	3
  2273  002936  ECB9  F017         	call	_LCD_write4bits
  2274                           
  2275                           ;drv_lcd.c: 39: _delay((unsigned long)((4500)*(1000000/4000000.0)));
  2276  00293A  0EE1               	movlw	225
  2277  00293C                     u4017:
  2278  00293C  D000               	nop2	
  2279  00293E  2EE8               	decfsz	wreg,f,c
  2280  002940  D7FD               	bra	u4017
  2281                           
  2282                           ;drv_lcd.c: 42: LCD_write4bits(0x03);
  2283  002942  0E03               	movlw	3
  2284  002944  ECB9  F017         	call	_LCD_write4bits
  2285                           
  2286                           ;drv_lcd.c: 43: _delay((unsigned long)((4500)*(1000000/4000000.0)));
  2287  002948  0EE1               	movlw	225
  2288  00294A                     u4027:
  2289  00294A  D000               	nop2	
  2290  00294C  2EE8               	decfsz	wreg,f,c
  2291  00294E  D7FD               	bra	u4027
  2292                           
  2293                           ;drv_lcd.c: 46: LCD_write4bits(0x03);
  2294  002950  0E03               	movlw	3
  2295  002952  ECB9  F017         	call	_LCD_write4bits
  2296                           
  2297                           ;drv_lcd.c: 47: _delay((unsigned long)((150)*(1000000/4000000.0)));
  2298  002956  0E0C               	movlw	12
  2299  002958                     u4037:
  2300  002958  2EE8               	decfsz	wreg,f,c
  2301  00295A  D7FE               	bra	u4037
  2302  00295C  F000               	nop	
  2303                           
  2304                           ;drv_lcd.c: 50: LCD_write4bits(0x02);
  2305  00295E  0E02               	movlw	2
  2306  002960  ECB9  F017         	call	_LCD_write4bits
  2307                           
  2308                           ;drv_lcd.c: 53: LCD_command(0x20 | _displayfunction);
  2309  002964  0100               	movlb	0	; () banked
  2310  002966  51D6               	movf	__displayfunction& (0+255),w,b
  2311  002968  0920               	iorlw	32
  2312  00296A  ECFA  F018         	call	_LCD_command
  2313                           
  2314                           ;drv_lcd.c: 56: _displaycontrol = 0x04 | 0x00 | 0x00;
  2315  00296E  0E04               	movlw	4
  2316  002970  0100               	movlb	0	; () banked
  2317  002972  6F68               	movwf	__displaycontrol& (0+255),b
  2318                           
  2319                           ;drv_lcd.c: 57: LCD_display();
  2320  002974  EC24  F019         	call	_LCD_display	;wreg free
  2321                           
  2322                           ;drv_lcd.c: 60: LCD_clear();
  2323  002978  EC15  F019         	call	_LCD_clear	;wreg free
  2324                           
  2325                           ;drv_lcd.c: 63: _displaymode = 0x02 | 0x00;
  2326  00297C  0E02               	movlw	2
  2327  00297E  0100               	movlb	0	; () banked
  2328  002980  6F67               	movwf	__displaymode& (0+255),b
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;drv_lcd.c: 65: LCD_command(0x04 | _displaymode);
  2332  002982  5167               	movf	__displaymode& (0+255),w,b
  2333  002984  0904               	iorlw	4
  2334  002986  ECFA  F018         	call	_LCD_command
  2335  00298A  0012               	return		;funcret
  2336  00298C                     __end_of_LCD_init:
  2337                           	opt stack 0
  2338                           tblptru	equ	0xFF8
  2339                           tblptrh	equ	0xFF7
  2340                           tblptrl	equ	0xFF6
  2341                           tablat	equ	0xFF5
  2342                           intcon	equ	0xFF2
  2343                           indf0	equ	0xFEF
  2344                           postinc0	equ	0xFEE
  2345                           fsr0h	equ	0xFEA
  2346                           fsr0l	equ	0xFE9
  2347                           wreg	equ	0xFE8
  2348                           postdec1	equ	0xFE5
  2349                           fsr1l	equ	0xFE1
  2350                           status	equ	0xFD8
  2351                           
  2352 ;; *************** function _LCD_display *****************
  2353 ;; Defined at:
  2354 ;;		line 120 in file "drv_lcd.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;		None
  2357 ;; Auto vars:     Size  Location     Type
  2358 ;;		None
  2359 ;; Return value:  Size  Location     Type
  2360 ;;                  1    wreg      void 
  2361 ;; Registers used:
  2362 ;;		wreg, status,2, status,0, cstack
  2363 ;; Tracked objects:
  2364 ;;		On entry : 0/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2372 ;;Total ram usage:        0 bytes
  2373 ;; Hardware stack levels used:    1
  2374 ;; Hardware stack levels required when called:   15
  2375 ;; This function calls:
  2376 ;;		_LCD_command
  2377 ;; This function is called by:
  2378 ;;		_LCD_init
  2379 ;; This function uses a non-reentrant model
  2380 ;;
  2381                           
  2382                           	psect	text12
  2383  003248                     __ptext12:
  2384                           	opt stack 0
  2385  003248                     _LCD_display:
  2386                           	opt stack 14
  2387                           
  2388                           ;drv_lcd.c: 122: _displaycontrol |= 0x04;
  2389                           
  2390                           ;incstack = 0
  2391  003248  0100               	movlb	0	; () banked
  2392  00324A  8568               	bsf	__displaycontrol& (0+255),2,b
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;drv_lcd.c: 123: LCD_command(0x08 | _displaycontrol);
  2396  00324C  5168               	movf	__displaycontrol& (0+255),w,b
  2397  00324E  0908               	iorlw	8
  2398  003250  ECFA  F018         	call	_LCD_command
  2399  003254  0012               	return		;funcret
  2400  003256                     __end_of_LCD_display:
  2401                           	opt stack 0
  2402                           tblptru	equ	0xFF8
  2403                           tblptrh	equ	0xFF7
  2404                           tblptrl	equ	0xFF6
  2405                           tablat	equ	0xFF5
  2406                           intcon	equ	0xFF2
  2407                           indf0	equ	0xFEF
  2408                           postinc0	equ	0xFEE
  2409                           fsr0h	equ	0xFEA
  2410                           fsr0l	equ	0xFE9
  2411                           wreg	equ	0xFE8
  2412                           postdec1	equ	0xFE5
  2413                           fsr1l	equ	0xFE1
  2414                           status	equ	0xFD8
  2415                           
  2416 ;; *************** function _LCD_clear *****************
  2417 ;; Defined at:
  2418 ;;		line 70 in file "drv_lcd.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;		None
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;		None
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  1    wreg      void 
  2425 ;; Registers used:
  2426 ;;		wreg, status,2, status,0, cstack
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2436 ;;Total ram usage:        0 bytes
  2437 ;; Hardware stack levels used:    1
  2438 ;; Hardware stack levels required when called:   15
  2439 ;; This function calls:
  2440 ;;		_LCD_command
  2441 ;; This function is called by:
  2442 ;;		_LCD_init
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	text13
  2447  00322A                     __ptext13:
  2448                           	opt stack 0
  2449  00322A                     _LCD_clear:
  2450                           	opt stack 14
  2451                           
  2452                           ;drv_lcd.c: 72: LCD_command(0x01);
  2453                           
  2454                           ;incstack = 0
  2455  00322A  0E01               	movlw	1
  2456  00322C  ECFA  F018         	call	_LCD_command
  2457                           
  2458                           ;drv_lcd.c: 73: _delay((unsigned long)((2)*(1000000/4000.0)));
  2459  003230  0EA6               	movlw	166
  2460  003232                     u4047:
  2461  003232  2EE8               	decfsz	wreg,f,c
  2462  003234  D7FE               	bra	u4047
  2463  003236  D000               	nop2	
  2464  003238  0012               	return		;funcret
  2465  00323A                     __end_of_LCD_clear:
  2466                           	opt stack 0
  2467                           tblptru	equ	0xFF8
  2468                           tblptrh	equ	0xFF7
  2469                           tblptrl	equ	0xFF6
  2470                           tablat	equ	0xFF5
  2471                           intcon	equ	0xFF2
  2472                           indf0	equ	0xFEF
  2473                           postinc0	equ	0xFEE
  2474                           fsr0h	equ	0xFEA
  2475                           fsr0l	equ	0xFE9
  2476                           wreg	equ	0xFE8
  2477                           postdec1	equ	0xFE5
  2478                           fsr1l	equ	0xFE1
  2479                           status	equ	0xFD8
  2480                           
  2481 ;; *************** function _LCD_createChar *****************
  2482 ;; Defined at:
  2483 ;;		line 201 in file "drv_lcd.c"
  2484 ;; Parameters:    Size  Location     Type
  2485 ;;  location        1    wreg     unsigned char 
  2486 ;;  charmap         2   46[BANK0 ] PTR unsigned char 
  2487 ;;		 -> simboloGrados(8), 
  2488 ;; Auto vars:     Size  Location     Type
  2489 ;;  location        1    0[BANK1 ] unsigned char 
  2490 ;;  i               2    1[BANK1 ] int 
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  1    wreg      void 
  2493 ;; Registers used:
  2494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2500 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2501 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2503 ;;      Totals:         0       2       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2504 ;;Total ram usage:        5 bytes
  2505 ;; Hardware stack levels used:    1
  2506 ;; Hardware stack levels required when called:   15
  2507 ;; This function calls:
  2508 ;;		_LCD_command
  2509 ;;		_LCD_write
  2510 ;; This function is called by:
  2511 ;;		_main
  2512 ;; This function uses a non-reentrant model
  2513 ;;
  2514                           
  2515                           	psect	text14
  2516  002DC0                     __ptext14:
  2517                           	opt stack 0
  2518  002DC0                     _LCD_createChar:
  2519                           	opt stack 15
  2520                           
  2521                           ;incstack = 0
  2522                           ;LCD_createChar@location stored from wreg
  2523  002DC0  0101               	movlb	1	; () banked
  2524  002DC2  6F00               	movwf	LCD_createChar@location& (0+255),b
  2525                           
  2526                           ;drv_lcd.c: 203: location &= 0x7;
  2527  002DC4  0E07               	movlw	7
  2528  002DC6  0101               	movlb	1	; () banked
  2529  002DC8  1700               	andwf	LCD_createChar@location& (0+255),f,b
  2530                           
  2531                           ; BSR set to: 1
  2532                           ;drv_lcd.c: 204: LCD_command(0x40 | (location << 3));
  2533  002DCA  3900               	swapf	LCD_createChar@location& (0+255),w,b
  2534  002DCC  42E8               	rrncf	wreg,f,c
  2535  002DCE  0BF8               	andlw	248
  2536  002DD0  0940               	iorlw	64
  2537  002DD2  ECFA  F018         	call	_LCD_command
  2538                           
  2539                           ;drv_lcd.c: 205: for (int i = 0; i < 8; i++)
  2540  002DD6  0E00               	movlw	0
  2541  002DD8  0101               	movlb	1	; () banked
  2542  002DDA  6F02               	movwf	(LCD_createChar@i+1)& (0+255),b
  2543  002DDC  0E00               	movlw	0
  2544  002DDE  6F01               	movwf	LCD_createChar@i& (0+255),b
  2545  002DE0                     l4448:
  2546                           
  2547                           ; BSR set to: 1
  2548  002DE0  BF02               	btfsc	(LCD_createChar@i+1)& (0+255),7,b
  2549  002DE2  D006               	goto	l641
  2550  002DE4  5102               	movf	(LCD_createChar@i+1)& (0+255),w,b
  2551  002DE6  E114               	bnz	l643
  2552  002DE8  0E08               	movlw	8
  2553  002DEA  5D01               	subwf	LCD_createChar@i& (0+255),w,b
  2554  002DEC  B0D8               	btfsc	status,0,c
  2555  002DEE  0012               	return	
  2556  002DF0                     l641:
  2557                           
  2558                           ; BSR set to: 1
  2559                           ;drv_lcd.c: 206: {
  2560                           ;drv_lcd.c: 207: LCD_write(charmap[i]);
  2561                           
  2562                           ; BSR set to: 1
  2563  002DF0  5101               	movf	LCD_createChar@i& (0+255),w,b
  2564  002DF2  0100               	movlb	0	; () banked
  2565  002DF4  25C9               	addwf	LCD_createChar@charmap& (0+255),w,b
  2566  002DF6  6ED9               	movwf	fsr2l,c
  2567  002DF8  0101               	movlb	1	; () banked
  2568  002DFA  5102               	movf	(LCD_createChar@i+1)& (0+255),w,b
  2569  002DFC  0100               	movlb	0	; () banked
  2570  002DFE  21CA               	addwfc	(LCD_createChar@charmap+1)& (0+255),w,b
  2571  002E00  6EDA               	movwf	fsr2h,c
  2572  002E02  50DF               	movf	indf2,w,c
  2573  002E04  ECF1  F018         	call	_LCD_write
  2574  002E08  0101               	movlb	1	; () banked
  2575  002E0A  4B01               	infsnz	LCD_createChar@i& (0+255),f,b
  2576  002E0C  2B02               	incf	(LCD_createChar@i+1)& (0+255),f,b
  2577  002E0E  D7E8               	goto	l4448
  2578  002E10                     l643:
  2579                           
  2580                           ; BSR set to: 1
  2581  002E10  0012               	return		;funcret
  2582  002E12                     __end_of_LCD_createChar:
  2583                           	opt stack 0
  2584                           tblptru	equ	0xFF8
  2585                           tblptrh	equ	0xFF7
  2586                           tblptrl	equ	0xFF6
  2587                           tablat	equ	0xFF5
  2588                           intcon	equ	0xFF2
  2589                           indf0	equ	0xFEF
  2590                           postinc0	equ	0xFEE
  2591                           fsr0h	equ	0xFEA
  2592                           fsr0l	equ	0xFE9
  2593                           wreg	equ	0xFE8
  2594                           postdec1	equ	0xFE5
  2595                           fsr1l	equ	0xFE1
  2596                           indf2	equ	0xFDF
  2597                           fsr2h	equ	0xFDA
  2598                           fsr2l	equ	0xFD9
  2599                           status	equ	0xFD8
  2600                           
  2601 ;; *************** function _LCD_write *****************
  2602 ;; Defined at:
  2603 ;;		line 218 in file "drv_lcd.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;  value           1    wreg     unsigned char 
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;  value           1   45[BANK0 ] unsigned char 
  2608 ;; Return value:  Size  Location     Type
  2609 ;;                  1    wreg      void 
  2610 ;; Registers used:
  2611 ;;		wreg, status,2, status,0, cstack
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2618 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2620 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2621 ;;Total ram usage:        1 bytes
  2622 ;; Hardware stack levels used:    1
  2623 ;; Hardware stack levels required when called:   14
  2624 ;; This function calls:
  2625 ;;		_LCD_send
  2626 ;; This function is called by:
  2627 ;;		_LCD_print
  2628 ;;		_LCD_createChar
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text15
  2633  0031E2                     __ptext15:
  2634                           	opt stack 0
  2635  0031E2                     _LCD_write:
  2636                           	opt stack 15
  2637                           
  2638                           ; BSR set to: 1
  2639                           ;incstack = 0
  2640                           ;LCD_write@value stored from wreg
  2641  0031E2  0100               	movlb	0	; () banked
  2642  0031E4  6FC8               	movwf	LCD_write@value& (0+255),b
  2643                           
  2644                           ;drv_lcd.c: 220: LCD_send(value, 1);
  2645  0031E6  0E01               	movlw	1
  2646  0031E8  0100               	movlb	0	; () banked
  2647  0031EA  6FC6               	movwf	LCD_send@mode& (0+255),b
  2648  0031EC  51C8               	movf	LCD_write@value& (0+255),w,b
  2649  0031EE  EC85  F018         	call	_LCD_send
  2650  0031F2  0012               	return		;funcret
  2651  0031F4                     __end_of_LCD_write:
  2652                           	opt stack 0
  2653                           tblptru	equ	0xFF8
  2654                           tblptrh	equ	0xFF7
  2655                           tblptrl	equ	0xFF6
  2656                           tablat	equ	0xFF5
  2657                           intcon	equ	0xFF2
  2658                           indf0	equ	0xFEF
  2659                           postinc0	equ	0xFEE
  2660                           fsr0h	equ	0xFEA
  2661                           fsr0l	equ	0xFE9
  2662                           wreg	equ	0xFE8
  2663                           postdec1	equ	0xFE5
  2664                           fsr1l	equ	0xFE1
  2665                           indf2	equ	0xFDF
  2666                           fsr2h	equ	0xFDA
  2667                           fsr2l	equ	0xFD9
  2668                           status	equ	0xFD8
  2669                           
  2670 ;; *************** function _LCD_command *****************
  2671 ;; Defined at:
  2672 ;;		line 213 in file "drv_lcd.c"
  2673 ;; Parameters:    Size  Location     Type
  2674 ;;  value           1    wreg     unsigned char 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;  value           1   45[BANK0 ] unsigned char 
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  1    wreg      void 
  2679 ;; Registers used:
  2680 ;;		wreg, status,2, status,0, cstack
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2687 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2689 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2690 ;;Total ram usage:        1 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; Hardware stack levels required when called:   14
  2693 ;; This function calls:
  2694 ;;		_LCD_send
  2695 ;; This function is called by:
  2696 ;;		_LCD_init
  2697 ;;		_LCD_clear
  2698 ;;		_LCD_setCursor
  2699 ;;		_LCD_display
  2700 ;;		_LCD_createChar
  2701 ;;		_LCD_home
  2702 ;;		_LCD_noDisplay
  2703 ;;		_LCD_noCursor
  2704 ;;		_LCD_cursor
  2705 ;;		_LCD_noBlink
  2706 ;;		_LCD_blink
  2707 ;;		_LCD_scrollDisplayLeft
  2708 ;;		_LCD_scrollDisplayRight
  2709 ;;		_LCD_leftToRight
  2710 ;;		_LCD_rightToLeft
  2711 ;;		_LCD_autoscroll
  2712 ;;		_LCD_noAutoscroll
  2713 ;; This function uses a non-reentrant model
  2714 ;;
  2715                           
  2716                           	psect	text16
  2717  0031F4                     __ptext16:
  2718                           	opt stack 0
  2719  0031F4                     _LCD_command:
  2720                           	opt stack 15
  2721                           
  2722                           ;incstack = 0
  2723                           ;LCD_command@value stored from wreg
  2724  0031F4  0100               	movlb	0	; () banked
  2725  0031F6  6FC8               	movwf	LCD_command@value& (0+255),b
  2726                           
  2727                           ;drv_lcd.c: 215: LCD_send(value, 0);
  2728  0031F8  0E00               	movlw	0
  2729  0031FA  0100               	movlb	0	; () banked
  2730  0031FC  6FC6               	movwf	LCD_send@mode& (0+255),b
  2731  0031FE  51C8               	movf	LCD_command@value& (0+255),w,b
  2732  003200  EC85  F018         	call	_LCD_send
  2733  003204  0012               	return		;funcret
  2734  003206                     __end_of_LCD_command:
  2735                           	opt stack 0
  2736                           tblptru	equ	0xFF8
  2737                           tblptrh	equ	0xFF7
  2738                           tblptrl	equ	0xFF6
  2739                           tablat	equ	0xFF5
  2740                           intcon	equ	0xFF2
  2741                           indf0	equ	0xFEF
  2742                           postinc0	equ	0xFEE
  2743                           fsr0h	equ	0xFEA
  2744                           fsr0l	equ	0xFE9
  2745                           wreg	equ	0xFE8
  2746                           postdec1	equ	0xFE5
  2747                           fsr1l	equ	0xFE1
  2748                           indf2	equ	0xFDF
  2749                           fsr2h	equ	0xFDA
  2750                           fsr2l	equ	0xFD9
  2751                           status	equ	0xFD8
  2752                           
  2753 ;; *************** function _LCD_send *****************
  2754 ;; Defined at:
  2755 ;;		line 229 in file "drv_lcd.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;  value           1    wreg     unsigned char 
  2758 ;;  mode            1   43[BANK0 ] unsigned char 
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;  value           1   44[BANK0 ] unsigned char 
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  1    wreg      void 
  2763 ;; Registers used:
  2764 ;;		wreg, status,2, status,0, cstack
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2770 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2773 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2774 ;;Total ram usage:        2 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:   13
  2777 ;; This function calls:
  2778 ;;		_LCD_RS_SET
  2779 ;;		_LCD_write4bits
  2780 ;; This function is called by:
  2781 ;;		_LCD_command
  2782 ;;		_LCD_write
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           	psect	text17
  2787  00310A                     __ptext17:
  2788                           	opt stack 0
  2789  00310A                     _LCD_send:
  2790                           	opt stack 15
  2791                           
  2792                           ;incstack = 0
  2793                           ;LCD_send@value stored from wreg
  2794  00310A  0100               	movlb	0	; () banked
  2795  00310C  6FC7               	movwf	LCD_send@value& (0+255),b
  2796                           
  2797                           ;drv_lcd.c: 231: LCD_RS_SET(mode);
  2798  00310E  0100               	movlb	0	; () banked
  2799  003110  51C6               	movf	LCD_send@mode& (0+255),w,b
  2800  003112  EC0C  F019         	call	_LCD_RS_SET
  2801                           
  2802                           ;drv_lcd.c: 232: LCD_write4bits(value >> 4);
  2803  003116  0100               	movlb	0	; () banked
  2804  003118  39C7               	swapf	LCD_send@value& (0+255),w,b
  2805  00311A  0B0F               	andlw	15
  2806  00311C  ECB9  F017         	call	_LCD_write4bits
  2807                           
  2808                           ;drv_lcd.c: 233: LCD_write4bits(value);
  2809  003120  0100               	movlb	0	; () banked
  2810  003122  51C7               	movf	LCD_send@value& (0+255),w,b
  2811  003124  ECB9  F017         	call	_LCD_write4bits
  2812  003128  0012               	return		;funcret
  2813  00312A                     __end_of_LCD_send:
  2814                           	opt stack 0
  2815                           tblptru	equ	0xFF8
  2816                           tblptrh	equ	0xFF7
  2817                           tblptrl	equ	0xFF6
  2818                           tablat	equ	0xFF5
  2819                           intcon	equ	0xFF2
  2820                           indf0	equ	0xFEF
  2821                           postinc0	equ	0xFEE
  2822                           fsr0h	equ	0xFEA
  2823                           fsr0l	equ	0xFE9
  2824                           wreg	equ	0xFE8
  2825                           postdec1	equ	0xFE5
  2826                           fsr1l	equ	0xFE1
  2827                           indf2	equ	0xFDF
  2828                           fsr2h	equ	0xFDA
  2829                           fsr2l	equ	0xFD9
  2830                           status	equ	0xFD8
  2831                           
  2832 ;; *************** function _LCD_write4bits *****************
  2833 ;; Defined at:
  2834 ;;		line 256 in file "drv_lcd.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  a               1    wreg     unsigned char 
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;  a               1   42[BANK0 ] unsigned char 
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  1    wreg      void 
  2841 ;; Registers used:
  2842 ;;		wreg, cstack
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2849 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2851 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2852 ;;Total ram usage:        1 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; Hardware stack levels required when called:   12
  2855 ;; This function calls:
  2856 ;;		_LCD_pulseEnable
  2857 ;; This function is called by:
  2858 ;;		_LCD_init
  2859 ;;		_LCD_send
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           	psect	text18
  2864  002F72                     __ptext18:
  2865                           	opt stack 0
  2866  002F72                     _LCD_write4bits:
  2867                           	opt stack 15
  2868                           
  2869                           ;incstack = 0
  2870                           ;LCD_write4bits@a stored from wreg
  2871  002F72  0100               	movlb	0	; () banked
  2872  002F74  6FC5               	movwf	LCD_write4bits@a& (0+255),b
  2873                           
  2874                           ;drv_lcd.c: 258: if (a & 1)
  2875  002F76  0100               	movlb	0	; () banked
  2876  002F78  A1C5               	btfss	LCD_write4bits@a& (0+255),0,b
  2877  002F7A  D002               	goto	l664
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;drv_lcd.c: 259: {
  2881                           ;drv_lcd.c: 260: (PORTDbits.RD3) = 1;
  2882  002F7C  8690               	bsf	3984,3,c	;volatile
  2883                           
  2884                           ;drv_lcd.c: 261: } else
  2885  002F7E  D001               	goto	l665
  2886  002F80                     l664:
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;drv_lcd.c: 262: {
  2890                           ;drv_lcd.c: 263: (PORTDbits.RD3) = 0;
  2891  002F80  9690               	bcf	3984,3,c	;volatile
  2892  002F82                     l665:
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;drv_lcd.c: 264: }
  2896                           ;drv_lcd.c: 266: if (a & 2)
  2897                           
  2898                           ; BSR set to: 0
  2899  002F82  A3C5               	btfss	LCD_write4bits@a& (0+255),1,b
  2900  002F84  D002               	goto	l666
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;drv_lcd.c: 267: {
  2904                           ;drv_lcd.c: 268: (PORTDbits.RD2) = 1;
  2905  002F86  8490               	bsf	3984,2,c	;volatile
  2906                           
  2907                           ;drv_lcd.c: 269: } else
  2908  002F88  D001               	goto	l667
  2909  002F8A                     l666:
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;drv_lcd.c: 270: {
  2913                           ;drv_lcd.c: 271: (PORTDbits.RD2) = 0;
  2914  002F8A  9490               	bcf	3984,2,c	;volatile
  2915  002F8C                     l667:
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;drv_lcd.c: 272: }
  2919                           ;drv_lcd.c: 274: if (a & 4)
  2920                           
  2921                           ; BSR set to: 0
  2922  002F8C  A5C5               	btfss	LCD_write4bits@a& (0+255),2,b
  2923  002F8E  D002               	goto	l668
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;drv_lcd.c: 275: {
  2927                           ;drv_lcd.c: 276: (PORTDbits.RD1) = 1;
  2928  002F90  8290               	bsf	3984,1,c	;volatile
  2929                           
  2930                           ;drv_lcd.c: 277: } else
  2931  002F92  D001               	goto	l669
  2932  002F94                     l668:
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;drv_lcd.c: 278: {
  2936                           ;drv_lcd.c: 279: (PORTDbits.RD1) = 0;
  2937  002F94  9290               	bcf	3984,1,c	;volatile
  2938  002F96                     l669:
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;drv_lcd.c: 280: }
  2942                           ;drv_lcd.c: 282: if (a & 8)
  2943                           
  2944                           ; BSR set to: 0
  2945  002F96  A7C5               	btfss	LCD_write4bits@a& (0+255),3,b
  2946  002F98  D002               	goto	l670
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;drv_lcd.c: 283: {
  2950                           ;drv_lcd.c: 284: (PORTDbits.RD0) = 1;
  2951  002F9A  8090               	bsf	3984,0,c	;volatile
  2952                           
  2953                           ;drv_lcd.c: 285: } else
  2954  002F9C  D001               	goto	l671
  2955  002F9E                     l670:
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;drv_lcd.c: 286: {
  2959                           ;drv_lcd.c: 287: (PORTDbits.RD0) = 0;
  2960  002F9E  9090               	bcf	3984,0,c	;volatile
  2961  002FA0                     l671:
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;drv_lcd.c: 288: }
  2965                           ;drv_lcd.c: 290: LCD_pulseEnable();
  2966                           
  2967                           ; BSR set to: 0
  2968  002FA0  ECA4  F018         	call	_LCD_pulseEnable	;wreg free
  2969  002FA4  0012               	return		;funcret
  2970  002FA6                     __end_of_LCD_write4bits:
  2971                           	opt stack 0
  2972                           tblptru	equ	0xFF8
  2973                           tblptrh	equ	0xFF7
  2974                           tblptrl	equ	0xFF6
  2975                           tablat	equ	0xFF5
  2976                           intcon	equ	0xFF2
  2977                           indf0	equ	0xFEF
  2978                           postinc0	equ	0xFEE
  2979                           fsr0h	equ	0xFEA
  2980                           fsr0l	equ	0xFE9
  2981                           wreg	equ	0xFE8
  2982                           postdec1	equ	0xFE5
  2983                           fsr1l	equ	0xFE1
  2984                           indf2	equ	0xFDF
  2985                           fsr2h	equ	0xFDA
  2986                           fsr2l	equ	0xFD9
  2987                           status	equ	0xFD8
  2988                           
  2989 ;; *************** function _LCD_pulseEnable *****************
  2990 ;; Defined at:
  2991 ;;		line 246 in file "drv_lcd.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;		None
  2994 ;; Auto vars:     Size  Location     Type
  2995 ;;		None
  2996 ;; Return value:  Size  Location     Type
  2997 ;;                  1    wreg      void 
  2998 ;; Registers used:
  2999 ;;		wreg, cstack
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3009 ;;Total ram usage:        0 bytes
  3010 ;; Hardware stack levels used:    1
  3011 ;; Hardware stack levels required when called:   11
  3012 ;; This function calls:
  3013 ;;		_LCD_EN_SET
  3014 ;; This function is called by:
  3015 ;;		_LCD_write4bits
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           	psect	text19
  3020  003148                     __ptext19:
  3021                           	opt stack 0
  3022  003148                     _LCD_pulseEnable:
  3023                           	opt stack 15
  3024                           
  3025                           ;drv_lcd.c: 248: LCD_EN_SET(0);
  3026                           
  3027                           ;incstack = 0
  3028  003148  0E00               	movlw	0
  3029  00314A  EC03  F019         	call	_LCD_EN_SET
  3030                           
  3031                           ;drv_lcd.c: 249: _delay((unsigned long)((1)*(1000000/4000000.0)));
  3032                           ;drv_lcd.c: 250: LCD_EN_SET(1);
  3033  00314E  0E01               	movlw	1
  3034  003150  EC03  F019         	call	_LCD_EN_SET
  3035                           
  3036                           ;drv_lcd.c: 251: _delay((unsigned long)((1)*(1000000/4000000.0)));
  3037                           ;drv_lcd.c: 252: LCD_EN_SET(0);
  3038  003154  0E00               	movlw	0
  3039  003156  EC03  F019         	call	_LCD_EN_SET
  3040                           
  3041                           ;drv_lcd.c: 253: _delay((unsigned long)((100)*(1000000/4000000.0)));
  3042  00315A  0E08               	movlw	8
  3043  00315C                     u4057:
  3044  00315C  2EE8               	decfsz	wreg,f,c
  3045  00315E  D7FE               	bra	u4057
  3046  003160  F000               	nop	
  3047  003162  0012               	return		;funcret
  3048  003164                     __end_of_LCD_pulseEnable:
  3049                           	opt stack 0
  3050                           tblptru	equ	0xFF8
  3051                           tblptrh	equ	0xFF7
  3052                           tblptrl	equ	0xFF6
  3053                           tablat	equ	0xFF5
  3054                           intcon	equ	0xFF2
  3055                           indf0	equ	0xFEF
  3056                           postinc0	equ	0xFEE
  3057                           fsr0h	equ	0xFEA
  3058                           fsr0l	equ	0xFE9
  3059                           wreg	equ	0xFE8
  3060                           postdec1	equ	0xFE5
  3061                           fsr1l	equ	0xFE1
  3062                           indf2	equ	0xFDF
  3063                           fsr2h	equ	0xFDA
  3064                           fsr2l	equ	0xFD9
  3065                           status	equ	0xFD8
  3066                           
  3067 ;; *************** function _LCD_EN_SET *****************
  3068 ;; Defined at:
  3069 ;;		line 241 in file "drv_lcd.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;  value           1    wreg     unsigned char 
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;  value           1   41[BANK0 ] unsigned char 
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  1    wreg      void 
  3076 ;; Registers used:
  3077 ;;		wreg
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3084 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3086 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3087 ;;Total ram usage:        1 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; Hardware stack levels required when called:   10
  3090 ;; This function calls:
  3091 ;;		Nothing
  3092 ;; This function is called by:
  3093 ;;		_LCD_init
  3094 ;;		_LCD_pulseEnable
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text20
  3099  003206                     __ptext20:
  3100                           	opt stack 0
  3101  003206                     _LCD_EN_SET:
  3102                           	opt stack 15
  3103                           
  3104                           ;incstack = 0
  3105                           ;LCD_EN_SET@value stored from wreg
  3106  003206  0100               	movlb	0	; () banked
  3107  003208  6FC4               	movwf	LCD_EN_SET@value& (0+255),b
  3108                           
  3109                           ;drv_lcd.c: 243: (PORTEbits.RE1) = value;
  3110  00320A  0100               	movlb	0	; () banked
  3111  00320C  B1C4               	btfsc	LCD_EN_SET@value& (0+255),0,b
  3112  00320E  D002               	bra	u3895
  3113  003210  9291               	bcf	3985,1,c	;volatile
  3114  003212  D001               	bra	u3896
  3115  003214                     u3895:
  3116  003214  8291               	bsf	3985,1,c	;volatile
  3117  003216                     u3896:
  3118  003216  0012               	return		;funcret
  3119  003218                     __end_of_LCD_EN_SET:
  3120                           	opt stack 0
  3121                           tblptru	equ	0xFF8
  3122                           tblptrh	equ	0xFF7
  3123                           tblptrl	equ	0xFF6
  3124                           tablat	equ	0xFF5
  3125                           intcon	equ	0xFF2
  3126                           indf0	equ	0xFEF
  3127                           postinc0	equ	0xFEE
  3128                           fsr0h	equ	0xFEA
  3129                           fsr0l	equ	0xFE9
  3130                           wreg	equ	0xFE8
  3131                           postdec1	equ	0xFE5
  3132                           fsr1l	equ	0xFE1
  3133                           indf2	equ	0xFDF
  3134                           fsr2h	equ	0xFDA
  3135                           fsr2l	equ	0xFD9
  3136                           status	equ	0xFD8
  3137                           
  3138 ;; *************** function _LCD_RS_SET *****************
  3139 ;; Defined at:
  3140 ;;		line 236 in file "drv_lcd.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  value           1    wreg     unsigned char 
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;  value           1   41[BANK0 ] unsigned char 
  3145 ;; Return value:  Size  Location     Type
  3146 ;;                  1    wreg      void 
  3147 ;; Registers used:
  3148 ;;		wreg
  3149 ;; Tracked objects:
  3150 ;;		On entry : 0/0
  3151 ;;		On exit  : 0/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3155 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3157 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3158 ;;Total ram usage:        1 bytes
  3159 ;; Hardware stack levels used:    1
  3160 ;; Hardware stack levels required when called:   10
  3161 ;; This function calls:
  3162 ;;		Nothing
  3163 ;; This function is called by:
  3164 ;;		_LCD_init
  3165 ;;		_LCD_send
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           	psect	text21
  3170  003218                     __ptext21:
  3171                           	opt stack 0
  3172  003218                     _LCD_RS_SET:
  3173                           	opt stack 17
  3174                           
  3175                           ;incstack = 0
  3176                           ;LCD_RS_SET@value stored from wreg
  3177  003218  0100               	movlb	0	; () banked
  3178  00321A  6FC4               	movwf	LCD_RS_SET@value& (0+255),b
  3179                           
  3180                           ;drv_lcd.c: 238: (PORTEbits.RE0) = value;
  3181  00321C  0100               	movlb	0	; () banked
  3182  00321E  B1C4               	btfsc	LCD_RS_SET@value& (0+255),0,b
  3183  003220  D002               	bra	u3905
  3184  003222  9091               	bcf	3985,0,c	;volatile
  3185  003224  D001               	bra	u3906
  3186  003226                     u3905:
  3187  003226  8091               	bsf	3985,0,c	;volatile
  3188  003228                     u3906:
  3189  003228  0012               	return		;funcret
  3190  00322A                     __end_of_LCD_RS_SET:
  3191                           	opt stack 0
  3192                           tblptru	equ	0xFF8
  3193                           tblptrh	equ	0xFF7
  3194                           tblptrl	equ	0xFF6
  3195                           tablat	equ	0xFF5
  3196                           intcon	equ	0xFF2
  3197                           indf0	equ	0xFEF
  3198                           postinc0	equ	0xFEE
  3199                           fsr0h	equ	0xFEA
  3200                           fsr0l	equ	0xFE9
  3201                           wreg	equ	0xFE8
  3202                           postdec1	equ	0xFE5
  3203                           fsr1l	equ	0xFE1
  3204                           indf2	equ	0xFDF
  3205                           fsr2h	equ	0xFDA
  3206                           fsr2l	equ	0xFD9
  3207                           status	equ	0xFD8
  3208                           
  3209 ;; *************** function _INTERRUPT_InterruptManager *****************
  3210 ;; Defined at:
  3211 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;		None
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;		None
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  1    wreg      void 
  3218 ;; Registers used:
  3219 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3227 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3228 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3229 ;;Total ram usage:       18 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    9
  3232 ;; This function calls:
  3233 ;;		_I2C1_BusCollisionISR
  3234 ;;		_I2C1_ISR
  3235 ;;		_TMR0_ISR
  3236 ;; This function is called by:
  3237 ;;		Interrupt level 2
  3238 ;; This function uses a non-reentrant model
  3239 ;;
  3240                           
  3241                           	psect	intcode
  3242  000008                     __pintcode:
  3243                           	opt stack 0
  3244  000008                     _INTERRUPT_InterruptManager:
  3245                           	opt stack 14
  3246                           
  3247                           ;incstack = 0
  3248  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3249  00000A  CFFA F0B2          	movff	pclath,??_INTERRUPT_InterruptManager
  3250  00000E  CFFB F0B3          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  3251  000012  CFE9 F0B4          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  3252  000016  CFEA F0B5          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  3253  00001A  CFE1 F0B6          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  3254  00001E  CFE2 F0B7          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  3255  000022  CFD9 F0B8          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  3256  000026  CFDA F0B9          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  3257  00002A  CFF3 F0BA          	movff	prodl,??_INTERRUPT_InterruptManager+8
  3258  00002E  CFF4 F0BB          	movff	prodh,??_INTERRUPT_InterruptManager+9
  3259  000032  CFF6 F0BC          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  3260  000036  CFF7 F0BD          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  3261  00003A  CFF8 F0BE          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  3262  00003E  CFF5 F0BF          	movff	tablat,??_INTERRUPT_InterruptManager+13
  3263  000042  C05F  F0C0         	movff	btemp,??_INTERRUPT_InterruptManager+14
  3264  000046  C060  F0C1         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  3265  00004A  C061  F0C2         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  3266  00004E  C062  F0C3         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  3267                           
  3268                           ;interrupt_manager.c: 60: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
  3269  000052  010E               	movlb	14	; () banked
  3270  000054  BBC2               	btfsc	194,5,b	;volatile
  3271                           
  3272                           ; BSR set to: 14
  3273  000056  ABCA               	btfss	202,5,b	;volatile
  3274  000058  D003               	goto	i2l278
  3275                           
  3276                           ; BSR set to: 14
  3277                           ;interrupt_manager.c: 61: {
  3278                           ;interrupt_manager.c: 62: TMR0_ISR();
  3279  00005A  EC74  F018         	call	_TMR0_ISR	;wreg free
  3280                           
  3281                           ;interrupt_manager.c: 63: }
  3282  00005E  D00E               	goto	i2l282
  3283  000060                     i2l278:
  3284                           
  3285                           ; BSR set to: 14
  3286                           ;interrupt_manager.c: 64: else if(INTCONbits.PEIE == 1 && PIE3bits.BCL1IE == 1 && PIR3bi
      +                          ts.BCL1IF == 1)
  3287  000060  BCF2               	btfsc	intcon,6,c	;volatile
  3288                           
  3289                           ; BSR set to: 14
  3290  000062  A3C5               	btfss	197,1,b	;volatile
  3291  000064  D005               	goto	i2l280
  3292                           
  3293                           ; BSR set to: 14
  3294  000066  A3CD               	btfss	205,1,b	;volatile
  3295  000068  D003               	goto	i2l280
  3296                           
  3297                           ; BSR set to: 14
  3298                           ;interrupt_manager.c: 65: {
  3299                           ;interrupt_manager.c: 66: I2C1_BusCollisionISR();
  3300  00006A  EC52  F019         	call	_I2C1_BusCollisionISR	;wreg free
  3301                           
  3302                           ;interrupt_manager.c: 67: }
  3303  00006E  D006               	goto	i2l282
  3304  000070                     i2l280:
  3305                           
  3306                           ; BSR set to: 14
  3307                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1 && PIE3bits.SSP1IE == 1 && PIR3bi
      +                          ts.SSP1IF == 1)
  3308  000070  BCF2               	btfsc	intcon,6,c	;volatile
  3309                           
  3310                           ; BSR set to: 14
  3311  000072  A1C5               	btfss	197,0,b	;volatile
  3312  000074  D003               	goto	i2l282
  3313                           
  3314                           ; BSR set to: 14
  3315  000076  B1CD               	btfsc	205,0,b	;volatile
  3316                           
  3317                           ; BSR set to: 14
  3318                           ;interrupt_manager.c: 69: {
  3319                           ;interrupt_manager.c: 70: I2C1_ISR();
  3320  000078  ECC5  F00E         	call	_I2C1_ISR	;wreg free
  3321  00007C                     i2l282:
  3322                           
  3323                           ;interrupt_manager.c: 72: else
  3324                           ;interrupt_manager.c: 73: {
  3325  00007C  C0C3  F062         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  3326  000080  C0C2  F061         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  3327  000084  C0C1  F060         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  3328  000088  C0C0  F05F         	movff	??_INTERRUPT_InterruptManager+14,btemp
  3329  00008C  C0BF  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  3330  000090  C0BE  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  3331  000094  C0BD  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  3332  000098  C0BC  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  3333  00009C  C0BB  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  3334  0000A0  C0BA  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  3335  0000A4  C0B9  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  3336  0000A8  C0B8  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  3337  0000AC  C0B7  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  3338  0000B0  C0B6  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  3339  0000B4  C0B5  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  3340  0000B8  C0B4  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  3341  0000BC  C0B3  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  3342  0000C0  C0B2  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  3343  0000C4  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3344  0000C6  0011               	retfie		f
  3345  0000C8                     __end_of_INTERRUPT_InterruptManager:
  3346                           	opt stack 0
  3347                           pclatu	equ	0xFFB
  3348                           pclath	equ	0xFFA
  3349                           tblptru	equ	0xFF8
  3350                           tblptrh	equ	0xFF7
  3351                           tblptrl	equ	0xFF6
  3352                           tablat	equ	0xFF5
  3353                           prodh	equ	0xFF4
  3354                           prodl	equ	0xFF3
  3355                           intcon	equ	0xFF2
  3356                           indf0	equ	0xFEF
  3357                           postinc0	equ	0xFEE
  3358                           fsr0h	equ	0xFEA
  3359                           fsr0l	equ	0xFE9
  3360                           wreg	equ	0xFE8
  3361                           postdec1	equ	0xFE5
  3362                           fsr1h	equ	0xFE2
  3363                           fsr1l	equ	0xFE1
  3364                           indf2	equ	0xFDF
  3365                           fsr2h	equ	0xFDA
  3366                           fsr2l	equ	0xFD9
  3367                           status	equ	0xFD8
  3368                           
  3369 ;; *************** function _TMR0_ISR *****************
  3370 ;; Defined at:
  3371 ;;		line 120 in file "mcc_generated_files/tmr0.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;		None
  3374 ;; Auto vars:     Size  Location     Type
  3375 ;;		None
  3376 ;; Return value:  Size  Location     Type
  3377 ;;                  1    wreg      void 
  3378 ;; Registers used:
  3379 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3380 ;; Tracked objects:
  3381 ;;		On entry : 0/0
  3382 ;;		On exit  : 0/0
  3383 ;;		Unchanged: 0/0
  3384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3389 ;;Total ram usage:        0 bytes
  3390 ;; Hardware stack levels used:    1
  3391 ;; Hardware stack levels required when called:    8
  3392 ;; This function calls:
  3393 ;;		_TMR0_CallBack
  3394 ;; This function is called by:
  3395 ;;		_INTERRUPT_InterruptManager
  3396 ;; This function uses a non-reentrant model
  3397 ;;
  3398                           
  3399                           	psect	text23
  3400  0030E8                     __ptext23:
  3401                           	opt stack 0
  3402  0030E8                     _TMR0_ISR:
  3403                           	opt stack 14
  3404                           
  3405                           ;tmr0.c: 122: static volatile uint16_t CountCallBack = 0;
  3406                           ;tmr0.c: 125: PIR0bits.TMR0IF = 0;
  3407                           
  3408                           ;incstack = 0
  3409  0030E8  010E               	movlb	14	; () banked
  3410  0030EA  9BCA               	bcf	202,5,b	;volatile
  3411                           
  3412                           ; BSR set to: 14
  3413                           ;tmr0.c: 127: if (++CountCallBack >= 100)
  3414  0030EC  4A56               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
  3415  0030EE  2A57               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
  3416  0030F0  5057               	movf	TMR0_ISR@CountCallBack+1,w,c	;volatile
  3417  0030F2  E104               	bnz	i2u353_40
  3418  0030F4  0E64               	movlw	100
  3419  0030F6  5C56               	subwf	TMR0_ISR@CountCallBack,w,c	;volatile
  3420  0030F8  A0D8               	btfss	status,0,c
  3421  0030FA  0012               	return	
  3422  0030FC                     i2u353_40:
  3423                           
  3424                           ; BSR set to: 14
  3425                           ;tmr0.c: 128: {
  3426                           ;tmr0.c: 130: TMR0_CallBack();
  3427  0030FC  EC2C  F018         	call	_TMR0_CallBack	;wreg free
  3428                           
  3429                           ;tmr0.c: 133: CountCallBack = 0;
  3430  003100  0E00               	movlw	0
  3431  003102  6E57               	movwf	TMR0_ISR@CountCallBack+1,c	;volatile
  3432  003104  0E00               	movlw	0
  3433  003106  6E56               	movwf	TMR0_ISR@CountCallBack,c	;volatile
  3434  003108  0012               	return	
  3435  00310A                     __end_of_TMR0_ISR:
  3436                           	opt stack 0
  3437                           pclatu	equ	0xFFB
  3438                           pclath	equ	0xFFA
  3439                           tblptru	equ	0xFF8
  3440                           tblptrh	equ	0xFF7
  3441                           tblptrl	equ	0xFF6
  3442                           tablat	equ	0xFF5
  3443                           prodh	equ	0xFF4
  3444                           prodl	equ	0xFF3
  3445                           intcon	equ	0xFF2
  3446                           indf0	equ	0xFEF
  3447                           postinc0	equ	0xFEE
  3448                           fsr0h	equ	0xFEA
  3449                           fsr0l	equ	0xFE9
  3450                           wreg	equ	0xFE8
  3451                           postdec1	equ	0xFE5
  3452                           fsr1h	equ	0xFE2
  3453                           fsr1l	equ	0xFE1
  3454                           indf2	equ	0xFDF
  3455                           fsr2h	equ	0xFDA
  3456                           fsr2l	equ	0xFD9
  3457                           status	equ	0xFD8
  3458                           
  3459 ;; *************** function _TMR0_CallBack *****************
  3460 ;; Defined at:
  3461 ;;		line 139 in file "mcc_generated_files/tmr0.c"
  3462 ;; Parameters:    Size  Location     Type
  3463 ;;		None
  3464 ;; Auto vars:     Size  Location     Type
  3465 ;;		None
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  1    wreg      void 
  3468 ;; Registers used:
  3469 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3479 ;;Total ram usage:        0 bytes
  3480 ;; Hardware stack levels used:    1
  3481 ;; Hardware stack levels required when called:    7
  3482 ;; This function calls:
  3483 ;;		Absolute function
  3484 ;;		_TMR0_DefaultInterruptHandler
  3485 ;;		_timerInt
  3486 ;; This function is called by:
  3487 ;;		_TMR0_ISR
  3488 ;; This function uses a non-reentrant model
  3489 ;;
  3490                           
  3491                           	psect	text24
  3492  003058                     __ptext24:
  3493                           	opt stack 0
  3494  003058                     _TMR0_CallBack:
  3495                           	opt stack 14
  3496                           
  3497                           ;tmr0.c: 143: if(TMR0_InterruptHandler)
  3498                           
  3499                           ;incstack = 0
  3500  003058  0100               	movlb	0	; () banked
  3501  00305A  51D3               	movf	_TMR0_InterruptHandler& (0+255),w,b
  3502  00305C  11D4               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  3503  00305E  11D5               	iorwf	(_TMR0_InterruptHandler+2)& (0+255),w,b
  3504  003060  B4D8               	btfsc	status,2,c
  3505  003062  0012               	return	
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;tmr0.c: 144: {
  3509                           ;tmr0.c: 145: TMR0_InterruptHandler();
  3510  003064  D801               	call	i2u352_48
  3511  003066  0012               	return	
  3512  003068                     i2u352_48:
  3513  003068  0005               	push	
  3514  00306A  6EFA               	movwf	pclath,c
  3515  00306C  51D3               	movf	_TMR0_InterruptHandler& (0+255),w,b
  3516  00306E  6EFD               	movwf	tosl,c
  3517  003070  51D4               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  3518  003072  6EFE               	movwf	tosh,c
  3519  003074  51D5               	movf	(_TMR0_InterruptHandler+2)& (0+255),w,b
  3520  003076  6EFF               	movwf	tosu,c
  3521  003078  50FA               	movf	pclath,w,c
  3522  00307A  0012               	return		;indir
  3523  00307C                     __end_of_TMR0_CallBack:
  3524                           	opt stack 0
  3525                           tosu	equ	0xFFF
  3526                           tosh	equ	0xFFE
  3527                           tosl	equ	0xFFD
  3528                           pclatu	equ	0xFFB
  3529                           pclath	equ	0xFFA
  3530                           tblptru	equ	0xFF8
  3531                           tblptrh	equ	0xFF7
  3532                           tblptrl	equ	0xFF6
  3533                           tablat	equ	0xFF5
  3534                           prodh	equ	0xFF4
  3535                           prodl	equ	0xFF3
  3536                           intcon	equ	0xFF2
  3537                           indf0	equ	0xFEF
  3538                           postinc0	equ	0xFEE
  3539                           fsr0h	equ	0xFEA
  3540                           fsr0l	equ	0xFE9
  3541                           wreg	equ	0xFE8
  3542                           postdec1	equ	0xFE5
  3543                           fsr1h	equ	0xFE2
  3544                           fsr1l	equ	0xFE1
  3545                           indf2	equ	0xFDF
  3546                           fsr2h	equ	0xFDA
  3547                           fsr2l	equ	0xFD9
  3548                           status	equ	0xFD8
  3549                           
  3550 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  3551 ;; Defined at:
  3552 ;;		line 153 in file "mcc_generated_files/tmr0.c"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;		None
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;		None
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  1    wreg      void 
  3559 ;; Registers used:
  3560 ;;		None
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3570 ;;Total ram usage:        0 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; This function calls:
  3573 ;;		Nothing
  3574 ;; This function is called by:
  3575 ;;		_TMR0_Initialize
  3576 ;;		_TMR0_CallBack
  3577 ;; This function uses a non-reentrant model
  3578 ;;
  3579                           
  3580                           	psect	text25
  3581  0032A2                     __ptext25:
  3582                           	opt stack 0
  3583  0032A2                     _TMR0_DefaultInterruptHandler:
  3584                           	opt stack 20
  3585                           
  3586                           ;incstack = 0
  3587  0032A2  0012               	return		;funcret
  3588  0032A4                     __end_of_TMR0_DefaultInterruptHandler:
  3589                           	opt stack 0
  3590                           tosu	equ	0xFFF
  3591                           tosh	equ	0xFFE
  3592                           tosl	equ	0xFFD
  3593                           pclatu	equ	0xFFB
  3594                           pclath	equ	0xFFA
  3595                           tblptru	equ	0xFF8
  3596                           tblptrh	equ	0xFF7
  3597                           tblptrl	equ	0xFF6
  3598                           tablat	equ	0xFF5
  3599                           prodh	equ	0xFF4
  3600                           prodl	equ	0xFF3
  3601                           intcon	equ	0xFF2
  3602                           indf0	equ	0xFEF
  3603                           postinc0	equ	0xFEE
  3604                           fsr0h	equ	0xFEA
  3605                           fsr0l	equ	0xFE9
  3606                           wreg	equ	0xFE8
  3607                           postdec1	equ	0xFE5
  3608                           fsr1h	equ	0xFE2
  3609                           fsr1l	equ	0xFE1
  3610                           indf2	equ	0xFDF
  3611                           fsr2h	equ	0xFDA
  3612                           fsr2l	equ	0xFD9
  3613                           status	equ	0xFD8
  3614                           
  3615 ;; *************** function _timerInt *****************
  3616 ;; Defined at:
  3617 ;;		line 76 in file "main.c"
  3618 ;; Parameters:    Size  Location     Type
  3619 ;;		None
  3620 ;; Auto vars:     Size  Location     Type
  3621 ;;  temperatura     3   76[COMRAM] float 
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  1    wreg      void 
  3624 ;; Registers used:
  3625 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3626 ;; Tracked objects:
  3627 ;;		On entry : 0/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3632 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3634 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3635 ;;Total ram usage:        3 bytes
  3636 ;; Hardware stack levels used:    1
  3637 ;; Hardware stack levels required when called:    6
  3638 ;; This function calls:
  3639 ;;		_getTemperatura
  3640 ;;		_regularTemperatura
  3641 ;;		_sprintf
  3642 ;;		i2_LCD_print
  3643 ;;		i2_LCD_setCursor
  3644 ;;		i2_LCD_write
  3645 ;; This function is called by:
  3646 ;;		_main
  3647 ;;		_TMR0_CallBack
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text26
  3652  002A92                     __ptext26:
  3653                           	opt stack 0
  3654  002A92                     _timerInt:
  3655                           	opt stack 14
  3656                           
  3657                           ;main.c: 78: LCD_setCursor(0, 1);
  3658                           
  3659                           ;incstack = 0
  3660  002A92  0E01               	movlw	1
  3661  002A94  6E06               	movwf	i2LCD_setCursor@fila,c
  3662  002A96  0E00               	movlw	0
  3663  002A98  EC53  F017         	call	i2_LCD_setCursor
  3664                           
  3665                           ;main.c: 79: float temperatura = getTemperatura();
  3666  002A9C  ECC0  F015         	call	_getTemperatura	;wreg free
  3667  002AA0  C033  F04D         	movff	?_getTemperatura,timerInt@temperatura
  3668  002AA4  C034  F04E         	movff	?_getTemperatura+1,timerInt@temperatura+1
  3669  002AA8  C035  F04F         	movff	?_getTemperatura+2,timerInt@temperatura+2
  3670                           
  3671                           ;main.c: 81: sprintf(vectorString, "%.3f", temperatura);
  3672  002AAC  0E69               	movlw	low _vectorString
  3673  002AAE  6E40               	movwf	sprintf@sp,c
  3674  002AB0  0E00               	movlw	high _vectorString
  3675  002AB2  6E41               	movwf	sprintf@sp+1,c
  3676  002AB4  0E8A               	movlw	low STR_2
  3677  002AB6  6E42               	movwf	sprintf@f,c
  3678  002AB8  0E0F               	movlw	high STR_2
  3679  002ABA  6E43               	movwf	sprintf@f+1,c
  3680  002ABC  C04D  F044         	movff	timerInt@temperatura,?_sprintf+4
  3681  002AC0  C04E  F045         	movff	timerInt@temperatura+1,?_sprintf+5
  3682  002AC4  C04F  F046         	movff	timerInt@temperatura+2,?_sprintf+6
  3683  002AC8  ECC8  F007         	call	_sprintf	;wreg free
  3684                           
  3685                           ;main.c: 82: LCD_print(vectorString);
  3686  002ACC  0E69               	movlw	low _vectorString
  3687  002ACE  6E06               	movwf	i2LCD_print@s,c
  3688  002AD0  0E00               	movlw	high _vectorString
  3689  002AD2  6E07               	movwf	i2LCD_print@s+1,c
  3690  002AD4  EC5A  F016         	call	i2_LCD_print	;wreg free
  3691                           
  3692                           ;main.c: 83: LCD_write(0);
  3693  002AD8  0E00               	movlw	0
  3694  002ADA  EC32  F019         	call	i2_LCD_write
  3695                           
  3696                           ;main.c: 84: LCD_print("     ");
  3697  002ADE  0E84               	movlw	low STR_3
  3698  002AE0  6E06               	movwf	i2LCD_print@s,c
  3699  002AE2  0E0F               	movlw	high STR_3
  3700  002AE4  6E07               	movwf	i2LCD_print@s+1,c
  3701  002AE6  EC5A  F016         	call	i2_LCD_print	;wreg free
  3702                           
  3703                           ;main.c: 87: regularTemperatura(temperatura);
  3704  002AEA  C04D  F00A         	movff	timerInt@temperatura,regularTemperatura@temp
  3705  002AEE  C04E  F00B         	movff	timerInt@temperatura+1,regularTemperatura@temp+1
  3706  002AF2  C04F  F00C         	movff	timerInt@temperatura+2,regularTemperatura@temp+2
  3707  002AF6  EC3E  F014         	call	_regularTemperatura	;wreg free
  3708                           
  3709                           ;main.c: 89: PORTDbits.RD4 = calefactorON;
  3710  002AFA  A25E               	btfss	_calefactorON/(0+8),_calefactorON& (0+7),c
  3711  002AFC  D002               	bra	i2u347_45
  3712  002AFE  8890               	bsf	3984,4,c	;volatile
  3713  002B00  D001               	bra	i2u347_47
  3714  002B02                     i2u347_45:
  3715  002B02  9890               	bcf	3984,4,c	;volatile
  3716  002B04                     i2u347_47:
  3717                           
  3718                           ;main.c: 90: PORTDbits.RD5 = aireacondicionadoON;
  3719  002B04  A05E               	btfss	_aireacondicionadoON/(0+8),_aireacondicionadoON& (0+7),c
  3720  002B06  D002               	bra	i2u348_45
  3721  002B08  8A90               	bsf	3984,5,c	;volatile
  3722  002B0A  D001               	bra	i2u348_47
  3723  002B0C                     i2u348_45:
  3724  002B0C  9A90               	bcf	3984,5,c	;volatile
  3725  002B0E                     i2u348_47:
  3726  002B0E  0012               	return		;funcret
  3727  002B10                     __end_of_timerInt:
  3728                           	opt stack 0
  3729                           tosu	equ	0xFFF
  3730                           tosh	equ	0xFFE
  3731                           tosl	equ	0xFFD
  3732                           pclatu	equ	0xFFB
  3733                           pclath	equ	0xFFA
  3734                           tblptru	equ	0xFF8
  3735                           tblptrh	equ	0xFF7
  3736                           tblptrl	equ	0xFF6
  3737                           tablat	equ	0xFF5
  3738                           prodh	equ	0xFF4
  3739                           prodl	equ	0xFF3
  3740                           intcon	equ	0xFF2
  3741                           indf0	equ	0xFEF
  3742                           postinc0	equ	0xFEE
  3743                           fsr0h	equ	0xFEA
  3744                           fsr0l	equ	0xFE9
  3745                           wreg	equ	0xFE8
  3746                           postdec1	equ	0xFE5
  3747                           fsr1h	equ	0xFE2
  3748                           fsr1l	equ	0xFE1
  3749                           indf2	equ	0xFDF
  3750                           fsr2h	equ	0xFDA
  3751                           fsr2l	equ	0xFD9
  3752                           status	equ	0xFD8
  3753                           
  3754 ;; *************** function i2_LCD_setCursor *****************
  3755 ;; Defined at:
  3756 ;;		line 82 in file "drv_lcd.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;  columna         1    wreg     unsigned char 
  3759 ;;  fila            1    5[COMRAM] unsigned char 
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;  columna         1    6[COMRAM] unsigned char 
  3762 ;; Return value:  Size  Location     Type
  3763 ;;                  1    wreg      void 
  3764 ;; Registers used:
  3765 ;;		wreg, status,2, status,0, cstack
  3766 ;; Tracked objects:
  3767 ;;		On entry : 0/0
  3768 ;;		On exit  : 0/0
  3769 ;;		Unchanged: 0/0
  3770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3771 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3772 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3774 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3775 ;;Total ram usage:        2 bytes
  3776 ;; Hardware stack levels used:    1
  3777 ;; Hardware stack levels required when called:    5
  3778 ;; This function calls:
  3779 ;;		i2_LCD_command
  3780 ;; This function is called by:
  3781 ;;		_timerInt
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           	psect	text27
  3786  002EA6                     __ptext27:
  3787                           	opt stack 0
  3788  002EA6                     i2_LCD_setCursor:
  3789                           	opt stack 14
  3790                           
  3791                           ;incstack = 0
  3792                           ;i2LCD_setCursor@columna stored from wreg
  3793  002EA6  6E07               	movwf	i2LCD_setCursor@columna,c
  3794                           
  3795                           ;drv_lcd.c: 84: switch (fila)
  3796  002EA8  D014               	goto	i2l590
  3797  002EAA                     
  3798                           ;drv_lcd.c: 87: LCD_command(0x80 + columna);
  3799  002EAA  5007               	movf	i2LCD_setCursor@columna,w,c
  3800  002EAC  0F80               	addlw	128
  3801  002EAE  EC2B  F019         	call	i2_LCD_command
  3802                           
  3803                           ;drv_lcd.c: 88: break;
  3804  002EB2  0012               	return	
  3805  002EB4                     
  3806                           ;drv_lcd.c: 90: LCD_command(0xC0 + columna);
  3807  002EB4  5007               	movf	i2LCD_setCursor@columna,w,c
  3808  002EB6  0FC0               	addlw	192
  3809  002EB8  EC2B  F019         	call	i2_LCD_command
  3810                           
  3811                           ;drv_lcd.c: 91: break;
  3812  002EBC  0012               	return	
  3813  002EBE                     
  3814                           ;drv_lcd.c: 93: LCD_command(0x94 + columna);
  3815  002EBE  5007               	movf	i2LCD_setCursor@columna,w,c
  3816  002EC0  0F94               	addlw	148
  3817  002EC2  EC2B  F019         	call	i2_LCD_command
  3818                           
  3819                           ;drv_lcd.c: 94: break;
  3820  002EC6  0012               	return	
  3821  002EC8                     
  3822                           ;drv_lcd.c: 96: LCD_command(0xD4 + columna);
  3823  002EC8  5007               	movf	i2LCD_setCursor@columna,w,c
  3824  002ECA  0FD4               	addlw	212
  3825  002ECC  EC2B  F019         	call	i2_LCD_command
  3826                           
  3827                           ;drv_lcd.c: 98: }
  3828                           
  3829                           ;drv_lcd.c: 97: break;
  3830  002ED0  0012               	return	
  3831  002ED2                     i2l590:
  3832  002ED2  5006               	movf	i2LCD_setCursor@fila,w,c
  3833                           
  3834                           ; Switch size 1, requested type "space"
  3835                           ; Number of cases is 4, Range of values is 0 to 3
  3836                           ; switch strategies available:
  3837                           ; Name         Instructions Cycles
  3838                           ; simple_byte           13     7 (average)
  3839                           ;	Chosen strategy is simple_byte
  3840  002ED4  0A00               	xorlw	0	; case 0
  3841  002ED6  B4D8               	btfsc	status,2,c
  3842  002ED8  D7E8               	goto	i2l591
  3843  002EDA  0A01               	xorlw	1	; case 1
  3844  002EDC  B4D8               	btfsc	status,2,c
  3845  002EDE  D7EA               	goto	i2l593
  3846  002EE0  0A03               	xorlw	3	; case 2
  3847  002EE2  B4D8               	btfsc	status,2,c
  3848  002EE4  D7EC               	goto	i2l594
  3849  002EE6  0A01               	xorlw	1	; case 3
  3850  002EE8  A4D8               	btfss	status,2,c
  3851  002EEA  0012               	return	
  3852  002EEC  D7ED               	goto	i2l595
  3853  002EEE                     __end_ofi2_LCD_setCursor:
  3854                           	opt stack 0
  3855                           tosu	equ	0xFFF
  3856                           tosh	equ	0xFFE
  3857                           tosl	equ	0xFFD
  3858                           pclatu	equ	0xFFB
  3859                           pclath	equ	0xFFA
  3860                           tblptru	equ	0xFF8
  3861                           tblptrh	equ	0xFF7
  3862                           tblptrl	equ	0xFF6
  3863                           tablat	equ	0xFF5
  3864                           prodh	equ	0xFF4
  3865                           prodl	equ	0xFF3
  3866                           intcon	equ	0xFF2
  3867                           indf0	equ	0xFEF
  3868                           postinc0	equ	0xFEE
  3869                           fsr0h	equ	0xFEA
  3870                           fsr0l	equ	0xFE9
  3871                           wreg	equ	0xFE8
  3872                           postdec1	equ	0xFE5
  3873                           fsr1h	equ	0xFE2
  3874                           fsr1l	equ	0xFE1
  3875                           indf2	equ	0xFDF
  3876                           fsr2h	equ	0xFDA
  3877                           fsr2l	equ	0xFD9
  3878                           status	equ	0xFD8
  3879                           
  3880 ;; *************** function i2_LCD_command *****************
  3881 ;; Defined at:
  3882 ;;		line 213 in file "drv_lcd.c"
  3883 ;; Parameters:    Size  Location     Type
  3884 ;;  value           1    wreg     unsigned char 
  3885 ;; Auto vars:     Size  Location     Type
  3886 ;;  value           1    4[COMRAM] unsigned char 
  3887 ;; Return value:  Size  Location     Type
  3888 ;;                  1    wreg      void 
  3889 ;; Registers used:
  3890 ;;		wreg, status,2, status,0, cstack
  3891 ;; Tracked objects:
  3892 ;;		On entry : 0/0
  3893 ;;		On exit  : 0/0
  3894 ;;		Unchanged: 0/0
  3895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3897 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3899 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3900 ;;Total ram usage:        1 bytes
  3901 ;; Hardware stack levels used:    1
  3902 ;; Hardware stack levels required when called:    4
  3903 ;; This function calls:
  3904 ;;		i2_LCD_send
  3905 ;; This function is called by:
  3906 ;;		i2_LCD_setCursor
  3907 ;; This function uses a non-reentrant model
  3908 ;;
  3909                           
  3910                           	psect	text28
  3911  003256                     __ptext28:
  3912                           	opt stack 0
  3913  003256                     i2_LCD_command:
  3914                           	opt stack 14
  3915                           
  3916                           ;incstack = 0
  3917                           ;i2LCD_command@value stored from wreg
  3918  003256  6E05               	movwf	i2LCD_command@value,c
  3919                           
  3920                           ;drv_lcd.c: 215: LCD_send(value, 0);
  3921  003258  0E00               	movlw	0
  3922  00325A  6E03               	movwf	i2LCD_send@mode,c
  3923  00325C  5005               	movf	i2LCD_command@value,w,c
  3924  00325E  ECD9  F018         	call	i2_LCD_send
  3925  003262  0012               	return		;funcret
  3926  003264                     __end_ofi2_LCD_command:
  3927                           	opt stack 0
  3928                           tosu	equ	0xFFF
  3929                           tosh	equ	0xFFE
  3930                           tosl	equ	0xFFD
  3931                           pclatu	equ	0xFFB
  3932                           pclath	equ	0xFFA
  3933                           tblptru	equ	0xFF8
  3934                           tblptrh	equ	0xFF7
  3935                           tblptrl	equ	0xFF6
  3936                           tablat	equ	0xFF5
  3937                           prodh	equ	0xFF4
  3938                           prodl	equ	0xFF3
  3939                           intcon	equ	0xFF2
  3940                           indf0	equ	0xFEF
  3941                           postinc0	equ	0xFEE
  3942                           fsr0h	equ	0xFEA
  3943                           fsr0l	equ	0xFE9
  3944                           wreg	equ	0xFE8
  3945                           postdec1	equ	0xFE5
  3946                           fsr1h	equ	0xFE2
  3947                           fsr1l	equ	0xFE1
  3948                           indf2	equ	0xFDF
  3949                           fsr2h	equ	0xFDA
  3950                           fsr2l	equ	0xFD9
  3951                           status	equ	0xFD8
  3952                           
  3953 ;; *************** function i2_LCD_print *****************
  3954 ;; Defined at:
  3955 ;;		line 101 in file "drv_lcd.c"
  3956 ;; Parameters:    Size  Location     Type
  3957 ;;  s               2    5[COMRAM] PTR const unsigned char 
  3958 ;;		 -> STR_3(6), vectorString(32), STR_1(13), 
  3959 ;; Auto vars:     Size  Location     Type
  3960 ;;  LCD_print       1    7[COMRAM] unsigned char 
  3961 ;; Return value:  Size  Location     Type
  3962 ;;                  1    wreg      unsigned char 
  3963 ;; Registers used:
  3964 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3965 ;; Tracked objects:
  3966 ;;		On entry : 0/0
  3967 ;;		On exit  : 0/0
  3968 ;;		Unchanged: 0/0
  3969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3970 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3971 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3973 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3974 ;;Total ram usage:        3 bytes
  3975 ;; Hardware stack levels used:    1
  3976 ;; Hardware stack levels required when called:    5
  3977 ;; This function calls:
  3978 ;;		i2_LCD_write
  3979 ;; This function is called by:
  3980 ;;		_timerInt
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           	psect	text29
  3985  002CB4                     __ptext29:
  3986                           	opt stack 0
  3987  002CB4                     i2_LCD_print:
  3988                           	opt stack 14
  3989                           
  3990                           ;drv_lcd.c: 103: char cs = 0;
  3991                           
  3992                           ;incstack = 0
  3993  002CB4  0E00               	movlw	0
  3994  002CB6  6E08               	movwf	i2LCD_print@cs,c
  3995                           
  3996                           ;drv_lcd.c: 104: while (*s)
  3997  002CB8  D016               	goto	i2l599
  3998  002CBA                     
  3999                           ;drv_lcd.c: 105: {
  4000                           ;drv_lcd.c: 106: LCD_write(*s++);
  4001  002CBA  C006  FFF6         	movff	i2LCD_print@s,tblptrl
  4002  002CBE  C007  FFF7         	movff	i2LCD_print@s+1,tblptrh
  4003  002CC2  0E00               	movlw	low (__smallconst shr (0+16))
  4004  002CC4  6EF8               	movwf	tblptru,c
  4005  002CC6  0E0E               	movlw	(high __ramtop+-1)
  4006  002CC8  64F7               	cpfsgt	tblptrh,c
  4007  002CCA  D003               	bra	i2u344_47
  4008  002CCC  0008               	tblrd		*
  4009  002CCE  50F5               	movf	tablat,w,c
  4010  002CD0  D005               	bra	i2u344_40
  4011  002CD2                     i2u344_47:
  4012  002CD2  CFF6 FFE9          	movff	tblptrl,fsr0l
  4013  002CD6  CFF7 FFEA          	movff	tblptrh,fsr0h
  4014  002CDA  50EF               	movf	indf0,w,c
  4015  002CDC                     i2u344_40:
  4016  002CDC  EC32  F019         	call	i2_LCD_write
  4017  002CE0  4A06               	infsnz	i2LCD_print@s,f,c
  4018  002CE2  2A07               	incf	i2LCD_print@s+1,f,c
  4019                           
  4020                           ;drv_lcd.c: 107: cs++;
  4021  002CE4  2A08               	incf	i2LCD_print@cs,f,c
  4022  002CE6                     i2l599:
  4023  002CE6  C006  FFF6         	movff	i2LCD_print@s,tblptrl
  4024  002CEA  C007  FFF7         	movff	i2LCD_print@s+1,tblptrh
  4025  002CEE  0E00               	movlw	low (__smallconst shr (0+16))
  4026  002CF0  6EF8               	movwf	tblptru,c
  4027  002CF2  0E0E               	movlw	(high __ramtop+-1)
  4028  002CF4  64F7               	cpfsgt	tblptrh,c
  4029  002CF6  D003               	bra	i2u345_47
  4030  002CF8  0008               	tblrd		*
  4031  002CFA  50F5               	movf	tablat,w,c
  4032  002CFC  D005               	bra	i2u345_40
  4033  002CFE                     i2u345_47:
  4034  002CFE  CFF6 FFE9          	movff	tblptrl,fsr0l
  4035  002D02  CFF7 FFEA          	movff	tblptrh,fsr0h
  4036  002D06  50EF               	movf	indf0,w,c
  4037  002D08                     i2u345_40:
  4038  002D08  0900               	iorlw	0
  4039  002D0A  B4D8               	btfsc	status,2,c
  4040  002D0C  0012               	return	
  4041  002D0E  D7D5               	goto	i2l600
  4042  002D10                     __end_ofi2_LCD_print:
  4043                           	opt stack 0
  4044                           tosu	equ	0xFFF
  4045                           tosh	equ	0xFFE
  4046                           tosl	equ	0xFFD
  4047                           pclatu	equ	0xFFB
  4048                           pclath	equ	0xFFA
  4049                           tblptru	equ	0xFF8
  4050                           tblptrh	equ	0xFF7
  4051                           tblptrl	equ	0xFF6
  4052                           tablat	equ	0xFF5
  4053                           prodh	equ	0xFF4
  4054                           prodl	equ	0xFF3
  4055                           intcon	equ	0xFF2
  4056                           indf0	equ	0xFEF
  4057                           postinc0	equ	0xFEE
  4058                           fsr0h	equ	0xFEA
  4059                           fsr0l	equ	0xFE9
  4060                           wreg	equ	0xFE8
  4061                           postdec1	equ	0xFE5
  4062                           fsr1h	equ	0xFE2
  4063                           fsr1l	equ	0xFE1
  4064                           indf2	equ	0xFDF
  4065                           fsr2h	equ	0xFDA
  4066                           fsr2l	equ	0xFD9
  4067                           status	equ	0xFD8
  4068                           
  4069 ;; *************** function i2_LCD_write *****************
  4070 ;; Defined at:
  4071 ;;		line 218 in file "drv_lcd.c"
  4072 ;; Parameters:    Size  Location     Type
  4073 ;;  value           1    wreg     unsigned char 
  4074 ;; Auto vars:     Size  Location     Type
  4075 ;;  value           1    4[COMRAM] unsigned char 
  4076 ;; Return value:  Size  Location     Type
  4077 ;;                  1    wreg      void 
  4078 ;; Registers used:
  4079 ;;		wreg, status,2, status,0, cstack
  4080 ;; Tracked objects:
  4081 ;;		On entry : 0/0
  4082 ;;		On exit  : 0/0
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4086 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4088 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4089 ;;Total ram usage:        1 bytes
  4090 ;; Hardware stack levels used:    1
  4091 ;; Hardware stack levels required when called:    4
  4092 ;; This function calls:
  4093 ;;		i2_LCD_send
  4094 ;; This function is called by:
  4095 ;;		_timerInt
  4096 ;;		i2_LCD_print
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100                           	psect	text30
  4101  003264                     __ptext30:
  4102                           	opt stack 0
  4103  003264                     i2_LCD_write:
  4104                           	opt stack 15
  4105                           
  4106                           ;incstack = 0
  4107                           ;i2LCD_write@value stored from wreg
  4108  003264  6E05               	movwf	i2LCD_write@value,c
  4109                           
  4110                           ;drv_lcd.c: 220: LCD_send(value, 1);
  4111  003266  0E01               	movlw	1
  4112  003268  6E03               	movwf	i2LCD_send@mode,c
  4113  00326A  5005               	movf	i2LCD_write@value,w,c
  4114  00326C  ECD9  F018         	call	i2_LCD_send
  4115  003270  0012               	return		;funcret
  4116  003272                     __end_ofi2_LCD_write:
  4117                           	opt stack 0
  4118                           tosu	equ	0xFFF
  4119                           tosh	equ	0xFFE
  4120                           tosl	equ	0xFFD
  4121                           pclatu	equ	0xFFB
  4122                           pclath	equ	0xFFA
  4123                           tblptru	equ	0xFF8
  4124                           tblptrh	equ	0xFF7
  4125                           tblptrl	equ	0xFF6
  4126                           tablat	equ	0xFF5
  4127                           prodh	equ	0xFF4
  4128                           prodl	equ	0xFF3
  4129                           intcon	equ	0xFF2
  4130                           indf0	equ	0xFEF
  4131                           postinc0	equ	0xFEE
  4132                           fsr0h	equ	0xFEA
  4133                           fsr0l	equ	0xFE9
  4134                           wreg	equ	0xFE8
  4135                           postdec1	equ	0xFE5
  4136                           fsr1h	equ	0xFE2
  4137                           fsr1l	equ	0xFE1
  4138                           indf2	equ	0xFDF
  4139                           fsr2h	equ	0xFDA
  4140                           fsr2l	equ	0xFD9
  4141                           status	equ	0xFD8
  4142                           
  4143 ;; *************** function i2_LCD_send *****************
  4144 ;; Defined at:
  4145 ;;		line 229 in file "drv_lcd.c"
  4146 ;; Parameters:    Size  Location     Type
  4147 ;;  value           1    wreg     unsigned char 
  4148 ;;  mode            1    2[COMRAM] unsigned char 
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;  value           1    3[COMRAM] unsigned char 
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  1    wreg      void 
  4153 ;; Registers used:
  4154 ;;		wreg, status,2, status,0, cstack
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4160 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4161 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4163 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4164 ;;Total ram usage:        2 bytes
  4165 ;; Hardware stack levels used:    1
  4166 ;; Hardware stack levels required when called:    3
  4167 ;; This function calls:
  4168 ;;		i2_LCD_RS_SET
  4169 ;;		i2_LCD_write4bits
  4170 ;; This function is called by:
  4171 ;;		i2_LCD_command
  4172 ;;		i2_LCD_write
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text31
  4177  0031B2                     __ptext31:
  4178                           	opt stack 0
  4179  0031B2                     i2_LCD_send:
  4180                           	opt stack 15
  4181                           
  4182                           ;incstack = 0
  4183                           ;i2LCD_send@value stored from wreg
  4184  0031B2  6E04               	movwf	i2LCD_send@value,c
  4185                           
  4186                           ;drv_lcd.c: 231: LCD_RS_SET(mode);
  4187  0031B4  5003               	movf	i2LCD_send@mode,w,c
  4188  0031B6  EC40  F019         	call	i2_LCD_RS_SET
  4189                           
  4190                           ;drv_lcd.c: 232: LCD_write4bits(value >> 4);
  4191  0031BA  3804               	swapf	i2LCD_send@value,w,c
  4192  0031BC  0B0F               	andlw	15
  4193  0031BE  ECEC  F017         	call	i2_LCD_write4bits
  4194                           
  4195                           ;drv_lcd.c: 233: LCD_write4bits(value);
  4196  0031C2  5004               	movf	i2LCD_send@value,w,c
  4197  0031C4  ECEC  F017         	call	i2_LCD_write4bits
  4198  0031C8  0012               	return		;funcret
  4199  0031CA                     __end_ofi2_LCD_send:
  4200                           	opt stack 0
  4201                           tosu	equ	0xFFF
  4202                           tosh	equ	0xFFE
  4203                           tosl	equ	0xFFD
  4204                           pclatu	equ	0xFFB
  4205                           pclath	equ	0xFFA
  4206                           tblptru	equ	0xFF8
  4207                           tblptrh	equ	0xFF7
  4208                           tblptrl	equ	0xFF6
  4209                           tablat	equ	0xFF5
  4210                           prodh	equ	0xFF4
  4211                           prodl	equ	0xFF3
  4212                           intcon	equ	0xFF2
  4213                           indf0	equ	0xFEF
  4214                           postinc0	equ	0xFEE
  4215                           fsr0h	equ	0xFEA
  4216                           fsr0l	equ	0xFE9
  4217                           wreg	equ	0xFE8
  4218                           postdec1	equ	0xFE5
  4219                           fsr1h	equ	0xFE2
  4220                           fsr1l	equ	0xFE1
  4221                           indf2	equ	0xFDF
  4222                           fsr2h	equ	0xFDA
  4223                           fsr2l	equ	0xFD9
  4224                           status	equ	0xFD8
  4225                           
  4226 ;; *************** function i2_LCD_write4bits *****************
  4227 ;; Defined at:
  4228 ;;		line 256 in file "drv_lcd.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;  a               1    wreg     unsigned char 
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;  a               1    1[COMRAM] unsigned char 
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  1    wreg      void 
  4235 ;; Registers used:
  4236 ;;		wreg, cstack
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4243 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4245 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4246 ;;Total ram usage:        1 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; Hardware stack levels required when called:    2
  4249 ;; This function calls:
  4250 ;;		i2_LCD_pulseEnable
  4251 ;; This function is called by:
  4252 ;;		i2_LCD_send
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           	psect	text32
  4257  002FD8                     __ptext32:
  4258                           	opt stack 0
  4259  002FD8                     i2_LCD_write4bits:
  4260                           	opt stack 15
  4261                           
  4262                           ;incstack = 0
  4263                           ;i2LCD_write4bits@a stored from wreg
  4264  002FD8  6E02               	movwf	i2LCD_write4bits@a,c
  4265                           
  4266                           ;drv_lcd.c: 258: if (a & 1)
  4267  002FDA  A002               	btfss	i2LCD_write4bits@a,0,c
  4268  002FDC  D002               	goto	i2l664
  4269                           
  4270                           ;drv_lcd.c: 259: {
  4271                           ;drv_lcd.c: 260: (PORTDbits.RD3) = 1;
  4272  002FDE  8690               	bsf	3984,3,c	;volatile
  4273                           
  4274                           ;drv_lcd.c: 261: } else
  4275  002FE0  D001               	goto	i2l665
  4276  002FE2                     i2l664:
  4277                           
  4278                           ;drv_lcd.c: 262: {
  4279                           ;drv_lcd.c: 263: (PORTDbits.RD3) = 0;
  4280  002FE2  9690               	bcf	3984,3,c	;volatile
  4281  002FE4                     i2l665:
  4282                           
  4283                           ;drv_lcd.c: 264: }
  4284                           ;drv_lcd.c: 266: if (a & 2)
  4285  002FE4  A202               	btfss	i2LCD_write4bits@a,1,c
  4286  002FE6  D002               	goto	i2l666
  4287                           
  4288                           ;drv_lcd.c: 267: {
  4289                           ;drv_lcd.c: 268: (PORTDbits.RD2) = 1;
  4290  002FE8  8490               	bsf	3984,2,c	;volatile
  4291                           
  4292                           ;drv_lcd.c: 269: } else
  4293  002FEA  D001               	goto	i2l667
  4294  002FEC                     i2l666:
  4295                           
  4296                           ;drv_lcd.c: 270: {
  4297                           ;drv_lcd.c: 271: (PORTDbits.RD2) = 0;
  4298  002FEC  9490               	bcf	3984,2,c	;volatile
  4299  002FEE                     i2l667:
  4300                           
  4301                           ;drv_lcd.c: 272: }
  4302                           ;drv_lcd.c: 274: if (a & 4)
  4303  002FEE  A402               	btfss	i2LCD_write4bits@a,2,c
  4304  002FF0  D002               	goto	i2l668
  4305                           
  4306                           ;drv_lcd.c: 275: {
  4307                           ;drv_lcd.c: 276: (PORTDbits.RD1) = 1;
  4308  002FF2  8290               	bsf	3984,1,c	;volatile
  4309                           
  4310                           ;drv_lcd.c: 277: } else
  4311  002FF4  D001               	goto	i2l669
  4312  002FF6                     i2l668:
  4313                           
  4314                           ;drv_lcd.c: 278: {
  4315                           ;drv_lcd.c: 279: (PORTDbits.RD1) = 0;
  4316  002FF6  9290               	bcf	3984,1,c	;volatile
  4317  002FF8                     i2l669:
  4318                           
  4319                           ;drv_lcd.c: 280: }
  4320                           ;drv_lcd.c: 282: if (a & 8)
  4321  002FF8  A602               	btfss	i2LCD_write4bits@a,3,c
  4322  002FFA  D002               	goto	i2l670
  4323                           
  4324                           ;drv_lcd.c: 283: {
  4325                           ;drv_lcd.c: 284: (PORTDbits.RD0) = 1;
  4326  002FFC  8090               	bsf	3984,0,c	;volatile
  4327                           
  4328                           ;drv_lcd.c: 285: } else
  4329  002FFE  D001               	goto	i2l671
  4330  003000                     i2l670:
  4331                           
  4332                           ;drv_lcd.c: 286: {
  4333                           ;drv_lcd.c: 287: (PORTDbits.RD0) = 0;
  4334  003000  9090               	bcf	3984,0,c	;volatile
  4335  003002                     i2l671:
  4336                           
  4337                           ;drv_lcd.c: 288: }
  4338                           ;drv_lcd.c: 290: LCD_pulseEnable();
  4339  003002  ECB2  F018         	call	i2_LCD_pulseEnable	;wreg free
  4340  003006  0012               	return		;funcret
  4341  003008                     __end_ofi2_LCD_write4bits:
  4342                           	opt stack 0
  4343                           tosu	equ	0xFFF
  4344                           tosh	equ	0xFFE
  4345                           tosl	equ	0xFFD
  4346                           pclatu	equ	0xFFB
  4347                           pclath	equ	0xFFA
  4348                           tblptru	equ	0xFF8
  4349                           tblptrh	equ	0xFF7
  4350                           tblptrl	equ	0xFF6
  4351                           tablat	equ	0xFF5
  4352                           prodh	equ	0xFF4
  4353                           prodl	equ	0xFF3
  4354                           intcon	equ	0xFF2
  4355                           indf0	equ	0xFEF
  4356                           postinc0	equ	0xFEE
  4357                           fsr0h	equ	0xFEA
  4358                           fsr0l	equ	0xFE9
  4359                           wreg	equ	0xFE8
  4360                           postdec1	equ	0xFE5
  4361                           fsr1h	equ	0xFE2
  4362                           fsr1l	equ	0xFE1
  4363                           indf2	equ	0xFDF
  4364                           fsr2h	equ	0xFDA
  4365                           fsr2l	equ	0xFD9
  4366                           status	equ	0xFD8
  4367                           
  4368 ;; *************** function i2_LCD_pulseEnable *****************
  4369 ;; Defined at:
  4370 ;;		line 246 in file "drv_lcd.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;		None
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;		None
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  1    wreg      void 
  4377 ;; Registers used:
  4378 ;;		wreg, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4388 ;;Total ram usage:        0 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    1
  4391 ;; This function calls:
  4392 ;;		i2_LCD_EN_SET
  4393 ;; This function is called by:
  4394 ;;		i2_LCD_write4bits
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           	psect	text33
  4399  003164                     __ptext33:
  4400                           	opt stack 0
  4401  003164                     i2_LCD_pulseEnable:
  4402                           	opt stack 15
  4403                           
  4404                           ;drv_lcd.c: 248: LCD_EN_SET(0);
  4405                           
  4406                           ;incstack = 0
  4407  003164  0E00               	movlw	0
  4408  003166  EC39  F019         	call	i2_LCD_EN_SET
  4409                           
  4410                           ;drv_lcd.c: 249: _delay((unsigned long)((1)*(1000000/4000000.0)));
  4411                           ;drv_lcd.c: 250: LCD_EN_SET(1);
  4412  00316A  0E01               	movlw	1
  4413  00316C  EC39  F019         	call	i2_LCD_EN_SET
  4414                           
  4415                           ;drv_lcd.c: 251: _delay((unsigned long)((1)*(1000000/4000000.0)));
  4416                           ;drv_lcd.c: 252: LCD_EN_SET(0);
  4417  003170  0E00               	movlw	0
  4418  003172  EC39  F019         	call	i2_LCD_EN_SET
  4419                           
  4420                           ;drv_lcd.c: 253: _delay((unsigned long)((100)*(1000000/4000000.0)));
  4421  003176  0E08               	movlw	8
  4422  003178                     i2u406_47:
  4423  003178  2EE8               	decfsz	wreg,f,c
  4424  00317A  D7FE               	bra	i2u406_47
  4425  00317C  F000               	nop	
  4426  00317E  0012               	return		;funcret
  4427  003180                     __end_ofi2_LCD_pulseEnable:
  4428                           	opt stack 0
  4429                           tosu	equ	0xFFF
  4430                           tosh	equ	0xFFE
  4431                           tosl	equ	0xFFD
  4432                           pclatu	equ	0xFFB
  4433                           pclath	equ	0xFFA
  4434                           tblptru	equ	0xFF8
  4435                           tblptrh	equ	0xFF7
  4436                           tblptrl	equ	0xFF6
  4437                           tablat	equ	0xFF5
  4438                           prodh	equ	0xFF4
  4439                           prodl	equ	0xFF3
  4440                           intcon	equ	0xFF2
  4441                           indf0	equ	0xFEF
  4442                           postinc0	equ	0xFEE
  4443                           fsr0h	equ	0xFEA
  4444                           fsr0l	equ	0xFE9
  4445                           wreg	equ	0xFE8
  4446                           postdec1	equ	0xFE5
  4447                           fsr1h	equ	0xFE2
  4448                           fsr1l	equ	0xFE1
  4449                           indf2	equ	0xFDF
  4450                           fsr2h	equ	0xFDA
  4451                           fsr2l	equ	0xFD9
  4452                           status	equ	0xFD8
  4453                           
  4454 ;; *************** function i2_LCD_EN_SET *****************
  4455 ;; Defined at:
  4456 ;;		line 241 in file "drv_lcd.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;  value           1    wreg     unsigned char 
  4459 ;; Auto vars:     Size  Location     Type
  4460 ;;  value           1    0[COMRAM] unsigned char 
  4461 ;; Return value:  Size  Location     Type
  4462 ;;                  1    wreg      void 
  4463 ;; Registers used:
  4464 ;;		wreg
  4465 ;; Tracked objects:
  4466 ;;		On entry : 0/0
  4467 ;;		On exit  : 0/0
  4468 ;;		Unchanged: 0/0
  4469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4471 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4473 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4474 ;;Total ram usage:        1 bytes
  4475 ;; Hardware stack levels used:    1
  4476 ;; This function calls:
  4477 ;;		Nothing
  4478 ;; This function is called by:
  4479 ;;		i2_LCD_pulseEnable
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           	psect	text34
  4484  003272                     __ptext34:
  4485                           	opt stack 0
  4486  003272                     i2_LCD_EN_SET:
  4487                           	opt stack 15
  4488                           
  4489                           ;incstack = 0
  4490                           ;i2LCD_EN_SET@value stored from wreg
  4491  003272  6E01               	movwf	i2LCD_EN_SET@value,c
  4492                           
  4493                           ;drv_lcd.c: 243: (PORTEbits.RE1) = value;
  4494  003274  B001               	btfsc	i2LCD_EN_SET@value,0,c
  4495  003276  D002               	bra	i2u195_45
  4496  003278  9291               	bcf	3985,1,c	;volatile
  4497  00327A  D001               	bra	i2u195_46
  4498  00327C                     i2u195_45:
  4499  00327C  8291               	bsf	3985,1,c	;volatile
  4500  00327E                     i2u195_46:
  4501  00327E  0012               	return		;funcret
  4502  003280                     __end_ofi2_LCD_EN_SET:
  4503                           	opt stack 0
  4504                           tosu	equ	0xFFF
  4505                           tosh	equ	0xFFE
  4506                           tosl	equ	0xFFD
  4507                           pclatu	equ	0xFFB
  4508                           pclath	equ	0xFFA
  4509                           tblptru	equ	0xFF8
  4510                           tblptrh	equ	0xFF7
  4511                           tblptrl	equ	0xFF6
  4512                           tablat	equ	0xFF5
  4513                           prodh	equ	0xFF4
  4514                           prodl	equ	0xFF3
  4515                           intcon	equ	0xFF2
  4516                           indf0	equ	0xFEF
  4517                           postinc0	equ	0xFEE
  4518                           fsr0h	equ	0xFEA
  4519                           fsr0l	equ	0xFE9
  4520                           wreg	equ	0xFE8
  4521                           postdec1	equ	0xFE5
  4522                           fsr1h	equ	0xFE2
  4523                           fsr1l	equ	0xFE1
  4524                           indf2	equ	0xFDF
  4525                           fsr2h	equ	0xFDA
  4526                           fsr2l	equ	0xFD9
  4527                           status	equ	0xFD8
  4528                           
  4529 ;; *************** function i2_LCD_RS_SET *****************
  4530 ;; Defined at:
  4531 ;;		line 236 in file "drv_lcd.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;  value           1    wreg     unsigned char 
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;  value           1    0[COMRAM] unsigned char 
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      void 
  4538 ;; Registers used:
  4539 ;;		wreg
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4546 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4548 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4549 ;;Total ram usage:        1 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; This function calls:
  4552 ;;		Nothing
  4553 ;; This function is called by:
  4554 ;;		i2_LCD_send
  4555 ;; This function uses a non-reentrant model
  4556 ;;
  4557                           
  4558                           	psect	text35
  4559  003280                     __ptext35:
  4560                           	opt stack 0
  4561  003280                     i2_LCD_RS_SET:
  4562                           	opt stack 17
  4563                           
  4564                           ;incstack = 0
  4565                           ;i2LCD_RS_SET@value stored from wreg
  4566  003280  6E01               	movwf	i2LCD_RS_SET@value,c
  4567                           
  4568                           ;drv_lcd.c: 238: (PORTEbits.RE0) = value;
  4569  003282  B001               	btfsc	i2LCD_RS_SET@value,0,c
  4570  003284  D002               	bra	i2u205_45
  4571  003286  9091               	bcf	3985,0,c	;volatile
  4572  003288  D001               	bra	i2u205_46
  4573  00328A                     i2u205_45:
  4574  00328A  8091               	bsf	3985,0,c	;volatile
  4575  00328C                     i2u205_46:
  4576  00328C  0012               	return		;funcret
  4577  00328E                     __end_ofi2_LCD_RS_SET:
  4578                           	opt stack 0
  4579                           tosu	equ	0xFFF
  4580                           tosh	equ	0xFFE
  4581                           tosl	equ	0xFFD
  4582                           pclatu	equ	0xFFB
  4583                           pclath	equ	0xFFA
  4584                           tblptru	equ	0xFF8
  4585                           tblptrh	equ	0xFF7
  4586                           tblptrl	equ	0xFF6
  4587                           tablat	equ	0xFF5
  4588                           prodh	equ	0xFF4
  4589                           prodl	equ	0xFF3
  4590                           intcon	equ	0xFF2
  4591                           indf0	equ	0xFEF
  4592                           postinc0	equ	0xFEE
  4593                           fsr0h	equ	0xFEA
  4594                           fsr0l	equ	0xFE9
  4595                           wreg	equ	0xFE8
  4596                           postdec1	equ	0xFE5
  4597                           fsr1h	equ	0xFE2
  4598                           fsr1l	equ	0xFE1
  4599                           indf2	equ	0xFDF
  4600                           fsr2h	equ	0xFDA
  4601                           fsr2l	equ	0xFD9
  4602                           status	equ	0xFD8
  4603                           
  4604 ;; *************** function _sprintf *****************
  4605 ;; Defined at:
  4606 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4607 ;; Parameters:    Size  Location     Type
  4608 ;;  sp              2   63[COMRAM] PTR unsigned char 
  4609 ;;		 -> vectorString(32), 
  4610 ;;  f               2   65[COMRAM] PTR const unsigned char 
  4611 ;;		 -> STR_2(5), 
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;  tmpval          4   13[BANK0 ] struct .
  4614 ;;  val             4    7[BANK0 ] unsigned long 
  4615 ;;  fval            3   19[BANK0 ] unsigned long 
  4616 ;;  cp              3    0        PTR const unsigned char 
  4617 ;;  prec            2   17[BANK0 ] int 
  4618 ;;  exp             2   11[BANK0 ] int 
  4619 ;;  flag            2    5[BANK0 ] unsigned short 
  4620 ;;  ap              2    3[BANK0 ] PTR void [1]
  4621 ;;		 -> ?_sprintf(2), 
  4622 ;;  len             2    0        unsigned int 
  4623 ;;  width           2    0        int 
  4624 ;;  c               1   22[BANK0 ] char 
  4625 ;;  d               1    0        unsigned char 
  4626 ;; Return value:  Size  Location     Type
  4627 ;;                  2   63[COMRAM] int 
  4628 ;; Registers used:
  4629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4630 ;; Tracked objects:
  4631 ;;		On entry : 0/0
  4632 ;;		On exit  : 0/0
  4633 ;;		Unchanged: 0/0
  4634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4635 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4636 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4637 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4638 ;;      Totals:        13      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4639 ;;Total ram usage:       36 bytes
  4640 ;; Hardware stack levels used:    1
  4641 ;; Hardware stack levels required when called:    3
  4642 ;; This function calls:
  4643 ;;		___awdiv
  4644 ;;		___ftadd
  4645 ;;		___ftge
  4646 ;;		___ftmul
  4647 ;;		___ftneg
  4648 ;;		___ftsub
  4649 ;;		___fttol
  4650 ;;		___lldiv
  4651 ;;		___llmod
  4652 ;;		___lltoft
  4653 ;;		___wmul
  4654 ;;		__div_to_l_
  4655 ;;		__tdiv_to_l_
  4656 ;;		_fround
  4657 ;;		_isdigit
  4658 ;;		_scale
  4659 ;; This function is called by:
  4660 ;;		_timerInt
  4661 ;; This function uses a non-reentrant model
  4662 ;;
  4663                           
  4664                           	psect	text36
  4665  000F90                     __ptext36:
  4666                           	opt stack 0
  4667  000F90                     _sprintf:
  4668                           	opt stack 16
  4669                           
  4670                           ;doprnt.c: 494: va_list ap;
  4671                           ;doprnt.c: 499: signed char c;
  4672                           ;doprnt.c: 501: int width;
  4673                           ;doprnt.c: 504: int prec;
  4674                           ;doprnt.c: 508: unsigned short flag;
  4675                           ;doprnt.c: 515: char d;
  4676                           ;doprnt.c: 516: double fval;
  4677                           ;doprnt.c: 517: int exp;
  4678                           ;doprnt.c: 523: union {
  4679                           ;doprnt.c: 524: unsigned long vd;
  4680                           ;doprnt.c: 525: double integ;
  4681                           ;doprnt.c: 526: } tmpval;
  4682                           ;doprnt.c: 528: unsigned long val;
  4683                           ;doprnt.c: 529: unsigned len;
  4684                           ;doprnt.c: 530: const char * cp;
  4685                           ;doprnt.c: 533: *ap = __va_start();
  4686                           
  4687                           ;incstack = 0
  4688  000F90  0E44               	movlw	low (?_sprintf+4)
  4689  000F92  0100               	movlb	0	; () banked
  4690  000F94  6F9E               	movwf	sprintf@ap& (0+255),b
  4691  000F96  0E00               	movlw	high (?_sprintf+4)
  4692  000F98  6F9F               	movwf	(sprintf@ap+1)& (0+255),b
  4693                           
  4694                           ;doprnt.c: 536: while(c = *f++) {
  4695  000F9A  D37F               	goto	i2l763
  4696  000F9C                     
  4697                           ; BSR set to: 0
  4698                           ;doprnt.c: 538: if(c != '%')
  4699                           
  4700                           ; BSR set to: 0
  4701  000F9C  0E25               	movlw	37
  4702  000F9E  19B1               	xorwf	sprintf@c& (0+255),w,b
  4703  000FA0  B4D8               	btfsc	status,2,c
  4704  000FA2  D007               	goto	i2l709
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;doprnt.c: 540: {
  4708                           ;doprnt.c: 541: ((*sp++ = (c)));
  4709  000FA4  C040  FFD9         	movff	sprintf@sp,fsr2l
  4710  000FA8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4711  000FAC  C0B1  FFDF         	movff	sprintf@c,indf2
  4712  000FB0  D372               	goto	i2l3836
  4713  000FB2                     i2l709:
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;doprnt.c: 543: }
  4717                           ;doprnt.c: 548: flag = 0;
  4718                           
  4719                           ; BSR set to: 0
  4720  000FB2  0E00               	movlw	0
  4721  000FB4  6FA1               	movwf	(sprintf@flag+1)& (0+255),b
  4722  000FB6  0E00               	movlw	0
  4723  000FB8  6FA0               	movwf	sprintf@flag& (0+255),b
  4724                           
  4725                           ; BSR set to: 0
  4726                           ;doprnt.c: 611: if(*f == '.') {
  4727  000FBA  C042  FFF6         	movff	sprintf@f,tblptrl
  4728  000FBE  C043  FFF7         	movff	sprintf@f+1,tblptrh
  4729  000FC2                     	if	0	;tblptru may be non-zero
  4730  000FC2                     	endif
  4731  000FC2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4732  000FC2  0E00               	movlw	low (__mediumconst shr (0+16))
  4733  000FC4  6EF8               	movwf	tblptru,c
  4734  000FC6                     	endif
  4735  000FC6  0008               	tblrd		*
  4736  000FC8  50F5               	movf	tablat,w,c
  4737  000FCA  0A2E               	xorlw	46
  4738  000FCC  A4D8               	btfss	status,2,c
  4739  000FCE  D033               	goto	i2l710
  4740                           
  4741                           ; BSR set to: 0
  4742                           ;doprnt.c: 612: flag |= 0x4000;
  4743  000FD0  8DA1               	bsf	(sprintf@flag+1)& (0+255),6,b
  4744                           
  4745                           ;doprnt.c: 613: f++;
  4746  000FD2  4A42               	infsnz	sprintf@f,f,c
  4747  000FD4  2A43               	incf	sprintf@f+1,f,c
  4748                           
  4749                           ; BSR set to: 0
  4750                           ;doprnt.c: 620: {
  4751                           ;doprnt.c: 621: prec = 0;
  4752  000FD6  0E00               	movlw	0
  4753  000FD8  6FAD               	movwf	(sprintf@prec+1)& (0+255),b
  4754  000FDA  0E00               	movlw	0
  4755  000FDC  6FAC               	movwf	sprintf@prec& (0+255),b
  4756                           
  4757                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4758  000FDE  D01E               	goto	i2l711
  4759  000FE0                     
  4760                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4761                           
  4762                           ; BSR set to: 0
  4763  000FE0  C0AC  F00F         	movff	sprintf@prec,___wmul@multiplier
  4764  000FE4  C0AD  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  4765  000FE8  0E00               	movlw	0
  4766  000FEA  6E12               	movwf	___wmul@multiplicand+1,c
  4767  000FEC  0E0A               	movlw	10
  4768  000FEE  6E11               	movwf	___wmul@multiplicand,c
  4769  000FF0  EC19  F018         	call	___wmul	;wreg free
  4770  000FF4  C042  FFF6         	movff	sprintf@f,tblptrl
  4771  000FF8  C043  FFF7         	movff	sprintf@f+1,tblptrh
  4772  000FFC                     	if	0	;tblptru may be non-zero
  4773  000FFC                     	endif
  4774  000FFC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4775  000FFC  0E00               	movlw	low (__mediumconst shr (0+16))
  4776  000FFE  6EF8               	movwf	tblptru,c
  4777  001000                     	endif
  4778  001000  0008               	tblrd		*
  4779  001002  50F5               	movf	tablat,w,c
  4780  001004  260F               	addwf	?___wmul,f,c
  4781  001006  0E00               	movlw	0
  4782  001008  2210               	addwfc	?___wmul+1,f,c
  4783  00100A  0ED0               	movlw	208
  4784  00100C  240F               	addwf	?___wmul,w,c
  4785  00100E  0100               	movlb	0	; () banked
  4786  001010  6FAC               	movwf	sprintf@prec& (0+255),b
  4787  001012  0EFF               	movlw	255
  4788  001014  2010               	addwfc	?___wmul+1,w,c
  4789  001016  6FAD               	movwf	(sprintf@prec+1)& (0+255),b
  4790                           
  4791                           ; BSR set to: 0
  4792  001018  4A42               	infsnz	sprintf@f,f,c
  4793  00101A  2A43               	incf	sprintf@f+1,f,c
  4794  00101C                     i2l711:
  4795                           
  4796                           ; BSR set to: 0
  4797                           
  4798                           ; BSR set to: 0
  4799  00101C  C042  FFF6         	movff	sprintf@f,tblptrl
  4800  001020  C043  FFF7         	movff	sprintf@f+1,tblptrh
  4801  001024                     	if	0	;tblptru may be non-zero
  4802  001024                     	endif
  4803  001024                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4804  001024  0E00               	movlw	low (__mediumconst shr (0+16))
  4805  001026  6EF8               	movwf	tblptru,c
  4806  001028                     	endif
  4807  001028  0008               	tblrd		*
  4808  00102A  50F5               	movf	tablat,w,c
  4809  00102C  EC95  F018         	call	_isdigit
  4810  001030  A0D8               	btfss	status,0,c
  4811  001032  D00A               	goto	i2l715
  4812  001034  D7D5               	goto	i2l712
  4813  001036                     i2l710:
  4814                           
  4815                           ;doprnt.c: 626: prec = 0;
  4816  001036  0E00               	movlw	0
  4817  001038  0100               	movlb	0	; () banked
  4818  00103A  6FAD               	movwf	(sprintf@prec+1)& (0+255),b
  4819  00103C  0E00               	movlw	0
  4820  00103E  6FAC               	movwf	sprintf@prec& (0+255),b
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;doprnt.c: 628: flag |= 0x1000;
  4824  001040  89A1               	bsf	(sprintf@flag+1)& (0+255),4,b
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;doprnt.c: 630: }
  4828                           ;doprnt.c: 635: switch(c = *f++) {
  4829  001042  D002               	goto	i2l715
  4830  001044                     
  4831                           ; BSR set to: 0
  4832                           ;doprnt.c: 663: flag |= 0x400;
  4833                           
  4834                           ; BSR set to: 0
  4835  001044  85A1               	bsf	(sprintf@flag+1)& (0+255),2,b
  4836                           
  4837                           ;doprnt.c: 664: break;
  4838  001046  D014               	goto	i2l719
  4839  001048                     i2l715:
  4840                           
  4841                           ; BSR set to: 0
  4842  001048  C042  FFF6         	movff	sprintf@f,tblptrl
  4843  00104C  C043  FFF7         	movff	sprintf@f+1,tblptrh
  4844  001050  4A42               	infsnz	sprintf@f,f,c
  4845  001052  2A43               	incf	sprintf@f+1,f,c
  4846  001054                     	if	0	;tblptru may be non-zero
  4847  001054                     	endif
  4848  001054                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4849  001054  0E00               	movlw	low (__mediumconst shr (0+16))
  4850  001056  6EF8               	movwf	tblptru,c
  4851  001058                     	endif
  4852  001058  0008               	tblrd		*
  4853  00105A  CFF5 F0B1          	movff	tablat,sprintf@c
  4854  00105E  0100               	movlb	0	; () banked
  4855  001060  51B1               	movf	sprintf@c& (0+255),w,b
  4856                           
  4857                           ; Switch size 1, requested type "space"
  4858                           ; Number of cases is 2, Range of values is 0 to 102
  4859                           ; switch strategies available:
  4860                           ; Name         Instructions Cycles
  4861                           ; simple_byte            7     4 (average)
  4862                           ;	Chosen strategy is simple_byte
  4863  001062  0A00               	xorlw	0	; case 0
  4864  001064  B4D8               	btfsc	status,2,c
  4865  001066  D327               	goto	i2u337_40
  4866  001068  0A66               	xorlw	102	; case 102
  4867  00106A  B4D8               	btfsc	status,2,c
  4868  00106C  D7EB               	goto	i2l718
  4869  00106E  D315               	goto	i2l763
  4870  001070                     i2l719:
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;doprnt.c: 825: if(flag & (0x700)) {
  4874                           
  4875                           ; BSR set to: 0
  4876  001070  0E07               	movlw	7
  4877  001072  15A1               	andwf	(sprintf@flag+1)& (0+255),w,b
  4878  001074  B4D8               	btfsc	status,2,c
  4879  001076  D2D5               	goto	i2l721
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;doprnt.c: 827: if(flag & 0x1000)
  4883  001078  A9A1               	btfss	(sprintf@flag+1)& (0+255),4,b
  4884  00107A  D004               	goto	i2l722
  4885                           
  4886                           ; BSR set to: 0
  4887                           ;doprnt.c: 829: prec = 6;
  4888  00107C  0E00               	movlw	0
  4889  00107E  6FAD               	movwf	(sprintf@prec+1)& (0+255),b
  4890  001080  0E06               	movlw	6
  4891  001082  6FAC               	movwf	sprintf@prec& (0+255),b
  4892  001084                     i2l722:
  4893                           
  4894                           ; BSR set to: 0
  4895                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4896                           
  4897                           ; BSR set to: 0
  4898  001084  C09E  FFD9         	movff	sprintf@ap,fsr2l
  4899  001088  C09F  FFDA         	movff	sprintf@ap+1,fsr2h
  4900  00108C  CFDE F0AE          	movff	postinc2,sprintf@fval
  4901  001090  CFDE F0AF          	movff	postinc2,sprintf@fval+1
  4902  001094  CFDD F0B0          	movff	postdec2,sprintf@fval+2
  4903                           
  4904                           ; BSR set to: 0
  4905  001098  0E03               	movlw	3
  4906  00109A  279E               	addwf	sprintf@ap& (0+255),f,b
  4907  00109C  0E00               	movlw	0
  4908  00109E  239F               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;doprnt.c: 831: if(fval < 0.0) {
  4912  0010A0  AFB0               	btfss	(sprintf@fval+2)& (0+255),7,b
  4913  0010A2  D011               	goto	i2l723
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;doprnt.c: 832: fval = -fval;
  4917  0010A4  C0AE  F001         	movff	sprintf@fval,___ftneg@f1
  4918  0010A8  C0AF  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  4919  0010AC  C0B0  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  4920  0010B0  EC3E  F018         	call	___ftneg	;wreg free
  4921  0010B4  C001  F0AE         	movff	?___ftneg,sprintf@fval
  4922  0010B8  C002  F0AF         	movff	?___ftneg+1,sprintf@fval+1
  4923  0010BC  C003  F0B0         	movff	?___ftneg+2,sprintf@fval+2
  4924                           
  4925                           ;doprnt.c: 833: flag |= 0x03;
  4926  0010C0  0E03               	movlw	3
  4927  0010C2  0100               	movlb	0	; () banked
  4928  0010C4  13A0               	iorwf	sprintf@flag& (0+255),f,b
  4929  0010C6                     i2l723:
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;doprnt.c: 834: }
  4933                           ;doprnt.c: 835: exp = 0;
  4934                           
  4935                           ; BSR set to: 0
  4936  0010C6  0E00               	movlw	0
  4937  0010C8  6FA7               	movwf	(sprintf@exp+1)& (0+255),b
  4938  0010CA  0E00               	movlw	0
  4939  0010CC  6FA6               	movwf	sprintf@exp& (0+255),b
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;doprnt.c: 836: if( fval!=0) {
  4943  0010CE  51AE               	movf	sprintf@fval& (0+255),w,b
  4944  0010D0  11AF               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4945  0010D2  11B0               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4946  0010D4  B4D8               	btfsc	status,2,c
  4947  0010D6  D086               	goto	i2l728
  4948                           
  4949                           ; BSR set to: 0
  4950                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4951  0010D8  0E82               	movlw	130
  4952  0010DA  6E47               	movwf	??_sprintf& (0+255),c
  4953  0010DC  0EFF               	movlw	255
  4954  0010DE  6E48               	movwf	(??_sprintf+1)& (0+255),c
  4955  0010E0  C0AE  F049         	movff	sprintf@fval,??_sprintf+2
  4956  0010E4  C0AF  F04A         	movff	sprintf@fval+1,??_sprintf+3
  4957  0010E8  C0B0  F04B         	movff	sprintf@fval+2,??_sprintf+4
  4958  0010EC  C0B1  F04C         	movff	sprintf@fval+3,??_sprintf+5
  4959  0010F0  0E10               	movlw	16
  4960  0010F2  D005               	goto	i2u312_40
  4961  0010F4                     i2u312_45:
  4962  0010F4  90D8               	bcf	status,0,c
  4963  0010F6  324C               	rrcf	??_sprintf+5,f,c
  4964  0010F8  324B               	rrcf	??_sprintf+4,f,c
  4965  0010FA  324A               	rrcf	??_sprintf+3,f,c
  4966  0010FC  3249               	rrcf	??_sprintf+2,f,c
  4967  0010FE                     i2u312_40:
  4968  0010FE  2EE8               	decfsz	wreg,f,c
  4969  001100  D7F9               	goto	i2u312_45
  4970  001102  5049               	movf	??_sprintf+2,w,c
  4971  001104  2447               	addwf	??_sprintf,w,c
  4972  001106  6FA6               	movwf	sprintf@exp& (0+255),b
  4973  001108  0E00               	movlw	0
  4974  00110A  2048               	addwfc	??_sprintf+1,w,c
  4975  00110C  6FA7               	movwf	(sprintf@exp+1)& (0+255),b
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;doprnt.c: 838: exp--;
  4979  00110E  07A6               	decf	sprintf@exp& (0+255),f,b
  4980  001110  A0D8               	btfss	status,0,c
  4981  001112  07A7               	decf	(sprintf@exp+1)& (0+255),f,b
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;doprnt.c: 839: exp *= 3;
  4985  001114  C0A6  F00F         	movff	sprintf@exp,___wmul@multiplier
  4986  001118  C0A7  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  4987  00111C  0E00               	movlw	0
  4988  00111E  6E12               	movwf	___wmul@multiplicand+1,c
  4989  001120  0E03               	movlw	3
  4990  001122  6E11               	movwf	___wmul@multiplicand,c
  4991  001124  EC19  F018         	call	___wmul	;wreg free
  4992  001128  C00F  F0A6         	movff	?___wmul,sprintf@exp
  4993  00112C  C010  F0A7         	movff	?___wmul+1,sprintf@exp+1
  4994                           
  4995                           ;doprnt.c: 840: exp /= 10;
  4996  001130  C0A6  F007         	movff	sprintf@exp,___awdiv@dividend
  4997  001134  C0A7  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  4998  001138  0E00               	movlw	0
  4999  00113A  6E0A               	movwf	___awdiv@divisor+1,c
  5000  00113C  0E0A               	movlw	10
  5001  00113E  6E09               	movwf	___awdiv@divisor,c
  5002  001140  ECC6  F014         	call	___awdiv	;wreg free
  5003  001144  C007  F0A6         	movff	?___awdiv,sprintf@exp
  5004  001148  C008  F0A7         	movff	?___awdiv+1,sprintf@exp+1
  5005                           
  5006                           ;doprnt.c: 841: if(exp < 0)
  5007  00114C  0100               	movlb	0	; () banked
  5008  00114E  AFA7               	btfss	(sprintf@exp+1)& (0+255),7,b
  5009  001150  D003               	goto	i2l725
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;doprnt.c: 842: exp--;
  5013  001152  07A6               	decf	sprintf@exp& (0+255),f,b
  5014  001154  A0D8               	btfss	status,0,c
  5015  001156  07A7               	decf	(sprintf@exp+1)& (0+255),f,b
  5016  001158                     i2l725:
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5020                           
  5021                           ; BSR set to: 0
  5022  001158  51A6               	movf	sprintf@exp& (0+255),w,b
  5023  00115A  0800               	sublw	0
  5024  00115C  EC62  F00B         	call	_scale
  5025  001160  C024  F0A8         	movff	?_scale,sprintf@tmpval
  5026  001164  C025  F0A9         	movff	?_scale+1,sprintf@tmpval+1
  5027  001168  C026  F0AA         	movff	?_scale+2,sprintf@tmpval+2
  5028                           
  5029                           ;doprnt.c: 847: tmpval.integ *= fval;
  5030  00116C  C0A8  F015         	movff	sprintf@tmpval,___ftmul@f1
  5031  001170  C0A9  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  5032  001174  C0AA  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  5033  001178  C0AE  F018         	movff	sprintf@fval,___ftmul@f2
  5034  00117C  C0AF  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  5035  001180  C0B0  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  5036  001184  EC58  F012         	call	___ftmul	;wreg free
  5037  001188  C015  F0A8         	movff	?___ftmul,sprintf@tmpval
  5038  00118C  C016  F0A9         	movff	?___ftmul+1,sprintf@tmpval+1
  5039  001190  C017  F0AA         	movff	?___ftmul+2,sprintf@tmpval+2
  5040                           
  5041                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5042  001194  C0A8  F001         	movff	sprintf@tmpval,___ftge@ff1
  5043  001198  C0A9  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  5044  00119C  C0AA  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  5045  0011A0  0E00               	movlw	0
  5046  0011A2  6E04               	movwf	___ftge@ff2,c
  5047  0011A4  0E80               	movlw	128
  5048  0011A6  6E05               	movwf	___ftge@ff2+1,c
  5049  0011A8  0E3F               	movlw	63
  5050  0011AA  6E06               	movwf	___ftge@ff2+2,c
  5051  0011AC  ECF6  F013         	call	___ftge	;wreg free
  5052  0011B0  B0D8               	btfsc	status,0,c
  5053  0011B2  D005               	goto	i2l726
  5054                           
  5055                           ;doprnt.c: 849: exp--;
  5056  0011B4  0100               	movlb	0	; () banked
  5057  0011B6  07A6               	decf	sprintf@exp& (0+255),f,b
  5058  0011B8  A0D8               	btfss	status,0,c
  5059  0011BA  07A7               	decf	(sprintf@exp+1)& (0+255),f,b
  5060  0011BC  D013               	goto	i2l728
  5061  0011BE                     i2l726:
  5062                           
  5063                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5064                           
  5065                           ; BSR set to: 0
  5066  0011BE  C0A8  F001         	movff	sprintf@tmpval,___ftge@ff1
  5067  0011C2  C0A9  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  5068  0011C6  C0AA  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  5069  0011CA  0E00               	movlw	0
  5070  0011CC  6E04               	movwf	___ftge@ff2,c
  5071  0011CE  0E20               	movlw	32
  5072  0011D0  6E05               	movwf	___ftge@ff2+1,c
  5073  0011D2  0E41               	movlw	65
  5074  0011D4  6E06               	movwf	___ftge@ff2+2,c
  5075  0011D6  ECF6  F013         	call	___ftge	;wreg free
  5076  0011DA  A0D8               	btfss	status,0,c
  5077  0011DC  D003               	goto	i2l728
  5078                           
  5079                           ;doprnt.c: 851: exp++;
  5080  0011DE  0100               	movlb	0	; () banked
  5081  0011E0  4BA6               	infsnz	sprintf@exp& (0+255),f,b
  5082  0011E2  2BA7               	incf	(sprintf@exp+1)& (0+255),f,b
  5083  0011E4                     i2l728:
  5084                           
  5085                           ;doprnt.c: 852: }
  5086                           ;doprnt.c: 1112: if(prec <= 12)
  5087                           
  5088                           ; BSR set to: 0
  5089                           
  5090                           ; BSR set to: 0
  5091                           
  5092                           ; BSR set to: 0
  5093  0011E4  0100               	movlb	0	; () banked
  5094  0011E6  BFAD               	btfsc	(sprintf@prec+1)& (0+255),7,b
  5095  0011E8  D006               	goto	i2u316_40
  5096  0011EA  51AD               	movf	(sprintf@prec+1)& (0+255),w,b
  5097  0011EC  E11B               	bnz	i2l3718
  5098  0011EE  0E0D               	movlw	13
  5099  0011F0  5DAC               	subwf	sprintf@prec& (0+255),w,b
  5100  0011F2  B0D8               	btfsc	status,0,c
  5101  0011F4  D017               	goto	i2l729
  5102  0011F6                     i2u316_40:
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;doprnt.c: 1113: fval += fround(prec);
  5106  0011F6  C0AE  F02E         	movff	sprintf@fval,___ftadd@f1
  5107  0011FA  C0AF  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  5108  0011FE  C0B0  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  5109  001202  51AC               	movf	sprintf@prec& (0+255),w,b
  5110  001204  EC8A  F00D         	call	_fround
  5111  001208  C024  F031         	movff	?_fround,___ftadd@f2
  5112  00120C  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  5113  001210  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  5114  001214  ECDB  F00F         	call	___ftadd	;wreg free
  5115  001218  C02E  F0AE         	movff	?___ftadd,sprintf@fval
  5116  00121C  C02F  F0AF         	movff	?___ftadd+1,sprintf@fval+1
  5117  001220  C030  F0B0         	movff	?___ftadd+2,sprintf@fval+2
  5118  001224                     i2l729:
  5119  001224                     i2l3718:
  5120                           
  5121                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5122  001224  0100               	movlb	0	; () banked
  5123  001226  BFA7               	btfsc	(sprintf@exp+1)& (0+255),7,b
  5124  001228  D006               	goto	i2u317_40
  5125  00122A  51A7               	movf	(sprintf@exp+1)& (0+255),w,b
  5126  00122C  E120               	bnz	i2l3726
  5127  00122E  0E0A               	movlw	10
  5128  001230  5DA6               	subwf	sprintf@exp& (0+255),w,b
  5129  001232  B0D8               	btfsc	status,0,c
  5130  001234  D01C               	goto	i2u320_40
  5131  001236                     i2u317_40:
  5132                           
  5133                           ; BSR set to: 0
  5134  001236  51AE               	movf	sprintf@fval& (0+255),w,b
  5135  001238  11AF               	iorwf	(sprintf@fval+1)& (0+255),w,b
  5136  00123A  11B0               	iorwf	(sprintf@fval+2)& (0+255),w,b
  5137  00123C  B4D8               	btfsc	status,2,c
  5138  00123E  D056               	goto	i2l730
  5139                           
  5140                           ; BSR set to: 0
  5141  001240  C0AE  F024         	movff	sprintf@fval,___fttol@f1
  5142  001244  C0AF  F025         	movff	sprintf@fval+1,___fttol@f1+1
  5143  001248  C0B0  F026         	movff	sprintf@fval+2,___fttol@f1+2
  5144  00124C  ECDE  F011         	call	___fttol	;wreg free
  5145  001250  5024               	movf	?___fttol,w,c
  5146  001252  1025               	iorwf	?___fttol+1,w,c
  5147  001254  1026               	iorwf	?___fttol+2,w,c
  5148  001256  1027               	iorwf	?___fttol+3,w,c
  5149  001258  A4D8               	btfss	status,2,c
  5150  00125A  D048               	goto	i2l730
  5151  00125C  0100               	movlb	0	; () banked
  5152  00125E  BFA7               	btfsc	(sprintf@exp+1)& (0+255),7,b
  5153  001260  D045               	goto	i2l730
  5154  001262  51A7               	movf	(sprintf@exp+1)& (0+255),w,b
  5155  001264  E104               	bnz	i2l3726
  5156  001266  0E02               	movlw	2
  5157  001268  5DA6               	subwf	sprintf@exp& (0+255),w,b
  5158  00126A  A0D8               	btfss	status,0,c
  5159  00126C  D03F               	goto	i2l730
  5160  00126E                     i2u320_40:
  5161  00126E                     i2l3726:
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5165  00126E  C0A8  F001         	movff	sprintf@tmpval,___ftge@ff1
  5166  001272  C0A9  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  5167  001276  C0AA  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  5168  00127A  0E70               	movlw	112
  5169  00127C  6E04               	movwf	___ftge@ff2,c
  5170  00127E  0E89               	movlw	137
  5171  001280  6E05               	movwf	___ftge@ff2+1,c
  5172  001282  0E40               	movlw	64
  5173  001284  6E06               	movwf	___ftge@ff2+2,c
  5174  001286  ECF6  F013         	call	___ftge	;wreg free
  5175  00128A  B0D8               	btfsc	status,0,c
  5176  00128C  D003               	goto	i2l733
  5177                           
  5178                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5179  00128E  0100               	movlb	0	; () banked
  5180  001290  0EF7               	movlw	247
  5181  001292  D002               	goto	L1
  5182  001294                     i2l733:
  5183                           
  5184                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5185                           
  5186                           ; BSR set to: 0
  5187  001294  0100               	movlb	0	; () banked
  5188  001296  0EF8               	movlw	248
  5189  001298                     L1:
  5190  001298  27A6               	addwf	sprintf@exp& (0+255),f,b
  5191  00129A  0EFF               	movlw	255
  5192  00129C  23A7               	addwfc	(sprintf@exp+1)& (0+255),f,b
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;doprnt.c: 1124: }
  5196                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5197                           
  5198                           ; BSR set to: 0
  5199  00129E  51A6               	movf	sprintf@exp& (0+255),w,b
  5200  0012A0  EC62  F00B         	call	_scale
  5201  0012A4  C024  F0A8         	movff	?_scale,sprintf@tmpval
  5202  0012A8  C025  F0A9         	movff	?_scale+1,sprintf@tmpval+1
  5203  0012AC  C026  F0AA         	movff	?_scale+2,sprintf@tmpval+2
  5204                           
  5205                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5206  0012B0  C0AE  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  5207  0012B4  C0AF  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  5208  0012B8  C0B0  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  5209  0012BC  C0A8  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  5210  0012C0  C0A9  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  5211  0012C4  C0AA  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  5212  0012C8  ECB1  F010         	call	__tdiv_to_l_	;wreg free
  5213  0012CC  C001  F0A2         	movff	?__tdiv_to_l_,sprintf@val
  5214  0012D0  C002  F0A3         	movff	?__tdiv_to_l_+1,sprintf@val+1
  5215  0012D4  C003  F0A4         	movff	?__tdiv_to_l_+2,sprintf@val+2
  5216  0012D8  C004  F0A5         	movff	?__tdiv_to_l_+3,sprintf@val+3
  5217                           
  5218                           ;doprnt.c: 1129: fval = 0.0;
  5219  0012DC  0E00               	movlw	0
  5220  0012DE  0100               	movlb	0	; () banked
  5221  0012E0  6FAE               	movwf	sprintf@fval& (0+255),b
  5222  0012E2  0E00               	movlw	0
  5223  0012E4  6FAF               	movwf	(sprintf@fval+1)& (0+255),b
  5224  0012E6  0E00               	movlw	0
  5225  0012E8  6FB0               	movwf	(sprintf@fval+2)& (0+255),b
  5226                           
  5227                           ;doprnt.c: 1130: } else {
  5228  0012EA  D033               	goto	i2l739
  5229  0012EC                     i2l730:
  5230                           
  5231                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5232                           
  5233                           ; BSR set to: 0
  5234  0012EC  C0AE  F024         	movff	sprintf@fval,___fttol@f1
  5235  0012F0  C0AF  F025         	movff	sprintf@fval+1,___fttol@f1+1
  5236  0012F4  C0B0  F026         	movff	sprintf@fval+2,___fttol@f1+2
  5237  0012F8  ECDE  F011         	call	___fttol	;wreg free
  5238  0012FC  C024  F0A2         	movff	?___fttol,sprintf@val
  5239  001300  C025  F0A3         	movff	?___fttol+1,sprintf@val+1
  5240  001304  C026  F0A4         	movff	?___fttol+2,sprintf@val+2
  5241  001308  C027  F0A5         	movff	?___fttol+3,sprintf@val+3
  5242                           
  5243                           ;doprnt.c: 1132: fval -= (double)val;
  5244  00130C  C0AE  F03A         	movff	sprintf@fval,___ftsub@f1
  5245  001310  C0AF  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  5246  001314  C0B0  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  5247  001318  C0A2  F009         	movff	sprintf@val,___lltoft@c
  5248  00131C  C0A3  F00A         	movff	sprintf@val+1,___lltoft@c+1
  5249  001320  C0A4  F00B         	movff	sprintf@val+2,___lltoft@c+2
  5250  001324  C0A5  F00C         	movff	sprintf@val+3,___lltoft@c+3
  5251  001328  EC88  F016         	call	___lltoft	;wreg free
  5252  00132C  C009  F03D         	movff	?___lltoft,___ftsub@f2
  5253  001330  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  5254  001334  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  5255  001338  EC99  F017         	call	___ftsub	;wreg free
  5256  00133C  C03A  F0AE         	movff	?___ftsub,sprintf@fval
  5257  001340  C03B  F0AF         	movff	?___ftsub+1,sprintf@fval+1
  5258  001344  C03C  F0B0         	movff	?___ftsub+2,sprintf@fval+2
  5259                           
  5260                           ;doprnt.c: 1133: exp = 0;
  5261  001348  0E00               	movlw	0
  5262  00134A  0100               	movlb	0	; () banked
  5263  00134C  6FA7               	movwf	(sprintf@exp+1)& (0+255),b
  5264  00134E  0E00               	movlw	0
  5265  001350  6FA6               	movwf	sprintf@exp& (0+255),b
  5266  001352                     i2l739:
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;doprnt.c: 1134: }
  5270                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5271                           
  5272                           ; BSR set to: 0
  5273  001352  0E01               	movlw	1
  5274  001354  6FB1               	movwf	sprintf@c& (0+255),b
  5275  001356                     i2l3746:
  5276                           
  5277                           ; BSR set to: 0
  5278  001356  0E0A               	movlw	10
  5279  001358  19B1               	xorwf	sprintf@c& (0+255),w,b
  5280  00135A  B4D8               	btfsc	status,2,c
  5281  00135C  D01B               	goto	i2u324_40
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;doprnt.c: 1137: if(val < dpowers[c])
  5285                           
  5286                           ; BSR set to: 0
  5287                           
  5288                           ; BSR set to: 0
  5289  00135E  51B1               	movf	sprintf@c& (0+255),w,b
  5290  001360  0D04               	mullw	4
  5291  001362  0E01               	movlw	low _dpowers
  5292  001364  24F3               	addwf	prodl,w,c
  5293  001366  6EF6               	movwf	tblptrl,c
  5294  001368  0E0F               	movlw	high _dpowers
  5295  00136A  20F4               	addwfc	prodh,w,c
  5296  00136C  6EF7               	movwf	tblptrh,c
  5297  00136E                     	if	1	;There are 3 active tblptr bytes
  5298  00136E  6AF8               	clrf	tblptru,c
  5299  001370  0E00               	movlw	low (__mediumconst shr (0+16))
  5300  001372  22F8               	addwfc	tblptru,f,c
  5301  001374                     	endif
  5302  001374  0009               	tblrd		*+
  5303  001376  50F5               	movf	tablat,w,c
  5304  001378  5DA2               	subwf	sprintf@val& (0+255),w,b
  5305  00137A  0009               	tblrd		*+
  5306  00137C  50F5               	movf	tablat,w,c
  5307  00137E  59A3               	subwfb	(sprintf@val+1)& (0+255),w,b
  5308  001380  0009               	tblrd		*+
  5309  001382  50F5               	movf	tablat,w,c
  5310  001384  59A4               	subwfb	(sprintf@val+2)& (0+255),w,b
  5311  001386  0009               	tblrd		*+
  5312  001388  50F5               	movf	tablat,w,c
  5313  00138A  59A5               	subwfb	(sprintf@val+3)& (0+255),w,b
  5314  00138C  A0D8               	btfss	status,0,c
  5315  00138E  D002               	goto	i2u324_40
  5316                           
  5317                           ; BSR set to: 0
  5318                           
  5319                           ; BSR set to: 0
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;doprnt.c: 1138: break;
  5323  001390  2BB1               	incf	sprintf@c& (0+255),f,b
  5324  001392  D7E1               	goto	i2l3746
  5325  001394                     i2u324_40:
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;doprnt.c: 1175: {
  5329                           ;doprnt.c: 1188: if(flag & 0x03)
  5330                           
  5331                           ; BSR set to: 0
  5332  001394  0E03               	movlw	3
  5333  001396  15A0               	andwf	sprintf@flag& (0+255),w,b
  5334  001398  6E47               	movwf	??_sprintf& (0+255),c
  5335  00139A  0E00               	movlw	0
  5336  00139C  15A1               	andwf	(sprintf@flag+1)& (0+255),w,b
  5337  00139E  6E48               	movwf	(??_sprintf+1)& (0+255),c
  5338  0013A0  5047               	movf	??_sprintf,w,c
  5339  0013A2  1048               	iorwf	??_sprintf+1,w,c
  5340  0013A4  B4D8               	btfsc	status,2,c
  5341  0013A6  D053               	goto	i2l744
  5342                           
  5343                           ; BSR set to: 0
  5344                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  5345  0013A8  C040  FFD9         	movff	sprintf@sp,fsr2l
  5346  0013AC  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  5347  0013B0  0E2D               	movlw	45
  5348  0013B2  D04A               	goto	L2
  5349  0013B4                     
  5350                           ; BSR set to: 0
  5351                           ;doprnt.c: 1200: {
  5352                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5353                           
  5354                           ; BSR set to: 0
  5355  0013B4  C0A2  F001         	movff	sprintf@val,___lldiv@dividend
  5356  0013B8  C0A3  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  5357  0013BC  C0A4  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  5358  0013C0  C0A5  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  5359  0013C4  51B1               	movf	sprintf@c& (0+255),w,b
  5360  0013C6  0D04               	mullw	4
  5361  0013C8  0E01               	movlw	low _dpowers
  5362  0013CA  24F3               	addwf	prodl,w,c
  5363  0013CC  6EF6               	movwf	tblptrl,c
  5364  0013CE  0E0F               	movlw	high _dpowers
  5365  0013D0  20F4               	addwfc	prodh,w,c
  5366  0013D2  6EF7               	movwf	tblptrh,c
  5367  0013D4                     	if	1	;There are 3 active tblptr bytes
  5368  0013D4  6AF8               	clrf	tblptru,c
  5369  0013D6  0E00               	movlw	low (__mediumconst shr (0+16))
  5370  0013D8  22F8               	addwfc	tblptru,f,c
  5371  0013DA                     	endif
  5372  0013DA  0009               	tblrd		*+
  5373  0013DC  CFF5 F005          	movff	tablat,___lldiv@divisor
  5374  0013E0  0009               	tblrd		*+
  5375  0013E2  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  5376  0013E6  0009               	tblrd		*+
  5377  0013E8  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  5378  0013EC  000A               	tblrd		*-
  5379  0013EE  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  5380  0013F2  EC08  F015         	call	___lldiv	;wreg free
  5381  0013F6  C001  F0A8         	movff	?___lldiv,sprintf@tmpval
  5382  0013FA  C002  F0A9         	movff	?___lldiv+1,sprintf@tmpval+1
  5383  0013FE  C003  F0AA         	movff	?___lldiv+2,sprintf@tmpval+2
  5384  001402  C004  F0AB         	movff	?___lldiv+3,sprintf@tmpval+3
  5385                           
  5386                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5387  001406  C0A8  F001         	movff	sprintf@tmpval,___llmod@dividend
  5388  00140A  C0A9  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  5389  00140E  C0AA  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  5390  001412  C0AB  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  5391  001416  0E0A               	movlw	10
  5392  001418  6E05               	movwf	___llmod@divisor,c
  5393  00141A  0E00               	movlw	0
  5394  00141C  6E06               	movwf	___llmod@divisor+1,c
  5395  00141E  0E00               	movlw	0
  5396  001420  6E07               	movwf	___llmod@divisor+2,c
  5397  001422  0E00               	movlw	0
  5398  001424  6E08               	movwf	___llmod@divisor+3,c
  5399  001426  ECF6  F015         	call	___llmod	;wreg free
  5400  00142A  C001  F0A8         	movff	?___llmod,sprintf@tmpval
  5401  00142E  C002  F0A9         	movff	?___llmod+1,sprintf@tmpval+1
  5402  001432  C003  F0AA         	movff	?___llmod+2,sprintf@tmpval+2
  5403  001436  C004  F0AB         	movff	?___llmod+3,sprintf@tmpval+3
  5404                           
  5405                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  5406  00143A  0100               	movlb	0	; () banked
  5407  00143C  51A8               	movf	sprintf@tmpval& (0+255),w,b
  5408  00143E  0F30               	addlw	48
  5409  001440  C040  FFD9         	movff	sprintf@sp,fsr2l
  5410  001444  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  5411  001448                     L2:
  5412  001448  6EDF               	movwf	indf2,c
  5413                           
  5414                           ; BSR set to: 0
  5415  00144A  4A40               	infsnz	sprintf@sp,f,c
  5416  00144C  2A41               	incf	sprintf@sp+1,f,c
  5417  00144E                     i2l744:
  5418                           
  5419                           ; BSR set to: 0
  5420                           
  5421                           ; BSR set to: 0
  5422  00144E  07B1               	decf	sprintf@c& (0+255),f,b
  5423  001450  29B1               	incf	sprintf@c& (0+255),w,b
  5424  001452  B4D8               	btfsc	status,2,c
  5425  001454  D00C               	goto	i2l747
  5426  001456  D7AE               	goto	i2l745
  5427  001458                     i2l3774:
  5428                           
  5429                           ; BSR set to: 0
  5430                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  5431  001458  C040  FFD9         	movff	sprintf@sp,fsr2l
  5432  00145C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  5433  001460  0E30               	movlw	48
  5434  001462  6EDF               	movwf	indf2,c
  5435                           
  5436                           ; BSR set to: 0
  5437  001464  4A40               	infsnz	sprintf@sp,f,c
  5438  001466  2A41               	incf	sprintf@sp+1,f,c
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;doprnt.c: 1209: exp--;
  5442  001468  07A6               	decf	sprintf@exp& (0+255),f,b
  5443  00146A  A0D8               	btfss	status,0,c
  5444  00146C  07A7               	decf	(sprintf@exp+1)& (0+255),f,b
  5445  00146E                     i2l747:
  5446                           
  5447                           ; BSR set to: 0
  5448                           
  5449                           ; BSR set to: 0
  5450  00146E  BFA7               	btfsc	(sprintf@exp+1)& (0+255),7,b
  5451  001470  D005               	goto	i2u327_40
  5452  001472  51A7               	movf	(sprintf@exp+1)& (0+255),w,b
  5453  001474  E1F1               	bnz	i2l3774
  5454  001476  05A6               	decf	sprintf@exp& (0+255),w,b
  5455  001478  B0D8               	btfsc	status,0,c
  5456  00147A  D7EE               	goto	i2l748
  5457  00147C                     i2u327_40:
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;doprnt.c: 1210: }
  5461                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5462                           
  5463                           ; BSR set to: 0
  5464  00147C  BFAD               	btfsc	(sprintf@prec+1)& (0+255),7,b
  5465  00147E  D009               	goto	i2l750
  5466  001480  51AD               	movf	(sprintf@prec+1)& (0+255),w,b
  5467  001482  E104               	bnz	i2u328_40
  5468  001484  0E09               	movlw	9
  5469  001486  5DAC               	subwf	sprintf@prec& (0+255),w,b
  5470  001488  A0D8               	btfss	status,0,c
  5471  00148A  D003               	goto	i2l750
  5472  00148C                     i2u328_40:
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5476  00148C  0E08               	movlw	8
  5477  00148E  6FB1               	movwf	sprintf@c& (0+255),b
  5478  001490  D002               	goto	i2l751
  5479  001492                     i2l750:
  5480                           
  5481                           ; BSR set to: 0
  5482                           ;doprnt.c: 1213: else
  5483                           ;doprnt.c: 1214: c = prec;
  5484  001492  C0AC  F0B1         	movff	sprintf@prec,sprintf@c
  5485  001496                     i2l751:
  5486                           
  5487                           ; BSR set to: 0
  5488                           ;doprnt.c: 1215: prec -= c;
  5489                           
  5490                           ; BSR set to: 0
  5491  001496  51B1               	movf	sprintf@c& (0+255),w,b
  5492  001498  5FAC               	subwf	sprintf@prec& (0+255),f,b
  5493  00149A  0E00               	movlw	0
  5494  00149C  BFB1               	btfsc	sprintf@c& (0+255),7,b
  5495  00149E  0EFF               	movlw	255
  5496  0014A0  5BAD               	subwfb	(sprintf@prec+1)& (0+255),f,b
  5497                           
  5498                           ; BSR set to: 0
  5499                           ;doprnt.c: 1219: if(c)
  5500  0014A2  51B1               	movf	sprintf@c& (0+255),w,b
  5501  0014A4  B4D8               	btfsc	status,2,c
  5502  0014A6  D008               	goto	i2l752
  5503                           
  5504                           ; BSR set to: 0
  5505                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  5506  0014A8  C040  FFD9         	movff	sprintf@sp,fsr2l
  5507  0014AC  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  5508  0014B0  0E2E               	movlw	46
  5509  0014B2  6EDF               	movwf	indf2,c
  5510                           
  5511                           ; BSR set to: 0
  5512  0014B4  4A40               	infsnz	sprintf@sp,f,c
  5513  0014B6  2A41               	incf	sprintf@sp+1,f,c
  5514  0014B8                     i2l752:
  5515                           
  5516                           ; BSR set to: 0
  5517                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5518                           
  5519                           ; BSR set to: 0
  5520  0014B8  51B1               	movf	sprintf@c& (0+255),w,b
  5521  0014BA  EC62  F00B         	call	_scale
  5522  0014BE  C024  F09B         	movff	?_scale,_sprintf$2174
  5523  0014C2  C025  F09C         	movff	?_scale+1,_sprintf$2174+1
  5524  0014C6  C026  F09D         	movff	?_scale+2,_sprintf$2174+2
  5525                           
  5526                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5527  0014CA  C0AE  F018         	movff	sprintf@fval,___ftmul@f2
  5528  0014CE  C0AF  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  5529  0014D2  C0B0  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  5530  0014D6  C09B  F015         	movff	_sprintf$2174,___ftmul@f1
  5531  0014DA  C09C  F016         	movff	_sprintf$2174+1,___ftmul@f1+1
  5532  0014DE  C09D  F017         	movff	_sprintf$2174+2,___ftmul@f1+2
  5533  0014E2  EC58  F012         	call	___ftmul	;wreg free
  5534  0014E6  C015  F024         	movff	?___ftmul,___fttol@f1
  5535  0014EA  C016  F025         	movff	?___ftmul+1,___fttol@f1+1
  5536  0014EE  C017  F026         	movff	?___ftmul+2,___fttol@f1+2
  5537  0014F2  ECDE  F011         	call	___fttol	;wreg free
  5538  0014F6  C024  F0A2         	movff	?___fttol,sprintf@val
  5539  0014FA  C025  F0A3         	movff	?___fttol+1,sprintf@val+1
  5540  0014FE  C026  F0A4         	movff	?___fttol+2,sprintf@val+2
  5541  001502  C027  F0A5         	movff	?___fttol+3,sprintf@val+3
  5542                           
  5543                           ;doprnt.c: 1228: while(c--) {
  5544  001506  D077               	goto	i2l753
  5545  001508                     
  5546                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5547  001508  C0A2  F001         	movff	sprintf@val,___lldiv@dividend
  5548  00150C  C0A3  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  5549  001510  C0A4  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  5550  001514  C0A5  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  5551  001518  0100               	movlb	0	; () banked
  5552  00151A  51B1               	movf	sprintf@c& (0+255),w,b
  5553  00151C  0D04               	mullw	4
  5554  00151E  0E01               	movlw	low _dpowers
  5555  001520  24F3               	addwf	prodl,w,c
  5556  001522  6EF6               	movwf	tblptrl,c
  5557  001524  0E0F               	movlw	high _dpowers
  5558  001526  20F4               	addwfc	prodh,w,c
  5559  001528  6EF7               	movwf	tblptrh,c
  5560  00152A                     	if	1	;There are 3 active tblptr bytes
  5561  00152A  6AF8               	clrf	tblptru,c
  5562  00152C  0E00               	movlw	low (__mediumconst shr (0+16))
  5563  00152E  22F8               	addwfc	tblptru,f,c
  5564  001530                     	endif
  5565  001530  0009               	tblrd		*+
  5566  001532  CFF5 F005          	movff	tablat,___lldiv@divisor
  5567  001536  0009               	tblrd		*+
  5568  001538  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  5569  00153C  0009               	tblrd		*+
  5570  00153E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  5571  001542  000A               	tblrd		*-
  5572  001544  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  5573  001548  EC08  F015         	call	___lldiv	;wreg free
  5574  00154C  C001  F0A8         	movff	?___lldiv,sprintf@tmpval
  5575  001550  C002  F0A9         	movff	?___lldiv+1,sprintf@tmpval+1
  5576  001554  C003  F0AA         	movff	?___lldiv+2,sprintf@tmpval+2
  5577  001558  C004  F0AB         	movff	?___lldiv+3,sprintf@tmpval+3
  5578                           
  5579                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5580  00155C  C0A8  F001         	movff	sprintf@tmpval,___llmod@dividend
  5581  001560  C0A9  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  5582  001564  C0AA  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  5583  001568  C0AB  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  5584  00156C  0E0A               	movlw	10
  5585  00156E  6E05               	movwf	___llmod@divisor,c
  5586  001570  0E00               	movlw	0
  5587  001572  6E06               	movwf	___llmod@divisor+1,c
  5588  001574  0E00               	movlw	0
  5589  001576  6E07               	movwf	___llmod@divisor+2,c
  5590  001578  0E00               	movlw	0
  5591  00157A  6E08               	movwf	___llmod@divisor+3,c
  5592  00157C  ECF6  F015         	call	___llmod	;wreg free
  5593  001580  C001  F0A8         	movff	?___llmod,sprintf@tmpval
  5594  001584  C002  F0A9         	movff	?___llmod+1,sprintf@tmpval+1
  5595  001588  C003  F0AA         	movff	?___llmod+2,sprintf@tmpval+2
  5596  00158C  C004  F0AB         	movff	?___llmod+3,sprintf@tmpval+3
  5597                           
  5598                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  5599  001590  0100               	movlb	0	; () banked
  5600  001592  51A8               	movf	sprintf@tmpval& (0+255),w,b
  5601  001594  0F30               	addlw	48
  5602  001596  C040  FFD9         	movff	sprintf@sp,fsr2l
  5603  00159A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  5604  00159E  6EDF               	movwf	indf2,c
  5605                           
  5606                           ; BSR set to: 0
  5607  0015A0  4A40               	infsnz	sprintf@sp,f,c
  5608  0015A2  2A41               	incf	sprintf@sp+1,f,c
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;doprnt.c: 1232: val %= dpowers[c];
  5612  0015A4  C0A2  F001         	movff	sprintf@val,___llmod@dividend
  5613  0015A8  C0A3  F002         	movff	sprintf@val+1,___llmod@dividend+1
  5614  0015AC  C0A4  F003         	movff	sprintf@val+2,___llmod@dividend+2
  5615  0015B0  C0A5  F004         	movff	sprintf@val+3,___llmod@dividend+3
  5616  0015B4  51B1               	movf	sprintf@c& (0+255),w,b
  5617  0015B6  0D04               	mullw	4
  5618  0015B8  0E01               	movlw	low _dpowers
  5619  0015BA  24F3               	addwf	prodl,w,c
  5620  0015BC  6EF6               	movwf	tblptrl,c
  5621  0015BE  0E0F               	movlw	high _dpowers
  5622  0015C0  20F4               	addwfc	prodh,w,c
  5623  0015C2  6EF7               	movwf	tblptrh,c
  5624  0015C4                     	if	1	;There are 3 active tblptr bytes
  5625  0015C4  6AF8               	clrf	tblptru,c
  5626  0015C6  0E00               	movlw	low (__mediumconst shr (0+16))
  5627  0015C8  22F8               	addwfc	tblptru,f,c
  5628  0015CA                     	endif
  5629  0015CA  0009               	tblrd		*+
  5630  0015CC  CFF5 F005          	movff	tablat,___llmod@divisor
  5631  0015D0  0009               	tblrd		*+
  5632  0015D2  CFF5 F006          	movff	tablat,___llmod@divisor+1
  5633  0015D6  0009               	tblrd		*+
  5634  0015D8  CFF5 F007          	movff	tablat,___llmod@divisor+2
  5635  0015DC  000A               	tblrd		*-
  5636  0015DE  CFF5 F008          	movff	tablat,___llmod@divisor+3
  5637  0015E2  ECF6  F015         	call	___llmod	;wreg free
  5638  0015E6  C001  F0A2         	movff	?___llmod,sprintf@val
  5639  0015EA  C002  F0A3         	movff	?___llmod+1,sprintf@val+1
  5640  0015EE  C003  F0A4         	movff	?___llmod+2,sprintf@val+2
  5641  0015F2  C004  F0A5         	movff	?___llmod+3,sprintf@val+3
  5642  0015F6                     i2l753:
  5643  0015F6  0100               	movlb	0	; () banked
  5644  0015F8  07B1               	decf	sprintf@c& (0+255),f,b
  5645  0015FA  29B1               	incf	sprintf@c& (0+255),w,b
  5646  0015FC  B4D8               	btfsc	status,2,c
  5647  0015FE  D00C               	goto	i2l756
  5648  001600  D783               	goto	i2l754
  5649  001602                     
  5650                           ; BSR set to: 0
  5651                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  5652                           
  5653                           ; BSR set to: 0
  5654  001602  C040  FFD9         	movff	sprintf@sp,fsr2l
  5655  001606  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  5656  00160A  0E30               	movlw	48
  5657  00160C  6EDF               	movwf	indf2,c
  5658                           
  5659                           ; BSR set to: 0
  5660  00160E  4A40               	infsnz	sprintf@sp,f,c
  5661  001610  2A41               	incf	sprintf@sp+1,f,c
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;doprnt.c: 1237: prec--;
  5665  001612  07AC               	decf	sprintf@prec& (0+255),f,b
  5666  001614  A0D8               	btfss	status,0,c
  5667  001616  07AD               	decf	(sprintf@prec+1)& (0+255),f,b
  5668  001618                     i2l756:
  5669                           
  5670                           ; BSR set to: 0
  5671                           
  5672                           ; BSR set to: 0
  5673  001618  51AC               	movf	sprintf@prec& (0+255),w,b
  5674  00161A  11AD               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5675  00161C  B4D8               	btfsc	status,2,c
  5676  00161E  D03D               	goto	i2l763
  5677  001620  D7F0               	goto	i2l757
  5678  001622                     i2l721:
  5679                           
  5680                           ; BSR set to: 0
  5681                           ;doprnt.c: 1246: }
  5682                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5683                           
  5684                           ; BSR set to: 0
  5685  001622  51AC               	movf	sprintf@prec& (0+255),w,b
  5686  001624  11AD               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5687  001626  A4D8               	btfss	status,2,c
  5688  001628  D008               	goto	i2l759
  5689                           
  5690                           ; BSR set to: 0
  5691  00162A  51A2               	movf	sprintf@val& (0+255),w,b
  5692  00162C  11A3               	iorwf	(sprintf@val+1)& (0+255),w,b
  5693  00162E  11A4               	iorwf	(sprintf@val+2)& (0+255),w,b
  5694  001630  11A5               	iorwf	(sprintf@val+3)& (0+255),w,b
  5695  001632  A4D8               	btfss	status,2,c
  5696  001634  D002               	goto	i2l759
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;doprnt.c: 1291: prec++;
  5700  001636  4BAC               	infsnz	sprintf@prec& (0+255),f,b
  5701  001638  2BAD               	incf	(sprintf@prec+1)& (0+255),f,b
  5702  00163A                     i2l759:
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;doprnt.c: 1339: if(c < prec)
  5706                           
  5707                           ; BSR set to: 0
  5708  00163A  0E80               	movlw	128
  5709  00163C  BFB1               	btfsc	sprintf@c& (0+255),7,b
  5710  00163E  0E7F               	movlw	127
  5711  001640  6E47               	movwf	??_sprintf& (0+255),c
  5712  001642  51AC               	movf	sprintf@prec& (0+255),w,b
  5713  001644  5DB1               	subwf	sprintf@c& (0+255),w,b
  5714  001646  51AD               	movf	(sprintf@prec+1)& (0+255),w,b
  5715  001648  0A80               	xorlw	128
  5716  00164A  5847               	subwfb	??_sprintf& (0+255),w,c
  5717  00164C  B0D8               	btfsc	status,0,c
  5718  00164E  D003               	goto	i2l760
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;doprnt.c: 1340: c = prec;
  5722  001650  C0AC  F0B1         	movff	sprintf@prec,sprintf@c
  5723  001654  D010               	goto	i2l762
  5724  001656                     i2l760:
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;doprnt.c: 1341: else if(prec < c)
  5728                           
  5729                           ; BSR set to: 0
  5730  001656  51AD               	movf	(sprintf@prec+1)& (0+255),w,b
  5731  001658  0A80               	xorlw	128
  5732  00165A  6E47               	movwf	??_sprintf& (0+255),c
  5733  00165C  51B1               	movf	sprintf@c& (0+255),w,b
  5734  00165E  5DAC               	subwf	sprintf@prec& (0+255),w,b
  5735  001660  0E80               	movlw	128
  5736  001662  BFB1               	btfsc	sprintf@c& (0+255),7,b
  5737  001664  0E7F               	movlw	127
  5738  001666  5847               	subwfb	??_sprintf& (0+255),w,c
  5739  001668  B0D8               	btfsc	status,0,c
  5740  00166A  D005               	goto	i2l762
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;doprnt.c: 1342: prec = c;
  5744  00166C  51B1               	movf	sprintf@c& (0+255),w,b
  5745  00166E  6FAC               	movwf	sprintf@prec& (0+255),b
  5746  001670  6BAD               	clrf	(sprintf@prec+1)& (0+255),b
  5747  001672  BFAC               	btfsc	sprintf@prec& (0+255),7,b
  5748  001674  07AD               	decf	(sprintf@prec+1)& (0+255),f,b
  5749  001676                     i2l762:
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;doprnt.c: 1422: {
  5753                           ;doprnt.c: 1438: if(flag & 0x03)
  5754                           
  5755                           ; BSR set to: 0
  5756                           
  5757                           ; BSR set to: 0
  5758  001676  0E03               	movlw	3
  5759  001678  15A0               	andwf	sprintf@flag& (0+255),w,b
  5760  00167A  6E47               	movwf	??_sprintf& (0+255),c
  5761  00167C  0E00               	movlw	0
  5762  00167E  15A1               	andwf	(sprintf@flag+1)& (0+255),w,b
  5763  001680  6E48               	movwf	(??_sprintf+1)& (0+255),c
  5764  001682  5047               	movf	??_sprintf,w,c
  5765  001684  1048               	iorwf	??_sprintf+1,w,c
  5766  001686  B4D8               	btfsc	status,2,c
  5767  001688  D008               	goto	i2l763
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5771  00168A  C040  FFD9         	movff	sprintf@sp,fsr2l
  5772  00168E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  5773  001692  0E2D               	movlw	45
  5774  001694  6EDF               	movwf	indf2,c
  5775  001696                     i2l3836:
  5776                           
  5777                           ; BSR set to: 0
  5778  001696  4A40               	infsnz	sprintf@sp,f,c
  5779  001698  2A41               	incf	sprintf@sp+1,f,c
  5780  00169A                     i2l763:
  5781                           
  5782                           ; BSR set to: 0
  5783                           
  5784                           ; BSR set to: 0
  5785                           
  5786                           ; BSR set to: 0
  5787  00169A  C042  FFF6         	movff	sprintf@f,tblptrl
  5788  00169E  C043  FFF7         	movff	sprintf@f+1,tblptrh
  5789  0016A2  4A42               	infsnz	sprintf@f,f,c
  5790  0016A4  2A43               	incf	sprintf@f+1,f,c
  5791  0016A6                     	if	0	;tblptru may be non-zero
  5792  0016A6                     	endif
  5793  0016A6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5794  0016A6  0E00               	movlw	low (__mediumconst shr (0+16))
  5795  0016A8  6EF8               	movwf	tblptru,c
  5796  0016AA                     	endif
  5797  0016AA  0008               	tblrd		*
  5798  0016AC  CFF5 F0B1          	movff	tablat,sprintf@c
  5799  0016B0  51B1               	movf	sprintf@c& (0+255),w,b
  5800  0016B2  A4D8               	btfss	status,2,c
  5801  0016B4  D473               	goto	i2l708
  5802  0016B6                     i2u337_40:
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;doprnt.c: 1538: *sp = 0;
  5806                           
  5807                           ; BSR set to: 0
  5808                           
  5809                           ;doprnt.c: 1469: }
  5810                           ;doprnt.c: 1533: }
  5811                           ;doprnt.c: 1535: alldone:
  5812                           
  5813                           ; BSR set to: 0
  5814  0016B6  C040  FFD9         	movff	sprintf@sp,fsr2l
  5815  0016BA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  5816  0016BE  0E00               	movlw	0
  5817  0016C0  6EDF               	movwf	indf2,c
  5818  0016C2  0012               	return	
  5819  0016C4                     __end_of_sprintf:
  5820                           	opt stack 0
  5821                           tosu	equ	0xFFF
  5822                           tosh	equ	0xFFE
  5823                           tosl	equ	0xFFD
  5824                           pclatu	equ	0xFFB
  5825                           pclath	equ	0xFFA
  5826                           tblptru	equ	0xFF8
  5827                           tblptrh	equ	0xFF7
  5828                           tblptrl	equ	0xFF6
  5829                           tablat	equ	0xFF5
  5830                           prodh	equ	0xFF4
  5831                           prodl	equ	0xFF3
  5832                           intcon	equ	0xFF2
  5833                           indf0	equ	0xFEF
  5834                           postinc0	equ	0xFEE
  5835                           fsr0h	equ	0xFEA
  5836                           fsr0l	equ	0xFE9
  5837                           wreg	equ	0xFE8
  5838                           postdec1	equ	0xFE5
  5839                           fsr1h	equ	0xFE2
  5840                           fsr1l	equ	0xFE1
  5841                           indf2	equ	0xFDF
  5842                           postinc2	equ	0xFDE
  5843                           postdec2	equ	0xFDD
  5844                           fsr2h	equ	0xFDA
  5845                           fsr2l	equ	0xFD9
  5846                           status	equ	0xFD8
  5847                           
  5848 ;; *************** function _scale *****************
  5849 ;; Defined at:
  5850 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;  scl             1    wreg     char 
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;  scl             1   41[COMRAM] char 
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  3   35[COMRAM] char 
  5857 ;; Registers used:
  5858 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5864 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5865 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5867 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5868 ;;Total ram usage:        7 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    2
  5871 ;; This function calls:
  5872 ;;		___awdiv
  5873 ;;		___awmod
  5874 ;;		___ftmul
  5875 ;;		___wmul
  5876 ;; This function is called by:
  5877 ;;		_sprintf
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           	psect	text37
  5882  0016C4                     __ptext37:
  5883                           	opt stack 0
  5884  0016C4                     _scale:
  5885                           	opt stack 16
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;incstack = 0
  5889                           ;scale@scl stored from wreg
  5890  0016C4  6E2A               	movwf	scale@scl,c
  5891                           
  5892                           ;doprnt.c: 428: if(scl < 0) {
  5893  0016C6  AE2A               	btfss	scale@scl,7,c
  5894  0016C8  D113               	goto	i2l697
  5895                           
  5896                           ;doprnt.c: 429: scl = -scl;
  5897  0016CA  6C2A               	negf	scale@scl,c
  5898                           
  5899                           ;doprnt.c: 430: if(scl>=110)
  5900  0016CC  502A               	movf	scale@scl,w,c
  5901  0016CE  0A80               	xorlw	128
  5902  0016D0  0F12               	addlw	-238
  5903  0016D2  A0D8               	btfss	status,0,c
  5904  0016D4  D09A               	goto	i2l698
  5905                           
  5906                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5907  0016D6  0E00               	movlw	0
  5908  0016D8  6E12               	movwf	___wmul@multiplicand+1,c
  5909  0016DA  0E03               	movlw	3
  5910  0016DC  6E11               	movwf	___wmul@multiplicand,c
  5911  0016DE  0E00               	movlw	0
  5912  0016E0  6E0A               	movwf	___awdiv@divisor+1,c
  5913  0016E2  0E0A               	movlw	10
  5914  0016E4  6E09               	movwf	___awdiv@divisor,c
  5915  0016E6  0E00               	movlw	0
  5916  0016E8  6E04               	movwf	___awmod@divisor+1,c
  5917  0016EA  0E64               	movlw	100
  5918  0016EC  6E03               	movwf	___awmod@divisor,c
  5919  0016EE  502A               	movf	scale@scl,w,c
  5920  0016F0  6E01               	movwf	___awmod@dividend,c
  5921  0016F2  6A02               	clrf	___awmod@dividend+1,c
  5922  0016F4  BE01               	btfsc	___awmod@dividend,7,c
  5923  0016F6  0602               	decf	___awmod@dividend+1,f,c
  5924  0016F8  EC88  F015         	call	___awmod	;wreg free
  5925  0016FC  C001  F007         	movff	?___awmod,___awdiv@dividend
  5926  001700  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  5927  001704  ECC6  F014         	call	___awdiv	;wreg free
  5928  001708  0E09               	movlw	9
  5929  00170A  2407               	addwf	?___awdiv,w,c
  5930  00170C  6E0F               	movwf	___wmul@multiplier,c
  5931  00170E  0E00               	movlw	0
  5932  001710  2008               	addwfc	?___awdiv+1,w,c
  5933  001712  6E10               	movwf	___wmul@multiplier+1,c
  5934  001714  EC19  F018         	call	___wmul	;wreg free
  5935  001718  0E50               	movlw	low __npowers_
  5936  00171A  240F               	addwf	?___wmul,w,c
  5937  00171C  6EF6               	movwf	tblptrl,c
  5938  00171E  0E0F               	movlw	high __npowers_
  5939  001720  2010               	addwfc	?___wmul+1,w,c
  5940  001722  6EF7               	movwf	tblptrh,c
  5941  001724                     	if	1	;There are 3 active tblptr bytes
  5942  001724  6AF8               	clrf	tblptru,c
  5943  001726  0E00               	movlw	low (__mediumconst shr (0+16))
  5944  001728  22F8               	addwfc	tblptru,f,c
  5945  00172A                     	endif
  5946  00172A  0009               	tblrd		*+
  5947  00172C  CFF5 F018          	movff	tablat,___ftmul@f2
  5948  001730  0009               	tblrd		*+
  5949  001732  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5950  001736  000A               	tblrd		*-
  5951  001738  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5952  00173C  0E00               	movlw	0
  5953  00173E  6E0A               	movwf	___awdiv@divisor+1,c
  5954  001740  0E64               	movlw	100
  5955  001742  6E09               	movwf	___awdiv@divisor,c
  5956  001744  502A               	movf	scale@scl,w,c
  5957  001746  6E07               	movwf	___awdiv@dividend,c
  5958  001748  6A08               	clrf	___awdiv@dividend+1,c
  5959  00174A  BE07               	btfsc	___awdiv@dividend,7,c
  5960  00174C  0608               	decf	___awdiv@dividend+1,f,c
  5961  00174E  ECC6  F014         	call	___awdiv	;wreg free
  5962  001752  0E12               	movlw	18
  5963  001754  2407               	addwf	?___awdiv,w,c
  5964  001756  6E0F               	movwf	___wmul@multiplier,c
  5965  001758  0E00               	movlw	0
  5966  00175A  2008               	addwfc	?___awdiv+1,w,c
  5967  00175C  6E10               	movwf	___wmul@multiplier+1,c
  5968  00175E  0E00               	movlw	0
  5969  001760  6E12               	movwf	___wmul@multiplicand+1,c
  5970  001762  0E03               	movlw	3
  5971  001764  6E11               	movwf	___wmul@multiplicand,c
  5972  001766  EC19  F018         	call	___wmul	;wreg free
  5973  00176A  0E50               	movlw	low __npowers_
  5974  00176C  240F               	addwf	?___wmul,w,c
  5975  00176E  6EF6               	movwf	tblptrl,c
  5976  001770  0E0F               	movlw	high __npowers_
  5977  001772  2010               	addwfc	?___wmul+1,w,c
  5978  001774  6EF7               	movwf	tblptrh,c
  5979  001776                     	if	1	;There are 3 active tblptr bytes
  5980  001776  6AF8               	clrf	tblptru,c
  5981  001778  0E00               	movlw	low (__mediumconst shr (0+16))
  5982  00177A  22F8               	addwfc	tblptru,f,c
  5983  00177C                     	endif
  5984  00177C  0009               	tblrd		*+
  5985  00177E  CFF5 F015          	movff	tablat,___ftmul@f1
  5986  001782  0009               	tblrd		*+
  5987  001784  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5988  001788  000A               	tblrd		*-
  5989  00178A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5990  00178E  EC58  F012         	call	___ftmul	;wreg free
  5991  001792  C015  F027         	movff	?___ftmul,_scale$2173
  5992  001796  C016  F028         	movff	?___ftmul+1,_scale$2173+1
  5993  00179A  C017  F029         	movff	?___ftmul+2,_scale$2173+2
  5994                           
  5995                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5996  00179E  C027  F015         	movff	_scale$2173,___ftmul@f1
  5997  0017A2  C028  F016         	movff	_scale$2173+1,___ftmul@f1+1
  5998  0017A6  C029  F017         	movff	_scale$2173+2,___ftmul@f1+2
  5999  0017AA  0E00               	movlw	0
  6000  0017AC  6E12               	movwf	___wmul@multiplicand+1,c
  6001  0017AE  0E03               	movlw	3
  6002  0017B0  6E11               	movwf	___wmul@multiplicand,c
  6003  0017B2  0E00               	movlw	0
  6004  0017B4  6E04               	movwf	___awmod@divisor+1,c
  6005  0017B6  0E0A               	movlw	10
  6006  0017B8  6E03               	movwf	___awmod@divisor,c
  6007  0017BA  502A               	movf	scale@scl,w,c
  6008  0017BC  6E01               	movwf	___awmod@dividend,c
  6009  0017BE  6A02               	clrf	___awmod@dividend+1,c
  6010  0017C0  BE01               	btfsc	___awmod@dividend,7,c
  6011  0017C2  0602               	decf	___awmod@dividend+1,f,c
  6012  0017C4  EC88  F015         	call	___awmod	;wreg free
  6013  0017C8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6014  0017CC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6015  0017D0  EC19  F018         	call	___wmul	;wreg free
  6016  0017D4  0E50               	movlw	low __npowers_
  6017  0017D6  240F               	addwf	?___wmul,w,c
  6018  0017D8  6EF6               	movwf	tblptrl,c
  6019  0017DA  0E0F               	movlw	high __npowers_
  6020  0017DC  2010               	addwfc	?___wmul+1,w,c
  6021  0017DE  6EF7               	movwf	tblptrh,c
  6022  0017E0                     	if	1	;There are 3 active tblptr bytes
  6023  0017E0  6AF8               	clrf	tblptru,c
  6024  0017E2  0E00               	movlw	low (__mediumconst shr (0+16))
  6025  0017E4  22F8               	addwfc	tblptru,f,c
  6026  0017E6                     	endif
  6027  0017E6  0009               	tblrd		*+
  6028  0017E8  CFF5 F018          	movff	tablat,___ftmul@f2
  6029  0017EC  0009               	tblrd		*+
  6030  0017EE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6031  0017F2  000A               	tblrd		*-
  6032  0017F4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6033  0017F8  EC58  F012         	call	___ftmul	;wreg free
  6034  0017FC  C015  F024         	movff	?___ftmul,?_scale
  6035  001800  C016  F025         	movff	?___ftmul+1,?_scale+1
  6036  001804  C017  F026         	movff	?___ftmul+2,?_scale+2
  6037  001808  0012               	return	
  6038  00180A                     i2l698:
  6039                           
  6040                           ;doprnt.c: 432: else if(scl > 10)
  6041  00180A  502A               	movf	scale@scl,w,c
  6042  00180C  0A80               	xorlw	128
  6043  00180E  0F75               	addlw	-139
  6044  001810  A0D8               	btfss	status,0,c
  6045  001812  D059               	goto	i2l701
  6046                           
  6047                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6048  001814  0E00               	movlw	0
  6049  001816  6E0A               	movwf	___awdiv@divisor+1,c
  6050  001818  0E0A               	movlw	10
  6051  00181A  6E09               	movwf	___awdiv@divisor,c
  6052  00181C  502A               	movf	scale@scl,w,c
  6053  00181E  6E07               	movwf	___awdiv@dividend,c
  6054  001820  6A08               	clrf	___awdiv@dividend+1,c
  6055  001822  BE07               	btfsc	___awdiv@dividend,7,c
  6056  001824  0608               	decf	___awdiv@dividend+1,f,c
  6057  001826  ECC6  F014         	call	___awdiv	;wreg free
  6058  00182A  0E09               	movlw	9
  6059  00182C  2407               	addwf	?___awdiv,w,c
  6060  00182E  6E0F               	movwf	___wmul@multiplier,c
  6061  001830  0E00               	movlw	0
  6062  001832  2008               	addwfc	?___awdiv+1,w,c
  6063  001834  6E10               	movwf	___wmul@multiplier+1,c
  6064  001836  0E00               	movlw	0
  6065  001838  6E12               	movwf	___wmul@multiplicand+1,c
  6066  00183A  0E03               	movlw	3
  6067  00183C  6E11               	movwf	___wmul@multiplicand,c
  6068  00183E  EC19  F018         	call	___wmul	;wreg free
  6069  001842  0E50               	movlw	low __npowers_
  6070  001844  240F               	addwf	?___wmul,w,c
  6071  001846  6EF6               	movwf	tblptrl,c
  6072  001848  0E0F               	movlw	high __npowers_
  6073  00184A  2010               	addwfc	?___wmul+1,w,c
  6074  00184C  6EF7               	movwf	tblptrh,c
  6075  00184E                     	if	1	;There are 3 active tblptr bytes
  6076  00184E  6AF8               	clrf	tblptru,c
  6077  001850  0E00               	movlw	low (__mediumconst shr (0+16))
  6078  001852  22F8               	addwfc	tblptru,f,c
  6079  001854                     	endif
  6080  001854  0009               	tblrd		*+
  6081  001856  CFF5 F015          	movff	tablat,___ftmul@f1
  6082  00185A  0009               	tblrd		*+
  6083  00185C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  6084  001860  000A               	tblrd		*-
  6085  001862  CFF5 F017          	movff	tablat,___ftmul@f1+2
  6086  001866  0E00               	movlw	0
  6087  001868  6E12               	movwf	___wmul@multiplicand+1,c
  6088  00186A  0E03               	movlw	3
  6089  00186C  6E11               	movwf	___wmul@multiplicand,c
  6090  00186E  0E00               	movlw	0
  6091  001870  6E04               	movwf	___awmod@divisor+1,c
  6092  001872  0E0A               	movlw	10
  6093  001874  6E03               	movwf	___awmod@divisor,c
  6094  001876  502A               	movf	scale@scl,w,c
  6095  001878  6E01               	movwf	___awmod@dividend,c
  6096  00187A  6A02               	clrf	___awmod@dividend+1,c
  6097  00187C  BE01               	btfsc	___awmod@dividend,7,c
  6098  00187E  0602               	decf	___awmod@dividend+1,f,c
  6099  001880  EC88  F015         	call	___awmod	;wreg free
  6100  001884  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6101  001888  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6102  00188C  EC19  F018         	call	___wmul	;wreg free
  6103  001890  0E50               	movlw	low __npowers_
  6104  001892  240F               	addwf	?___wmul,w,c
  6105  001894  6EF6               	movwf	tblptrl,c
  6106  001896  0E0F               	movlw	high __npowers_
  6107  001898  2010               	addwfc	?___wmul+1,w,c
  6108  00189A  6EF7               	movwf	tblptrh,c
  6109  00189C                     	if	1	;There are 3 active tblptr bytes
  6110  00189C  6AF8               	clrf	tblptru,c
  6111  00189E  0E00               	movlw	low (__mediumconst shr (0+16))
  6112  0018A0  22F8               	addwfc	tblptru,f,c
  6113  0018A2                     	endif
  6114  0018A2  0009               	tblrd		*+
  6115  0018A4  CFF5 F018          	movff	tablat,___ftmul@f2
  6116  0018A8  0009               	tblrd		*+
  6117  0018AA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6118  0018AE  000A               	tblrd		*-
  6119  0018B0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6120  0018B4  EC58  F012         	call	___ftmul	;wreg free
  6121  0018B8  C015  F024         	movff	?___ftmul,?_scale
  6122  0018BC  C016  F025         	movff	?___ftmul+1,?_scale+1
  6123  0018C0  C017  F026         	movff	?___ftmul+2,?_scale+2
  6124  0018C4  0012               	return	
  6125  0018C6                     i2l701:
  6126                           
  6127                           ;doprnt.c: 434: return _npowers_[scl];
  6128  0018C6  502A               	movf	scale@scl,w,c
  6129  0018C8  0D03               	mullw	3
  6130  0018CA  0E50               	movlw	low __npowers_
  6131  0018CC  24F3               	addwf	prodl,w,c
  6132  0018CE  6EF6               	movwf	tblptrl,c
  6133  0018D0  0E0F               	movlw	high __npowers_
  6134  0018D2  20F4               	addwfc	prodh,w,c
  6135  0018D4  6EF7               	movwf	tblptrh,c
  6136  0018D6                     	if	1	;There are 3 active tblptr bytes
  6137  0018D6  6AF8               	clrf	tblptru,c
  6138  0018D8  0E00               	movlw	low (__mediumconst shr (0+16))
  6139  0018DA  22F8               	addwfc	tblptru,f,c
  6140  0018DC                     	endif
  6141  0018DC  0009               	tblrd		*+
  6142  0018DE  CFF5 F024          	movff	tablat,?_scale
  6143  0018E2  0009               	tblrd		*+
  6144  0018E4  CFF5 F025          	movff	tablat,?_scale+1
  6145  0018E8  000A               	tblrd		*-
  6146  0018EA  CFF5 F026          	movff	tablat,?_scale+2
  6147  0018EE  0012               	return	
  6148  0018F0                     i2l697:
  6149                           
  6150                           ;doprnt.c: 435: }
  6151                           ;doprnt.c: 436: if(scl>=110)
  6152  0018F0  502A               	movf	scale@scl,w,c
  6153  0018F2  0A80               	xorlw	128
  6154  0018F4  0F12               	addlw	-238
  6155  0018F6  A0D8               	btfss	status,0,c
  6156  0018F8  D09A               	goto	i2l702
  6157                           
  6158                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6159  0018FA  0E00               	movlw	0
  6160  0018FC  6E12               	movwf	___wmul@multiplicand+1,c
  6161  0018FE  0E03               	movlw	3
  6162  001900  6E11               	movwf	___wmul@multiplicand,c
  6163  001902  0E00               	movlw	0
  6164  001904  6E0A               	movwf	___awdiv@divisor+1,c
  6165  001906  0E0A               	movlw	10
  6166  001908  6E09               	movwf	___awdiv@divisor,c
  6167  00190A  0E00               	movlw	0
  6168  00190C  6E04               	movwf	___awmod@divisor+1,c
  6169  00190E  0E64               	movlw	100
  6170  001910  6E03               	movwf	___awmod@divisor,c
  6171  001912  502A               	movf	scale@scl,w,c
  6172  001914  6E01               	movwf	___awmod@dividend,c
  6173  001916  6A02               	clrf	___awmod@dividend+1,c
  6174  001918  BE01               	btfsc	___awmod@dividend,7,c
  6175  00191A  0602               	decf	___awmod@dividend+1,f,c
  6176  00191C  EC88  F015         	call	___awmod	;wreg free
  6177  001920  C001  F007         	movff	?___awmod,___awdiv@dividend
  6178  001924  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  6179  001928  ECC6  F014         	call	___awdiv	;wreg free
  6180  00192C  0E09               	movlw	9
  6181  00192E  2407               	addwf	?___awdiv,w,c
  6182  001930  6E0F               	movwf	___wmul@multiplier,c
  6183  001932  0E00               	movlw	0
  6184  001934  2008               	addwfc	?___awdiv+1,w,c
  6185  001936  6E10               	movwf	___wmul@multiplier+1,c
  6186  001938  EC19  F018         	call	___wmul	;wreg free
  6187  00193C  0E29               	movlw	low __powers_
  6188  00193E  240F               	addwf	?___wmul,w,c
  6189  001940  6EF6               	movwf	tblptrl,c
  6190  001942  0E0F               	movlw	high __powers_
  6191  001944  2010               	addwfc	?___wmul+1,w,c
  6192  001946  6EF7               	movwf	tblptrh,c
  6193  001948                     	if	1	;There are 3 active tblptr bytes
  6194  001948  6AF8               	clrf	tblptru,c
  6195  00194A  0E00               	movlw	low (__mediumconst shr (0+16))
  6196  00194C  22F8               	addwfc	tblptru,f,c
  6197  00194E                     	endif
  6198  00194E  0009               	tblrd		*+
  6199  001950  CFF5 F018          	movff	tablat,___ftmul@f2
  6200  001954  0009               	tblrd		*+
  6201  001956  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6202  00195A  000A               	tblrd		*-
  6203  00195C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6204  001960  0E00               	movlw	0
  6205  001962  6E0A               	movwf	___awdiv@divisor+1,c
  6206  001964  0E64               	movlw	100
  6207  001966  6E09               	movwf	___awdiv@divisor,c
  6208  001968  502A               	movf	scale@scl,w,c
  6209  00196A  6E07               	movwf	___awdiv@dividend,c
  6210  00196C  6A08               	clrf	___awdiv@dividend+1,c
  6211  00196E  BE07               	btfsc	___awdiv@dividend,7,c
  6212  001970  0608               	decf	___awdiv@dividend+1,f,c
  6213  001972  ECC6  F014         	call	___awdiv	;wreg free
  6214  001976  0E12               	movlw	18
  6215  001978  2407               	addwf	?___awdiv,w,c
  6216  00197A  6E0F               	movwf	___wmul@multiplier,c
  6217  00197C  0E00               	movlw	0
  6218  00197E  2008               	addwfc	?___awdiv+1,w,c
  6219  001980  6E10               	movwf	___wmul@multiplier+1,c
  6220  001982  0E00               	movlw	0
  6221  001984  6E12               	movwf	___wmul@multiplicand+1,c
  6222  001986  0E03               	movlw	3
  6223  001988  6E11               	movwf	___wmul@multiplicand,c
  6224  00198A  EC19  F018         	call	___wmul	;wreg free
  6225  00198E  0E29               	movlw	low __powers_
  6226  001990  240F               	addwf	?___wmul,w,c
  6227  001992  6EF6               	movwf	tblptrl,c
  6228  001994  0E0F               	movlw	high __powers_
  6229  001996  2010               	addwfc	?___wmul+1,w,c
  6230  001998  6EF7               	movwf	tblptrh,c
  6231  00199A                     	if	1	;There are 3 active tblptr bytes
  6232  00199A  6AF8               	clrf	tblptru,c
  6233  00199C  0E00               	movlw	low (__mediumconst shr (0+16))
  6234  00199E  22F8               	addwfc	tblptru,f,c
  6235  0019A0                     	endif
  6236  0019A0  0009               	tblrd		*+
  6237  0019A2  CFF5 F015          	movff	tablat,___ftmul@f1
  6238  0019A6  0009               	tblrd		*+
  6239  0019A8  CFF5 F016          	movff	tablat,___ftmul@f1+1
  6240  0019AC  000A               	tblrd		*-
  6241  0019AE  CFF5 F017          	movff	tablat,___ftmul@f1+2
  6242  0019B2  EC58  F012         	call	___ftmul	;wreg free
  6243  0019B6  C015  F027         	movff	?___ftmul,_scale$2173
  6244  0019BA  C016  F028         	movff	?___ftmul+1,_scale$2173+1
  6245  0019BE  C017  F029         	movff	?___ftmul+2,_scale$2173+2
  6246                           
  6247                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6248  0019C2  C027  F015         	movff	_scale$2173,___ftmul@f1
  6249  0019C6  C028  F016         	movff	_scale$2173+1,___ftmul@f1+1
  6250  0019CA  C029  F017         	movff	_scale$2173+2,___ftmul@f1+2
  6251  0019CE  0E00               	movlw	0
  6252  0019D0  6E12               	movwf	___wmul@multiplicand+1,c
  6253  0019D2  0E03               	movlw	3
  6254  0019D4  6E11               	movwf	___wmul@multiplicand,c
  6255  0019D6  0E00               	movlw	0
  6256  0019D8  6E04               	movwf	___awmod@divisor+1,c
  6257  0019DA  0E0A               	movlw	10
  6258  0019DC  6E03               	movwf	___awmod@divisor,c
  6259  0019DE  502A               	movf	scale@scl,w,c
  6260  0019E0  6E01               	movwf	___awmod@dividend,c
  6261  0019E2  6A02               	clrf	___awmod@dividend+1,c
  6262  0019E4  BE01               	btfsc	___awmod@dividend,7,c
  6263  0019E6  0602               	decf	___awmod@dividend+1,f,c
  6264  0019E8  EC88  F015         	call	___awmod	;wreg free
  6265  0019EC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6266  0019F0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6267  0019F4  EC19  F018         	call	___wmul	;wreg free
  6268  0019F8  0E29               	movlw	low __powers_
  6269  0019FA  240F               	addwf	?___wmul,w,c
  6270  0019FC  6EF6               	movwf	tblptrl,c
  6271  0019FE  0E0F               	movlw	high __powers_
  6272  001A00  2010               	addwfc	?___wmul+1,w,c
  6273  001A02  6EF7               	movwf	tblptrh,c
  6274  001A04                     	if	1	;There are 3 active tblptr bytes
  6275  001A04  6AF8               	clrf	tblptru,c
  6276  001A06  0E00               	movlw	low (__mediumconst shr (0+16))
  6277  001A08  22F8               	addwfc	tblptru,f,c
  6278  001A0A                     	endif
  6279  001A0A  0009               	tblrd		*+
  6280  001A0C  CFF5 F018          	movff	tablat,___ftmul@f2
  6281  001A10  0009               	tblrd		*+
  6282  001A12  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6283  001A16  000A               	tblrd		*-
  6284  001A18  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6285  001A1C  EC58  F012         	call	___ftmul	;wreg free
  6286  001A20  C015  F024         	movff	?___ftmul,?_scale
  6287  001A24  C016  F025         	movff	?___ftmul+1,?_scale+1
  6288  001A28  C017  F026         	movff	?___ftmul+2,?_scale+2
  6289  001A2C  0012               	return	
  6290  001A2E                     i2l702:
  6291                           
  6292                           ;doprnt.c: 438: else if(scl > 10)
  6293  001A2E  502A               	movf	scale@scl,w,c
  6294  001A30  0A80               	xorlw	128
  6295  001A32  0F75               	addlw	-139
  6296  001A34  A0D8               	btfss	status,0,c
  6297  001A36  D059               	goto	i2l704
  6298                           
  6299                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6300  001A38  0E00               	movlw	0
  6301  001A3A  6E0A               	movwf	___awdiv@divisor+1,c
  6302  001A3C  0E0A               	movlw	10
  6303  001A3E  6E09               	movwf	___awdiv@divisor,c
  6304  001A40  502A               	movf	scale@scl,w,c
  6305  001A42  6E07               	movwf	___awdiv@dividend,c
  6306  001A44  6A08               	clrf	___awdiv@dividend+1,c
  6307  001A46  BE07               	btfsc	___awdiv@dividend,7,c
  6308  001A48  0608               	decf	___awdiv@dividend+1,f,c
  6309  001A4A  ECC6  F014         	call	___awdiv	;wreg free
  6310  001A4E  0E09               	movlw	9
  6311  001A50  2407               	addwf	?___awdiv,w,c
  6312  001A52  6E0F               	movwf	___wmul@multiplier,c
  6313  001A54  0E00               	movlw	0
  6314  001A56  2008               	addwfc	?___awdiv+1,w,c
  6315  001A58  6E10               	movwf	___wmul@multiplier+1,c
  6316  001A5A  0E00               	movlw	0
  6317  001A5C  6E12               	movwf	___wmul@multiplicand+1,c
  6318  001A5E  0E03               	movlw	3
  6319  001A60  6E11               	movwf	___wmul@multiplicand,c
  6320  001A62  EC19  F018         	call	___wmul	;wreg free
  6321  001A66  0E29               	movlw	low __powers_
  6322  001A68  240F               	addwf	?___wmul,w,c
  6323  001A6A  6EF6               	movwf	tblptrl,c
  6324  001A6C  0E0F               	movlw	high __powers_
  6325  001A6E  2010               	addwfc	?___wmul+1,w,c
  6326  001A70  6EF7               	movwf	tblptrh,c
  6327  001A72                     	if	1	;There are 3 active tblptr bytes
  6328  001A72  6AF8               	clrf	tblptru,c
  6329  001A74  0E00               	movlw	low (__mediumconst shr (0+16))
  6330  001A76  22F8               	addwfc	tblptru,f,c
  6331  001A78                     	endif
  6332  001A78  0009               	tblrd		*+
  6333  001A7A  CFF5 F015          	movff	tablat,___ftmul@f1
  6334  001A7E  0009               	tblrd		*+
  6335  001A80  CFF5 F016          	movff	tablat,___ftmul@f1+1
  6336  001A84  000A               	tblrd		*-
  6337  001A86  CFF5 F017          	movff	tablat,___ftmul@f1+2
  6338  001A8A  0E00               	movlw	0
  6339  001A8C  6E12               	movwf	___wmul@multiplicand+1,c
  6340  001A8E  0E03               	movlw	3
  6341  001A90  6E11               	movwf	___wmul@multiplicand,c
  6342  001A92  0E00               	movlw	0
  6343  001A94  6E04               	movwf	___awmod@divisor+1,c
  6344  001A96  0E0A               	movlw	10
  6345  001A98  6E03               	movwf	___awmod@divisor,c
  6346  001A9A  502A               	movf	scale@scl,w,c
  6347  001A9C  6E01               	movwf	___awmod@dividend,c
  6348  001A9E  6A02               	clrf	___awmod@dividend+1,c
  6349  001AA0  BE01               	btfsc	___awmod@dividend,7,c
  6350  001AA2  0602               	decf	___awmod@dividend+1,f,c
  6351  001AA4  EC88  F015         	call	___awmod	;wreg free
  6352  001AA8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6353  001AAC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6354  001AB0  EC19  F018         	call	___wmul	;wreg free
  6355  001AB4  0E29               	movlw	low __powers_
  6356  001AB6  240F               	addwf	?___wmul,w,c
  6357  001AB8  6EF6               	movwf	tblptrl,c
  6358  001ABA  0E0F               	movlw	high __powers_
  6359  001ABC  2010               	addwfc	?___wmul+1,w,c
  6360  001ABE  6EF7               	movwf	tblptrh,c
  6361  001AC0                     	if	1	;There are 3 active tblptr bytes
  6362  001AC0  6AF8               	clrf	tblptru,c
  6363  001AC2  0E00               	movlw	low (__mediumconst shr (0+16))
  6364  001AC4  22F8               	addwfc	tblptru,f,c
  6365  001AC6                     	endif
  6366  001AC6  0009               	tblrd		*+
  6367  001AC8  CFF5 F018          	movff	tablat,___ftmul@f2
  6368  001ACC  0009               	tblrd		*+
  6369  001ACE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6370  001AD2  000A               	tblrd		*-
  6371  001AD4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6372  001AD8  EC58  F012         	call	___ftmul	;wreg free
  6373  001ADC  C015  F024         	movff	?___ftmul,?_scale
  6374  001AE0  C016  F025         	movff	?___ftmul+1,?_scale+1
  6375  001AE4  C017  F026         	movff	?___ftmul+2,?_scale+2
  6376  001AE8  0012               	return	
  6377  001AEA                     i2l704:
  6378                           
  6379                           ;doprnt.c: 440: return _powers_[scl];
  6380  001AEA  502A               	movf	scale@scl,w,c
  6381  001AEC  0D03               	mullw	3
  6382  001AEE  0E29               	movlw	low __powers_
  6383  001AF0  24F3               	addwf	prodl,w,c
  6384  001AF2  6EF6               	movwf	tblptrl,c
  6385  001AF4  0E0F               	movlw	high __powers_
  6386  001AF6  20F4               	addwfc	prodh,w,c
  6387  001AF8  6EF7               	movwf	tblptrh,c
  6388  001AFA                     	if	1	;There are 3 active tblptr bytes
  6389  001AFA  6AF8               	clrf	tblptru,c
  6390  001AFC  0E00               	movlw	low (__mediumconst shr (0+16))
  6391  001AFE  22F8               	addwfc	tblptru,f,c
  6392  001B00                     	endif
  6393  001B00  0009               	tblrd		*+
  6394  001B02  CFF5 F024          	movff	tablat,?_scale
  6395  001B06  0009               	tblrd		*+
  6396  001B08  CFF5 F025          	movff	tablat,?_scale+1
  6397  001B0C  000A               	tblrd		*-
  6398  001B0E  CFF5 F026          	movff	tablat,?_scale+2
  6399  001B12  0012               	return	
  6400  001B14                     __end_of_scale:
  6401                           	opt stack 0
  6402                           tosu	equ	0xFFF
  6403                           tosh	equ	0xFFE
  6404                           tosl	equ	0xFFD
  6405                           pclatu	equ	0xFFB
  6406                           pclath	equ	0xFFA
  6407                           tblptru	equ	0xFF8
  6408                           tblptrh	equ	0xFF7
  6409                           tblptrl	equ	0xFF6
  6410                           tablat	equ	0xFF5
  6411                           prodh	equ	0xFF4
  6412                           prodl	equ	0xFF3
  6413                           intcon	equ	0xFF2
  6414                           indf0	equ	0xFEF
  6415                           postinc0	equ	0xFEE
  6416                           fsr0h	equ	0xFEA
  6417                           fsr0l	equ	0xFE9
  6418                           wreg	equ	0xFE8
  6419                           postdec1	equ	0xFE5
  6420                           fsr1h	equ	0xFE2
  6421                           fsr1l	equ	0xFE1
  6422                           indf2	equ	0xFDF
  6423                           postinc2	equ	0xFDE
  6424                           postdec2	equ	0xFDD
  6425                           fsr2h	equ	0xFDA
  6426                           fsr2l	equ	0xFD9
  6427                           status	equ	0xFD8
  6428                           
  6429 ;; *************** function _isdigit *****************
  6430 ;; Defined at:
  6431 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  6432 ;; Parameters:    Size  Location     Type
  6433 ;;  c               1    wreg     unsigned char 
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;  c               1    2[COMRAM] unsigned char 
  6436 ;; Return value:  Size  Location     Type
  6437 ;;		None               void
  6438 ;; Registers used:
  6439 ;;		wreg, status,2, status,0
  6440 ;; Tracked objects:
  6441 ;;		On entry : 0/0
  6442 ;;		On exit  : 0/0
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6446 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6447 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6448 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6449 ;;Total ram usage:        3 bytes
  6450 ;; Hardware stack levels used:    1
  6451 ;; This function calls:
  6452 ;;		Nothing
  6453 ;; This function is called by:
  6454 ;;		_sprintf
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           	psect	text38
  6459  00312A                     __ptext38:
  6460                           	opt stack 0
  6461  00312A                     _isdigit:
  6462                           	opt stack 18
  6463                           
  6464                           ;incstack = 0
  6465                           ;isdigit@c stored from wreg
  6466  00312A  6E03               	movwf	isdigit@c,c
  6467  00312C  0E00               	movlw	0
  6468  00312E  6E02               	movwf	_isdigit$1691,c
  6469  003130  0E3A               	movlw	58
  6470  003132  6003               	cpfslt	isdigit@c,c
  6471  003134  D005               	goto	i2l1129
  6472  003136  0E2F               	movlw	47
  6473  003138  6403               	cpfsgt	isdigit@c,c
  6474  00313A  D002               	goto	i2l1129
  6475  00313C  0E01               	movlw	1
  6476  00313E  6E02               	movwf	_isdigit$1691,c
  6477  003140                     i2l1129:
  6478  003140  C002  F001         	movff	_isdigit$1691,??_isdigit
  6479  003144  3001               	rrcf	??_isdigit,w,c
  6480  003146  0012               	return	
  6481  003148                     __end_of_isdigit:
  6482                           	opt stack 0
  6483                           tosu	equ	0xFFF
  6484                           tosh	equ	0xFFE
  6485                           tosl	equ	0xFFD
  6486                           pclatu	equ	0xFFB
  6487                           pclath	equ	0xFFA
  6488                           tblptru	equ	0xFF8
  6489                           tblptrh	equ	0xFF7
  6490                           tblptrl	equ	0xFF6
  6491                           tablat	equ	0xFF5
  6492                           prodh	equ	0xFF4
  6493                           prodl	equ	0xFF3
  6494                           intcon	equ	0xFF2
  6495                           indf0	equ	0xFEF
  6496                           postinc0	equ	0xFEE
  6497                           fsr0h	equ	0xFEA
  6498                           fsr0l	equ	0xFE9
  6499                           wreg	equ	0xFE8
  6500                           postdec1	equ	0xFE5
  6501                           fsr1h	equ	0xFE2
  6502                           fsr1l	equ	0xFE1
  6503                           indf2	equ	0xFDF
  6504                           postinc2	equ	0xFDE
  6505                           postdec2	equ	0xFDD
  6506                           fsr2h	equ	0xFDA
  6507                           fsr2l	equ	0xFD9
  6508                           status	equ	0xFD8
  6509                           
  6510 ;; *************** function _fround *****************
  6511 ;; Defined at:
  6512 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  6513 ;; Parameters:    Size  Location     Type
  6514 ;;  prec            1    wreg     unsigned char 
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;  prec            1   44[COMRAM] unsigned char 
  6517 ;; Return value:  Size  Location     Type
  6518 ;;                  3   35[COMRAM] unsigned char 
  6519 ;; Registers used:
  6520 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6526 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6527 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6529 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6530 ;;Total ram usage:       10 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:    2
  6533 ;; This function calls:
  6534 ;;		___awdiv
  6535 ;;		___awmod
  6536 ;;		___ftmul
  6537 ;;		___wmul
  6538 ;; This function is called by:
  6539 ;;		_sprintf
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           	psect	text39
  6544  001B14                     __ptext39:
  6545                           	opt stack 0
  6546  001B14                     _fround:
  6547                           	opt stack 16
  6548                           
  6549                           ;incstack = 0
  6550                           ;fround@prec stored from wreg
  6551  001B14  6E2D               	movwf	fround@prec,c
  6552                           
  6553                           ;doprnt.c: 413: if(prec>=110)
  6554  001B16  0E6D               	movlw	109
  6555  001B18  642D               	cpfsgt	fround@prec,c
  6556  001B1A  D0A8               	goto	i2l691
  6557                           
  6558                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6559  001B1C  0E00               	movlw	0
  6560  001B1E  6E12               	movwf	___wmul@multiplicand+1,c
  6561  001B20  0E03               	movlw	3
  6562  001B22  6E11               	movwf	___wmul@multiplicand,c
  6563  001B24  0E00               	movlw	0
  6564  001B26  6E0A               	movwf	___awdiv@divisor+1,c
  6565  001B28  0E0A               	movlw	10
  6566  001B2A  6E09               	movwf	___awdiv@divisor,c
  6567  001B2C  0E00               	movlw	0
  6568  001B2E  6E04               	movwf	___awmod@divisor+1,c
  6569  001B30  0E64               	movlw	100
  6570  001B32  6E03               	movwf	___awmod@divisor,c
  6571  001B34  C02D  F001         	movff	fround@prec,___awmod@dividend
  6572  001B38  6A02               	clrf	___awmod@dividend+1,c
  6573  001B3A  EC88  F015         	call	___awmod	;wreg free
  6574  001B3E  C001  F007         	movff	?___awmod,___awdiv@dividend
  6575  001B42  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  6576  001B46  ECC6  F014         	call	___awdiv	;wreg free
  6577  001B4A  0E09               	movlw	9
  6578  001B4C  2407               	addwf	?___awdiv,w,c
  6579  001B4E  6E0F               	movwf	___wmul@multiplier,c
  6580  001B50  0E00               	movlw	0
  6581  001B52  2008               	addwfc	?___awdiv+1,w,c
  6582  001B54  6E10               	movwf	___wmul@multiplier+1,c
  6583  001B56  EC19  F018         	call	___wmul	;wreg free
  6584  001B5A  0E50               	movlw	low __npowers_
  6585  001B5C  240F               	addwf	?___wmul,w,c
  6586  001B5E  6EF6               	movwf	tblptrl,c
  6587  001B60  0E0F               	movlw	high __npowers_
  6588  001B62  2010               	addwfc	?___wmul+1,w,c
  6589  001B64  6EF7               	movwf	tblptrh,c
  6590  001B66                     	if	1	;There are 3 active tblptr bytes
  6591  001B66  6AF8               	clrf	tblptru,c
  6592  001B68  0E00               	movlw	low (__mediumconst shr (0+16))
  6593  001B6A  22F8               	addwfc	tblptru,f,c
  6594  001B6C                     	endif
  6595  001B6C  0009               	tblrd		*+
  6596  001B6E  CFF5 F018          	movff	tablat,___ftmul@f2
  6597  001B72  0009               	tblrd		*+
  6598  001B74  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6599  001B78  000A               	tblrd		*-
  6600  001B7A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6601  001B7E  0E00               	movlw	0
  6602  001B80  6E0A               	movwf	___awdiv@divisor+1,c
  6603  001B82  0E64               	movlw	100
  6604  001B84  6E09               	movwf	___awdiv@divisor,c
  6605  001B86  C02D  F007         	movff	fround@prec,___awdiv@dividend
  6606  001B8A  6A08               	clrf	___awdiv@dividend+1,c
  6607  001B8C  ECC6  F014         	call	___awdiv	;wreg free
  6608  001B90  0E12               	movlw	18
  6609  001B92  2407               	addwf	?___awdiv,w,c
  6610  001B94  6E0F               	movwf	___wmul@multiplier,c
  6611  001B96  0E00               	movlw	0
  6612  001B98  2008               	addwfc	?___awdiv+1,w,c
  6613  001B9A  6E10               	movwf	___wmul@multiplier+1,c
  6614  001B9C  0E00               	movlw	0
  6615  001B9E  6E12               	movwf	___wmul@multiplicand+1,c
  6616  001BA0  0E03               	movlw	3
  6617  001BA2  6E11               	movwf	___wmul@multiplicand,c
  6618  001BA4  EC19  F018         	call	___wmul	;wreg free
  6619  001BA8  0E50               	movlw	low __npowers_
  6620  001BAA  240F               	addwf	?___wmul,w,c
  6621  001BAC  6EF6               	movwf	tblptrl,c
  6622  001BAE  0E0F               	movlw	high __npowers_
  6623  001BB0  2010               	addwfc	?___wmul+1,w,c
  6624  001BB2  6EF7               	movwf	tblptrh,c
  6625  001BB4                     	if	1	;There are 3 active tblptr bytes
  6626  001BB4  6AF8               	clrf	tblptru,c
  6627  001BB6  0E00               	movlw	low (__mediumconst shr (0+16))
  6628  001BB8  22F8               	addwfc	tblptru,f,c
  6629  001BBA                     	endif
  6630  001BBA  0009               	tblrd		*+
  6631  001BBC  CFF5 F015          	movff	tablat,___ftmul@f1
  6632  001BC0  0009               	tblrd		*+
  6633  001BC2  CFF5 F016          	movff	tablat,___ftmul@f1+1
  6634  001BC6  000A               	tblrd		*-
  6635  001BC8  CFF5 F017          	movff	tablat,___ftmul@f1+2
  6636  001BCC  EC58  F012         	call	___ftmul	;wreg free
  6637  001BD0  C015  F02A         	movff	?___ftmul,_fround$2171
  6638  001BD4  C016  F02B         	movff	?___ftmul+1,_fround$2171+1
  6639  001BD8  C017  F02C         	movff	?___ftmul+2,_fround$2171+2
  6640                           
  6641                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6642  001BDC  0E00               	movlw	0
  6643  001BDE  6E12               	movwf	___wmul@multiplicand+1,c
  6644  001BE0  0E03               	movlw	3
  6645  001BE2  6E11               	movwf	___wmul@multiplicand,c
  6646  001BE4  0E00               	movlw	0
  6647  001BE6  6E04               	movwf	___awmod@divisor+1,c
  6648  001BE8  0E0A               	movlw	10
  6649  001BEA  6E03               	movwf	___awmod@divisor,c
  6650  001BEC  C02D  F001         	movff	fround@prec,___awmod@dividend
  6651  001BF0  6A02               	clrf	___awmod@dividend+1,c
  6652  001BF2  EC88  F015         	call	___awmod	;wreg free
  6653  001BF6  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6654  001BFA  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6655  001BFE  EC19  F018         	call	___wmul	;wreg free
  6656  001C02  0E50               	movlw	low __npowers_
  6657  001C04  240F               	addwf	?___wmul,w,c
  6658  001C06  6EF6               	movwf	tblptrl,c
  6659  001C08  0E0F               	movlw	high __npowers_
  6660  001C0A  2010               	addwfc	?___wmul+1,w,c
  6661  001C0C  6EF7               	movwf	tblptrh,c
  6662  001C0E                     	if	1	;There are 3 active tblptr bytes
  6663  001C0E  6AF8               	clrf	tblptru,c
  6664  001C10  0E00               	movlw	low (__mediumconst shr (0+16))
  6665  001C12  22F8               	addwfc	tblptru,f,c
  6666  001C14                     	endif
  6667  001C14  0009               	tblrd		*+
  6668  001C16  CFF5 F018          	movff	tablat,___ftmul@f2
  6669  001C1A  0009               	tblrd		*+
  6670  001C1C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6671  001C20  000A               	tblrd		*-
  6672  001C22  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6673  001C26  C02A  F015         	movff	_fround$2171,___ftmul@f1
  6674  001C2A  C02B  F016         	movff	_fround$2171+1,___ftmul@f1+1
  6675  001C2E  C02C  F017         	movff	_fround$2171+2,___ftmul@f1+2
  6676  001C32  EC58  F012         	call	___ftmul	;wreg free
  6677  001C36  C015  F027         	movff	?___ftmul,_fround$2172
  6678  001C3A  C016  F028         	movff	?___ftmul+1,_fround$2172+1
  6679  001C3E  C017  F029         	movff	?___ftmul+2,_fround$2172+2
  6680                           
  6681                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6682  001C42  C027  F015         	movff	_fround$2172,___ftmul@f1
  6683  001C46  C028  F016         	movff	_fround$2172+1,___ftmul@f1+1
  6684  001C4A  C029  F017         	movff	_fround$2172+2,___ftmul@f1+2
  6685  001C4E  0E00               	movlw	0
  6686  001C50  6E18               	movwf	___ftmul@f2,c
  6687  001C52  0E00               	movlw	0
  6688  001C54  6E19               	movwf	___ftmul@f2+1,c
  6689  001C56  0E3F               	movlw	63
  6690  001C58  6E1A               	movwf	___ftmul@f2+2,c
  6691  001C5A  EC58  F012         	call	___ftmul	;wreg free
  6692  001C5E  C015  F024         	movff	?___ftmul,?_fround
  6693  001C62  C016  F025         	movff	?___ftmul+1,?_fround+1
  6694  001C66  C017  F026         	movff	?___ftmul+2,?_fround+2
  6695  001C6A  0012               	return	
  6696  001C6C                     i2l691:
  6697                           
  6698                           ;doprnt.c: 415: else if(prec > 10)
  6699  001C6C  0E0A               	movlw	10
  6700  001C6E  642D               	cpfsgt	fround@prec,c
  6701  001C70  D069               	goto	i2l694
  6702                           
  6703                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6704  001C72  0E00               	movlw	0
  6705  001C74  6E12               	movwf	___wmul@multiplicand+1,c
  6706  001C76  0E03               	movlw	3
  6707  001C78  6E11               	movwf	___wmul@multiplicand,c
  6708  001C7A  0E00               	movlw	0
  6709  001C7C  6E04               	movwf	___awmod@divisor+1,c
  6710  001C7E  0E0A               	movlw	10
  6711  001C80  6E03               	movwf	___awmod@divisor,c
  6712  001C82  C02D  F001         	movff	fround@prec,___awmod@dividend
  6713  001C86  6A02               	clrf	___awmod@dividend+1,c
  6714  001C88  EC88  F015         	call	___awmod	;wreg free
  6715  001C8C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  6716  001C90  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  6717  001C94  EC19  F018         	call	___wmul	;wreg free
  6718  001C98  0E50               	movlw	low __npowers_
  6719  001C9A  240F               	addwf	?___wmul,w,c
  6720  001C9C  6EF6               	movwf	tblptrl,c
  6721  001C9E  0E0F               	movlw	high __npowers_
  6722  001CA0  2010               	addwfc	?___wmul+1,w,c
  6723  001CA2  6EF7               	movwf	tblptrh,c
  6724  001CA4                     	if	1	;There are 3 active tblptr bytes
  6725  001CA4  6AF8               	clrf	tblptru,c
  6726  001CA6  0E00               	movlw	low (__mediumconst shr (0+16))
  6727  001CA8  22F8               	addwfc	tblptru,f,c
  6728  001CAA                     	endif
  6729  001CAA  0009               	tblrd		*+
  6730  001CAC  CFF5 F018          	movff	tablat,___ftmul@f2
  6731  001CB0  0009               	tblrd		*+
  6732  001CB2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  6733  001CB6  000A               	tblrd		*-
  6734  001CB8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  6735  001CBC  0E00               	movlw	0
  6736  001CBE  6E0A               	movwf	___awdiv@divisor+1,c
  6737  001CC0  0E0A               	movlw	10
  6738  001CC2  6E09               	movwf	___awdiv@divisor,c
  6739  001CC4  C02D  F007         	movff	fround@prec,___awdiv@dividend
  6740  001CC8  6A08               	clrf	___awdiv@dividend+1,c
  6741  001CCA  ECC6  F014         	call	___awdiv	;wreg free
  6742  001CCE  0E09               	movlw	9
  6743  001CD0  2407               	addwf	?___awdiv,w,c
  6744  001CD2  6E0F               	movwf	___wmul@multiplier,c
  6745  001CD4  0E00               	movlw	0
  6746  001CD6  2008               	addwfc	?___awdiv+1,w,c
  6747  001CD8  6E10               	movwf	___wmul@multiplier+1,c
  6748  001CDA  0E00               	movlw	0
  6749  001CDC  6E12               	movwf	___wmul@multiplicand+1,c
  6750  001CDE  0E03               	movlw	3
  6751  001CE0  6E11               	movwf	___wmul@multiplicand,c
  6752  001CE2  EC19  F018         	call	___wmul	;wreg free
  6753  001CE6  0E50               	movlw	low __npowers_
  6754  001CE8  240F               	addwf	?___wmul,w,c
  6755  001CEA  6EF6               	movwf	tblptrl,c
  6756  001CEC  0E0F               	movlw	high __npowers_
  6757  001CEE  2010               	addwfc	?___wmul+1,w,c
  6758  001CF0  6EF7               	movwf	tblptrh,c
  6759  001CF2                     	if	1	;There are 3 active tblptr bytes
  6760  001CF2  6AF8               	clrf	tblptru,c
  6761  001CF4  0E00               	movlw	low (__mediumconst shr (0+16))
  6762  001CF6  22F8               	addwfc	tblptru,f,c
  6763  001CF8                     	endif
  6764  001CF8  0009               	tblrd		*+
  6765  001CFA  CFF5 F015          	movff	tablat,___ftmul@f1
  6766  001CFE  0009               	tblrd		*+
  6767  001D00  CFF5 F016          	movff	tablat,___ftmul@f1+1
  6768  001D04  000A               	tblrd		*-
  6769  001D06  CFF5 F017          	movff	tablat,___ftmul@f1+2
  6770  001D0A  EC58  F012         	call	___ftmul	;wreg free
  6771  001D0E  C015  F02A         	movff	?___ftmul,_fround$2171
  6772  001D12  C016  F02B         	movff	?___ftmul+1,_fround$2171+1
  6773  001D16  C017  F02C         	movff	?___ftmul+2,_fround$2171+2
  6774                           
  6775                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6776  001D1A  C02A  F015         	movff	_fround$2171,___ftmul@f1
  6777  001D1E  C02B  F016         	movff	_fround$2171+1,___ftmul@f1+1
  6778  001D22  C02C  F017         	movff	_fround$2171+2,___ftmul@f1+2
  6779  001D26  0E00               	movlw	0
  6780  001D28  6E18               	movwf	___ftmul@f2,c
  6781  001D2A  0E00               	movlw	0
  6782  001D2C  6E19               	movwf	___ftmul@f2+1,c
  6783  001D2E  0E3F               	movlw	63
  6784  001D30  6E1A               	movwf	___ftmul@f2+2,c
  6785  001D32  EC58  F012         	call	___ftmul	;wreg free
  6786  001D36  C015  F024         	movff	?___ftmul,?_fround
  6787  001D3A  C016  F025         	movff	?___ftmul+1,?_fround+1
  6788  001D3E  C017  F026         	movff	?___ftmul+2,?_fround+2
  6789  001D42  0012               	return	
  6790  001D44                     i2l694:
  6791                           
  6792                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6793  001D44  502D               	movf	fround@prec,w,c
  6794  001D46  0D03               	mullw	3
  6795  001D48  0E50               	movlw	low __npowers_
  6796  001D4A  24F3               	addwf	prodl,w,c
  6797  001D4C  6EF6               	movwf	tblptrl,c
  6798  001D4E  0E0F               	movlw	high __npowers_
  6799  001D50  20F4               	addwfc	prodh,w,c
  6800  001D52  6EF7               	movwf	tblptrh,c
  6801  001D54                     	if	1	;There are 3 active tblptr bytes
  6802  001D54  6AF8               	clrf	tblptru,c
  6803  001D56  0E00               	movlw	low (__mediumconst shr (0+16))
  6804  001D58  22F8               	addwfc	tblptru,f,c
  6805  001D5A                     	endif
  6806  001D5A  0009               	tblrd		*+
  6807  001D5C  CFF5 F015          	movff	tablat,___ftmul@f1
  6808  001D60  0009               	tblrd		*+
  6809  001D62  CFF5 F016          	movff	tablat,___ftmul@f1+1
  6810  001D66  000A               	tblrd		*-
  6811  001D68  CFF5 F017          	movff	tablat,___ftmul@f1+2
  6812  001D6C  0E00               	movlw	0
  6813  001D6E  6E18               	movwf	___ftmul@f2,c
  6814  001D70  0E00               	movlw	0
  6815  001D72  6E19               	movwf	___ftmul@f2+1,c
  6816  001D74  0E3F               	movlw	63
  6817  001D76  6E1A               	movwf	___ftmul@f2+2,c
  6818  001D78  EC58  F012         	call	___ftmul	;wreg free
  6819  001D7C  C015  F024         	movff	?___ftmul,?_fround
  6820  001D80  C016  F025         	movff	?___ftmul+1,?_fround+1
  6821  001D84  C017  F026         	movff	?___ftmul+2,?_fround+2
  6822  001D88  0012               	return	
  6823  001D8A                     __end_of_fround:
  6824                           	opt stack 0
  6825                           tosu	equ	0xFFF
  6826                           tosh	equ	0xFFE
  6827                           tosl	equ	0xFFD
  6828                           pclatu	equ	0xFFB
  6829                           pclath	equ	0xFFA
  6830                           tblptru	equ	0xFF8
  6831                           tblptrh	equ	0xFF7
  6832                           tblptrl	equ	0xFF6
  6833                           tablat	equ	0xFF5
  6834                           prodh	equ	0xFF4
  6835                           prodl	equ	0xFF3
  6836                           intcon	equ	0xFF2
  6837                           indf0	equ	0xFEF
  6838                           postinc0	equ	0xFEE
  6839                           fsr0h	equ	0xFEA
  6840                           fsr0l	equ	0xFE9
  6841                           wreg	equ	0xFE8
  6842                           postdec1	equ	0xFE5
  6843                           fsr1h	equ	0xFE2
  6844                           fsr1l	equ	0xFE1
  6845                           indf2	equ	0xFDF
  6846                           postinc2	equ	0xFDE
  6847                           postdec2	equ	0xFDD
  6848                           fsr2h	equ	0xFDA
  6849                           fsr2l	equ	0xFD9
  6850                           status	equ	0xFD8
  6851                           
  6852 ;; *************** function ___wmul *****************
  6853 ;; Defined at:
  6854 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  6855 ;; Parameters:    Size  Location     Type
  6856 ;;  multiplier      2   14[COMRAM] unsigned int 
  6857 ;;  multiplicand    2   16[COMRAM] unsigned int 
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;  product         2   18[COMRAM] unsigned int 
  6860 ;; Return value:  Size  Location     Type
  6861 ;;                  2   14[COMRAM] unsigned int 
  6862 ;; Registers used:
  6863 ;;		wreg, status,2, status,0, prodl, prodh
  6864 ;; Tracked objects:
  6865 ;;		On entry : 0/0
  6866 ;;		On exit  : 0/0
  6867 ;;		Unchanged: 0/0
  6868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6869 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6870 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6872 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6873 ;;Total ram usage:        6 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; This function calls:
  6876 ;;		Nothing
  6877 ;; This function is called by:
  6878 ;;		_fround
  6879 ;;		_scale
  6880 ;;		_sprintf
  6881 ;; This function uses a non-reentrant model
  6882 ;;
  6883                           
  6884                           	psect	text40
  6885  003032                     __ptext40:
  6886                           	opt stack 0
  6887  003032                     ___wmul:
  6888                           	opt stack 17
  6889                           
  6890                           ;incstack = 0
  6891  003032  500F               	movf	___wmul@multiplier,w,c
  6892  003034  0211               	mulwf	___wmul@multiplicand,c
  6893  003036  CFF3 F013          	movff	prodl,___wmul@product
  6894  00303A  CFF4 F014          	movff	prodh,___wmul@product+1
  6895  00303E  500F               	movf	___wmul@multiplier,w,c
  6896  003040  0212               	mulwf	___wmul@multiplicand+1,c
  6897  003042  50F3               	movf	prodl,w,c
  6898  003044  2614               	addwf	___wmul@product+1,f,c
  6899  003046  5010               	movf	___wmul@multiplier+1,w,c
  6900  003048  0211               	mulwf	___wmul@multiplicand,c
  6901  00304A  50F3               	movf	prodl,w,c
  6902  00304C  2614               	addwf	___wmul@product+1,f,c
  6903  00304E  C013  F00F         	movff	___wmul@product,?___wmul
  6904  003052  C014  F010         	movff	___wmul@product+1,?___wmul+1
  6905  003056  0012               	return	
  6906  003058                     __end_of___wmul:
  6907                           	opt stack 0
  6908                           tosu	equ	0xFFF
  6909                           tosh	equ	0xFFE
  6910                           tosl	equ	0xFFD
  6911                           pclatu	equ	0xFFB
  6912                           pclath	equ	0xFFA
  6913                           tblptru	equ	0xFF8
  6914                           tblptrh	equ	0xFF7
  6915                           tblptrl	equ	0xFF6
  6916                           tablat	equ	0xFF5
  6917                           prodh	equ	0xFF4
  6918                           prodl	equ	0xFF3
  6919                           intcon	equ	0xFF2
  6920                           indf0	equ	0xFEF
  6921                           postinc0	equ	0xFEE
  6922                           fsr0h	equ	0xFEA
  6923                           fsr0l	equ	0xFE9
  6924                           wreg	equ	0xFE8
  6925                           postdec1	equ	0xFE5
  6926                           fsr1h	equ	0xFE2
  6927                           fsr1l	equ	0xFE1
  6928                           indf2	equ	0xFDF
  6929                           postinc2	equ	0xFDE
  6930                           postdec2	equ	0xFDD
  6931                           fsr2h	equ	0xFDA
  6932                           fsr2l	equ	0xFD9
  6933                           status	equ	0xFD8
  6934                           
  6935 ;; *************** function ___awmod *****************
  6936 ;; Defined at:
  6937 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  6938 ;; Parameters:    Size  Location     Type
  6939 ;;  dividend        2    0[COMRAM] int 
  6940 ;;  divisor         2    2[COMRAM] int 
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;  sign            1    5[COMRAM] unsigned char 
  6943 ;;  counter         1    4[COMRAM] unsigned char 
  6944 ;; Return value:  Size  Location     Type
  6945 ;;                  2    0[COMRAM] int 
  6946 ;; Registers used:
  6947 ;;		wreg, status,2, status,0
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/0
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6953 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6956 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6957 ;;Total ram usage:        6 bytes
  6958 ;; Hardware stack levels used:    1
  6959 ;; This function calls:
  6960 ;;		Nothing
  6961 ;; This function is called by:
  6962 ;;		_fround
  6963 ;;		_scale
  6964 ;; This function uses a non-reentrant model
  6965 ;;
  6966                           
  6967                           	psect	text41
  6968  002B10                     __ptext41:
  6969                           	opt stack 0
  6970  002B10                     ___awmod:
  6971                           	opt stack 17
  6972                           
  6973                           ;incstack = 0
  6974  002B10  0E00               	movlw	0
  6975  002B12  6E06               	movwf	___awmod@sign,c
  6976  002B14  AE02               	btfss	___awmod@dividend+1,7,c
  6977  002B16  D006               	goto	i2l946
  6978  002B18  6C01               	negf	___awmod@dividend,c
  6979  002B1A  1E02               	comf	___awmod@dividend+1,f,c
  6980  002B1C  B0D8               	btfsc	status,0,c
  6981  002B1E  2A02               	incf	___awmod@dividend+1,f,c
  6982  002B20  0E01               	movlw	1
  6983  002B22  6E06               	movwf	___awmod@sign,c
  6984  002B24                     i2l946:
  6985  002B24  AE04               	btfss	___awmod@divisor+1,7,c
  6986  002B26  D004               	goto	i2l947
  6987  002B28  6C03               	negf	___awmod@divisor,c
  6988  002B2A  1E04               	comf	___awmod@divisor+1,f,c
  6989  002B2C  B0D8               	btfsc	status,0,c
  6990  002B2E  2A04               	incf	___awmod@divisor+1,f,c
  6991  002B30                     i2l947:
  6992  002B30  5003               	movf	___awmod@divisor,w,c
  6993  002B32  1004               	iorwf	___awmod@divisor+1,w,c
  6994  002B34  B4D8               	btfsc	status,2,c
  6995  002B36  D018               	goto	i2l954
  6996  002B38  0E01               	movlw	1
  6997  002B3A  6E05               	movwf	___awmod@counter,c
  6998  002B3C  D004               	goto	i2l949
  6999  002B3E  90D8               	bcf	status,0,c
  7000  002B40  3603               	rlcf	___awmod@divisor,f,c
  7001  002B42  3604               	rlcf	___awmod@divisor+1,f,c
  7002  002B44  2A05               	incf	___awmod@counter,f,c
  7003  002B46                     i2l949:
  7004  002B46  AE04               	btfss	___awmod@divisor+1,7,c
  7005  002B48  D7FA               	goto	i2l950
  7006  002B4A                     i2u246_40:
  7007  002B4A  5003               	movf	___awmod@divisor,w,c
  7008  002B4C  5C01               	subwf	___awmod@dividend,w,c
  7009  002B4E  5004               	movf	___awmod@divisor+1,w,c
  7010  002B50  5802               	subwfb	___awmod@dividend+1,w,c
  7011  002B52  A0D8               	btfss	status,0,c
  7012  002B54  D004               	goto	i2l953
  7013  002B56  5003               	movf	___awmod@divisor,w,c
  7014  002B58  5E01               	subwf	___awmod@dividend,f,c
  7015  002B5A  5004               	movf	___awmod@divisor+1,w,c
  7016  002B5C  5A02               	subwfb	___awmod@dividend+1,f,c
  7017  002B5E                     i2l953:
  7018  002B5E  90D8               	bcf	status,0,c
  7019  002B60  3204               	rrcf	___awmod@divisor+1,f,c
  7020  002B62  3203               	rrcf	___awmod@divisor,f,c
  7021  002B64  2E05               	decfsz	___awmod@counter,f,c
  7022  002B66  D7F1               	goto	i2u246_40
  7023  002B68                     i2l954:
  7024  002B68  5006               	movf	___awmod@sign,w,c
  7025  002B6A  B4D8               	btfsc	status,2,c
  7026  002B6C  D004               	goto	i2l955
  7027  002B6E  6C01               	negf	___awmod@dividend,c
  7028  002B70  1E02               	comf	___awmod@dividend+1,f,c
  7029  002B72  B0D8               	btfsc	status,0,c
  7030  002B74  2A02               	incf	___awmod@dividend+1,f,c
  7031  002B76                     i2l955:
  7032  002B76  C001  F001         	movff	___awmod@dividend,?___awmod
  7033  002B7A  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  7034  002B7E  0012               	return	
  7035  002B80                     __end_of___awmod:
  7036                           	opt stack 0
  7037                           tosu	equ	0xFFF
  7038                           tosh	equ	0xFFE
  7039                           tosl	equ	0xFFD
  7040                           pclatu	equ	0xFFB
  7041                           pclath	equ	0xFFA
  7042                           tblptru	equ	0xFF8
  7043                           tblptrh	equ	0xFF7
  7044                           tblptrl	equ	0xFF6
  7045                           tablat	equ	0xFF5
  7046                           prodh	equ	0xFF4
  7047                           prodl	equ	0xFF3
  7048                           intcon	equ	0xFF2
  7049                           indf0	equ	0xFEF
  7050                           postinc0	equ	0xFEE
  7051                           fsr0h	equ	0xFEA
  7052                           fsr0l	equ	0xFE9
  7053                           wreg	equ	0xFE8
  7054                           postdec1	equ	0xFE5
  7055                           fsr1h	equ	0xFE2
  7056                           fsr1l	equ	0xFE1
  7057                           indf2	equ	0xFDF
  7058                           postinc2	equ	0xFDE
  7059                           postdec2	equ	0xFDD
  7060                           fsr2h	equ	0xFDA
  7061                           fsr2l	equ	0xFD9
  7062                           status	equ	0xFD8
  7063                           
  7064 ;; *************** function ___awdiv *****************
  7065 ;; Defined at:
  7066 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;  dividend        2    6[COMRAM] int 
  7069 ;;  divisor         2    8[COMRAM] int 
  7070 ;; Auto vars:     Size  Location     Type
  7071 ;;  quotient        2   12[COMRAM] int 
  7072 ;;  sign            1   11[COMRAM] unsigned char 
  7073 ;;  counter         1   10[COMRAM] unsigned char 
  7074 ;; Return value:  Size  Location     Type
  7075 ;;                  2    6[COMRAM] int 
  7076 ;; Registers used:
  7077 ;;		wreg, status,2, status,0
  7078 ;; Tracked objects:
  7079 ;;		On entry : 0/0
  7080 ;;		On exit  : 0/0
  7081 ;;		Unchanged: 0/0
  7082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7083 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7084 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7086 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7087 ;;Total ram usage:        8 bytes
  7088 ;; Hardware stack levels used:    1
  7089 ;; This function calls:
  7090 ;;		Nothing
  7091 ;; This function is called by:
  7092 ;;		_fround
  7093 ;;		_scale
  7094 ;;		_sprintf
  7095 ;; This function uses a non-reentrant model
  7096 ;;
  7097                           
  7098                           	psect	text42
  7099  00298C                     __ptext42:
  7100                           	opt stack 0
  7101  00298C                     ___awdiv:
  7102                           	opt stack 17
  7103                           
  7104                           ;incstack = 0
  7105  00298C  0E00               	movlw	0
  7106  00298E  6E0C               	movwf	___awdiv@sign,c
  7107  002990  AE0A               	btfss	___awdiv@divisor+1,7,c
  7108  002992  D006               	goto	i2l933
  7109  002994  6C09               	negf	___awdiv@divisor,c
  7110  002996  1E0A               	comf	___awdiv@divisor+1,f,c
  7111  002998  B0D8               	btfsc	status,0,c
  7112  00299A  2A0A               	incf	___awdiv@divisor+1,f,c
  7113  00299C  0E01               	movlw	1
  7114  00299E  6E0C               	movwf	___awdiv@sign,c
  7115  0029A0                     i2l933:
  7116  0029A0  AE08               	btfss	___awdiv@dividend+1,7,c
  7117  0029A2  D006               	goto	i2l934
  7118  0029A4  6C07               	negf	___awdiv@dividend,c
  7119  0029A6  1E08               	comf	___awdiv@dividend+1,f,c
  7120  0029A8  B0D8               	btfsc	status,0,c
  7121  0029AA  2A08               	incf	___awdiv@dividend+1,f,c
  7122  0029AC  0E01               	movlw	1
  7123  0029AE  1A0C               	xorwf	___awdiv@sign,f,c
  7124  0029B0                     i2l934:
  7125  0029B0  0E00               	movlw	0
  7126  0029B2  6E0E               	movwf	___awdiv@quotient+1,c
  7127  0029B4  0E00               	movlw	0
  7128  0029B6  6E0D               	movwf	___awdiv@quotient,c
  7129  0029B8  5009               	movf	___awdiv@divisor,w,c
  7130  0029BA  100A               	iorwf	___awdiv@divisor+1,w,c
  7131  0029BC  B4D8               	btfsc	status,2,c
  7132  0029BE  D01C               	goto	i2l941
  7133  0029C0  0E01               	movlw	1
  7134  0029C2  6E0B               	movwf	___awdiv@counter,c
  7135  0029C4  D004               	goto	i2l936
  7136  0029C6  90D8               	bcf	status,0,c
  7137  0029C8  3609               	rlcf	___awdiv@divisor,f,c
  7138  0029CA  360A               	rlcf	___awdiv@divisor+1,f,c
  7139  0029CC  2A0B               	incf	___awdiv@counter,f,c
  7140  0029CE                     i2l936:
  7141  0029CE  AE0A               	btfss	___awdiv@divisor+1,7,c
  7142  0029D0  D7FA               	goto	i2l937
  7143  0029D2                     i2u240_40:
  7144  0029D2  90D8               	bcf	status,0,c
  7145  0029D4  360D               	rlcf	___awdiv@quotient,f,c
  7146  0029D6  360E               	rlcf	___awdiv@quotient+1,f,c
  7147  0029D8  5009               	movf	___awdiv@divisor,w,c
  7148  0029DA  5C07               	subwf	___awdiv@dividend,w,c
  7149  0029DC  500A               	movf	___awdiv@divisor+1,w,c
  7150  0029DE  5808               	subwfb	___awdiv@dividend+1,w,c
  7151  0029E0  A0D8               	btfss	status,0,c
  7152  0029E2  D005               	goto	i2l940
  7153  0029E4  5009               	movf	___awdiv@divisor,w,c
  7154  0029E6  5E07               	subwf	___awdiv@dividend,f,c
  7155  0029E8  500A               	movf	___awdiv@divisor+1,w,c
  7156  0029EA  5A08               	subwfb	___awdiv@dividend+1,f,c
  7157  0029EC  800D               	bsf	___awdiv@quotient,0,c
  7158  0029EE                     i2l940:
  7159  0029EE  90D8               	bcf	status,0,c
  7160  0029F0  320A               	rrcf	___awdiv@divisor+1,f,c
  7161  0029F2  3209               	rrcf	___awdiv@divisor,f,c
  7162  0029F4  2E0B               	decfsz	___awdiv@counter,f,c
  7163  0029F6  D7ED               	goto	i2u240_40
  7164  0029F8                     i2l941:
  7165  0029F8  500C               	movf	___awdiv@sign,w,c
  7166  0029FA  B4D8               	btfsc	status,2,c
  7167  0029FC  D004               	goto	i2l942
  7168  0029FE  6C0D               	negf	___awdiv@quotient,c
  7169  002A00  1E0E               	comf	___awdiv@quotient+1,f,c
  7170  002A02  B0D8               	btfsc	status,0,c
  7171  002A04  2A0E               	incf	___awdiv@quotient+1,f,c
  7172  002A06                     i2l942:
  7173  002A06  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  7174  002A0A  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  7175  002A0E  0012               	return	
  7176  002A10                     __end_of___awdiv:
  7177                           	opt stack 0
  7178                           tosu	equ	0xFFF
  7179                           tosh	equ	0xFFE
  7180                           tosl	equ	0xFFD
  7181                           pclatu	equ	0xFFB
  7182                           pclath	equ	0xFFA
  7183                           tblptru	equ	0xFF8
  7184                           tblptrh	equ	0xFF7
  7185                           tblptrl	equ	0xFF6
  7186                           tablat	equ	0xFF5
  7187                           prodh	equ	0xFF4
  7188                           prodl	equ	0xFF3
  7189                           intcon	equ	0xFF2
  7190                           indf0	equ	0xFEF
  7191                           postinc0	equ	0xFEE
  7192                           fsr0h	equ	0xFEA
  7193                           fsr0l	equ	0xFE9
  7194                           wreg	equ	0xFE8
  7195                           postdec1	equ	0xFE5
  7196                           fsr1h	equ	0xFE2
  7197                           fsr1l	equ	0xFE1
  7198                           indf2	equ	0xFDF
  7199                           postinc2	equ	0xFDE
  7200                           postdec2	equ	0xFDD
  7201                           fsr2h	equ	0xFDA
  7202                           fsr2l	equ	0xFD9
  7203                           status	equ	0xFD8
  7204                           
  7205 ;; *************** function __tdiv_to_l_ *****************
  7206 ;; Defined at:
  7207 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdivl.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;  f1              3    0[COMRAM] float 
  7210 ;;  f2              3    3[COMRAM] float 
  7211 ;; Auto vars:     Size  Location     Type
  7212 ;;  quot            4    9[COMRAM] unsigned long 
  7213 ;;  exp1            1   14[COMRAM] unsigned char 
  7214 ;;  cntr            1   13[COMRAM] unsigned char 
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  4    0[COMRAM] unsigned long 
  7217 ;; Registers used:
  7218 ;;		wreg, status,2, status,0
  7219 ;; Tracked objects:
  7220 ;;		On entry : 0/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7224 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7225 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7226 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7227 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7228 ;;Total ram usage:       15 bytes
  7229 ;; Hardware stack levels used:    1
  7230 ;; This function calls:
  7231 ;;		Nothing
  7232 ;; This function is called by:
  7233 ;;		_sprintf
  7234 ;; This function uses a non-reentrant model
  7235 ;;
  7236                           
  7237                           	psect	text43
  7238  002162                     __ptext43:
  7239                           	opt stack 0
  7240  002162                     __tdiv_to_l_:
  7241                           	opt stack 18
  7242                           
  7243                           ;incstack = 0
  7244  002162  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7245  002166  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7246  002168  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7247  00216A  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  7248  00216C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7249  00216E  E301               	bnc	u264_41
  7250  002170  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7251  002172                     u264_41:
  7252  002172  5007               	movf	??__tdiv_to_l_,w,c
  7253  002174  6E0F               	movwf	__tdiv_to_l_@exp1,c
  7254  002176  500F               	movf	__tdiv_to_l_@exp1,w,c
  7255  002178  A4D8               	btfss	status,2,c
  7256  00217A  D009               	goto	i2l1069
  7257  00217C  0E00               	movlw	0
  7258  00217E  6E01               	movwf	?__tdiv_to_l_,c
  7259  002180  0E00               	movlw	0
  7260  002182  6E02               	movwf	?__tdiv_to_l_+1,c
  7261  002184  0E00               	movlw	0
  7262  002186  6E03               	movwf	?__tdiv_to_l_+2,c
  7263  002188  0E00               	movlw	0
  7264  00218A  6E04               	movwf	?__tdiv_to_l_+3,c
  7265  00218C  0012               	return	
  7266  00218E                     i2l1069:
  7267  00218E  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7268  002192  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7269  002194  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7270  002196  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  7271  002198  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7272  00219A  E301               	bnc	u266_41
  7273  00219C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7274  00219E                     u266_41:
  7275  00219E  5007               	movf	??__tdiv_to_l_,w,c
  7276  0021A0  6E0E               	movwf	__tdiv_to_l_@cntr,c
  7277  0021A2  500E               	movf	__tdiv_to_l_@cntr,w,c
  7278  0021A4  A4D8               	btfss	status,2,c
  7279  0021A6  D009               	goto	i2l1071
  7280  0021A8  0E00               	movlw	0
  7281  0021AA  6E01               	movwf	?__tdiv_to_l_,c
  7282  0021AC  0E00               	movlw	0
  7283  0021AE  6E02               	movwf	?__tdiv_to_l_+1,c
  7284  0021B0  0E00               	movlw	0
  7285  0021B2  6E03               	movwf	?__tdiv_to_l_+2,c
  7286  0021B4  0E00               	movlw	0
  7287  0021B6  6E04               	movwf	?__tdiv_to_l_+3,c
  7288  0021B8  0012               	return	
  7289  0021BA                     i2l1071:
  7290  0021BA  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  7291  0021BC  0EFF               	movlw	255
  7292  0021BE  1601               	andwf	__tdiv_to_l_@f1,f,c
  7293  0021C0  0EFF               	movlw	255
  7294  0021C2  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  7295  0021C4  0E00               	movlw	0
  7296  0021C6  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  7297  0021C8  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  7298  0021CA  0EFF               	movlw	255
  7299  0021CC  1604               	andwf	__tdiv_to_l_@f2,f,c
  7300  0021CE  0EFF               	movlw	255
  7301  0021D0  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  7302  0021D2  0E00               	movlw	0
  7303  0021D4  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  7304  0021D6  0E00               	movlw	0
  7305  0021D8  6E0A               	movwf	__tdiv_to_l_@quot,c
  7306  0021DA  0E00               	movlw	0
  7307  0021DC  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  7308  0021DE  0E00               	movlw	0
  7309  0021E0  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  7310  0021E2  0E00               	movlw	0
  7311  0021E4  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  7312  0021E6  0E7F               	movlw	127
  7313  0021E8  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  7314  0021EA  500E               	movf	__tdiv_to_l_@cntr,w,c
  7315  0021EC  0F98               	addlw	152
  7316  0021EE  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  7317  0021F0  0E18               	movlw	24
  7318  0021F2  6E0E               	movwf	__tdiv_to_l_@cntr,c
  7319  0021F4                     i2l1072:
  7320  0021F4  90D8               	bcf	status,0,c
  7321  0021F6  360A               	rlcf	__tdiv_to_l_@quot,f,c
  7322  0021F8  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  7323  0021FA  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  7324  0021FC  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  7325  0021FE  5004               	movf	__tdiv_to_l_@f2,w,c
  7326  002200  5C01               	subwf	__tdiv_to_l_@f1,w,c
  7327  002202  5005               	movf	__tdiv_to_l_@f2+1,w,c
  7328  002204  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  7329  002206  5006               	movf	__tdiv_to_l_@f2+2,w,c
  7330  002208  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  7331  00220A  A0D8               	btfss	status,0,c
  7332  00220C  D007               	goto	i2l1073
  7333  00220E  5004               	movf	__tdiv_to_l_@f2,w,c
  7334  002210  5E01               	subwf	__tdiv_to_l_@f1,f,c
  7335  002212  5005               	movf	__tdiv_to_l_@f2+1,w,c
  7336  002214  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  7337  002216  5006               	movf	__tdiv_to_l_@f2+2,w,c
  7338  002218  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  7339  00221A  800A               	bsf	__tdiv_to_l_@quot,0,c
  7340  00221C                     i2l1073:
  7341  00221C  90D8               	bcf	status,0,c
  7342  00221E  3601               	rlcf	__tdiv_to_l_@f1,f,c
  7343  002220  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  7344  002222  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  7345  002224  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  7346  002226  D7E6               	goto	i2l1072
  7347  002228  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  7348  00222A  D016               	goto	i2l1075
  7349  00222C  500F               	movf	__tdiv_to_l_@exp1,w,c
  7350  00222E  0A80               	xorlw	128
  7351  002230  0F97               	addlw	151
  7352  002232  B0D8               	btfsc	status,0,c
  7353  002234  D009               	goto	i2l1076
  7354  002236  0E00               	movlw	0
  7355  002238  6E01               	movwf	?__tdiv_to_l_,c
  7356  00223A  0E00               	movlw	0
  7357  00223C  6E02               	movwf	?__tdiv_to_l_+1,c
  7358  00223E  0E00               	movlw	0
  7359  002240  6E03               	movwf	?__tdiv_to_l_+2,c
  7360  002242  0E00               	movlw	0
  7361  002244  6E04               	movwf	?__tdiv_to_l_+3,c
  7362  002246  0012               	return	
  7363  002248                     i2l1076:
  7364  002248  90D8               	bcf	status,0,c
  7365  00224A  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  7366  00224C  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  7367  00224E  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  7368  002250  320A               	rrcf	__tdiv_to_l_@quot,f,c
  7369  002252  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  7370  002254  D7F9               	goto	i2l1076
  7371  002256  D015               	goto	i2u272_40
  7372  002258                     i2l1075:
  7373  002258  0E17               	movlw	23
  7374  00225A  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  7375  00225C  D00F               	goto	i2l1081
  7376  00225E  0E00               	movlw	0
  7377  002260  6E01               	movwf	?__tdiv_to_l_,c
  7378  002262  0E00               	movlw	0
  7379  002264  6E02               	movwf	?__tdiv_to_l_+1,c
  7380  002266  0E00               	movlw	0
  7381  002268  6E03               	movwf	?__tdiv_to_l_+2,c
  7382  00226A  0E00               	movlw	0
  7383  00226C  6E04               	movwf	?__tdiv_to_l_+3,c
  7384  00226E  0012               	return	
  7385  002270  90D8               	bcf	status,0,c
  7386  002272  360A               	rlcf	__tdiv_to_l_@quot,f,c
  7387  002274  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  7388  002276  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  7389  002278  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  7390  00227A  060F               	decf	__tdiv_to_l_@exp1,f,c
  7391  00227C                     i2l1081:
  7392  00227C  500F               	movf	__tdiv_to_l_@exp1,w,c
  7393  00227E  A4D8               	btfss	status,2,c
  7394  002280  D7F7               	goto	i2l1082
  7395  002282                     i2u272_40:
  7396  002282  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7397  002286  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7398  00228A  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7399  00228E  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7400  002292  0012               	return		;funcret
  7401  002294                     __end_of__tdiv_to_l_:
  7402                           	opt stack 0
  7403                           tosu	equ	0xFFF
  7404                           tosh	equ	0xFFE
  7405                           tosl	equ	0xFFD
  7406                           pclatu	equ	0xFFB
  7407                           pclath	equ	0xFFA
  7408                           tblptru	equ	0xFF8
  7409                           tblptrh	equ	0xFF7
  7410                           tblptrl	equ	0xFF6
  7411                           tablat	equ	0xFF5
  7412                           prodh	equ	0xFF4
  7413                           prodl	equ	0xFF3
  7414                           intcon	equ	0xFF2
  7415                           indf0	equ	0xFEF
  7416                           postinc0	equ	0xFEE
  7417                           fsr0h	equ	0xFEA
  7418                           fsr0l	equ	0xFE9
  7419                           wreg	equ	0xFE8
  7420                           postdec1	equ	0xFE5
  7421                           fsr1h	equ	0xFE2
  7422                           fsr1l	equ	0xFE1
  7423                           indf2	equ	0xFDF
  7424                           postinc2	equ	0xFDE
  7425                           postdec2	equ	0xFDD
  7426                           fsr2h	equ	0xFDA
  7427                           fsr2l	equ	0xFD9
  7428                           status	equ	0xFD8
  7429                           
  7430 ;; *************** function __div_to_l_ *****************
  7431 ;; Defined at:
  7432 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fldivl.c"
  7433 ;; Parameters:    Size  Location     Type
  7434 ;;  f1              3    0[COMRAM] unsigned long 
  7435 ;;  f2              3    3[COMRAM] unsigned long 
  7436 ;; Auto vars:     Size  Location     Type
  7437 ;;  quot            4    6[COMRAM] unsigned long 
  7438 ;;  exp1            1   11[COMRAM] unsigned char 
  7439 ;;  cntr            1   10[COMRAM] unsigned char 
  7440 ;; Return value:  Size  Location     Type
  7441 ;;                  4    0[COMRAM] unsigned long 
  7442 ;; Registers used:
  7443 ;;		wreg, status,2, status,0
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7449 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7450 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7452 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7453 ;;Total ram usage:       12 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; This function calls:
  7456 ;;		Nothing
  7457 ;; This function is called by:
  7458 ;;		_sprintf
  7459 ;; This function uses a non-reentrant model
  7460 ;;
  7461                           
  7462                           	psect	text44
  7463  002294                     __ptext44:
  7464                           	opt stack 0
  7465  002294                     __div_to_l_:
  7466                           	opt stack 18
  7467                           
  7468                           ;incstack = 0
  7469  002294  3403               	rlcf	__div_to_l_@f1+2,w,c
  7470  002296  3404               	rlcf	__div_to_l_@f1+3,w,c
  7471  002298  6E0C               	movwf	__div_to_l_@exp1,c
  7472  00229A  500C               	movf	__div_to_l_@exp1,w,c
  7473  00229C  A4D8               	btfss	status,2,c
  7474  00229E  D009               	goto	i2l965
  7475  0022A0  0E00               	movlw	0
  7476  0022A2  6E01               	movwf	?__div_to_l_,c
  7477  0022A4  0E00               	movlw	0
  7478  0022A6  6E02               	movwf	?__div_to_l_+1,c
  7479  0022A8  0E00               	movlw	0
  7480  0022AA  6E03               	movwf	?__div_to_l_+2,c
  7481  0022AC  0E00               	movlw	0
  7482  0022AE  6E04               	movwf	?__div_to_l_+3,c
  7483  0022B0  0012               	return	
  7484  0022B2                     i2l965:
  7485  0022B2  3406               	rlcf	__div_to_l_@f2+2,w,c
  7486  0022B4  3407               	rlcf	__div_to_l_@f2+3,w,c
  7487  0022B6  6E0B               	movwf	__div_to_l_@cntr,c
  7488  0022B8  500B               	movf	__div_to_l_@cntr,w,c
  7489  0022BA  A4D8               	btfss	status,2,c
  7490  0022BC  D009               	goto	i2l967
  7491  0022BE  0E00               	movlw	0
  7492  0022C0  6E01               	movwf	?__div_to_l_,c
  7493  0022C2  0E00               	movlw	0
  7494  0022C4  6E02               	movwf	?__div_to_l_+1,c
  7495  0022C6  0E00               	movlw	0
  7496  0022C8  6E03               	movwf	?__div_to_l_+2,c
  7497  0022CA  0E00               	movlw	0
  7498  0022CC  6E04               	movwf	?__div_to_l_+3,c
  7499  0022CE  0012               	return	
  7500  0022D0                     i2l967:
  7501  0022D0  8E03               	bsf	__div_to_l_@f1+2,7,c
  7502  0022D2  0EFF               	movlw	255
  7503  0022D4  1601               	andwf	__div_to_l_@f1,f,c
  7504  0022D6  0EFF               	movlw	255
  7505  0022D8  1602               	andwf	__div_to_l_@f1+1,f,c
  7506  0022DA  0EFF               	movlw	255
  7507  0022DC  1603               	andwf	__div_to_l_@f1+2,f,c
  7508  0022DE  0E00               	movlw	0
  7509  0022E0  1604               	andwf	__div_to_l_@f1+3,f,c
  7510  0022E2  8E06               	bsf	__div_to_l_@f2+2,7,c
  7511  0022E4  0EFF               	movlw	255
  7512  0022E6  1604               	andwf	__div_to_l_@f2,f,c
  7513  0022E8  0EFF               	movlw	255
  7514  0022EA  1605               	andwf	__div_to_l_@f2+1,f,c
  7515  0022EC  0EFF               	movlw	255
  7516  0022EE  1606               	andwf	__div_to_l_@f2+2,f,c
  7517  0022F0  0E00               	movlw	0
  7518  0022F2  1607               	andwf	__div_to_l_@f2+3,f,c
  7519  0022F4  0E00               	movlw	0
  7520  0022F6  6E07               	movwf	__div_to_l_@quot,c
  7521  0022F8  0E00               	movlw	0
  7522  0022FA  6E08               	movwf	__div_to_l_@quot+1,c
  7523  0022FC  0E00               	movlw	0
  7524  0022FE  6E09               	movwf	__div_to_l_@quot+2,c
  7525  002300  0E00               	movlw	0
  7526  002302  6E0A               	movwf	__div_to_l_@quot+3,c
  7527  002304  0E7F               	movlw	127
  7528  002306  5E0C               	subwf	__div_to_l_@exp1,f,c
  7529  002308  500B               	movf	__div_to_l_@cntr,w,c
  7530  00230A  0FA0               	addlw	160
  7531  00230C  5E0C               	subwf	__div_to_l_@exp1,f,c
  7532  00230E  0E20               	movlw	32
  7533  002310  6E0B               	movwf	__div_to_l_@cntr,c
  7534  002312  90D8               	bcf	status,0,c
  7535  002314  3607               	rlcf	__div_to_l_@quot,f,c
  7536  002316  3608               	rlcf	__div_to_l_@quot+1,f,c
  7537  002318  3609               	rlcf	__div_to_l_@quot+2,f,c
  7538  00231A  360A               	rlcf	__div_to_l_@quot+3,f,c
  7539  00231C  5004               	movf	__div_to_l_@f2,w,c
  7540  00231E  5C01               	subwf	__div_to_l_@f1,w,c
  7541  002320  5005               	movf	__div_to_l_@f2+1,w,c
  7542  002322  5802               	subwfb	__div_to_l_@f1+1,w,c
  7543  002324  5006               	movf	__div_to_l_@f2+2,w,c
  7544  002326  5803               	subwfb	__div_to_l_@f1+2,w,c
  7545  002328  5007               	movf	__div_to_l_@f2+3,w,c
  7546  00232A  5804               	subwfb	__div_to_l_@f1+3,w,c
  7547  00232C  A0D8               	btfss	status,0,c
  7548  00232E  D009               	goto	i2l969
  7549  002330  5004               	movf	__div_to_l_@f2,w,c
  7550  002332  5E01               	subwf	__div_to_l_@f1,f,c
  7551  002334  5005               	movf	__div_to_l_@f2+1,w,c
  7552  002336  5A02               	subwfb	__div_to_l_@f1+1,f,c
  7553  002338  5006               	movf	__div_to_l_@f2+2,w,c
  7554  00233A  5A03               	subwfb	__div_to_l_@f1+2,f,c
  7555  00233C  5007               	movf	__div_to_l_@f2+3,w,c
  7556  00233E  5A04               	subwfb	__div_to_l_@f1+3,f,c
  7557  002340  8007               	bsf	__div_to_l_@quot,0,c
  7558  002342                     i2l969:
  7559  002342  90D8               	bcf	status,0,c
  7560  002344  3601               	rlcf	__div_to_l_@f1,f,c
  7561  002346  3602               	rlcf	__div_to_l_@f1+1,f,c
  7562  002348  3603               	rlcf	__div_to_l_@f1+2,f,c
  7563  00234A  3604               	rlcf	__div_to_l_@f1+3,f,c
  7564  00234C  2E0B               	decfsz	__div_to_l_@cntr,f,c
  7565  00234E  D7E1               	goto	i2l968
  7566  002350  AE0C               	btfss	__div_to_l_@exp1,7,c
  7567  002352  D016               	goto	i2l971
  7568  002354  500C               	movf	__div_to_l_@exp1,w,c
  7569  002356  0A80               	xorlw	128
  7570  002358  0F9F               	addlw	159
  7571  00235A  B0D8               	btfsc	status,0,c
  7572  00235C  D009               	goto	i2l972
  7573  00235E  0E00               	movlw	0
  7574  002360  6E01               	movwf	?__div_to_l_,c
  7575  002362  0E00               	movlw	0
  7576  002364  6E02               	movwf	?__div_to_l_+1,c
  7577  002366  0E00               	movlw	0
  7578  002368  6E03               	movwf	?__div_to_l_+2,c
  7579  00236A  0E00               	movlw	0
  7580  00236C  6E04               	movwf	?__div_to_l_+3,c
  7581  00236E  0012               	return	
  7582  002370                     i2l972:
  7583  002370  90D8               	bcf	status,0,c
  7584  002372  320A               	rrcf	__div_to_l_@quot+3,f,c
  7585  002374  3209               	rrcf	__div_to_l_@quot+2,f,c
  7586  002376  3208               	rrcf	__div_to_l_@quot+1,f,c
  7587  002378  3207               	rrcf	__div_to_l_@quot,f,c
  7588  00237A  3E0C               	incfsz	__div_to_l_@exp1,f,c
  7589  00237C  D7F9               	goto	i2l972
  7590  00237E  D015               	goto	i2u279_40
  7591  002380                     i2l971:
  7592  002380  0E1F               	movlw	31
  7593  002382  640C               	cpfsgt	__div_to_l_@exp1,c
  7594  002384  D00F               	goto	i2l977
  7595  002386  0E00               	movlw	0
  7596  002388  6E01               	movwf	?__div_to_l_,c
  7597  00238A  0E00               	movlw	0
  7598  00238C  6E02               	movwf	?__div_to_l_+1,c
  7599  00238E  0E00               	movlw	0
  7600  002390  6E03               	movwf	?__div_to_l_+2,c
  7601  002392  0E00               	movlw	0
  7602  002394  6E04               	movwf	?__div_to_l_+3,c
  7603  002396  0012               	return	
  7604  002398  90D8               	bcf	status,0,c
  7605  00239A  3607               	rlcf	__div_to_l_@quot,f,c
  7606  00239C  3608               	rlcf	__div_to_l_@quot+1,f,c
  7607  00239E  3609               	rlcf	__div_to_l_@quot+2,f,c
  7608  0023A0  360A               	rlcf	__div_to_l_@quot+3,f,c
  7609  0023A2  060C               	decf	__div_to_l_@exp1,f,c
  7610  0023A4                     i2l977:
  7611  0023A4  500C               	movf	__div_to_l_@exp1,w,c
  7612  0023A6  A4D8               	btfss	status,2,c
  7613  0023A8  D7F7               	goto	i2l978
  7614  0023AA                     i2u279_40:
  7615  0023AA  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  7616  0023AE  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7617  0023B2  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7618  0023B6  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7619  0023BA  0012               	return		;funcret
  7620  0023BC                     __end_of__div_to_l_:
  7621                           	opt stack 0
  7622                           tosu	equ	0xFFF
  7623                           tosh	equ	0xFFE
  7624                           tosl	equ	0xFFD
  7625                           pclatu	equ	0xFFB
  7626                           pclath	equ	0xFFA
  7627                           tblptru	equ	0xFF8
  7628                           tblptrh	equ	0xFF7
  7629                           tblptrl	equ	0xFF6
  7630                           tablat	equ	0xFF5
  7631                           prodh	equ	0xFF4
  7632                           prodl	equ	0xFF3
  7633                           intcon	equ	0xFF2
  7634                           indf0	equ	0xFEF
  7635                           postinc0	equ	0xFEE
  7636                           fsr0h	equ	0xFEA
  7637                           fsr0l	equ	0xFE9
  7638                           wreg	equ	0xFE8
  7639                           postdec1	equ	0xFE5
  7640                           fsr1h	equ	0xFE2
  7641                           fsr1l	equ	0xFE1
  7642                           indf2	equ	0xFDF
  7643                           postinc2	equ	0xFDE
  7644                           postdec2	equ	0xFDD
  7645                           fsr2h	equ	0xFDA
  7646                           fsr2l	equ	0xFD9
  7647                           status	equ	0xFD8
  7648                           
  7649 ;; *************** function ___lltoft *****************
  7650 ;; Defined at:
  7651 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lltoft.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;  c               4    8[COMRAM] unsigned long 
  7654 ;; Auto vars:     Size  Location     Type
  7655 ;;  exp             1   16[COMRAM] unsigned char 
  7656 ;; Return value:  Size  Location     Type
  7657 ;;                  3    8[COMRAM] float 
  7658 ;; Registers used:
  7659 ;;		wreg, status,2, status,0, cstack
  7660 ;; Tracked objects:
  7661 ;;		On entry : 0/0
  7662 ;;		On exit  : 0/0
  7663 ;;		Unchanged: 0/0
  7664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7665 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7666 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7667 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7668 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7669 ;;Total ram usage:        9 bytes
  7670 ;; Hardware stack levels used:    1
  7671 ;; Hardware stack levels required when called:    1
  7672 ;; This function calls:
  7673 ;;		___ftpack
  7674 ;; This function is called by:
  7675 ;;		_sprintf
  7676 ;; This function uses a non-reentrant model
  7677 ;;
  7678                           
  7679                           	psect	text45
  7680  002D10                     __ptext45:
  7681                           	opt stack 0
  7682  002D10                     ___lltoft:
  7683                           	opt stack 17
  7684                           
  7685                           ;incstack = 0
  7686  002D10  0E8E               	movlw	142
  7687  002D12  6E11               	movwf	___lltoft@exp,c
  7688  002D14  D006               	goto	i2l1176
  7689  002D16  90D8               	bcf	status,0,c
  7690  002D18  320C               	rrcf	___lltoft@c+3,f,c
  7691  002D1A  320B               	rrcf	___lltoft@c+2,f,c
  7692  002D1C  320A               	rrcf	___lltoft@c+1,f,c
  7693  002D1E  3209               	rrcf	___lltoft@c,f,c
  7694  002D20  2A11               	incf	___lltoft@exp,f,c
  7695  002D22                     i2l1176:
  7696  002D22  0E00               	movlw	0
  7697  002D24  1409               	andwf	___lltoft@c,w,c
  7698  002D26  6E0D               	movwf	??___lltoft& (0+255),c
  7699  002D28  0E00               	movlw	0
  7700  002D2A  140A               	andwf	___lltoft@c+1,w,c
  7701  002D2C  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  7702  002D2E  0E00               	movlw	0
  7703  002D30  140B               	andwf	___lltoft@c+2,w,c
  7704  002D32  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  7705  002D34  0EFF               	movlw	255
  7706  002D36  140C               	andwf	___lltoft@c+3,w,c
  7707  002D38  6E10               	movwf	(??___lltoft+3)& (0+255),c
  7708  002D3A  500D               	movf	??___lltoft,w,c
  7709  002D3C  100E               	iorwf	??___lltoft+1,w,c
  7710  002D3E  100F               	iorwf	??___lltoft+2,w,c
  7711  002D40  1010               	iorwf	??___lltoft+3,w,c
  7712  002D42  A4D8               	btfss	status,2,c
  7713  002D44  D7E8               	goto	i2l1177
  7714  002D46  C009  F001         	movff	___lltoft@c,___ftpack@arg
  7715  002D4A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  7716  002D4E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  7717  002D52  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  7718  002D56  0E00               	movlw	0
  7719  002D58  6E05               	movwf	___ftpack@sign,c
  7720  002D5A  EC9F  F013         	call	___ftpack	;wreg free
  7721  002D5E  C001  F009         	movff	?___ftpack,?___lltoft
  7722  002D62  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  7723  002D66  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  7724  002D6A  0012               	return	
  7725  002D6C                     __end_of___lltoft:
  7726                           	opt stack 0
  7727                           tosu	equ	0xFFF
  7728                           tosh	equ	0xFFE
  7729                           tosl	equ	0xFFD
  7730                           pclatu	equ	0xFFB
  7731                           pclath	equ	0xFFA
  7732                           tblptru	equ	0xFF8
  7733                           tblptrh	equ	0xFF7
  7734                           tblptrl	equ	0xFF6
  7735                           tablat	equ	0xFF5
  7736                           prodh	equ	0xFF4
  7737                           prodl	equ	0xFF3
  7738                           intcon	equ	0xFF2
  7739                           indf0	equ	0xFEF
  7740                           postinc0	equ	0xFEE
  7741                           fsr0h	equ	0xFEA
  7742                           fsr0l	equ	0xFE9
  7743                           wreg	equ	0xFE8
  7744                           postdec1	equ	0xFE5
  7745                           fsr1h	equ	0xFE2
  7746                           fsr1l	equ	0xFE1
  7747                           indf2	equ	0xFDF
  7748                           postinc2	equ	0xFDE
  7749                           postdec2	equ	0xFDD
  7750                           fsr2h	equ	0xFDA
  7751                           fsr2l	equ	0xFD9
  7752                           status	equ	0xFD8
  7753                           
  7754 ;; *************** function ___llmod *****************
  7755 ;; Defined at:
  7756 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\llmod.c"
  7757 ;; Parameters:    Size  Location     Type
  7758 ;;  dividend        4    0[COMRAM] unsigned long 
  7759 ;;  divisor         4    4[COMRAM] unsigned long 
  7760 ;; Auto vars:     Size  Location     Type
  7761 ;;  counter         1    8[COMRAM] unsigned char 
  7762 ;; Return value:  Size  Location     Type
  7763 ;;                  4    0[COMRAM] unsigned long 
  7764 ;; Registers used:
  7765 ;;		wreg, status,2, status,0
  7766 ;; Tracked objects:
  7767 ;;		On entry : 0/0
  7768 ;;		On exit  : 0/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7771 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7772 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7774 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7775 ;;Total ram usage:        9 bytes
  7776 ;; Hardware stack levels used:    1
  7777 ;; This function calls:
  7778 ;;		Nothing
  7779 ;; This function is called by:
  7780 ;;		_sprintf
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           	psect	text46
  7785  002BEC                     __ptext46:
  7786                           	opt stack 0
  7787  002BEC                     ___llmod:
  7788                           	opt stack 18
  7789                           
  7790                           ;incstack = 0
  7791  002BEC  5005               	movf	___llmod@divisor,w,c
  7792  002BEE  1006               	iorwf	___llmod@divisor+1,w,c
  7793  002BF0  1007               	iorwf	___llmod@divisor+2,w,c
  7794  002BF2  1008               	iorwf	___llmod@divisor+3,w,c
  7795  002BF4  B4D8               	btfsc	status,2,c
  7796  002BF6  D024               	goto	i2l1170
  7797  002BF8  0E01               	movlw	1
  7798  002BFA  6E09               	movwf	___llmod@counter,c
  7799  002BFC  D006               	goto	i2l1165
  7800  002BFE  90D8               	bcf	status,0,c
  7801  002C00  3605               	rlcf	___llmod@divisor,f,c
  7802  002C02  3606               	rlcf	___llmod@divisor+1,f,c
  7803  002C04  3607               	rlcf	___llmod@divisor+2,f,c
  7804  002C06  3608               	rlcf	___llmod@divisor+3,f,c
  7805  002C08  2A09               	incf	___llmod@counter,f,c
  7806  002C0A                     i2l1165:
  7807  002C0A  AE08               	btfss	___llmod@divisor+3,7,c
  7808  002C0C  D7F8               	goto	i2l1166
  7809  002C0E                     i2u302_40:
  7810  002C0E  5005               	movf	___llmod@divisor,w,c
  7811  002C10  5C01               	subwf	___llmod@dividend,w,c
  7812  002C12  5006               	movf	___llmod@divisor+1,w,c
  7813  002C14  5802               	subwfb	___llmod@dividend+1,w,c
  7814  002C16  5007               	movf	___llmod@divisor+2,w,c
  7815  002C18  5803               	subwfb	___llmod@dividend+2,w,c
  7816  002C1A  5008               	movf	___llmod@divisor+3,w,c
  7817  002C1C  5804               	subwfb	___llmod@dividend+3,w,c
  7818  002C1E  A0D8               	btfss	status,0,c
  7819  002C20  D008               	goto	i2l1169
  7820  002C22  5005               	movf	___llmod@divisor,w,c
  7821  002C24  5E01               	subwf	___llmod@dividend,f,c
  7822  002C26  5006               	movf	___llmod@divisor+1,w,c
  7823  002C28  5A02               	subwfb	___llmod@dividend+1,f,c
  7824  002C2A  5007               	movf	___llmod@divisor+2,w,c
  7825  002C2C  5A03               	subwfb	___llmod@dividend+2,f,c
  7826  002C2E  5008               	movf	___llmod@divisor+3,w,c
  7827  002C30  5A04               	subwfb	___llmod@dividend+3,f,c
  7828  002C32                     i2l1169:
  7829  002C32  90D8               	bcf	status,0,c
  7830  002C34  3208               	rrcf	___llmod@divisor+3,f,c
  7831  002C36  3207               	rrcf	___llmod@divisor+2,f,c
  7832  002C38  3206               	rrcf	___llmod@divisor+1,f,c
  7833  002C3A  3205               	rrcf	___llmod@divisor,f,c
  7834  002C3C  2E09               	decfsz	___llmod@counter,f,c
  7835  002C3E  D7E7               	goto	i2u302_40
  7836  002C40                     i2l1170:
  7837  002C40  C001  F001         	movff	___llmod@dividend,?___llmod
  7838  002C44  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  7839  002C48  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  7840  002C4C  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  7841  002C50  0012               	return		;funcret
  7842  002C52                     __end_of___llmod:
  7843                           	opt stack 0
  7844                           tosu	equ	0xFFF
  7845                           tosh	equ	0xFFE
  7846                           tosl	equ	0xFFD
  7847                           pclatu	equ	0xFFB
  7848                           pclath	equ	0xFFA
  7849                           tblptru	equ	0xFF8
  7850                           tblptrh	equ	0xFF7
  7851                           tblptrl	equ	0xFF6
  7852                           tablat	equ	0xFF5
  7853                           prodh	equ	0xFF4
  7854                           prodl	equ	0xFF3
  7855                           intcon	equ	0xFF2
  7856                           indf0	equ	0xFEF
  7857                           postinc0	equ	0xFEE
  7858                           fsr0h	equ	0xFEA
  7859                           fsr0l	equ	0xFE9
  7860                           wreg	equ	0xFE8
  7861                           postdec1	equ	0xFE5
  7862                           fsr1h	equ	0xFE2
  7863                           fsr1l	equ	0xFE1
  7864                           indf2	equ	0xFDF
  7865                           postinc2	equ	0xFDE
  7866                           postdec2	equ	0xFDD
  7867                           fsr2h	equ	0xFDA
  7868                           fsr2l	equ	0xFD9
  7869                           status	equ	0xFD8
  7870                           
  7871 ;; *************** function ___lldiv *****************
  7872 ;; Defined at:
  7873 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;  dividend        4    0[COMRAM] unsigned long 
  7876 ;;  divisor         4    4[COMRAM] unsigned long 
  7877 ;; Auto vars:     Size  Location     Type
  7878 ;;  quotient        4    8[COMRAM] unsigned long 
  7879 ;;  counter         1   12[COMRAM] unsigned char 
  7880 ;; Return value:  Size  Location     Type
  7881 ;;                  4    0[COMRAM] unsigned long 
  7882 ;; Registers used:
  7883 ;;		wreg, status,2, status,0
  7884 ;; Tracked objects:
  7885 ;;		On entry : 0/0
  7886 ;;		On exit  : 0/0
  7887 ;;		Unchanged: 0/0
  7888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7889 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7890 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7892 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7893 ;;Total ram usage:       13 bytes
  7894 ;; Hardware stack levels used:    1
  7895 ;; This function calls:
  7896 ;;		Nothing
  7897 ;; This function is called by:
  7898 ;;		_sprintf
  7899 ;; This function uses a non-reentrant model
  7900 ;;
  7901                           
  7902                           	psect	text47
  7903  002A10                     __ptext47:
  7904                           	opt stack 0
  7905  002A10                     ___lldiv:
  7906                           	opt stack 18
  7907                           
  7908                           ;incstack = 0
  7909  002A10  0E00               	movlw	0
  7910  002A12  6E09               	movwf	___lldiv@quotient,c
  7911  002A14  0E00               	movlw	0
  7912  002A16  6E0A               	movwf	___lldiv@quotient+1,c
  7913  002A18  0E00               	movlw	0
  7914  002A1A  6E0B               	movwf	___lldiv@quotient+2,c
  7915  002A1C  0E00               	movlw	0
  7916  002A1E  6E0C               	movwf	___lldiv@quotient+3,c
  7917  002A20  5005               	movf	___lldiv@divisor,w,c
  7918  002A22  1006               	iorwf	___lldiv@divisor+1,w,c
  7919  002A24  1007               	iorwf	___lldiv@divisor+2,w,c
  7920  002A26  1008               	iorwf	___lldiv@divisor+3,w,c
  7921  002A28  B4D8               	btfsc	status,2,c
  7922  002A2A  D02A               	goto	i2l1160
  7923  002A2C  0E01               	movlw	1
  7924  002A2E  6E0D               	movwf	___lldiv@counter,c
  7925  002A30  D006               	goto	i2l1155
  7926  002A32  90D8               	bcf	status,0,c
  7927  002A34  3605               	rlcf	___lldiv@divisor,f,c
  7928  002A36  3606               	rlcf	___lldiv@divisor+1,f,c
  7929  002A38  3607               	rlcf	___lldiv@divisor+2,f,c
  7930  002A3A  3608               	rlcf	___lldiv@divisor+3,f,c
  7931  002A3C  2A0D               	incf	___lldiv@counter,f,c
  7932  002A3E                     i2l1155:
  7933  002A3E  AE08               	btfss	___lldiv@divisor+3,7,c
  7934  002A40  D7F8               	goto	i2l1156
  7935  002A42                     i2u299_40:
  7936  002A42  90D8               	bcf	status,0,c
  7937  002A44  3609               	rlcf	___lldiv@quotient,f,c
  7938  002A46  360A               	rlcf	___lldiv@quotient+1,f,c
  7939  002A48  360B               	rlcf	___lldiv@quotient+2,f,c
  7940  002A4A  360C               	rlcf	___lldiv@quotient+3,f,c
  7941  002A4C  5005               	movf	___lldiv@divisor,w,c
  7942  002A4E  5C01               	subwf	___lldiv@dividend,w,c
  7943  002A50  5006               	movf	___lldiv@divisor+1,w,c
  7944  002A52  5802               	subwfb	___lldiv@dividend+1,w,c
  7945  002A54  5007               	movf	___lldiv@divisor+2,w,c
  7946  002A56  5803               	subwfb	___lldiv@dividend+2,w,c
  7947  002A58  5008               	movf	___lldiv@divisor+3,w,c
  7948  002A5A  5804               	subwfb	___lldiv@dividend+3,w,c
  7949  002A5C  A0D8               	btfss	status,0,c
  7950  002A5E  D009               	goto	i2l1159
  7951  002A60  5005               	movf	___lldiv@divisor,w,c
  7952  002A62  5E01               	subwf	___lldiv@dividend,f,c
  7953  002A64  5006               	movf	___lldiv@divisor+1,w,c
  7954  002A66  5A02               	subwfb	___lldiv@dividend+1,f,c
  7955  002A68  5007               	movf	___lldiv@divisor+2,w,c
  7956  002A6A  5A03               	subwfb	___lldiv@dividend+2,f,c
  7957  002A6C  5008               	movf	___lldiv@divisor+3,w,c
  7958  002A6E  5A04               	subwfb	___lldiv@dividend+3,f,c
  7959  002A70  8009               	bsf	___lldiv@quotient,0,c
  7960  002A72                     i2l1159:
  7961  002A72  90D8               	bcf	status,0,c
  7962  002A74  3208               	rrcf	___lldiv@divisor+3,f,c
  7963  002A76  3207               	rrcf	___lldiv@divisor+2,f,c
  7964  002A78  3206               	rrcf	___lldiv@divisor+1,f,c
  7965  002A7A  3205               	rrcf	___lldiv@divisor,f,c
  7966  002A7C  2E0D               	decfsz	___lldiv@counter,f,c
  7967  002A7E  D7E1               	goto	i2u299_40
  7968  002A80                     i2l1160:
  7969  002A80  C009  F001         	movff	___lldiv@quotient,?___lldiv
  7970  002A84  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  7971  002A88  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  7972  002A8C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  7973  002A90  0012               	return		;funcret
  7974  002A92                     __end_of___lldiv:
  7975                           	opt stack 0
  7976                           tosu	equ	0xFFF
  7977                           tosh	equ	0xFFE
  7978                           tosl	equ	0xFFD
  7979                           pclatu	equ	0xFFB
  7980                           pclath	equ	0xFFA
  7981                           tblptru	equ	0xFF8
  7982                           tblptrh	equ	0xFF7
  7983                           tblptrl	equ	0xFF6
  7984                           tablat	equ	0xFF5
  7985                           prodh	equ	0xFF4
  7986                           prodl	equ	0xFF3
  7987                           intcon	equ	0xFF2
  7988                           indf0	equ	0xFEF
  7989                           postinc0	equ	0xFEE
  7990                           fsr0h	equ	0xFEA
  7991                           fsr0l	equ	0xFE9
  7992                           wreg	equ	0xFE8
  7993                           postdec1	equ	0xFE5
  7994                           fsr1h	equ	0xFE2
  7995                           fsr1l	equ	0xFE1
  7996                           indf2	equ	0xFDF
  7997                           postinc2	equ	0xFDE
  7998                           postdec2	equ	0xFDD
  7999                           fsr2h	equ	0xFDA
  8000                           fsr2l	equ	0xFD9
  8001                           status	equ	0xFD8
  8002                           
  8003 ;; *************** function ___fttol *****************
  8004 ;; Defined at:
  8005 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  8006 ;; Parameters:    Size  Location     Type
  8007 ;;  f1              3   35[COMRAM] float 
  8008 ;; Auto vars:     Size  Location     Type
  8009 ;;  lval            4   45[COMRAM] unsigned long 
  8010 ;;  exp1            1   49[COMRAM] unsigned char 
  8011 ;;  sign1           1   44[COMRAM] unsigned char 
  8012 ;; Return value:  Size  Location     Type
  8013 ;;                  4   35[COMRAM] long 
  8014 ;; Registers used:
  8015 ;;		wreg, status,2, status,0
  8016 ;; Tracked objects:
  8017 ;;		On entry : 0/0
  8018 ;;		On exit  : 0/0
  8019 ;;		Unchanged: 0/0
  8020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8021 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8022 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8023 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8024 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8025 ;;Total ram usage:       15 bytes
  8026 ;; Hardware stack levels used:    1
  8027 ;; This function calls:
  8028 ;;		Nothing
  8029 ;; This function is called by:
  8030 ;;		_sprintf
  8031 ;; This function uses a non-reentrant model
  8032 ;;
  8033                           
  8034                           	psect	text48
  8035  0023BC                     __ptext48:
  8036                           	opt stack 0
  8037  0023BC                     ___fttol:
  8038                           	opt stack 18
  8039                           
  8040                           ;incstack = 0
  8041  0023BC  C026  F028         	movff	___fttol@f1+2,??___fttol
  8042  0023C0  6A29               	clrf	(??___fttol+1)& (0+255),c
  8043  0023C2  6A2A               	clrf	(??___fttol+2)& (0+255),c
  8044  0023C4  3425               	rlcf	___fttol@f1+1,w,c
  8045  0023C6  3628               	rlcf	??___fttol& (0+255),f,c
  8046  0023C8  E301               	bnc	u290_41
  8047  0023CA  8029               	bsf	(??___fttol+1)& (0+255),0,c
  8048  0023CC                     u290_41:
  8049  0023CC  5028               	movf	??___fttol,w,c
  8050  0023CE  6E32               	movwf	___fttol@exp1,c
  8051  0023D0  5032               	movf	___fttol@exp1,w,c
  8052  0023D2  A4D8               	btfss	status,2,c
  8053  0023D4  D009               	goto	i2l1114
  8054  0023D6  0E00               	movlw	0
  8055  0023D8  6E24               	movwf	?___fttol,c
  8056  0023DA  0E00               	movlw	0
  8057  0023DC  6E25               	movwf	?___fttol+1,c
  8058  0023DE  0E00               	movlw	0
  8059  0023E0  6E26               	movwf	?___fttol+2,c
  8060  0023E2  0E00               	movlw	0
  8061  0023E4  6E27               	movwf	?___fttol+3,c
  8062  0023E6  0012               	return	
  8063  0023E8                     i2l1114:
  8064  0023E8  0E17               	movlw	23
  8065  0023EA  6E28               	movwf	??___fttol& (0+255),c
  8066  0023EC  C024  F029         	movff	___fttol@f1,??___fttol+1
  8067  0023F0  C025  F02A         	movff	___fttol@f1+1,??___fttol+2
  8068  0023F4  C026  F02B         	movff	___fttol@f1+2,??___fttol+3
  8069  0023F8  2828               	incf	??___fttol,w,c
  8070  0023FA  6E2C               	movwf	(??___fttol+4)& (0+255),c
  8071  0023FC  D004               	goto	i2u292_40
  8072  0023FE                     i2u292_45:
  8073  0023FE  90D8               	bcf	status,0,c
  8074  002400  322B               	rrcf	??___fttol+3,f,c
  8075  002402  322A               	rrcf	??___fttol+2,f,c
  8076  002404  3229               	rrcf	??___fttol+1,f,c
  8077  002406                     i2u292_40:
  8078  002406  2E2C               	decfsz	(??___fttol+4)& (0+255),f,c
  8079  002408  D7FA               	goto	i2u292_45
  8080  00240A  5029               	movf	??___fttol+1,w,c
  8081  00240C  6E2D               	movwf	___fttol@sign1,c
  8082  00240E  8E25               	bsf	___fttol@f1+1,7,c
  8083  002410  0EFF               	movlw	255
  8084  002412  1624               	andwf	___fttol@f1,f,c
  8085  002414  0EFF               	movlw	255
  8086  002416  1625               	andwf	___fttol@f1+1,f,c
  8087  002418  0E00               	movlw	0
  8088  00241A  1626               	andwf	___fttol@f1+2,f,c
  8089  00241C  5024               	movf	___fttol@f1,w,c
  8090  00241E  6E2E               	movwf	___fttol@lval,c
  8091  002420  5025               	movf	___fttol@f1+1,w,c
  8092  002422  6E2F               	movwf	___fttol@lval+1,c
  8093  002424  5026               	movf	___fttol@f1+2,w,c
  8094  002426  6E30               	movwf	___fttol@lval+2,c
  8095  002428  6A31               	clrf	___fttol@lval+3,c
  8096  00242A  0E8E               	movlw	142
  8097  00242C  5E32               	subwf	___fttol@exp1,f,c
  8098  00242E  AE32               	btfss	___fttol@exp1,7,c
  8099  002430  D016               	goto	i2l1116
  8100  002432  5032               	movf	___fttol@exp1,w,c
  8101  002434  0A80               	xorlw	128
  8102  002436  0F8F               	addlw	143
  8103  002438  B0D8               	btfsc	status,0,c
  8104  00243A  D009               	goto	i2l1117
  8105  00243C  0E00               	movlw	0
  8106  00243E  6E24               	movwf	?___fttol,c
  8107  002440  0E00               	movlw	0
  8108  002442  6E25               	movwf	?___fttol+1,c
  8109  002444  0E00               	movlw	0
  8110  002446  6E26               	movwf	?___fttol+2,c
  8111  002448  0E00               	movlw	0
  8112  00244A  6E27               	movwf	?___fttol+3,c
  8113  00244C  0012               	return	
  8114  00244E                     i2l1117:
  8115  00244E  90D8               	bcf	status,0,c
  8116  002450  3231               	rrcf	___fttol@lval+3,f,c
  8117  002452  3230               	rrcf	___fttol@lval+2,f,c
  8118  002454  322F               	rrcf	___fttol@lval+1,f,c
  8119  002456  322E               	rrcf	___fttol@lval,f,c
  8120  002458  3E32               	incfsz	___fttol@exp1,f,c
  8121  00245A  D7F9               	goto	i2l1117
  8122  00245C  D015               	goto	i2u296_40
  8123  00245E                     i2l1116:
  8124  00245E  0E17               	movlw	23
  8125  002460  6432               	cpfsgt	___fttol@exp1,c
  8126  002462  D00F               	goto	i2l1122
  8127  002464  0E00               	movlw	0
  8128  002466  6E24               	movwf	?___fttol,c
  8129  002468  0E00               	movlw	0
  8130  00246A  6E25               	movwf	?___fttol+1,c
  8131  00246C  0E00               	movlw	0
  8132  00246E  6E26               	movwf	?___fttol+2,c
  8133  002470  0E00               	movlw	0
  8134  002472  6E27               	movwf	?___fttol+3,c
  8135  002474  0012               	return	
  8136  002476  90D8               	bcf	status,0,c
  8137  002478  362E               	rlcf	___fttol@lval,f,c
  8138  00247A  362F               	rlcf	___fttol@lval+1,f,c
  8139  00247C  3630               	rlcf	___fttol@lval+2,f,c
  8140  00247E  3631               	rlcf	___fttol@lval+3,f,c
  8141  002480  0632               	decf	___fttol@exp1,f,c
  8142  002482                     i2l1122:
  8143  002482  5032               	movf	___fttol@exp1,w,c
  8144  002484  A4D8               	btfss	status,2,c
  8145  002486  D7F7               	goto	i2l1123
  8146  002488                     i2u296_40:
  8147  002488  502D               	movf	___fttol@sign1,w,c
  8148  00248A  B4D8               	btfsc	status,2,c
  8149  00248C  D008               	goto	i2l1125
  8150  00248E  1E31               	comf	___fttol@lval+3,f,c
  8151  002490  1E30               	comf	___fttol@lval+2,f,c
  8152  002492  1E2F               	comf	___fttol@lval+1,f,c
  8153  002494  6C2E               	negf	___fttol@lval,c
  8154  002496  0E00               	movlw	0
  8155  002498  222F               	addwfc	___fttol@lval+1,f,c
  8156  00249A  2230               	addwfc	___fttol@lval+2,f,c
  8157  00249C  2231               	addwfc	___fttol@lval+3,f,c
  8158  00249E                     i2l1125:
  8159  00249E  C02E  F024         	movff	___fttol@lval,?___fttol
  8160  0024A2  C02F  F025         	movff	___fttol@lval+1,?___fttol+1
  8161  0024A6  C030  F026         	movff	___fttol@lval+2,?___fttol+2
  8162  0024AA  C031  F027         	movff	___fttol@lval+3,?___fttol+3
  8163  0024AE  0012               	return	
  8164  0024B0                     __end_of___fttol:
  8165                           	opt stack 0
  8166                           tosu	equ	0xFFF
  8167                           tosh	equ	0xFFE
  8168                           tosl	equ	0xFFD
  8169                           pclatu	equ	0xFFB
  8170                           pclath	equ	0xFFA
  8171                           tblptru	equ	0xFF8
  8172                           tblptrh	equ	0xFF7
  8173                           tblptrl	equ	0xFF6
  8174                           tablat	equ	0xFF5
  8175                           prodh	equ	0xFF4
  8176                           prodl	equ	0xFF3
  8177                           intcon	equ	0xFF2
  8178                           indf0	equ	0xFEF
  8179                           postinc0	equ	0xFEE
  8180                           fsr0h	equ	0xFEA
  8181                           fsr0l	equ	0xFE9
  8182                           wreg	equ	0xFE8
  8183                           postdec1	equ	0xFE5
  8184                           fsr1h	equ	0xFE2
  8185                           fsr1l	equ	0xFE1
  8186                           indf2	equ	0xFDF
  8187                           postinc2	equ	0xFDE
  8188                           postdec2	equ	0xFDD
  8189                           fsr2h	equ	0xFDA
  8190                           fsr2l	equ	0xFD9
  8191                           status	equ	0xFD8
  8192                           
  8193 ;; *************** function ___ftsub *****************
  8194 ;; Defined at:
  8195 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  8196 ;; Parameters:    Size  Location     Type
  8197 ;;  f1              3   57[COMRAM] float 
  8198 ;;  f2              3   60[COMRAM] float 
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;		None
  8201 ;; Return value:  Size  Location     Type
  8202 ;;                  3   57[COMRAM] float 
  8203 ;; Registers used:
  8204 ;;		wreg, status,2, status,0, cstack
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8210 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8213 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8214 ;;Total ram usage:        6 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    2
  8217 ;; This function calls:
  8218 ;;		___ftadd
  8219 ;; This function is called by:
  8220 ;;		_sprintf
  8221 ;; This function uses a non-reentrant model
  8222 ;;
  8223                           
  8224                           	psect	text49
  8225  002F32                     __ptext49:
  8226                           	opt stack 0
  8227  002F32                     ___ftsub:
  8228                           	opt stack 16
  8229                           
  8230                           ;incstack = 0
  8231  002F32  503D               	movf	___ftsub@f2,w,c
  8232  002F34  103E               	iorwf	___ftsub@f2+1,w,c
  8233  002F36  103F               	iorwf	___ftsub@f2+2,w,c
  8234  002F38  B4D8               	btfsc	status,2,c
  8235  002F3A  D006               	goto	i2l1110
  8236  002F3C  0E00               	movlw	0
  8237  002F3E  1A3D               	xorwf	___ftsub@f2,f,c
  8238  002F40  0E00               	movlw	0
  8239  002F42  1A3E               	xorwf	___ftsub@f2+1,f,c
  8240  002F44  0E80               	movlw	128
  8241  002F46  1A3F               	xorwf	___ftsub@f2+2,f,c
  8242  002F48                     i2l1110:
  8243  002F48  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  8244  002F4C  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  8245  002F50  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  8246  002F54  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  8247  002F58  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  8248  002F5C  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  8249  002F60  ECDB  F00F         	call	___ftadd	;wreg free
  8250  002F64  C02E  F03A         	movff	?___ftadd,?___ftsub
  8251  002F68  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  8252  002F6C  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  8253  002F70  0012               	return	
  8254  002F72                     __end_of___ftsub:
  8255                           	opt stack 0
  8256                           tosu	equ	0xFFF
  8257                           tosh	equ	0xFFE
  8258                           tosl	equ	0xFFD
  8259                           pclatu	equ	0xFFB
  8260                           pclath	equ	0xFFA
  8261                           tblptru	equ	0xFF8
  8262                           tblptrh	equ	0xFF7
  8263                           tblptrl	equ	0xFF6
  8264                           tablat	equ	0xFF5
  8265                           prodh	equ	0xFF4
  8266                           prodl	equ	0xFF3
  8267                           intcon	equ	0xFF2
  8268                           indf0	equ	0xFEF
  8269                           postinc0	equ	0xFEE
  8270                           fsr0h	equ	0xFEA
  8271                           fsr0l	equ	0xFE9
  8272                           wreg	equ	0xFE8
  8273                           postdec1	equ	0xFE5
  8274                           fsr1h	equ	0xFE2
  8275                           fsr1l	equ	0xFE1
  8276                           indf2	equ	0xFDF
  8277                           postinc2	equ	0xFDE
  8278                           postdec2	equ	0xFDD
  8279                           fsr2h	equ	0xFDA
  8280                           fsr2l	equ	0xFD9
  8281                           status	equ	0xFD8
  8282                           
  8283 ;; *************** function ___ftadd *****************
  8284 ;; Defined at:
  8285 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  8286 ;; Parameters:    Size  Location     Type
  8287 ;;  f1              3   45[COMRAM] float 
  8288 ;;  f2              3   48[COMRAM] float 
  8289 ;; Auto vars:     Size  Location     Type
  8290 ;;  exp1            1   56[COMRAM] unsigned char 
  8291 ;;  exp2            1   55[COMRAM] unsigned char 
  8292 ;;  sign            1   54[COMRAM] unsigned char 
  8293 ;; Return value:  Size  Location     Type
  8294 ;;                  3   45[COMRAM] float 
  8295 ;; Registers used:
  8296 ;;		wreg, status,2, status,0, cstack
  8297 ;; Tracked objects:
  8298 ;;		On entry : 0/0
  8299 ;;		On exit  : 0/0
  8300 ;;		Unchanged: 0/0
  8301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8302 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8303 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8304 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8305 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8306 ;;Total ram usage:       12 bytes
  8307 ;; Hardware stack levels used:    1
  8308 ;; Hardware stack levels required when called:    1
  8309 ;; This function calls:
  8310 ;;		___ftpack
  8311 ;; This function is called by:
  8312 ;;		_sprintf
  8313 ;;		___ftsub
  8314 ;; This function uses a non-reentrant model
  8315 ;;
  8316                           
  8317                           	psect	text50
  8318  001FB6                     __ptext50:
  8319                           	opt stack 0
  8320  001FB6                     ___ftadd:
  8321                           	opt stack 16
  8322                           
  8323                           ;incstack = 0
  8324  001FB6  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  8325  001FBA  6A35               	clrf	(??___ftadd+1)& (0+255),c
  8326  001FBC  6A36               	clrf	(??___ftadd+2)& (0+255),c
  8327  001FBE  342F               	rlcf	___ftadd@f1+1,w,c
  8328  001FC0  3634               	rlcf	??___ftadd& (0+255),f,c
  8329  001FC2  E301               	bnc	u210_41
  8330  001FC4  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  8331  001FC6                     u210_41:
  8332  001FC6  5034               	movf	??___ftadd,w,c
  8333  001FC8  6E39               	movwf	___ftadd@exp1,c
  8334  001FCA  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  8335  001FCE  6A35               	clrf	(??___ftadd+1)& (0+255),c
  8336  001FD0  6A36               	clrf	(??___ftadd+2)& (0+255),c
  8337  001FD2  3432               	rlcf	___ftadd@f2+1,w,c
  8338  001FD4  3634               	rlcf	??___ftadd& (0+255),f,c
  8339  001FD6  E301               	bnc	u211_41
  8340  001FD8  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  8341  001FDA                     u211_41:
  8342  001FDA  5034               	movf	??___ftadd,w,c
  8343  001FDC  6E38               	movwf	___ftadd@exp2,c
  8344  001FDE  5039               	movf	___ftadd@exp1,w,c
  8345  001FE0  B4D8               	btfsc	status,2,c
  8346  001FE2  D00B               	goto	i2u214_40
  8347  001FE4  5038               	movf	___ftadd@exp2,w,c
  8348  001FE6  5C39               	subwf	___ftadd@exp1,w,c
  8349  001FE8  B0D8               	btfsc	status,0,c
  8350  001FEA  D00E               	goto	i2l1028
  8351  001FEC  5039               	movf	___ftadd@exp1,w,c
  8352  001FEE  0800               	sublw	0
  8353  001FF0  2438               	addwf	___ftadd@exp2,w,c
  8354  001FF2  6E34               	movwf	??___ftadd& (0+255),c
  8355  001FF4  0E18               	movlw	24
  8356  001FF6  6434               	cpfsgt	??___ftadd,c
  8357  001FF8  D007               	goto	i2l1028
  8358  001FFA                     i2u214_40:
  8359  001FFA  C031  F02E         	movff	___ftadd@f2,?___ftadd
  8360  001FFE  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  8361  002002  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  8362  002006  0012               	return	
  8363  002008                     i2l1028:
  8364  002008  5038               	movf	___ftadd@exp2,w,c
  8365  00200A  B4D8               	btfsc	status,2,c
  8366  00200C  D00B               	goto	i2u217_40
  8367  00200E  5039               	movf	___ftadd@exp1,w,c
  8368  002010  5C38               	subwf	___ftadd@exp2,w,c
  8369  002012  B0D8               	btfsc	status,0,c
  8370  002014  D00E               	goto	i2l1032
  8371  002016  5038               	movf	___ftadd@exp2,w,c
  8372  002018  0800               	sublw	0
  8373  00201A  2439               	addwf	___ftadd@exp1,w,c
  8374  00201C  6E34               	movwf	??___ftadd& (0+255),c
  8375  00201E  0E18               	movlw	24
  8376  002020  6434               	cpfsgt	??___ftadd,c
  8377  002022  D007               	goto	i2l1032
  8378  002024                     i2u217_40:
  8379  002024  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  8380  002028  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  8381  00202C  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  8382  002030  0012               	return	
  8383  002032                     i2l1032:
  8384  002032  0E06               	movlw	6
  8385  002034  6E37               	movwf	___ftadd@sign,c
  8386  002036  BE30               	btfsc	___ftadd@f1+2,7,c
  8387  002038  8E37               	bsf	___ftadd@sign,7,c
  8388  00203A  BE33               	btfsc	___ftadd@f2+2,7,c
  8389  00203C  8C37               	bsf	___ftadd@sign,6,c
  8390  00203E  8E2F               	bsf	___ftadd@f1+1,7,c
  8391  002040  0EFF               	movlw	255
  8392  002042  162E               	andwf	___ftadd@f1,f,c
  8393  002044  0EFF               	movlw	255
  8394  002046  162F               	andwf	___ftadd@f1+1,f,c
  8395  002048  0E00               	movlw	0
  8396  00204A  1630               	andwf	___ftadd@f1+2,f,c
  8397  00204C  8E32               	bsf	___ftadd@f2+1,7,c
  8398  00204E  0EFF               	movlw	255
  8399  002050  1631               	andwf	___ftadd@f2,f,c
  8400  002052  0EFF               	movlw	255
  8401  002054  1632               	andwf	___ftadd@f2+1,f,c
  8402  002056  0E00               	movlw	0
  8403  002058  1633               	andwf	___ftadd@f2+2,f,c
  8404  00205A  5038               	movf	___ftadd@exp2,w,c
  8405  00205C  5C39               	subwf	___ftadd@exp1,w,c
  8406  00205E  B0D8               	btfsc	status,0,c
  8407  002060  D01B               	goto	i2l1037
  8408  002062                     i2u220_40:
  8409  002062  90D8               	bcf	status,0,c
  8410  002064  3631               	rlcf	___ftadd@f2,f,c
  8411  002066  3632               	rlcf	___ftadd@f2+1,f,c
  8412  002068  3633               	rlcf	___ftadd@f2+2,f,c
  8413  00206A  0638               	decf	___ftadd@exp2,f,c
  8414  00206C  5039               	movf	___ftadd@exp1,w,c
  8415  00206E  1838               	xorwf	___ftadd@exp2,w,c
  8416  002070  B4D8               	btfsc	status,2,c
  8417  002072  D00D               	goto	i2l1042
  8418  002074  0637               	decf	___ftadd@sign,f,c
  8419  002076  C037  F034         	movff	___ftadd@sign,??___ftadd
  8420  00207A  0E07               	movlw	7
  8421  00207C  1634               	andwf	??___ftadd,f,c
  8422  00207E  B4D8               	btfsc	status,2,c
  8423  002080  D006               	goto	i2l1042
  8424  002082  D7EF               	goto	i2u220_40
  8425  002084  90D8               	bcf	status,0,c
  8426  002086  3230               	rrcf	___ftadd@f1+2,f,c
  8427  002088  322F               	rrcf	___ftadd@f1+1,f,c
  8428  00208A  322E               	rrcf	___ftadd@f1,f,c
  8429  00208C  2A39               	incf	___ftadd@exp1,f,c
  8430  00208E                     i2l1042:
  8431  00208E  5038               	movf	___ftadd@exp2,w,c
  8432  002090  1839               	xorwf	___ftadd@exp1,w,c
  8433  002092  B4D8               	btfsc	status,2,c
  8434  002094  D01F               	goto	i2u227_40
  8435  002096  D7F6               	goto	i2l1043
  8436  002098                     i2l1037:
  8437  002098  5039               	movf	___ftadd@exp1,w,c
  8438  00209A  5C38               	subwf	___ftadd@exp2,w,c
  8439  00209C  B0D8               	btfsc	status,0,c
  8440  00209E  D01A               	goto	i2u227_40
  8441  0020A0                     i2u224_40:
  8442  0020A0  90D8               	bcf	status,0,c
  8443  0020A2  362E               	rlcf	___ftadd@f1,f,c
  8444  0020A4  362F               	rlcf	___ftadd@f1+1,f,c
  8445  0020A6  3630               	rlcf	___ftadd@f1+2,f,c
  8446  0020A8  0639               	decf	___ftadd@exp1,f,c
  8447  0020AA  5039               	movf	___ftadd@exp1,w,c
  8448  0020AC  1838               	xorwf	___ftadd@exp2,w,c
  8449  0020AE  B4D8               	btfsc	status,2,c
  8450  0020B0  D00D               	goto	i2l1051
  8451  0020B2  0637               	decf	___ftadd@sign,f,c
  8452  0020B4  C037  F034         	movff	___ftadd@sign,??___ftadd
  8453  0020B8  0E07               	movlw	7
  8454  0020BA  1634               	andwf	??___ftadd,f,c
  8455  0020BC  B4D8               	btfsc	status,2,c
  8456  0020BE  D006               	goto	i2l1051
  8457  0020C0  D7EF               	goto	i2u224_40
  8458  0020C2  90D8               	bcf	status,0,c
  8459  0020C4  3233               	rrcf	___ftadd@f2+2,f,c
  8460  0020C6  3232               	rrcf	___ftadd@f2+1,f,c
  8461  0020C8  3231               	rrcf	___ftadd@f2,f,c
  8462  0020CA  2A38               	incf	___ftadd@exp2,f,c
  8463  0020CC                     i2l1051:
  8464  0020CC  5038               	movf	___ftadd@exp2,w,c
  8465  0020CE  1839               	xorwf	___ftadd@exp1,w,c
  8466  0020D0  A4D8               	btfss	status,2,c
  8467  0020D2  D7F7               	goto	i2l1052
  8468  0020D4                     i2u227_40:
  8469  0020D4  AE37               	btfss	___ftadd@sign,7,c
  8470  0020D6  D00C               	goto	i2l1054
  8471  0020D8  0EFF               	movlw	255
  8472  0020DA  1A2E               	xorwf	___ftadd@f1,f,c
  8473  0020DC  0EFF               	movlw	255
  8474  0020DE  1A2F               	xorwf	___ftadd@f1+1,f,c
  8475  0020E0  0EFF               	movlw	255
  8476  0020E2  1A30               	xorwf	___ftadd@f1+2,f,c
  8477  0020E4  0E01               	movlw	1
  8478  0020E6  262E               	addwf	___ftadd@f1,f,c
  8479  0020E8  0E00               	movlw	0
  8480  0020EA  222F               	addwfc	___ftadd@f1+1,f,c
  8481  0020EC  0E00               	movlw	0
  8482  0020EE  2230               	addwfc	___ftadd@f1+2,f,c
  8483  0020F0                     i2l1054:
  8484  0020F0  AC37               	btfss	___ftadd@sign,6,c
  8485  0020F2  D00C               	goto	i2l1055
  8486  0020F4  0EFF               	movlw	255
  8487  0020F6  1A31               	xorwf	___ftadd@f2,f,c
  8488  0020F8  0EFF               	movlw	255
  8489  0020FA  1A32               	xorwf	___ftadd@f2+1,f,c
  8490  0020FC  0EFF               	movlw	255
  8491  0020FE  1A33               	xorwf	___ftadd@f2+2,f,c
  8492  002100  0E01               	movlw	1
  8493  002102  2631               	addwf	___ftadd@f2,f,c
  8494  002104  0E00               	movlw	0
  8495  002106  2232               	addwfc	___ftadd@f2+1,f,c
  8496  002108  0E00               	movlw	0
  8497  00210A  2233               	addwfc	___ftadd@f2+2,f,c
  8498  00210C                     i2l1055:
  8499  00210C  0E00               	movlw	0
  8500  00210E  6E37               	movwf	___ftadd@sign,c
  8501  002110  502E               	movf	___ftadd@f1,w,c
  8502  002112  2631               	addwf	___ftadd@f2,f,c
  8503  002114  502F               	movf	___ftadd@f1+1,w,c
  8504  002116  2232               	addwfc	___ftadd@f2+1,f,c
  8505  002118  5030               	movf	___ftadd@f1+2,w,c
  8506  00211A  2233               	addwfc	___ftadd@f2+2,f,c
  8507  00211C  AE33               	btfss	___ftadd@f2+2,7,c
  8508  00211E  D00E               	goto	i2l1056
  8509  002120  0EFF               	movlw	255
  8510  002122  1A31               	xorwf	___ftadd@f2,f,c
  8511  002124  0EFF               	movlw	255
  8512  002126  1A32               	xorwf	___ftadd@f2+1,f,c
  8513  002128  0EFF               	movlw	255
  8514  00212A  1A33               	xorwf	___ftadd@f2+2,f,c
  8515  00212C  0E01               	movlw	1
  8516  00212E  2631               	addwf	___ftadd@f2,f,c
  8517  002130  0E00               	movlw	0
  8518  002132  2232               	addwfc	___ftadd@f2+1,f,c
  8519  002134  0E00               	movlw	0
  8520  002136  2233               	addwfc	___ftadd@f2+2,f,c
  8521  002138  0E01               	movlw	1
  8522  00213A  6E37               	movwf	___ftadd@sign,c
  8523  00213C                     i2l1056:
  8524  00213C  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  8525  002140  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  8526  002144  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  8527  002148  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  8528  00214C  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  8529  002150  EC9F  F013         	call	___ftpack	;wreg free
  8530  002154  C001  F02E         	movff	?___ftpack,?___ftadd
  8531  002158  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  8532  00215C  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  8533  002160  0012               	return	
  8534  002162                     __end_of___ftadd:
  8535                           	opt stack 0
  8536                           tosu	equ	0xFFF
  8537                           tosh	equ	0xFFE
  8538                           tosl	equ	0xFFD
  8539                           pclatu	equ	0xFFB
  8540                           pclath	equ	0xFFA
  8541                           tblptru	equ	0xFF8
  8542                           tblptrh	equ	0xFF7
  8543                           tblptrl	equ	0xFF6
  8544                           tablat	equ	0xFF5
  8545                           prodh	equ	0xFF4
  8546                           prodl	equ	0xFF3
  8547                           intcon	equ	0xFF2
  8548                           indf0	equ	0xFEF
  8549                           postinc0	equ	0xFEE
  8550                           fsr0h	equ	0xFEA
  8551                           fsr0l	equ	0xFE9
  8552                           wreg	equ	0xFE8
  8553                           postdec1	equ	0xFE5
  8554                           fsr1h	equ	0xFE2
  8555                           fsr1l	equ	0xFE1
  8556                           indf2	equ	0xFDF
  8557                           postinc2	equ	0xFDE
  8558                           postdec2	equ	0xFDD
  8559                           fsr2h	equ	0xFDA
  8560                           fsr2l	equ	0xFD9
  8561                           status	equ	0xFD8
  8562                           
  8563 ;; *************** function ___ftneg *****************
  8564 ;; Defined at:
  8565 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  8566 ;; Parameters:    Size  Location     Type
  8567 ;;  f1              3    0[COMRAM] float 
  8568 ;; Auto vars:     Size  Location     Type
  8569 ;;		None
  8570 ;; Return value:  Size  Location     Type
  8571 ;;                  3    0[COMRAM] float 
  8572 ;; Registers used:
  8573 ;;		wreg, status,2, status,0
  8574 ;; Tracked objects:
  8575 ;;		On entry : 0/0
  8576 ;;		On exit  : 0/0
  8577 ;;		Unchanged: 0/0
  8578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8579 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8582 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8583 ;;Total ram usage:        3 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; This function calls:
  8586 ;;		Nothing
  8587 ;; This function is called by:
  8588 ;;		_sprintf
  8589 ;; This function uses a non-reentrant model
  8590 ;;
  8591                           
  8592                           	psect	text51
  8593  00307C                     __ptext51:
  8594                           	opt stack 0
  8595  00307C                     ___ftneg:
  8596                           	opt stack 18
  8597                           
  8598                           ;incstack = 0
  8599  00307C  5001               	movf	___ftneg@f1,w,c
  8600  00307E  1002               	iorwf	___ftneg@f1+1,w,c
  8601  003080  1003               	iorwf	___ftneg@f1+2,w,c
  8602  003082  B4D8               	btfsc	status,2,c
  8603  003084  D006               	goto	i2l1104
  8604  003086  0E00               	movlw	0
  8605  003088  1A01               	xorwf	___ftneg@f1,f,c
  8606  00308A  0E00               	movlw	0
  8607  00308C  1A02               	xorwf	___ftneg@f1+1,f,c
  8608  00308E  0E80               	movlw	128
  8609  003090  1A03               	xorwf	___ftneg@f1+2,f,c
  8610  003092                     i2l1104:
  8611  003092  C001  F001         	movff	___ftneg@f1,?___ftneg
  8612  003096  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  8613  00309A  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  8614  00309E  0012               	return		;funcret
  8615  0030A0                     __end_of___ftneg:
  8616                           	opt stack 0
  8617                           tosu	equ	0xFFF
  8618                           tosh	equ	0xFFE
  8619                           tosl	equ	0xFFD
  8620                           pclatu	equ	0xFFB
  8621                           pclath	equ	0xFFA
  8622                           tblptru	equ	0xFF8
  8623                           tblptrh	equ	0xFF7
  8624                           tblptrl	equ	0xFF6
  8625                           tablat	equ	0xFF5
  8626                           prodh	equ	0xFF4
  8627                           prodl	equ	0xFF3
  8628                           intcon	equ	0xFF2
  8629                           indf0	equ	0xFEF
  8630                           postinc0	equ	0xFEE
  8631                           fsr0h	equ	0xFEA
  8632                           fsr0l	equ	0xFE9
  8633                           wreg	equ	0xFE8
  8634                           postdec1	equ	0xFE5
  8635                           fsr1h	equ	0xFE2
  8636                           fsr1l	equ	0xFE1
  8637                           indf2	equ	0xFDF
  8638                           postinc2	equ	0xFDE
  8639                           postdec2	equ	0xFDD
  8640                           fsr2h	equ	0xFDA
  8641                           fsr2l	equ	0xFD9
  8642                           status	equ	0xFD8
  8643                           
  8644 ;; *************** function _regularTemperatura *****************
  8645 ;; Defined at:
  8646 ;;		line 100 in file "main.c"
  8647 ;; Parameters:    Size  Location     Type
  8648 ;;  temp            3    9[COMRAM] float 
  8649 ;; Auto vars:     Size  Location     Type
  8650 ;;		None
  8651 ;; Return value:  Size  Location     Type
  8652 ;;                  1    wreg      void 
  8653 ;; Registers used:
  8654 ;;		wreg, status,2, status,0, cstack
  8655 ;; Tracked objects:
  8656 ;;		On entry : 0/0
  8657 ;;		On exit  : 0/0
  8658 ;;		Unchanged: 0/0
  8659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8660 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8663 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8664 ;;Total ram usage:        3 bytes
  8665 ;; Hardware stack levels used:    1
  8666 ;; Hardware stack levels required when called:    1
  8667 ;; This function calls:
  8668 ;;		___ftge
  8669 ;; This function is called by:
  8670 ;;		_timerInt
  8671 ;; This function uses a non-reentrant model
  8672 ;;
  8673                           
  8674                           	psect	text52
  8675  00287C                     __ptext52:
  8676                           	opt stack 0
  8677  00287C                     _regularTemperatura:
  8678                           	opt stack 18
  8679                           
  8680                           ;main.c: 102: if (temp >= 60)
  8681                           
  8682                           ;incstack = 0
  8683  00287C  C00A  F001         	movff	regularTemperatura@temp,___ftge@ff1
  8684  002880  C00B  F002         	movff	regularTemperatura@temp+1,___ftge@ff1+1
  8685  002884  C00C  F003         	movff	regularTemperatura@temp+2,___ftge@ff1+2
  8686  002888  0E00               	movlw	0
  8687  00288A  6E04               	movwf	___ftge@ff2,c
  8688  00288C  0E70               	movlw	112
  8689  00288E  6E05               	movwf	___ftge@ff2+1,c
  8690  002890  0E42               	movlw	66
  8691  002892  6E06               	movwf	___ftge@ff2+2,c
  8692  002894  ECF6  F013         	call	___ftge	;wreg free
  8693  002898  B0D8               	btfsc	status,0,c
  8694                           
  8695                           ;main.c: 103: {
  8696                           ;main.c: 104: aireacondicionadoON = 1;
  8697  00289A  805E               	bsf	_aireacondicionadoON/(0+8),_aireacondicionadoON& (0+7),c
  8698                           
  8699                           ;main.c: 105: }
  8700                           ;main.c: 106: if (temp <= 50 && aireacondicionadoON)
  8701  00289C  0E00               	movlw	0
  8702  00289E  6E01               	movwf	___ftge@ff1,c
  8703  0028A0  0E48               	movlw	72
  8704  0028A2  6E02               	movwf	___ftge@ff1+1,c
  8705  0028A4  0E42               	movlw	66
  8706  0028A6  6E03               	movwf	___ftge@ff1+2,c
  8707  0028A8  C00A  F004         	movff	regularTemperatura@temp,___ftge@ff2
  8708  0028AC  C00B  F005         	movff	regularTemperatura@temp+1,___ftge@ff2+1
  8709  0028B0  C00C  F006         	movff	regularTemperatura@temp+2,___ftge@ff2+2
  8710  0028B4  ECF6  F013         	call	___ftge	;wreg free
  8711  0028B8  B0D8               	btfsc	status,0,c
  8712  0028BA  A05E               	btfss	_aireacondicionadoON/(0+8),_aireacondicionadoON& (0+7),c
  8713  0028BC  D001               	goto	i2l547
  8714                           
  8715                           ;main.c: 107: {
  8716                           ;main.c: 108: aireacondicionadoON = 0;
  8717  0028BE  905E               	bcf	_aireacondicionadoON/(0+8),_aireacondicionadoON& (0+7),c
  8718  0028C0                     i2l547:
  8719                           
  8720                           ;main.c: 109: }
  8721                           ;main.c: 111: if (temp <= 20)
  8722  0028C0  0E00               	movlw	0
  8723  0028C2  6E01               	movwf	___ftge@ff1,c
  8724  0028C4  0EA0               	movlw	160
  8725  0028C6  6E02               	movwf	___ftge@ff1+1,c
  8726  0028C8  0E41               	movlw	65
  8727  0028CA  6E03               	movwf	___ftge@ff1+2,c
  8728  0028CC  C00A  F004         	movff	regularTemperatura@temp,___ftge@ff2
  8729  0028D0  C00B  F005         	movff	regularTemperatura@temp+1,___ftge@ff2+1
  8730  0028D4  C00C  F006         	movff	regularTemperatura@temp+2,___ftge@ff2+2
  8731  0028D8  ECF6  F013         	call	___ftge	;wreg free
  8732  0028DC  B0D8               	btfsc	status,0,c
  8733                           
  8734                           ;main.c: 112: {
  8735                           ;main.c: 113: calefactorON = 1;
  8736  0028DE  825E               	bsf	_calefactorON/(0+8),_calefactorON& (0+7),c
  8737                           
  8738                           ;main.c: 114: }
  8739                           ;main.c: 115: if (temp >= 30 && calefactorON)
  8740  0028E0  C00A  F001         	movff	regularTemperatura@temp,___ftge@ff1
  8741  0028E4  C00B  F002         	movff	regularTemperatura@temp+1,___ftge@ff1+1
  8742  0028E8  C00C  F003         	movff	regularTemperatura@temp+2,___ftge@ff1+2
  8743  0028EC  0E00               	movlw	0
  8744  0028EE  6E04               	movwf	___ftge@ff2,c
  8745  0028F0  0EF0               	movlw	240
  8746  0028F2  6E05               	movwf	___ftge@ff2+1,c
  8747  0028F4  0E41               	movlw	65
  8748  0028F6  6E06               	movwf	___ftge@ff2+2,c
  8749  0028F8  ECF6  F013         	call	___ftge	;wreg free
  8750  0028FC  A0D8               	btfss	status,0,c
  8751  0028FE  0012               	return	
  8752  002900  A25E               	btfss	_calefactorON/(0+8),_calefactorON& (0+7),c
  8753  002902  0012               	return	
  8754                           
  8755                           ;main.c: 116: {
  8756                           ;main.c: 117: calefactorON = 0;
  8757  002904  925E               	bcf	_calefactorON/(0+8),_calefactorON& (0+7),c
  8758  002906  0012               	return	
  8759  002908                     __end_of_regularTemperatura:
  8760                           	opt stack 0
  8761                           tosu	equ	0xFFF
  8762                           tosh	equ	0xFFE
  8763                           tosl	equ	0xFFD
  8764                           pclatu	equ	0xFFB
  8765                           pclath	equ	0xFFA
  8766                           tblptru	equ	0xFF8
  8767                           tblptrh	equ	0xFF7
  8768                           tblptrl	equ	0xFF6
  8769                           tablat	equ	0xFF5
  8770                           prodh	equ	0xFF4
  8771                           prodl	equ	0xFF3
  8772                           intcon	equ	0xFF2
  8773                           indf0	equ	0xFEF
  8774                           postinc0	equ	0xFEE
  8775                           fsr0h	equ	0xFEA
  8776                           fsr0l	equ	0xFE9
  8777                           wreg	equ	0xFE8
  8778                           postdec1	equ	0xFE5
  8779                           fsr1h	equ	0xFE2
  8780                           fsr1l	equ	0xFE1
  8781                           indf2	equ	0xFDF
  8782                           postinc2	equ	0xFDE
  8783                           postdec2	equ	0xFDD
  8784                           fsr2h	equ	0xFDA
  8785                           fsr2l	equ	0xFD9
  8786                           status	equ	0xFD8
  8787                           
  8788 ;; *************** function ___ftge *****************
  8789 ;; Defined at:
  8790 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  8791 ;; Parameters:    Size  Location     Type
  8792 ;;  ff1             3    0[COMRAM] float 
  8793 ;;  ff2             3    3[COMRAM] float 
  8794 ;; Auto vars:     Size  Location     Type
  8795 ;;		None
  8796 ;; Return value:  Size  Location     Type
  8797 ;;		None               void
  8798 ;; Registers used:
  8799 ;;		wreg, status,2, status,0
  8800 ;; Tracked objects:
  8801 ;;		On entry : 0/0
  8802 ;;		On exit  : 0/0
  8803 ;;		Unchanged: 0/0
  8804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8805 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8807 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8808 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8809 ;;Total ram usage:        9 bytes
  8810 ;; Hardware stack levels used:    1
  8811 ;; This function calls:
  8812 ;;		Nothing
  8813 ;; This function is called by:
  8814 ;;		_regularTemperatura
  8815 ;;		_sprintf
  8816 ;; This function uses a non-reentrant model
  8817 ;;
  8818                           
  8819                           	psect	text53
  8820  0027EC                     __ptext53:
  8821                           	opt stack 0
  8822  0027EC                     ___ftge:
  8823                           	opt stack 18
  8824                           
  8825                           ;incstack = 0
  8826  0027EC  AE03               	btfss	___ftge@ff1+2,7,c
  8827  0027EE  D016               	goto	i2l1086
  8828  0027F0  C001  F007         	movff	___ftge@ff1,??___ftge
  8829  0027F4  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  8830  0027F8  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  8831  0027FC  1E07               	comf	??___ftge,f,c
  8832  0027FE  1E08               	comf	??___ftge+1,f,c
  8833  002800  1E09               	comf	??___ftge+2,f,c
  8834  002802  2A07               	incf	??___ftge,f,c
  8835  002804  0E00               	movlw	0
  8836  002806  2208               	addwfc	??___ftge+1,f,c
  8837  002808  2209               	addwfc	??___ftge+2,f,c
  8838  00280A  0E00               	movlw	0
  8839  00280C  2407               	addwf	??___ftge,w,c
  8840  00280E  6E01               	movwf	___ftge@ff1,c
  8841  002810  0E00               	movlw	0
  8842  002812  2008               	addwfc	??___ftge+1,w,c
  8843  002814  6E02               	movwf	___ftge@ff1+1,c
  8844  002816  0E80               	movlw	128
  8845  002818  2009               	addwfc	??___ftge+2,w,c
  8846  00281A  6E03               	movwf	___ftge@ff1+2,c
  8847  00281C                     i2l1086:
  8848  00281C  AE06               	btfss	___ftge@ff2+2,7,c
  8849  00281E  D016               	goto	i2l1087
  8850  002820  C004  F007         	movff	___ftge@ff2,??___ftge
  8851  002824  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  8852  002828  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  8853  00282C  1E07               	comf	??___ftge,f,c
  8854  00282E  1E08               	comf	??___ftge+1,f,c
  8855  002830  1E09               	comf	??___ftge+2,f,c
  8856  002832  2A07               	incf	??___ftge,f,c
  8857  002834  0E00               	movlw	0
  8858  002836  2208               	addwfc	??___ftge+1,f,c
  8859  002838  2209               	addwfc	??___ftge+2,f,c
  8860  00283A  0E00               	movlw	0
  8861  00283C  2407               	addwf	??___ftge,w,c
  8862  00283E  6E04               	movwf	___ftge@ff2,c
  8863  002840  0E00               	movlw	0
  8864  002842  2008               	addwfc	??___ftge+1,w,c
  8865  002844  6E05               	movwf	___ftge@ff2+1,c
  8866  002846  0E80               	movlw	128
  8867  002848  2009               	addwfc	??___ftge+2,w,c
  8868  00284A  6E06               	movwf	___ftge@ff2+2,c
  8869  00284C                     i2l1087:
  8870  00284C  0E00               	movlw	0
  8871  00284E  1A01               	xorwf	___ftge@ff1,f,c
  8872  002850  0E00               	movlw	0
  8873  002852  1A02               	xorwf	___ftge@ff1+1,f,c
  8874  002854  0E80               	movlw	128
  8875  002856  1A03               	xorwf	___ftge@ff1+2,f,c
  8876  002858  0E00               	movlw	0
  8877  00285A  1A04               	xorwf	___ftge@ff2,f,c
  8878  00285C  0E00               	movlw	0
  8879  00285E  1A05               	xorwf	___ftge@ff2+1,f,c
  8880  002860  0E80               	movlw	128
  8881  002862  1A06               	xorwf	___ftge@ff2+2,f,c
  8882  002864  5004               	movf	___ftge@ff2,w,c
  8883  002866  5C01               	subwf	___ftge@ff1,w,c
  8884  002868  5005               	movf	___ftge@ff2+1,w,c
  8885  00286A  5802               	subwfb	___ftge@ff1+1,w,c
  8886  00286C  5006               	movf	___ftge@ff2+2,w,c
  8887  00286E  5803               	subwfb	___ftge@ff1+2,w,c
  8888  002870  B0D8               	btfsc	status,0,c
  8889  002872  D002               	goto	i2l2946
  8890  002874  90D8               	bcf	status,0,c
  8891  002876  0012               	return	
  8892  002878                     i2l2946:
  8893  002878  80D8               	bsf	status,0,c
  8894  00287A  0012               	return	
  8895  00287C                     __end_of___ftge:
  8896                           	opt stack 0
  8897                           tosu	equ	0xFFF
  8898                           tosh	equ	0xFFE
  8899                           tosl	equ	0xFFD
  8900                           pclatu	equ	0xFFB
  8901                           pclath	equ	0xFFA
  8902                           tblptru	equ	0xFF8
  8903                           tblptrh	equ	0xFF7
  8904                           tblptrl	equ	0xFF6
  8905                           tablat	equ	0xFF5
  8906                           prodh	equ	0xFF4
  8907                           prodl	equ	0xFF3
  8908                           intcon	equ	0xFF2
  8909                           indf0	equ	0xFEF
  8910                           postinc0	equ	0xFEE
  8911                           fsr0h	equ	0xFEA
  8912                           fsr0l	equ	0xFE9
  8913                           wreg	equ	0xFE8
  8914                           postdec1	equ	0xFE5
  8915                           fsr1h	equ	0xFE2
  8916                           fsr1l	equ	0xFE1
  8917                           indf2	equ	0xFDF
  8918                           postinc2	equ	0xFDE
  8919                           postdec2	equ	0xFDD
  8920                           fsr2h	equ	0xFDA
  8921                           fsr2l	equ	0xFD9
  8922                           status	equ	0xFD8
  8923                           
  8924 ;; *************** function _getTemperatura *****************
  8925 ;; Defined at:
  8926 ;;		line 93 in file "main.c"
  8927 ;; Parameters:    Size  Location     Type
  8928 ;;		None
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;  valorADC        2   53[COMRAM] unsigned int 
  8931 ;; Return value:  Size  Location     Type
  8932 ;;                  3   50[COMRAM] float 
  8933 ;; Registers used:
  8934 ;;		wreg, status,2, status,0, cstack
  8935 ;; Tracked objects:
  8936 ;;		On entry : 0/0
  8937 ;;		On exit  : 0/0
  8938 ;;		Unchanged: 0/0
  8939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8940 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8941 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8943 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8944 ;;Total ram usage:        5 bytes
  8945 ;; Hardware stack levels used:    1
  8946 ;; Hardware stack levels required when called:    2
  8947 ;; This function calls:
  8948 ;;		_ADCC_GetSingleConversion
  8949 ;;		___ftdiv
  8950 ;;		___ftmul
  8951 ;;		___lwtoft
  8952 ;; This function is called by:
  8953 ;;		_timerInt
  8954 ;; This function uses a non-reentrant model
  8955 ;;
  8956                           
  8957                           	psect	text54
  8958  002B80                     __ptext54:
  8959                           	opt stack 0
  8960  002B80                     _getTemperatura:
  8961                           	opt stack 17
  8962                           
  8963                           ;main.c: 95: unsigned int valorADC = 1023 - ADCC_GetSingleConversion(0);
  8964                           
  8965                           ;incstack = 0
  8966  002B80  0E00               	movlw	0
  8967  002B82  EC62  F018         	call	_ADCC_GetSingleConversion
  8968  002B86  1E01               	comf	?_ADCC_GetSingleConversion,f,c
  8969  002B88  1E02               	comf	?_ADCC_GetSingleConversion+1,f,c
  8970  002B8A  4A01               	infsnz	?_ADCC_GetSingleConversion,f,c
  8971  002B8C  2A02               	incf	?_ADCC_GetSingleConversion+1,f,c
  8972  002B8E  0EFF               	movlw	255
  8973  002B90  2401               	addwf	?_ADCC_GetSingleConversion,w,c
  8974  002B92  6E36               	movwf	getTemperatura@valorADC,c
  8975  002B94  0E03               	movlw	3
  8976  002B96  2002               	addwfc	?_ADCC_GetSingleConversion+1,w,c
  8977  002B98  6E37               	movwf	getTemperatura@valorADC+1,c
  8978                           
  8979                           ;main.c: 97: return (100.0 * (valorADC) / 1023);
  8980  002B9A  0E00               	movlw	0
  8981  002B9C  6E18               	movwf	___ftmul@f2,c
  8982  002B9E  0EC8               	movlw	200
  8983  002BA0  6E19               	movwf	___ftmul@f2+1,c
  8984  002BA2  0E42               	movlw	66
  8985  002BA4  6E1A               	movwf	___ftmul@f2+2,c
  8986  002BA6  C036  F009         	movff	getTemperatura@valorADC,___lwtoft@c
  8987  002BAA  C037  F00A         	movff	getTemperatura@valorADC+1,___lwtoft@c+1
  8988  002BAE  EC50  F018         	call	___lwtoft	;wreg free
  8989  002BB2  C009  F015         	movff	?___lwtoft,___ftmul@f1
  8990  002BB6  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
  8991  002BBA  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
  8992  002BBE  EC58  F012         	call	___ftmul	;wreg free
  8993  002BC2  C015  F024         	movff	?___ftmul,___ftdiv@f1
  8994  002BC6  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
  8995  002BCA  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
  8996  002BCE  0EC0               	movlw	192
  8997  002BD0  6E27               	movwf	___ftdiv@f2,c
  8998  002BD2  0E7F               	movlw	127
  8999  002BD4  6E28               	movwf	___ftdiv@f2+1,c
  9000  002BD6  0E44               	movlw	68
  9001  002BD8  6E29               	movwf	___ftdiv@f2+2,c
  9002  002BDA  ECD2  F012         	call	___ftdiv	;wreg free
  9003  002BDE  C024  F033         	movff	?___ftdiv,?_getTemperatura
  9004  002BE2  C025  F034         	movff	?___ftdiv+1,?_getTemperatura+1
  9005  002BE6  C026  F035         	movff	?___ftdiv+2,?_getTemperatura+2
  9006  002BEA  0012               	return	
  9007  002BEC                     __end_of_getTemperatura:
  9008                           	opt stack 0
  9009                           tosu	equ	0xFFF
  9010                           tosh	equ	0xFFE
  9011                           tosl	equ	0xFFD
  9012                           pclatu	equ	0xFFB
  9013                           pclath	equ	0xFFA
  9014                           tblptru	equ	0xFF8
  9015                           tblptrh	equ	0xFF7
  9016                           tblptrl	equ	0xFF6
  9017                           tablat	equ	0xFF5
  9018                           prodh	equ	0xFF4
  9019                           prodl	equ	0xFF3
  9020                           intcon	equ	0xFF2
  9021                           indf0	equ	0xFEF
  9022                           postinc0	equ	0xFEE
  9023                           fsr0h	equ	0xFEA
  9024                           fsr0l	equ	0xFE9
  9025                           wreg	equ	0xFE8
  9026                           postdec1	equ	0xFE5
  9027                           fsr1h	equ	0xFE2
  9028                           fsr1l	equ	0xFE1
  9029                           indf2	equ	0xFDF
  9030                           postinc2	equ	0xFDE
  9031                           postdec2	equ	0xFDD
  9032                           fsr2h	equ	0xFDA
  9033                           fsr2l	equ	0xFD9
  9034                           status	equ	0xFD8
  9035                           
  9036 ;; *************** function ___lwtoft *****************
  9037 ;; Defined at:
  9038 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwtoft.c"
  9039 ;; Parameters:    Size  Location     Type
  9040 ;;  c               2    8[COMRAM] unsigned int 
  9041 ;; Auto vars:     Size  Location     Type
  9042 ;;		None
  9043 ;; Return value:  Size  Location     Type
  9044 ;;                  3    8[COMRAM] float 
  9045 ;; Registers used:
  9046 ;;		wreg, status,2, status,0, cstack
  9047 ;; Tracked objects:
  9048 ;;		On entry : 0/0
  9049 ;;		On exit  : 0/0
  9050 ;;		Unchanged: 0/0
  9051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9052 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9055 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9056 ;;Total ram usage:        3 bytes
  9057 ;; Hardware stack levels used:    1
  9058 ;; Hardware stack levels required when called:    1
  9059 ;; This function calls:
  9060 ;;		___ftpack
  9061 ;; This function is called by:
  9062 ;;		_getTemperatura
  9063 ;; This function uses a non-reentrant model
  9064 ;;
  9065                           
  9066                           	psect	text55
  9067  0030A0                     __ptext55:
  9068                           	opt stack 0
  9069  0030A0                     ___lwtoft:
  9070                           	opt stack 17
  9071                           
  9072                           ;incstack = 0
  9073  0030A0  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  9074  0030A4  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  9075  0030A8  6A03               	clrf	___ftpack@arg+2,c
  9076  0030AA  0E8E               	movlw	142
  9077  0030AC  6E04               	movwf	___ftpack@exp,c
  9078  0030AE  0E00               	movlw	0
  9079  0030B0  6E05               	movwf	___ftpack@sign,c
  9080  0030B2  EC9F  F013         	call	___ftpack	;wreg free
  9081  0030B6  C001  F009         	movff	?___ftpack,?___lwtoft
  9082  0030BA  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  9083  0030BE  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  9084  0030C2  0012               	return	
  9085  0030C4                     __end_of___lwtoft:
  9086                           	opt stack 0
  9087                           tosu	equ	0xFFF
  9088                           tosh	equ	0xFFE
  9089                           tosl	equ	0xFFD
  9090                           pclatu	equ	0xFFB
  9091                           pclath	equ	0xFFA
  9092                           tblptru	equ	0xFF8
  9093                           tblptrh	equ	0xFF7
  9094                           tblptrl	equ	0xFF6
  9095                           tablat	equ	0xFF5
  9096                           prodh	equ	0xFF4
  9097                           prodl	equ	0xFF3
  9098                           intcon	equ	0xFF2
  9099                           indf0	equ	0xFEF
  9100                           postinc0	equ	0xFEE
  9101                           fsr0h	equ	0xFEA
  9102                           fsr0l	equ	0xFE9
  9103                           wreg	equ	0xFE8
  9104                           postdec1	equ	0xFE5
  9105                           fsr1h	equ	0xFE2
  9106                           fsr1l	equ	0xFE1
  9107                           indf2	equ	0xFDF
  9108                           postinc2	equ	0xFDE
  9109                           postdec2	equ	0xFDD
  9110                           fsr2h	equ	0xFDA
  9111                           fsr2l	equ	0xFD9
  9112                           status	equ	0xFD8
  9113                           
  9114 ;; *************** function ___ftmul *****************
  9115 ;; Defined at:
  9116 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  9117 ;; Parameters:    Size  Location     Type
  9118 ;;  f1              3   20[COMRAM] float 
  9119 ;;  f2              3   23[COMRAM] float 
  9120 ;; Auto vars:     Size  Location     Type
  9121 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  9122 ;;  sign            1   34[COMRAM] unsigned char 
  9123 ;;  cntr            1   33[COMRAM] unsigned char 
  9124 ;;  exp             1   29[COMRAM] unsigned char 
  9125 ;; Return value:  Size  Location     Type
  9126 ;;                  3   20[COMRAM] float 
  9127 ;; Registers used:
  9128 ;;		wreg, status,2, status,0, cstack
  9129 ;; Tracked objects:
  9130 ;;		On entry : 0/0
  9131 ;;		On exit  : 0/0
  9132 ;;		Unchanged: 0/0
  9133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9134 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9135 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9136 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9137 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9138 ;;Total ram usage:       15 bytes
  9139 ;; Hardware stack levels used:    1
  9140 ;; Hardware stack levels required when called:    1
  9141 ;; This function calls:
  9142 ;;		___ftpack
  9143 ;; This function is called by:
  9144 ;;		_getTemperatura
  9145 ;;		_fround
  9146 ;;		_scale
  9147 ;;		_sprintf
  9148 ;; This function uses a non-reentrant model
  9149 ;;
  9150                           
  9151                           	psect	text56
  9152  0024B0                     __ptext56:
  9153                           	opt stack 0
  9154  0024B0                     ___ftmul:
  9155                           	opt stack 16
  9156                           
  9157                           ;incstack = 0
  9158  0024B0  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  9159  0024B4  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  9160  0024B6  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  9161  0024B8  3416               	rlcf	___ftmul@f1+1,w,c
  9162  0024BA  361B               	rlcf	??___ftmul& (0+255),f,c
  9163  0024BC  E301               	bnc	u231_41
  9164  0024BE  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  9165  0024C0                     u231_41:
  9166  0024C0  501B               	movf	??___ftmul,w,c
  9167  0024C2  6E1E               	movwf	___ftmul@exp,c
  9168  0024C4  501E               	movf	___ftmul@exp,w,c
  9169  0024C6  A4D8               	btfss	status,2,c
  9170  0024C8  D007               	goto	i2l1093
  9171  0024CA  0E00               	movlw	0
  9172  0024CC  6E15               	movwf	?___ftmul,c
  9173  0024CE  0E00               	movlw	0
  9174  0024D0  6E16               	movwf	?___ftmul+1,c
  9175  0024D2  0E00               	movlw	0
  9176  0024D4  6E17               	movwf	?___ftmul+2,c
  9177  0024D6  0012               	return	
  9178  0024D8                     i2l1093:
  9179  0024D8  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  9180  0024DC  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  9181  0024DE  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  9182  0024E0  3419               	rlcf	___ftmul@f2+1,w,c
  9183  0024E2  361B               	rlcf	??___ftmul& (0+255),f,c
  9184  0024E4  E301               	bnc	u233_41
  9185  0024E6  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  9186  0024E8                     u233_41:
  9187  0024E8  501B               	movf	??___ftmul,w,c
  9188  0024EA  6E23               	movwf	___ftmul@sign,c
  9189  0024EC  5023               	movf	___ftmul@sign,w,c
  9190  0024EE  A4D8               	btfss	status,2,c
  9191  0024F0  D007               	goto	i2l1095
  9192  0024F2  0E00               	movlw	0
  9193  0024F4  6E15               	movwf	?___ftmul,c
  9194  0024F6  0E00               	movlw	0
  9195  0024F8  6E16               	movwf	?___ftmul+1,c
  9196  0024FA  0E00               	movlw	0
  9197  0024FC  6E17               	movwf	?___ftmul+2,c
  9198  0024FE  0012               	return	
  9199  002500                     i2l1095:
  9200  002500  5023               	movf	___ftmul@sign,w,c
  9201  002502  0F7B               	addlw	123
  9202  002504  261E               	addwf	___ftmul@exp,f,c
  9203  002506  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  9204  00250A  501A               	movf	___ftmul@f2+2,w,c
  9205  00250C  1A23               	xorwf	___ftmul@sign,f,c
  9206  00250E  0E80               	movlw	128
  9207  002510  1623               	andwf	___ftmul@sign,f,c
  9208  002512  8E16               	bsf	___ftmul@f1+1,7,c
  9209  002514  8E19               	bsf	___ftmul@f2+1,7,c
  9210  002516  0EFF               	movlw	255
  9211  002518  1618               	andwf	___ftmul@f2,f,c
  9212  00251A  0EFF               	movlw	255
  9213  00251C  1619               	andwf	___ftmul@f2+1,f,c
  9214  00251E  0E00               	movlw	0
  9215  002520  161A               	andwf	___ftmul@f2+2,f,c
  9216  002522  0E00               	movlw	0
  9217  002524  6E1F               	movwf	___ftmul@f3_as_product,c
  9218  002526  0E00               	movlw	0
  9219  002528  6E20               	movwf	___ftmul@f3_as_product+1,c
  9220  00252A  0E00               	movlw	0
  9221  00252C  6E21               	movwf	___ftmul@f3_as_product+2,c
  9222  00252E  0E07               	movlw	7
  9223  002530  6E22               	movwf	___ftmul@cntr,c
  9224  002532  A015               	btfss	___ftmul@f1,0,c
  9225  002534  D006               	goto	i2l1097
  9226  002536  5018               	movf	___ftmul@f2,w,c
  9227  002538  261F               	addwf	___ftmul@f3_as_product,f,c
  9228  00253A  5019               	movf	___ftmul@f2+1,w,c
  9229  00253C  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  9230  00253E  501A               	movf	___ftmul@f2+2,w,c
  9231  002540  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  9232  002542                     i2l1097:
  9233  002542  90D8               	bcf	status,0,c
  9234  002544  3217               	rrcf	___ftmul@f1+2,f,c
  9235  002546  3216               	rrcf	___ftmul@f1+1,f,c
  9236  002548  3215               	rrcf	___ftmul@f1,f,c
  9237  00254A  90D8               	bcf	status,0,c
  9238  00254C  3618               	rlcf	___ftmul@f2,f,c
  9239  00254E  3619               	rlcf	___ftmul@f2+1,f,c
  9240  002550  361A               	rlcf	___ftmul@f2+2,f,c
  9241  002552  2E22               	decfsz	___ftmul@cntr,f,c
  9242  002554  D7EE               	goto	i2l1096
  9243  002556  0E09               	movlw	9
  9244  002558  6E22               	movwf	___ftmul@cntr,c
  9245  00255A  A015               	btfss	___ftmul@f1,0,c
  9246  00255C  D006               	goto	i2l1100
  9247  00255E  5018               	movf	___ftmul@f2,w,c
  9248  002560  261F               	addwf	___ftmul@f3_as_product,f,c
  9249  002562  5019               	movf	___ftmul@f2+1,w,c
  9250  002564  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  9251  002566  501A               	movf	___ftmul@f2+2,w,c
  9252  002568  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  9253  00256A                     i2l1100:
  9254  00256A  90D8               	bcf	status,0,c
  9255  00256C  3217               	rrcf	___ftmul@f1+2,f,c
  9256  00256E  3216               	rrcf	___ftmul@f1+1,f,c
  9257  002570  3215               	rrcf	___ftmul@f1,f,c
  9258  002572  90D8               	bcf	status,0,c
  9259  002574  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  9260  002576  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  9261  002578  321F               	rrcf	___ftmul@f3_as_product,f,c
  9262  00257A  2E22               	decfsz	___ftmul@cntr,f,c
  9263  00257C  D7EE               	goto	i2l1099
  9264  00257E  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  9265  002582  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9266  002586  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9267  00258A  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  9268  00258E  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  9269  002592  EC9F  F013         	call	___ftpack	;wreg free
  9270  002596  C001  F015         	movff	?___ftpack,?___ftmul
  9271  00259A  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  9272  00259E  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  9273  0025A2  0012               	return	
  9274  0025A4                     __end_of___ftmul:
  9275                           	opt stack 0
  9276                           tosu	equ	0xFFF
  9277                           tosh	equ	0xFFE
  9278                           tosl	equ	0xFFD
  9279                           pclatu	equ	0xFFB
  9280                           pclath	equ	0xFFA
  9281                           tblptru	equ	0xFF8
  9282                           tblptrh	equ	0xFF7
  9283                           tblptrl	equ	0xFF6
  9284                           tablat	equ	0xFF5
  9285                           prodh	equ	0xFF4
  9286                           prodl	equ	0xFF3
  9287                           intcon	equ	0xFF2
  9288                           indf0	equ	0xFEF
  9289                           postinc0	equ	0xFEE
  9290                           fsr0h	equ	0xFEA
  9291                           fsr0l	equ	0xFE9
  9292                           wreg	equ	0xFE8
  9293                           postdec1	equ	0xFE5
  9294                           fsr1h	equ	0xFE2
  9295                           fsr1l	equ	0xFE1
  9296                           indf2	equ	0xFDF
  9297                           postinc2	equ	0xFDE
  9298                           postdec2	equ	0xFDD
  9299                           fsr2h	equ	0xFDA
  9300                           fsr2l	equ	0xFD9
  9301                           status	equ	0xFD8
  9302                           
  9303 ;; *************** function ___ftdiv *****************
  9304 ;; Defined at:
  9305 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  9306 ;; Parameters:    Size  Location     Type
  9307 ;;  f1              3   35[COMRAM] float 
  9308 ;;  f2              3   38[COMRAM] float 
  9309 ;; Auto vars:     Size  Location     Type
  9310 ;;  f3              3   45[COMRAM] float 
  9311 ;;  sign            1   49[COMRAM] unsigned char 
  9312 ;;  exp             1   48[COMRAM] unsigned char 
  9313 ;;  cntr            1   44[COMRAM] unsigned char 
  9314 ;; Return value:  Size  Location     Type
  9315 ;;                  3   35[COMRAM] float 
  9316 ;; Registers used:
  9317 ;;		wreg, status,2, status,0, cstack
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9323 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9324 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9325 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9326 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9327 ;;Total ram usage:       15 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    1
  9330 ;; This function calls:
  9331 ;;		___ftpack
  9332 ;; This function is called by:
  9333 ;;		_getTemperatura
  9334 ;; This function uses a non-reentrant model
  9335 ;;
  9336                           
  9337                           	psect	text57
  9338  0025A4                     __ptext57:
  9339                           	opt stack 0
  9340  0025A4                     ___ftdiv:
  9341                           	opt stack 17
  9342                           
  9343                           ;incstack = 0
  9344  0025A4  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
  9345  0025A8  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  9346  0025AA  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  9347  0025AC  3425               	rlcf	___ftdiv@f1+1,w,c
  9348  0025AE  362A               	rlcf	??___ftdiv& (0+255),f,c
  9349  0025B0  E301               	bnc	u280_41
  9350  0025B2  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  9351  0025B4                     u280_41:
  9352  0025B4  502A               	movf	??___ftdiv,w,c
  9353  0025B6  6E31               	movwf	___ftdiv@exp,c
  9354  0025B8  5031               	movf	___ftdiv@exp,w,c
  9355  0025BA  A4D8               	btfss	status,2,c
  9356  0025BC  D007               	goto	i2l1061
  9357  0025BE  0E00               	movlw	0
  9358  0025C0  6E24               	movwf	?___ftdiv,c
  9359  0025C2  0E00               	movlw	0
  9360  0025C4  6E25               	movwf	?___ftdiv+1,c
  9361  0025C6  0E00               	movlw	0
  9362  0025C8  6E26               	movwf	?___ftdiv+2,c
  9363  0025CA  0012               	return	
  9364  0025CC                     i2l1061:
  9365  0025CC  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
  9366  0025D0  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  9367  0025D2  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  9368  0025D4  3428               	rlcf	___ftdiv@f2+1,w,c
  9369  0025D6  362A               	rlcf	??___ftdiv& (0+255),f,c
  9370  0025D8  E301               	bnc	u282_41
  9371  0025DA  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  9372  0025DC                     u282_41:
  9373  0025DC  502A               	movf	??___ftdiv,w,c
  9374  0025DE  6E32               	movwf	___ftdiv@sign,c
  9375  0025E0  5032               	movf	___ftdiv@sign,w,c
  9376  0025E2  A4D8               	btfss	status,2,c
  9377  0025E4  D007               	goto	i2l1063
  9378  0025E6  0E00               	movlw	0
  9379  0025E8  6E24               	movwf	?___ftdiv,c
  9380  0025EA  0E00               	movlw	0
  9381  0025EC  6E25               	movwf	?___ftdiv+1,c
  9382  0025EE  0E00               	movlw	0
  9383  0025F0  6E26               	movwf	?___ftdiv+2,c
  9384  0025F2  0012               	return	
  9385  0025F4                     i2l1063:
  9386  0025F4  0E00               	movlw	0
  9387  0025F6  6E2E               	movwf	___ftdiv@f3,c
  9388  0025F8  0E00               	movlw	0
  9389  0025FA  6E2F               	movwf	___ftdiv@f3+1,c
  9390  0025FC  0E00               	movlw	0
  9391  0025FE  6E30               	movwf	___ftdiv@f3+2,c
  9392  002600  5032               	movf	___ftdiv@sign,w,c
  9393  002602  0F89               	addlw	137
  9394  002604  5E31               	subwf	___ftdiv@exp,f,c
  9395  002606  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
  9396  00260A  5029               	movf	___ftdiv@f2+2,w,c
  9397  00260C  1A32               	xorwf	___ftdiv@sign,f,c
  9398  00260E  0E80               	movlw	128
  9399  002610  1632               	andwf	___ftdiv@sign,f,c
  9400  002612  8E25               	bsf	___ftdiv@f1+1,7,c
  9401  002614  0EFF               	movlw	255
  9402  002616  1624               	andwf	___ftdiv@f1,f,c
  9403  002618  0EFF               	movlw	255
  9404  00261A  1625               	andwf	___ftdiv@f1+1,f,c
  9405  00261C  0E00               	movlw	0
  9406  00261E  1626               	andwf	___ftdiv@f1+2,f,c
  9407  002620  8E28               	bsf	___ftdiv@f2+1,7,c
  9408  002622  0EFF               	movlw	255
  9409  002624  1627               	andwf	___ftdiv@f2,f,c
  9410  002626  0EFF               	movlw	255
  9411  002628  1628               	andwf	___ftdiv@f2+1,f,c
  9412  00262A  0E00               	movlw	0
  9413  00262C  1629               	andwf	___ftdiv@f2+2,f,c
  9414  00262E  0E18               	movlw	24
  9415  002630  6E2D               	movwf	___ftdiv@cntr,c
  9416  002632  90D8               	bcf	status,0,c
  9417  002634  362E               	rlcf	___ftdiv@f3,f,c
  9418  002636  362F               	rlcf	___ftdiv@f3+1,f,c
  9419  002638  3630               	rlcf	___ftdiv@f3+2,f,c
  9420  00263A  5027               	movf	___ftdiv@f2,w,c
  9421  00263C  5C24               	subwf	___ftdiv@f1,w,c
  9422  00263E  5028               	movf	___ftdiv@f2+1,w,c
  9423  002640  5825               	subwfb	___ftdiv@f1+1,w,c
  9424  002642  5029               	movf	___ftdiv@f2+2,w,c
  9425  002644  5826               	subwfb	___ftdiv@f1+2,w,c
  9426  002646  A0D8               	btfss	status,0,c
  9427  002648  D007               	goto	i2l1065
  9428  00264A  5027               	movf	___ftdiv@f2,w,c
  9429  00264C  5E24               	subwf	___ftdiv@f1,f,c
  9430  00264E  5028               	movf	___ftdiv@f2+1,w,c
  9431  002650  5A25               	subwfb	___ftdiv@f1+1,f,c
  9432  002652  5029               	movf	___ftdiv@f2+2,w,c
  9433  002654  5A26               	subwfb	___ftdiv@f1+2,f,c
  9434  002656  802E               	bsf	___ftdiv@f3,0,c
  9435  002658                     i2l1065:
  9436  002658  90D8               	bcf	status,0,c
  9437  00265A  3624               	rlcf	___ftdiv@f1,f,c
  9438  00265C  3625               	rlcf	___ftdiv@f1+1,f,c
  9439  00265E  3626               	rlcf	___ftdiv@f1+2,f,c
  9440  002660  2E2D               	decfsz	___ftdiv@cntr,f,c
  9441  002662  D7E7               	goto	i2l1064
  9442  002664  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
  9443  002668  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9444  00266C  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9445  002670  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
  9446  002674  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
  9447  002678  EC9F  F013         	call	___ftpack	;wreg free
  9448  00267C  C001  F024         	movff	?___ftpack,?___ftdiv
  9449  002680  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
  9450  002684  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
  9451  002688  0012               	return	
  9452  00268A                     __end_of___ftdiv:
  9453                           	opt stack 0
  9454                           tosu	equ	0xFFF
  9455                           tosh	equ	0xFFE
  9456                           tosl	equ	0xFFD
  9457                           pclatu	equ	0xFFB
  9458                           pclath	equ	0xFFA
  9459                           tblptru	equ	0xFF8
  9460                           tblptrh	equ	0xFF7
  9461                           tblptrl	equ	0xFF6
  9462                           tablat	equ	0xFF5
  9463                           prodh	equ	0xFF4
  9464                           prodl	equ	0xFF3
  9465                           intcon	equ	0xFF2
  9466                           indf0	equ	0xFEF
  9467                           postinc0	equ	0xFEE
  9468                           fsr0h	equ	0xFEA
  9469                           fsr0l	equ	0xFE9
  9470                           wreg	equ	0xFE8
  9471                           postdec1	equ	0xFE5
  9472                           fsr1h	equ	0xFE2
  9473                           fsr1l	equ	0xFE1
  9474                           indf2	equ	0xFDF
  9475                           postinc2	equ	0xFDE
  9476                           postdec2	equ	0xFDD
  9477                           fsr2h	equ	0xFDA
  9478                           fsr2l	equ	0xFD9
  9479                           status	equ	0xFD8
  9480                           
  9481 ;; *************** function ___ftpack *****************
  9482 ;; Defined at:
  9483 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  9484 ;; Parameters:    Size  Location     Type
  9485 ;;  arg             3    0[COMRAM] unsigned um
  9486 ;;  exp             1    3[COMRAM] unsigned char 
  9487 ;;  sign            1    4[COMRAM] unsigned char 
  9488 ;; Auto vars:     Size  Location     Type
  9489 ;;		None
  9490 ;; Return value:  Size  Location     Type
  9491 ;;                  3    0[COMRAM] float 
  9492 ;; Registers used:
  9493 ;;		wreg, status,2, status,0
  9494 ;; Tracked objects:
  9495 ;;		On entry : 0/0
  9496 ;;		On exit  : 0/0
  9497 ;;		Unchanged: 0/0
  9498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9499 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9501 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9502 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9503 ;;Total ram usage:        8 bytes
  9504 ;; Hardware stack levels used:    1
  9505 ;; This function calls:
  9506 ;;		Nothing
  9507 ;; This function is called by:
  9508 ;;		___ftadd
  9509 ;;		___ftdiv
  9510 ;;		___ftmul
  9511 ;;		___lltoft
  9512 ;;		___lwtoft
  9513 ;; This function uses a non-reentrant model
  9514 ;;
  9515                           
  9516                           	psect	text58
  9517  00273E                     __ptext58:
  9518                           	opt stack 0
  9519  00273E                     ___ftpack:
  9520                           	opt stack 16
  9521                           
  9522                           ;incstack = 0
  9523  00273E  5004               	movf	___ftpack@exp,w,c
  9524  002740  B4D8               	btfsc	status,2,c
  9525  002742  D005               	goto	i2u198_40
  9526  002744  5001               	movf	___ftpack@arg,w,c
  9527  002746  1002               	iorwf	___ftpack@arg+1,w,c
  9528  002748  1003               	iorwf	___ftpack@arg+2,w,c
  9529  00274A  A4D8               	btfss	status,2,c
  9530  00274C  D00C               	goto	i2l997
  9531  00274E                     i2u198_40:
  9532  00274E  0E00               	movlw	0
  9533  002750  6E01               	movwf	?___ftpack,c
  9534  002752  0E00               	movlw	0
  9535  002754  6E02               	movwf	?___ftpack+1,c
  9536  002756  0E00               	movlw	0
  9537  002758  6E03               	movwf	?___ftpack+2,c
  9538  00275A  0012               	return	
  9539  00275C  2A04               	incf	___ftpack@exp,f,c
  9540  00275E  90D8               	bcf	status,0,c
  9541  002760  3203               	rrcf	___ftpack@arg+2,f,c
  9542  002762  3202               	rrcf	___ftpack@arg+1,f,c
  9543  002764  3201               	rrcf	___ftpack@arg,f,c
  9544  002766                     i2l997:
  9545  002766  0E00               	movlw	0
  9546  002768  1401               	andwf	___ftpack@arg,w,c
  9547  00276A  6E06               	movwf	??___ftpack& (0+255),c
  9548  00276C  0E00               	movlw	0
  9549  00276E  1402               	andwf	___ftpack@arg+1,w,c
  9550  002770  6E07               	movwf	(??___ftpack+1)& (0+255),c
  9551  002772  0EFE               	movlw	254
  9552  002774  1403               	andwf	___ftpack@arg+2,w,c
  9553  002776  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9554  002778  5006               	movf	??___ftpack,w,c
  9555  00277A  1007               	iorwf	??___ftpack+1,w,c
  9556  00277C  1008               	iorwf	??___ftpack+2,w,c
  9557  00277E  B4D8               	btfsc	status,2,c
  9558  002780  D00C               	goto	i2l1000
  9559  002782  D7EC               	goto	i2l998
  9560  002784  2A04               	incf	___ftpack@exp,f,c
  9561  002786  0E01               	movlw	1
  9562  002788  2601               	addwf	___ftpack@arg,f,c
  9563  00278A  0E00               	movlw	0
  9564  00278C  2202               	addwfc	___ftpack@arg+1,f,c
  9565  00278E  0E00               	movlw	0
  9566  002790  2203               	addwfc	___ftpack@arg+2,f,c
  9567  002792  90D8               	bcf	status,0,c
  9568  002794  3203               	rrcf	___ftpack@arg+2,f,c
  9569  002796  3202               	rrcf	___ftpack@arg+1,f,c
  9570  002798  3201               	rrcf	___ftpack@arg,f,c
  9571  00279A                     i2l1000:
  9572  00279A  0E00               	movlw	0
  9573  00279C  1401               	andwf	___ftpack@arg,w,c
  9574  00279E  6E06               	movwf	??___ftpack& (0+255),c
  9575  0027A0  0E00               	movlw	0
  9576  0027A2  1402               	andwf	___ftpack@arg+1,w,c
  9577  0027A4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  9578  0027A6  0EFF               	movlw	255
  9579  0027A8  1403               	andwf	___ftpack@arg+2,w,c
  9580  0027AA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9581  0027AC  5006               	movf	??___ftpack,w,c
  9582  0027AE  1007               	iorwf	??___ftpack+1,w,c
  9583  0027B0  1008               	iorwf	??___ftpack+2,w,c
  9584  0027B2  B4D8               	btfsc	status,2,c
  9585  0027B4  D006               	goto	i2l1003
  9586  0027B6  D7E6               	goto	i2l1001
  9587  0027B8  0604               	decf	___ftpack@exp,f,c
  9588  0027BA  90D8               	bcf	status,0,c
  9589  0027BC  3601               	rlcf	___ftpack@arg,f,c
  9590  0027BE  3602               	rlcf	___ftpack@arg+1,f,c
  9591  0027C0  3603               	rlcf	___ftpack@arg+2,f,c
  9592  0027C2                     i2l1003:
  9593  0027C2  BE02               	btfsc	___ftpack@arg+1,7,c
  9594  0027C4  D003               	goto	i2u202_40
  9595  0027C6  0E02               	movlw	2
  9596  0027C8  6004               	cpfslt	___ftpack@exp,c
  9597  0027CA  D7F6               	goto	i2l1004
  9598  0027CC                     i2u202_40:
  9599  0027CC  A004               	btfss	___ftpack@exp,0,c
  9600  0027CE  9E02               	bcf	___ftpack@arg+1,7,c
  9601  0027D0  90D8               	bcf	status,0,c
  9602  0027D2  3204               	rrcf	___ftpack@exp,f,c
  9603  0027D4  5004               	movf	___ftpack@exp,w,c
  9604  0027D6  1203               	iorwf	___ftpack@arg+2,f,c
  9605  0027D8  5005               	movf	___ftpack@sign,w,c
  9606  0027DA  A4D8               	btfss	status,2,c
  9607  0027DC  8E03               	bsf	___ftpack@arg+2,7,c
  9608  0027DE  C001  F001         	movff	___ftpack@arg,?___ftpack
  9609  0027E2  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  9610  0027E6  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  9611  0027EA  0012               	return	
  9612  0027EC                     __end_of___ftpack:
  9613                           	opt stack 0
  9614                           tosu	equ	0xFFF
  9615                           tosh	equ	0xFFE
  9616                           tosl	equ	0xFFD
  9617                           pclatu	equ	0xFFB
  9618                           pclath	equ	0xFFA
  9619                           tblptru	equ	0xFF8
  9620                           tblptrh	equ	0xFF7
  9621                           tblptrl	equ	0xFF6
  9622                           tablat	equ	0xFF5
  9623                           prodh	equ	0xFF4
  9624                           prodl	equ	0xFF3
  9625                           intcon	equ	0xFF2
  9626                           indf0	equ	0xFEF
  9627                           postinc0	equ	0xFEE
  9628                           fsr0h	equ	0xFEA
  9629                           fsr0l	equ	0xFE9
  9630                           wreg	equ	0xFE8
  9631                           postdec1	equ	0xFE5
  9632                           fsr1h	equ	0xFE2
  9633                           fsr1l	equ	0xFE1
  9634                           indf2	equ	0xFDF
  9635                           postinc2	equ	0xFDE
  9636                           postdec2	equ	0xFDD
  9637                           fsr2h	equ	0xFDA
  9638                           fsr2l	equ	0xFD9
  9639                           status	equ	0xFD8
  9640                           
  9641 ;; *************** function _ADCC_GetSingleConversion *****************
  9642 ;; Defined at:
  9643 ;;		line 126 in file "mcc_generated_files/adcc.c"
  9644 ;; Parameters:    Size  Location     Type
  9645 ;;  channel         1    wreg     enum E11631
  9646 ;; Auto vars:     Size  Location     Type
  9647 ;;  channel         1    4[COMRAM] enum E11631
  9648 ;; Return value:  Size  Location     Type
  9649 ;;                  2    0[COMRAM] unsigned int 
  9650 ;; Registers used:
  9651 ;;		wreg, status,2, status,0
  9652 ;; Tracked objects:
  9653 ;;		On entry : 0/0
  9654 ;;		On exit  : 0/0
  9655 ;;		Unchanged: 0/0
  9656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9657 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9658 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9659 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9660 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9661 ;;Total ram usage:        5 bytes
  9662 ;; Hardware stack levels used:    1
  9663 ;; This function calls:
  9664 ;;		Nothing
  9665 ;; This function is called by:
  9666 ;;		_getTemperatura
  9667 ;; This function uses a non-reentrant model
  9668 ;;
  9669                           
  9670                           	psect	text59
  9671  0030C4                     __ptext59:
  9672                           	opt stack 0
  9673  0030C4                     _ADCC_GetSingleConversion:
  9674                           	opt stack 18
  9675                           
  9676                           ;incstack = 0
  9677                           ;ADCC_GetSingleConversion@channel stored from wreg
  9678  0030C4  6E05               	movwf	ADCC_GetSingleConversion@channel,c
  9679                           
  9680                           ;adcc.c: 129: ADPCH = channel;
  9681  0030C6  C005  FF5F         	movff	ADCC_GetSingleConversion@channel,3935	;volatile
  9682                           
  9683                           ;adcc.c: 132: ADCON0bits.ADON = 1;
  9684  0030CA  8E60               	bsf	3936,7,c	;volatile
  9685                           
  9686                           ;adcc.c: 135: ADCON0bits.ADCONT = 0;
  9687  0030CC  9C60               	bcf	3936,6,c	;volatile
  9688                           
  9689                           ;adcc.c: 138: ADCON0bits.ADGO = 1;
  9690  0030CE  8060               	bsf	3936,0,c	;volatile
  9691  0030D0                     
  9692                           ;adcc.c: 143: {
  9693  0030D0  B060               	btfsc	3936,0,c	;volatile
  9694  0030D2  D7FE               	goto	i2l186
  9695                           
  9696                           ;adcc.c: 144: }
  9697                           ;adcc.c: 148: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  9698  0030D4  5064               	movf	3940,w,c	;volatile
  9699  0030D6  6E04               	movwf	(??_ADCC_GetSingleConversion+1)& (0+255),c
  9700  0030D8  6A03               	clrf	??_ADCC_GetSingleConversion& (0+255),c
  9701  0030DA  5063               	movf	3939,w,c	;volatile
  9702  0030DC  2403               	addwf	??_ADCC_GetSingleConversion,w,c
  9703  0030DE  6E01               	movwf	?_ADCC_GetSingleConversion,c
  9704  0030E0  0E00               	movlw	0
  9705  0030E2  2004               	addwfc	??_ADCC_GetSingleConversion+1,w,c
  9706  0030E4  6E02               	movwf	?_ADCC_GetSingleConversion+1,c
  9707  0030E6  0012               	return	
  9708  0030E8                     __end_of_ADCC_GetSingleConversion:
  9709                           	opt stack 0
  9710                           tosu	equ	0xFFF
  9711                           tosh	equ	0xFFE
  9712                           tosl	equ	0xFFD
  9713                           pclatu	equ	0xFFB
  9714                           pclath	equ	0xFFA
  9715                           tblptru	equ	0xFF8
  9716                           tblptrh	equ	0xFF7
  9717                           tblptrl	equ	0xFF6
  9718                           tablat	equ	0xFF5
  9719                           prodh	equ	0xFF4
  9720                           prodl	equ	0xFF3
  9721                           intcon	equ	0xFF2
  9722                           indf0	equ	0xFEF
  9723                           postinc0	equ	0xFEE
  9724                           fsr0h	equ	0xFEA
  9725                           fsr0l	equ	0xFE9
  9726                           wreg	equ	0xFE8
  9727                           postdec1	equ	0xFE5
  9728                           fsr1h	equ	0xFE2
  9729                           fsr1l	equ	0xFE1
  9730                           indf2	equ	0xFDF
  9731                           postinc2	equ	0xFDE
  9732                           postdec2	equ	0xFDD
  9733                           fsr2h	equ	0xFDA
  9734                           fsr2l	equ	0xFD9
  9735                           status	equ	0xFD8
  9736                           
  9737 ;; *************** function _I2C1_ISR *****************
  9738 ;; Defined at:
  9739 ;;		line 233 in file "mcc_generated_files/i2c1.c"
  9740 ;; Parameters:    Size  Location     Type
  9741 ;;		None
  9742 ;; Auto vars:     Size  Location     Type
  9743 ;;		None
  9744 ;; Return value:  Size  Location     Type
  9745 ;;                  1    wreg      void 
  9746 ;; Registers used:
  9747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9748 ;; Tracked objects:
  9749 ;;		On entry : 0/0
  9750 ;;		On exit  : 0/0
  9751 ;;		Unchanged: 0/0
  9752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9755 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9756 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9757 ;;Total ram usage:        2 bytes
  9758 ;; Hardware stack levels used:    1
  9759 ;; Hardware stack levels required when called:    1
  9760 ;; This function calls:
  9761 ;;		_I2C1_FunctionComplete
  9762 ;;		_I2C1_Stop
  9763 ;; This function is called by:
  9764 ;;		_INTERRUPT_InterruptManager
  9765 ;; This function uses a non-reentrant model
  9766 ;;
  9767                           
  9768                           	psect	text60
  9769  001D8A                     __ptext60:
  9770                           	opt stack 0
  9771  001D8A                     _I2C1_ISR:
  9772                           	opt stack 21
  9773                           
  9774                           ;i2c1.c: 236: static uint8_t *pi2c_buf_ptr;
  9775                           ;i2c1.c: 237: static uint16_t i2c_address = 0;
  9776                           ;i2c1.c: 238: static uint8_t i2c_bytes_left = 0;
  9777                           ;i2c1.c: 239: static uint8_t i2c_10bit_address_restart = 0;
  9778                           ;i2c1.c: 241: PIR3bits.SSP1IF = 0;
  9779                           
  9780                           ;incstack = 0
  9781  001D8A  010E               	movlb	14	; () banked
  9782  001D8C  91CD               	bcf	205,0,b	;volatile
  9783                           
  9784                           ;i2c1.c: 245: if(SSP1CON1bits.WCOL)
  9785  001D8E  AE96               	btfss	3990,7,c	;volatile
  9786  001D90  D0EF               	goto	i2l399
  9787                           
  9788                           ; BSR set to: 14
  9789                           ;i2c1.c: 246: {
  9790                           ;i2c1.c: 248: SSP1CON1bits.WCOL = 0;
  9791  001D92  9E96               	bcf	3990,7,c	;volatile
  9792                           
  9793                           ; BSR set to: 14
  9794                           ;i2c1.c: 250: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
  9795  001D94  0E00               	movlw	0
  9796  001D96  6E5B               	movwf	_i2c1_state,c
  9797                           
  9798                           ; BSR set to: 14
  9799                           ;i2c1.c: 253: p_i2c1_current = (0);
  9800  001D98  0E00               	movlw	0
  9801  001D9A  6E52               	movwf	_p_i2c1_current,c
  9802  001D9C  0E00               	movlw	0
  9803  001D9E  6E53               	movwf	_p_i2c1_current+1,c
  9804                           
  9805                           ; BSR set to: 14
  9806                           ;i2c1.c: 255: return;
  9807  001DA0  0012               	return	
  9808  001DA2                     i2l400:
  9809                           
  9810                           ;i2c1.c: 263: if(i2c1_object.trStatus.s.empty != 1)
  9811  001DA2  0100               	movlb	0	; () banked
  9812  001DA4  B364               	btfsc	(_i2c1_object+4)& (0+255),1,b
  9813  001DA6  0012               	return	
  9814                           
  9815                           ; BSR set to: 0
  9816                           ;i2c1.c: 264: {
  9817                           ;i2c1.c: 266: p_i2c1_current = i2c1_object.pTrHead;
  9818  001DA8  C062  F052         	movff	_i2c1_object+2,_p_i2c1_current
  9819  001DAC  C063  F053         	movff	_i2c1_object+3,_p_i2c1_current+1
  9820                           
  9821                           ; BSR set to: 0
  9822                           ;i2c1.c: 267: i2c1_trb_count = i2c1_object.pTrHead->count;
  9823  001DB0  C062  FFD9         	movff	_i2c1_object+2,fsr2l
  9824  001DB4  C063  FFDA         	movff	_i2c1_object+3,fsr2h
  9825  001DB8  50DF               	movf	indf2,w,c
  9826  001DBA  6E5A               	movwf	_i2c1_trb_count,c
  9827                           
  9828                           ; BSR set to: 0
  9829                           ;i2c1.c: 268: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
  9830  001DBC  EE20 F001          	lfsr	2,1
  9831  001DC0  5162               	movf	(_i2c1_object+2)& (0+255),w,b
  9832  001DC2  26D9               	addwf	fsr2l,f,c
  9833  001DC4  5163               	movf	(_i2c1_object+3)& (0+255),w,b
  9834  001DC6  22DA               	addwfc	fsr2h,f,c
  9835  001DC8  CFDE F054          	movff	postinc2,_p_i2c1_trb_current
  9836  001DCC  CFDD F055          	movff	postdec2,_p_i2c1_trb_current+1
  9837                           
  9838                           ; BSR set to: 0
  9839                           ;i2c1.c: 270: i2c1_object.pTrHead++;
  9840  001DD0  0E06               	movlw	6
  9841  001DD2  2762               	addwf	(_i2c1_object+2)& (0+255),f,b
  9842  001DD4  0E00               	movlw	0
  9843  001DD6  2363               	addwfc	(_i2c1_object+3)& (0+255),f,b
  9844                           
  9845                           ; BSR set to: 0
  9846                           ;i2c1.c: 273: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
  9847  001DD8  0E9B               	movlw	low (_i2c1_tr_queue+6)
  9848  001DDA  1962               	xorwf	(_i2c1_object+2)& (0+255),w,b
  9849  001DDC  E108               	bnz	i2l4044
  9850  001DDE  0E00               	movlw	high (_i2c1_tr_queue+6)
  9851  001DE0  1963               	xorwf	(_i2c1_object+3)& (0+255),w,b
  9852  001DE2  A4D8               	btfss	status,2,c
  9853  001DE4  D004               	goto	i2l402
  9854                           
  9855                           ; BSR set to: 0
  9856                           ;i2c1.c: 274: {
  9857                           ;i2c1.c: 276: i2c1_object.pTrHead = i2c1_tr_queue;
  9858  001DE6  0E95               	movlw	low _i2c1_tr_queue
  9859  001DE8  6F62               	movwf	(_i2c1_object+2)& (0+255),b
  9860  001DEA  0E00               	movlw	high _i2c1_tr_queue
  9861  001DEC  6F63               	movwf	(_i2c1_object+3)& (0+255),b
  9862  001DEE                     i2l402:
  9863  001DEE                     i2l4044:
  9864                           
  9865                           ; BSR set to: 0
  9866                           ;i2c1.c: 277: }
  9867                           ;i2c1.c: 281: i2c1_object.trStatus.s.full = 0;
  9868  001DEE  9164               	bcf	(_i2c1_object+4)& (0+255),0,b
  9869                           
  9870                           ;i2c1.c: 284: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
  9871  001DF0  5160               	movf	_i2c1_object& (0+255),w,b
  9872  001DF2  1962               	xorwf	(_i2c1_object+2)& (0+255),w,b
  9873  001DF4  E104               	bnz	i2l403
  9874  001DF6  5161               	movf	(_i2c1_object+1)& (0+255),w,b
  9875  001DF8  1963               	xorwf	(_i2c1_object+3)& (0+255),w,b
  9876  001DFA  B4D8               	btfsc	status,2,c
  9877                           
  9878                           ; BSR set to: 0
  9879                           ;i2c1.c: 285: {
  9880                           ;i2c1.c: 287: i2c1_object.trStatus.s.empty = 1;
  9881  001DFC  8364               	bsf	(_i2c1_object+4)& (0+255),1,b
  9882  001DFE                     i2l403:
  9883                           
  9884                           ; BSR set to: 0
  9885                           ;i2c1.c: 288: }
  9886                           ;i2c1.c: 291: SSP1CON2bits.SEN = 1;
  9887  001DFE  8097               	bsf	3991,0,c	;volatile
  9888                           
  9889                           ; BSR set to: 0
  9890                           ;i2c1.c: 294: i2c1_state = S_MASTER_SEND_ADDR;
  9891  001E00  0E02               	movlw	2
  9892  001E02  6E5B               	movwf	_i2c1_state,c
  9893                           
  9894                           ; BSR set to: 0
  9895                           ;i2c1.c: 295: }
  9896                           ;i2c1.c: 297: break;
  9897  001E04  0012               	return	
  9898  001E06                     i2l405:
  9899                           
  9900                           ;i2c1.c: 304: SSP1CON2bits.RSEN = 1;
  9901  001E06  8297               	bsf	3991,1,c	;volatile
  9902                           
  9903                           ;i2c1.c: 307: i2c1_state = S_MASTER_SEND_ADDR;
  9904  001E08  0E02               	movlw	2
  9905  001E0A  6E5B               	movwf	_i2c1_state,c
  9906                           
  9907                           ;i2c1.c: 309: break;
  9908  001E0C  0012               	return	
  9909  001E0E                     i2l406:
  9910                           
  9911                           ;i2c1.c: 313: if(SSP1CON2bits.ACKSTAT)
  9912  001E0E  AC97               	btfss	3991,6,c	;volatile
  9913  001E10  D006               	goto	i2l407
  9914                           
  9915                           ;i2c1.c: 314: {
  9916                           ;i2c1.c: 315: i2c1_object.i2cErrors++;
  9917  001E12  0100               	movlb	0	; () banked
  9918  001E14  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
  9919                           
  9920                           ; BSR set to: 0
  9921                           ;i2c1.c: 316: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
  9922  001E16  0E04               	movlw	4
  9923  001E18  EC4B  F019         	call	_I2C1_Stop
  9924                           
  9925                           ;i2c1.c: 317: }
  9926  001E1C  0012               	return	
  9927  001E1E                     i2l407:
  9928                           
  9929                           ;i2c1.c: 318: else
  9930                           ;i2c1.c: 319: {
  9931                           ;i2c1.c: 321: SSP1BUF = (i2c_address >> 1) & 0x00FF;
  9932  001E1E  90D8               	bcf	status,0,c
  9933  001E20  305D               	rrcf	I2C1_ISR@i2c_address+1,w,c
  9934  001E22  6E02               	movwf	(??_I2C1_ISR+1)& (0+255),c
  9935  001E24  305C               	rrcf	I2C1_ISR@i2c_address,w,c
  9936  001E26  6E01               	movwf	??_I2C1_ISR& (0+255),c
  9937  001E28  5001               	movf	??_I2C1_ISR,w,c
  9938  001E2A  6E92               	movwf	3986,c	;volatile
  9939                           
  9940                           ;i2c1.c: 324: if(i2c_address & 0x01)
  9941  001E2C  A05C               	btfss	I2C1_ISR@i2c_address,0,c
  9942  001E2E  D003               	goto	i2l409
  9943                           
  9944                           ;i2c1.c: 325: {
  9945                           ;i2c1.c: 328: i2c1_state = S_MASTER_10BIT_RESTART;
  9946  001E30  0E0B               	movlw	11
  9947  001E32  6E5B               	movwf	_i2c1_state,c
  9948                           
  9949                           ;i2c1.c: 329: }
  9950  001E34  0012               	return	
  9951  001E36                     i2l409:
  9952                           
  9953                           ;i2c1.c: 330: else
  9954                           ;i2c1.c: 331: {
  9955                           ;i2c1.c: 333: i2c1_state = S_MASTER_SEND_DATA;
  9956  001E36  0E03               	movlw	3
  9957  001E38  6E5B               	movwf	_i2c1_state,c
  9958                           
  9959                           ;i2c1.c: 334: }
  9960                           ;i2c1.c: 335: }
  9961                           ;i2c1.c: 337: break;
  9962  001E3A  0012               	return	
  9963  001E3C                     i2l411:
  9964                           
  9965                           ;i2c1.c: 341: if(SSP1CON2bits.ACKSTAT)
  9966  001E3C  AC97               	btfss	3991,6,c	;volatile
  9967  001E3E  D006               	goto	i2l412
  9968                           
  9969                           ;i2c1.c: 342: {
  9970                           ;i2c1.c: 343: i2c1_object.i2cErrors++;
  9971  001E40  0100               	movlb	0	; () banked
  9972  001E42  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
  9973                           
  9974                           ; BSR set to: 0
  9975                           ;i2c1.c: 344: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
  9976  001E44  0E04               	movlw	4
  9977  001E46  EC4B  F019         	call	_I2C1_Stop
  9978                           
  9979                           ;i2c1.c: 345: }
  9980  001E4A  0012               	return	
  9981  001E4C                     i2l412:
  9982                           
  9983                           ;i2c1.c: 346: else
  9984                           ;i2c1.c: 347: {
  9985                           ;i2c1.c: 350: SSP1CON2bits.RSEN = 1;
  9986  001E4C  8297               	bsf	3991,1,c	;volatile
  9987                           
  9988                           ;i2c1.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
  9989  001E4E  C05C  F001         	movff	I2C1_ISR@i2c_address,??_I2C1_ISR
  9990  001E52  C05D  F002         	movff	I2C1_ISR@i2c_address+1,??_I2C1_ISR+1
  9991  001E56  C002  F001         	movff	??_I2C1_ISR+1,??_I2C1_ISR
  9992  001E5A  6A02               	clrf	??_I2C1_ISR+1,c
  9993  001E5C  0E06               	movlw	6
  9994  001E5E  1601               	andwf	??_I2C1_ISR,f,c
  9995  001E60  0E00               	movlw	0
  9996  001E62  1602               	andwf	??_I2C1_ISR+1,f,c
  9997  001E64  0EF0               	movlw	240
  9998  001E66  1001               	iorwf	??_I2C1_ISR,w,c
  9999  001E68  6E5C               	movwf	I2C1_ISR@i2c_address,c
 10000  001E6A  5002               	movf	??_I2C1_ISR+1,w,c
 10001  001E6C  6E5D               	movwf	I2C1_ISR@i2c_address+1,c
 10002                           
 10003                           ;i2c1.c: 357: i2c_address |= 0x0001;
 10004  001E6E  805C               	bsf	I2C1_ISR@i2c_address,0,c
 10005                           
 10006                           ;i2c1.c: 360: i2c_10bit_address_restart = 1;
 10007  001E70  0E01               	movlw	1
 10008  001E72  6E58               	movwf	I2C1_ISR@i2c_10bit_address_restart,c
 10009                           
 10010                           ;i2c1.c: 363: i2c1_state = S_MASTER_SEND_ADDR;
 10011  001E74  0E02               	movlw	2
 10012  001E76  6E5B               	movwf	_i2c1_state,c
 10013                           
 10014                           ;i2c1.c: 364: }
 10015                           ;i2c1.c: 366: break;
 10016  001E78  0012               	return	
 10017  001E7A                     
 10018                           ;i2c1.c: 381: if(i2c_10bit_address_restart != 1)
 10019  001E7A  0458               	decf	I2C1_ISR@i2c_10bit_address_restart,w,c
 10020  001E7C  B4D8               	btfsc	status,2,c
 10021  001E7E  D01A               	goto	i2l416
 10022                           
 10023                           ;i2c1.c: 382: {
 10024                           ;i2c1.c: 384: i2c_address = p_i2c1_trb_current->address;
 10025  001E80  C054  FFD9         	movff	_p_i2c1_trb_current,fsr2l
 10026  001E84  C055  FFDA         	movff	_p_i2c1_trb_current+1,fsr2h
 10027  001E88  CFDE F05C          	movff	postinc2,I2C1_ISR@i2c_address
 10028  001E8C  CFDD F05D          	movff	postdec2,I2C1_ISR@i2c_address+1
 10029                           
 10030                           ;i2c1.c: 385: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 10031  001E90  EE20 F003          	lfsr	2,3
 10032  001E94  5054               	movf	_p_i2c1_trb_current,w,c
 10033  001E96  26D9               	addwf	fsr2l,f,c
 10034  001E98  5055               	movf	_p_i2c1_trb_current+1,w,c
 10035  001E9A  22DA               	addwfc	fsr2h,f,c
 10036  001E9C  CFDE F050          	movff	postinc2,I2C1_ISR@pi2c_buf_ptr
 10037  001EA0  CFDD F051          	movff	postdec2,I2C1_ISR@pi2c_buf_ptr+1
 10038                           
 10039                           ;i2c1.c: 386: i2c_bytes_left = p_i2c1_trb_current->length;
 10040  001EA4  EE20 F002          	lfsr	2,2
 10041  001EA8  5054               	movf	_p_i2c1_trb_current,w,c
 10042  001EAA  26D9               	addwf	fsr2l,f,c
 10043  001EAC  5055               	movf	_p_i2c1_trb_current+1,w,c
 10044  001EAE  22DA               	addwfc	fsr2h,f,c
 10045  001EB0  50DF               	movf	indf2,w,c
 10046  001EB2  6E59               	movwf	I2C1_ISR@i2c_bytes_left,c
 10047  001EB4                     i2l416:
 10048                           
 10049                           ;i2c1.c: 409: else
 10050                           ;i2c1.c: 410: {
 10051                           ;i2c1.c: 412: SSP1BUF = i2c_address;
 10052  001EB4  C05C  FF92         	movff	I2C1_ISR@i2c_address,3986	;volatile
 10053                           
 10054                           ;i2c1.c: 413: if(i2c_address & 0x01)
 10055  001EB8  A05C               	btfss	I2C1_ISR@i2c_address,0,c
 10056  001EBA  D003               	goto	i2l420
 10057                           
 10058                           ;i2c1.c: 414: {
 10059                           ;i2c1.c: 416: i2c1_state = S_MASTER_ACK_ADDR;
 10060  001EBC  0E05               	movlw	5
 10061  001EBE  6E5B               	movwf	_i2c1_state,c
 10062                           
 10063                           ;i2c1.c: 417: }
 10064  001EC0  0012               	return	
 10065  001EC2                     i2l420:
 10066                           
 10067                           ;i2c1.c: 418: else
 10068                           ;i2c1.c: 419: {
 10069                           ;i2c1.c: 421: i2c1_state = S_MASTER_SEND_DATA;
 10070  001EC2  0E03               	movlw	3
 10071  001EC4  6E5B               	movwf	_i2c1_state,c
 10072                           
 10073                           ;i2c1.c: 422: }
 10074                           ;i2c1.c: 423: }
 10075                           ;i2c1.c: 424: break;
 10076  001EC6  0012               	return	
 10077  001EC8                     i2l422:
 10078                           
 10079                           ;i2c1.c: 429: if(SSP1CON2bits.ACKSTAT)
 10080  001EC8  AC97               	btfss	3991,6,c	;volatile
 10081  001ECA  D007               	goto	i2l423
 10082                           
 10083                           ;i2c1.c: 430: {
 10084                           ;i2c1.c: 432: i2c1_object.i2cErrors++;
 10085  001ECC  0100               	movlb	0	; () banked
 10086  001ECE  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 10087                           
 10088                           ; BSR set to: 0
 10089                           ;i2c1.c: 435: SSP1CON2bits.ACKSTAT = 0;
 10090  001ED0  9C97               	bcf	3991,6,c	;volatile
 10091                           
 10092                           ; BSR set to: 0
 10093                           ;i2c1.c: 438: I2C1_Stop(I2C1_DATA_NO_ACK);
 10094  001ED2  0E05               	movlw	5
 10095  001ED4  EC4B  F019         	call	_I2C1_Stop
 10096                           
 10097                           ;i2c1.c: 440: }
 10098  001ED8  0012               	return	
 10099  001EDA                     i2l423:
 10100                           
 10101                           ;i2c1.c: 441: else
 10102                           ;i2c1.c: 442: {
 10103                           ;i2c1.c: 444: if(i2c_bytes_left-- == 0U)
 10104  001EDA  0659               	decf	I2C1_ISR@i2c_bytes_left,f,c
 10105  001EDC  2859               	incf	I2C1_ISR@i2c_bytes_left,w,c
 10106  001EDE  A4D8               	btfss	status,2,c
 10107  001EE0  D00E               	goto	i2l425
 10108                           
 10109                           ;i2c1.c: 445: {
 10110                           ;i2c1.c: 449: p_i2c1_trb_current++;
 10111  001EE2  0E06               	movlw	6
 10112  001EE4  2654               	addwf	_p_i2c1_trb_current,f,c
 10113  001EE6  0E00               	movlw	0
 10114  001EE8  2255               	addwfc	_p_i2c1_trb_current+1,f,c
 10115                           
 10116                           ;i2c1.c: 452: if(--i2c1_trb_count == 0)
 10117  001EEA  2E5A               	decfsz	_i2c1_trb_count,f,c
 10118  001EEC  D004               	goto	i2l426
 10119                           
 10120                           ;i2c1.c: 453: {
 10121                           ;i2c1.c: 454: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 10122  001EEE  0E00               	movlw	0
 10123  001EF0  EC4B  F019         	call	_I2C1_Stop
 10124                           
 10125                           ;i2c1.c: 455: }
 10126  001EF4  0012               	return	
 10127  001EF6                     i2l426:
 10128                           
 10129                           ;i2c1.c: 456: else
 10130                           ;i2c1.c: 457: {
 10131                           ;i2c1.c: 464: SSP1CON2bits.RSEN = 1;
 10132  001EF6  8297               	bsf	3991,1,c	;volatile
 10133                           
 10134                           ;i2c1.c: 467: i2c1_state = S_MASTER_SEND_ADDR;
 10135  001EF8  0E02               	movlw	2
 10136  001EFA  6E5B               	movwf	_i2c1_state,c
 10137                           
 10138                           ;i2c1.c: 469: }
 10139                           ;i2c1.c: 470: }
 10140  001EFC  0012               	return	
 10141  001EFE                     i2l425:
 10142                           
 10143                           ;i2c1.c: 471: else
 10144                           ;i2c1.c: 472: {
 10145                           ;i2c1.c: 474: SSP1BUF = *pi2c_buf_ptr++;
 10146  001EFE  C050  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 10147  001F02  C051  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 10148  001F06  50DF               	movf	indf2,w,c
 10149  001F08  6E92               	movwf	3986,c	;volatile
 10150  001F0A  4A50               	infsnz	I2C1_ISR@pi2c_buf_ptr,f,c
 10151  001F0C  2A51               	incf	I2C1_ISR@pi2c_buf_ptr+1,f,c
 10152                           
 10153                           ;i2c1.c: 475: }
 10154                           ;i2c1.c: 476: }
 10155                           ;i2c1.c: 477: break;
 10156  001F0E  0012               	return	
 10157  001F10                     i2l429:
 10158                           
 10159                           ;i2c1.c: 482: if(SSP1CON2bits.ACKSTAT)
 10160  001F10  AC97               	btfss	3991,6,c	;volatile
 10161  001F12  D007               	goto	i2l430
 10162                           
 10163                           ;i2c1.c: 483: {
 10164                           ;i2c1.c: 486: i2c1_object.i2cErrors++;
 10165  001F14  0100               	movlb	0	; () banked
 10166  001F16  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 10167                           
 10168                           ; BSR set to: 0
 10169                           ;i2c1.c: 489: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 10170  001F18  0E04               	movlw	4
 10171  001F1A  EC4B  F019         	call	_I2C1_Stop
 10172                           
 10173                           ;i2c1.c: 492: SSP1CON2bits.ACKSTAT = 0;
 10174  001F1E  9C97               	bcf	3991,6,c	;volatile
 10175                           
 10176                           ;i2c1.c: 493: }
 10177  001F20  0012               	return	
 10178  001F22                     i2l430:
 10179                           
 10180                           ;i2c1.c: 494: else
 10181                           ;i2c1.c: 495: {
 10182                           ;i2c1.c: 496: SSP1CON2bits.RCEN = 1;
 10183  001F22  8697               	bsf	3991,3,c	;volatile
 10184                           
 10185                           ;i2c1.c: 497: i2c1_state = S_MASTER_ACK_RCV_DATA;
 10186  001F24  0E08               	movlw	8
 10187  001F26  6E5B               	movwf	_i2c1_state,c
 10188                           
 10189                           ;i2c1.c: 498: }
 10190                           ;i2c1.c: 499: break;
 10191  001F28  0012               	return	
 10192  001F2A                     
 10193                           ;i2c1.c: 506: i2c1_state = S_MASTER_ACK_RCV_DATA;
 10194  001F2A  0E08               	movlw	8
 10195  001F2C  6E5B               	movwf	_i2c1_state,c
 10196                           
 10197                           ;i2c1.c: 509: SSP1CON2bits.RCEN = 1;
 10198  001F2E  8697               	bsf	3991,3,c	;volatile
 10199                           
 10200                           ;i2c1.c: 511: break;
 10201  001F30  0012               	return	
 10202  001F32                     
 10203                           ;i2c1.c: 516: *pi2c_buf_ptr++ = SSP1BUF;
 10204  001F32  C050  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 10205  001F36  C051  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 10206  001F3A  CF92 FFDF          	movff	3986,indf2	;volatile
 10207  001F3E  4A50               	infsnz	I2C1_ISR@pi2c_buf_ptr,f,c
 10208  001F40  2A51               	incf	I2C1_ISR@pi2c_buf_ptr+1,f,c
 10209                           
 10210                           ;i2c1.c: 519: if(--i2c_bytes_left)
 10211  001F42  0E01               	movlw	1
 10212  001F44  5E59               	subwf	I2C1_ISR@i2c_bytes_left,f,c
 10213  001F46  B4D8               	btfsc	status,2,c
 10214  001F48  D004               	goto	i2l434
 10215                           
 10216                           ;i2c1.c: 520: {
 10217                           ;i2c1.c: 526: SSP1CON2bits.ACKDT = 0;
 10218  001F4A  9A97               	bcf	3991,5,c	;volatile
 10219                           
 10220                           ;i2c1.c: 529: i2c1_state = S_MASTER_RCV_DATA;
 10221  001F4C  0E06               	movlw	6
 10222  001F4E  6E5B               	movwf	_i2c1_state,c
 10223                           
 10224                           ;i2c1.c: 530: }
 10225  001F50  D003               	goto	i2l435
 10226  001F52                     i2l434:
 10227                           
 10228                           ;i2c1.c: 531: else
 10229                           ;i2c1.c: 532: {
 10230                           ;i2c1.c: 536: SSP1CON2bits.ACKDT = 1;
 10231  001F52  8A97               	bsf	3991,5,c	;volatile
 10232                           
 10233                           ;i2c1.c: 538: I2C1_FunctionComplete();
 10234  001F54  ECE5  F018         	call	_I2C1_FunctionComplete	;wreg free
 10235  001F58                     i2l435:
 10236                           
 10237                           ;i2c1.c: 539: }
 10238                           ;i2c1.c: 542: SSP1CON2bits.ACKEN = 1;
 10239  001F58  8897               	bsf	3991,4,c	;volatile
 10240                           
 10241                           ;i2c1.c: 543: break;
 10242  001F5A  0012               	return	
 10243  001F5C                     
 10244                           ;i2c1.c: 546: case S_MASTER_SEND_STOP:
 10245                           ;i2c1.c: 549: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 10246  001F5C  0E00               	movlw	0
 10247  001F5E  EC4B  F019         	call	_I2C1_Stop
 10248                           
 10249                           ;i2c1.c: 550: break;
 10250  001F62  0012               	return	
 10251  001F64                     
 10252                           ;i2c1.c: 556: i2c1_object.i2cErrors++;
 10253  001F64  0100               	movlb	0	; () banked
 10254  001F66  2B66               	incf	(_i2c1_object+6)& (0+255),f,b
 10255                           
 10256                           ; BSR set to: 0
 10257                           ;i2c1.c: 557: I2C1_Stop(I2C1_LOST_STATE);
 10258  001F68  0E06               	movlw	6
 10259  001F6A  EC4B  F019         	call	_I2C1_Stop
 10260                           
 10261                           ;i2c1.c: 560: }
 10262                           
 10263                           ;i2c1.c: 558: break;
 10264  001F6E  0012               	return	
 10265  001F70                     i2l399:
 10266  001F70  505B               	movf	_i2c1_state,w,c
 10267                           
 10268                           ; Switch size 1, requested type "space"
 10269                           ; Number of cases is 11, Range of values is 0 to 11
 10270                           ; switch strategies available:
 10271                           ; Name         Instructions Cycles
 10272                           ; simple_byte           34    18 (average)
 10273                           ;	Chosen strategy is simple_byte
 10274  001F72  0A00               	xorlw	0	; case 0
 10275  001F74  B4D8               	btfsc	status,2,c
 10276  001F76  D715               	goto	i2l400
 10277  001F78  0A01               	xorlw	1	; case 1
 10278  001F7A  B4D8               	btfsc	status,2,c
 10279  001F7C  D744               	goto	i2l405
 10280  001F7E  0A03               	xorlw	3	; case 2
 10281  001F80  B4D8               	btfsc	status,2,c
 10282  001F82  D77B               	goto	i2l414
 10283  001F84  0A01               	xorlw	1	; case 3
 10284  001F86  B4D8               	btfsc	status,2,c
 10285  001F88  D79F               	goto	i2l422
 10286  001F8A  0A07               	xorlw	7	; case 4
 10287  001F8C  B4D8               	btfsc	status,2,c
 10288  001F8E  D7E6               	goto	i2l436
 10289  001F90  0A01               	xorlw	1	; case 5
 10290  001F92  B4D8               	btfsc	status,2,c
 10291  001F94  D7BD               	goto	i2l429
 10292  001F96  0A03               	xorlw	3	; case 6
 10293  001F98  B4D8               	btfsc	status,2,c
 10294  001F9A  D7C7               	goto	i2l432
 10295  001F9C  0A01               	xorlw	1	; case 7
 10296  001F9E  B4D8               	btfsc	status,2,c
 10297  001FA0  D7DD               	goto	i2l436
 10298  001FA2  0A0F               	xorlw	15	; case 8
 10299  001FA4  B4D8               	btfsc	status,2,c
 10300  001FA6  D7C5               	goto	i2l433
 10301  001FA8  0A02               	xorlw	2	; case 10
 10302  001FAA  B4D8               	btfsc	status,2,c
 10303  001FAC  D730               	goto	i2l406
 10304  001FAE  0A01               	xorlw	1	; case 11
 10305  001FB0  B4D8               	btfsc	status,2,c
 10306  001FB2  D744               	goto	i2l411
 10307  001FB4  D7D7               	goto	i2l438
 10308  001FB6                     __end_of_I2C1_ISR:
 10309                           	opt stack 0
 10310                           tosu	equ	0xFFF
 10311                           tosh	equ	0xFFE
 10312                           tosl	equ	0xFFD
 10313                           pclatu	equ	0xFFB
 10314                           pclath	equ	0xFFA
 10315                           tblptru	equ	0xFF8
 10316                           tblptrh	equ	0xFF7
 10317                           tblptrl	equ	0xFF6
 10318                           tablat	equ	0xFF5
 10319                           prodh	equ	0xFF4
 10320                           prodl	equ	0xFF3
 10321                           intcon	equ	0xFF2
 10322                           indf0	equ	0xFEF
 10323                           postinc0	equ	0xFEE
 10324                           fsr0h	equ	0xFEA
 10325                           fsr0l	equ	0xFE9
 10326                           wreg	equ	0xFE8
 10327                           postdec1	equ	0xFE5
 10328                           fsr1h	equ	0xFE2
 10329                           fsr1l	equ	0xFE1
 10330                           indf2	equ	0xFDF
 10331                           postinc2	equ	0xFDE
 10332                           postdec2	equ	0xFDD
 10333                           fsr2h	equ	0xFDA
 10334                           fsr2l	equ	0xFD9
 10335                           status	equ	0xFD8
 10336                           
 10337 ;; *************** function _I2C1_Stop *****************
 10338 ;; Defined at:
 10339 ;;		line 581 in file "mcc_generated_files/i2c1.c"
 10340 ;; Parameters:    Size  Location     Type
 10341 ;;  completion_c    1    wreg     enum E11632
 10342 ;; Auto vars:     Size  Location     Type
 10343 ;;  completion_c    1    0[COMRAM] enum E11632
 10344 ;; Return value:  Size  Location     Type
 10345 ;;                  1    wreg      void 
 10346 ;; Registers used:
 10347 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10348 ;; Tracked objects:
 10349 ;;		On entry : 0/0
 10350 ;;		On exit  : 0/0
 10351 ;;		Unchanged: 0/0
 10352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10357 ;;Total ram usage:        0 bytes
 10358 ;; Hardware stack levels used:    1
 10359 ;; This function calls:
 10360 ;;		Nothing
 10361 ;; This function is called by:
 10362 ;;		_I2C1_ISR
 10363 ;; This function uses a non-reentrant model
 10364 ;;
 10365                           
 10366                           	psect	text61
 10367  003296                     __ptext61:
 10368                           	opt stack 0
 10369  003296                     _I2C1_Stop:
 10370                           	opt stack 21
 10371                           
 10372                           ;i2c1.c: 584: SSP1CON2bits.PEN = 1;
 10373                           
 10374                           ;incstack = 0
 10375  003296  8497               	bsf	3991,2,c	;volatile
 10376                           
 10377                           ;i2c1.c: 591: }
 10378                           ;i2c1.c: 594: i2c1_state = S_MASTER_IDLE;
 10379  003298  0E00               	movlw	0
 10380  00329A  6E5B               	movwf	_i2c1_state,c
 10381  00329C  0012               	return		;funcret
 10382  00329E                     __end_of_I2C1_Stop:
 10383                           	opt stack 0
 10384                           tosu	equ	0xFFF
 10385                           tosh	equ	0xFFE
 10386                           tosl	equ	0xFFD
 10387                           pclatu	equ	0xFFB
 10388                           pclath	equ	0xFFA
 10389                           tblptru	equ	0xFF8
 10390                           tblptrh	equ	0xFF7
 10391                           tblptrl	equ	0xFF6
 10392                           tablat	equ	0xFF5
 10393                           prodh	equ	0xFF4
 10394                           prodl	equ	0xFF3
 10395                           intcon	equ	0xFF2
 10396                           indf0	equ	0xFEF
 10397                           postinc0	equ	0xFEE
 10398                           fsr0h	equ	0xFEA
 10399                           fsr0l	equ	0xFE9
 10400                           wreg	equ	0xFE8
 10401                           postdec1	equ	0xFE5
 10402                           fsr1h	equ	0xFE2
 10403                           fsr1l	equ	0xFE1
 10404                           indf2	equ	0xFDF
 10405                           postinc2	equ	0xFDE
 10406                           postdec2	equ	0xFDD
 10407                           fsr2h	equ	0xFDA
 10408                           fsr2l	equ	0xFD9
 10409                           status	equ	0xFD8
 10410                           
 10411 ;; *************** function _I2C1_FunctionComplete *****************
 10412 ;; Defined at:
 10413 ;;		line 563 in file "mcc_generated_files/i2c1.c"
 10414 ;; Parameters:    Size  Location     Type
 10415 ;;		None
 10416 ;; Auto vars:     Size  Location     Type
 10417 ;;		None
 10418 ;; Return value:  Size  Location     Type
 10419 ;;                  1    wreg      void 
 10420 ;; Registers used:
 10421 ;;		wreg, status,2, status,0
 10422 ;; Tracked objects:
 10423 ;;		On entry : 0/0
 10424 ;;		On exit  : 0/0
 10425 ;;		Unchanged: 0/0
 10426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10431 ;;Total ram usage:        0 bytes
 10432 ;; Hardware stack levels used:    1
 10433 ;; This function calls:
 10434 ;;		Nothing
 10435 ;; This function is called by:
 10436 ;;		_I2C1_ISR
 10437 ;; This function uses a non-reentrant model
 10438 ;;
 10439                           
 10440                           	psect	text62
 10441  0031CA                     __ptext62:
 10442                           	opt stack 0
 10443  0031CA                     _I2C1_FunctionComplete:
 10444                           	opt stack 21
 10445                           
 10446                           ;i2c1.c: 567: p_i2c1_trb_current++;
 10447                           
 10448                           ;incstack = 0
 10449  0031CA  0E06               	movlw	6
 10450  0031CC  2654               	addwf	_p_i2c1_trb_current,f,c
 10451  0031CE  0E00               	movlw	0
 10452  0031D0  2255               	addwfc	_p_i2c1_trb_current+1,f,c
 10453                           
 10454                           ;i2c1.c: 570: if(--i2c1_trb_count == 0)
 10455  0031D2  2E5A               	decfsz	_i2c1_trb_count,f,c
 10456  0031D4  D003               	goto	i2l441
 10457                           
 10458                           ;i2c1.c: 571: {
 10459                           ;i2c1.c: 572: i2c1_state = S_MASTER_SEND_STOP;
 10460  0031D6  0E04               	movlw	4
 10461  0031D8  6E5B               	movwf	_i2c1_state,c
 10462                           
 10463                           ;i2c1.c: 573: }
 10464  0031DA  0012               	return	
 10465  0031DC                     i2l441:
 10466                           
 10467                           ;i2c1.c: 574: else
 10468                           ;i2c1.c: 575: {
 10469                           ;i2c1.c: 576: i2c1_state = S_MASTER_RESTART;
 10470  0031DC  0E01               	movlw	1
 10471  0031DE  6E5B               	movwf	_i2c1_state,c
 10472  0031E0  0012               	return	
 10473  0031E2                     __end_of_I2C1_FunctionComplete:
 10474                           	opt stack 0
 10475                           tosu	equ	0xFFF
 10476                           tosh	equ	0xFFE
 10477                           tosl	equ	0xFFD
 10478                           pclatu	equ	0xFFB
 10479                           pclath	equ	0xFFA
 10480                           tblptru	equ	0xFF8
 10481                           tblptrh	equ	0xFF7
 10482                           tblptrl	equ	0xFF6
 10483                           tablat	equ	0xFF5
 10484                           prodh	equ	0xFF4
 10485                           prodl	equ	0xFF3
 10486                           intcon	equ	0xFF2
 10487                           indf0	equ	0xFEF
 10488                           postinc0	equ	0xFEE
 10489                           fsr0h	equ	0xFEA
 10490                           fsr0l	equ	0xFE9
 10491                           wreg	equ	0xFE8
 10492                           postdec1	equ	0xFE5
 10493                           fsr1h	equ	0xFE2
 10494                           fsr1l	equ	0xFE1
 10495                           indf2	equ	0xFDF
 10496                           postinc2	equ	0xFDE
 10497                           postdec2	equ	0xFDD
 10498                           fsr2h	equ	0xFDA
 10499                           fsr2l	equ	0xFD9
 10500                           status	equ	0xFD8
 10501                           
 10502 ;; *************** function _I2C1_BusCollisionISR *****************
 10503 ;; Defined at:
 10504 ;;		line 728 in file "mcc_generated_files/i2c1.c"
 10505 ;; Parameters:    Size  Location     Type
 10506 ;;		None
 10507 ;; Auto vars:     Size  Location     Type
 10508 ;;		None
 10509 ;; Return value:  Size  Location     Type
 10510 ;;                  1    wreg      void 
 10511 ;; Registers used:
 10512 ;;		None
 10513 ;; Tracked objects:
 10514 ;;		On entry : 0/0
 10515 ;;		On exit  : 0/0
 10516 ;;		Unchanged: 0/0
 10517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10522 ;;Total ram usage:        0 bytes
 10523 ;; Hardware stack levels used:    1
 10524 ;; This function calls:
 10525 ;;		Nothing
 10526 ;; This function is called by:
 10527 ;;		_INTERRUPT_InterruptManager
 10528 ;; This function uses a non-reentrant model
 10529 ;;
 10530                           
 10531                           	psect	text63
 10532  0032A4                     __ptext63:
 10533                           	opt stack 0
 10534  0032A4                     _I2C1_BusCollisionISR:
 10535                           	opt stack 22
 10536                           
 10537                           ;incstack = 0
 10538  0032A4  0012               	return		;funcret
 10539  0032A6                     __end_of_I2C1_BusCollisionISR:
 10540                           	opt stack 0
 10541                           tosu	equ	0xFFF
 10542                           tosh	equ	0xFFE
 10543                           tosl	equ	0xFFD
 10544                           pclatu	equ	0xFFB
 10545                           pclath	equ	0xFFA
 10546                           tblptru	equ	0xFF8
 10547                           tblptrh	equ	0xFF7
 10548                           tblptrl	equ	0xFF6
 10549                           tablat	equ	0xFF5
 10550                           prodh	equ	0xFF4
 10551                           prodl	equ	0xFF3
 10552                           intcon	equ	0xFF2
 10553                           indf0	equ	0xFEF
 10554                           postinc0	equ	0xFEE
 10555                           fsr0h	equ	0xFEA
 10556                           fsr0l	equ	0xFE9
 10557                           wreg	equ	0xFE8
 10558                           postdec1	equ	0xFE5
 10559                           fsr1h	equ	0xFE2
 10560                           fsr1l	equ	0xFE1
 10561                           indf2	equ	0xFDF
 10562                           postinc2	equ	0xFDE
 10563                           postdec2	equ	0xFDD
 10564                           fsr2h	equ	0xFDA
 10565                           fsr2l	equ	0xFD9
 10566                           status	equ	0xFD8
 10567                           tosu	equ	0xFFF
 10568                           tosh	equ	0xFFE
 10569                           tosl	equ	0xFFD
 10570                           pclatu	equ	0xFFB
 10571                           pclath	equ	0xFFA
 10572                           tblptru	equ	0xFF8
 10573                           tblptrh	equ	0xFF7
 10574                           tblptrl	equ	0xFF6
 10575                           tablat	equ	0xFF5
 10576                           prodh	equ	0xFF4
 10577                           prodl	equ	0xFF3
 10578                           intcon	equ	0xFF2
 10579                           indf0	equ	0xFEF
 10580                           postinc0	equ	0xFEE
 10581                           fsr0h	equ	0xFEA
 10582                           fsr0l	equ	0xFE9
 10583                           wreg	equ	0xFE8
 10584                           postdec1	equ	0xFE5
 10585                           fsr1h	equ	0xFE2
 10586                           fsr1l	equ	0xFE1
 10587                           indf2	equ	0xFDF
 10588                           postinc2	equ	0xFDE
 10589                           postdec2	equ	0xFDD
 10590                           fsr2h	equ	0xFDA
 10591                           fsr2l	equ	0xFD9
 10592                           status	equ	0xFD8
 10593                           
 10594                           	psect	text64
 10595  000000                     __ptext64:
 10596                           	opt stack 0
 10597                           tosu	equ	0xFFF
 10598                           tosh	equ	0xFFE
 10599                           tosl	equ	0xFFD
 10600                           pclatu	equ	0xFFB
 10601                           pclath	equ	0xFFA
 10602                           tblptru	equ	0xFF8
 10603                           tblptrh	equ	0xFF7
 10604                           tblptrl	equ	0xFF6
 10605                           tablat	equ	0xFF5
 10606                           prodh	equ	0xFF4
 10607                           prodl	equ	0xFF3
 10608                           intcon	equ	0xFF2
 10609                           indf0	equ	0xFEF
 10610                           postinc0	equ	0xFEE
 10611                           fsr0h	equ	0xFEA
 10612                           fsr0l	equ	0xFE9
 10613                           wreg	equ	0xFE8
 10614                           postdec1	equ	0xFE5
 10615                           fsr1h	equ	0xFE2
 10616                           fsr1l	equ	0xFE1
 10617                           indf2	equ	0xFDF
 10618                           postinc2	equ	0xFDE
 10619                           postdec2	equ	0xFDD
 10620                           fsr2h	equ	0xFDA
 10621                           fsr2l	equ	0xFD9
 10622                           status	equ	0xFD8
 10623                           
 10624                           	psect	rparam
 10625  0000                     tosu	equ	0xFFF
 10626                           tosh	equ	0xFFE
 10627                           tosl	equ	0xFFD
 10628                           pclatu	equ	0xFFB
 10629                           pclath	equ	0xFFA
 10630                           tblptru	equ	0xFF8
 10631                           tblptrh	equ	0xFF7
 10632                           tblptrl	equ	0xFF6
 10633                           tablat	equ	0xFF5
 10634                           prodh	equ	0xFF4
 10635                           prodl	equ	0xFF3
 10636                           intcon	equ	0xFF2
 10637                           indf0	equ	0xFEF
 10638                           postinc0	equ	0xFEE
 10639                           fsr0h	equ	0xFEA
 10640                           fsr0l	equ	0xFE9
 10641                           wreg	equ	0xFE8
 10642                           postdec1	equ	0xFE5
 10643                           fsr1h	equ	0xFE2
 10644                           fsr1l	equ	0xFE1
 10645                           indf2	equ	0xFDF
 10646                           postinc2	equ	0xFDE
 10647                           postdec2	equ	0xFDD
 10648                           fsr2h	equ	0xFDA
 10649                           fsr2l	equ	0xFD9
 10650                           status	equ	0xFD8
 10651                           
 10652                           	psect	temp
 10653  00005F                     btemp:
 10654                           	opt stack 0
 10655  00005F                     	ds	1
 10656  0000                     int$flags	set	btemp
 10657  0000                     wtemp6	set	btemp+1
 10658                           tosu	equ	0xFFF
 10659                           tosh	equ	0xFFE
 10660                           tosl	equ	0xFFD
 10661                           pclatu	equ	0xFFB
 10662                           pclath	equ	0xFFA
 10663                           tblptru	equ	0xFF8
 10664                           tblptrh	equ	0xFF7
 10665                           tblptrl	equ	0xFF6
 10666                           tablat	equ	0xFF5
 10667                           prodh	equ	0xFF4
 10668                           prodl	equ	0xFF3
 10669                           intcon	equ	0xFF2
 10670                           indf0	equ	0xFEF
 10671                           postinc0	equ	0xFEE
 10672                           fsr0h	equ	0xFEA
 10673                           fsr0l	equ	0xFE9
 10674                           wreg	equ	0xFE8
 10675                           postdec1	equ	0xFE5
 10676                           fsr1h	equ	0xFE2
 10677                           fsr1l	equ	0xFE1
 10678                           indf2	equ	0xFDF
 10679                           postinc2	equ	0xFDE
 10680                           postdec2	equ	0xFDD
 10681                           fsr2h	equ	0xFDA
 10682                           fsr2l	equ	0xFD9
 10683                           status	equ	0xFD8


Data Sizes:
    Strings     24
    Constant    118
    Data        8
    BSS         73
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     79      94
    BANK0           160     48     119
    BANK1           256      3       3
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          136      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_tr_queue.pTrFlag	PTR enum E11632 size(2) Largest target is 0

    i2c1_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> vectorString(BANK0[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    LCD_createChar@charmap	PTR unsigned char  size(2) Largest target is 8
		 -> simboloGrados(BANK0[8]), 

    LCD_print@s	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_3(CODE[6]), vectorString(BANK0[32]), STR_1(CODE[13]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.pTrFlag	PTR enum E11632 size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    F11744.pbuffer	PTR unsigned char  size(2) Largest target is 0

    F11739.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_trb_current	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E11632 size(2) Largest target is 0

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    S699$pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    S711$pTrFlag	PTR enum E11632 size(2) Largest target is 0

    p_i2c1_current.pTrFlag	PTR enum E11632 size(2) Largest target is 0

    S711$ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    p_i2c1_current.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    p_i2c1_current	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), NULL(NULL[0]), 

    S722$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    i2c1_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    S722$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    i2c1_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> timerInt(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> timerInt(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_CallBack->_timerInt
    _timerInt->_sprintf
    i2_LCD_setCursor->i2_LCD_command
    i2_LCD_command->i2_LCD_send
    i2_LCD_print->i2_LCD_write
    i2_LCD_write->i2_LCD_send
    i2_LCD_send->i2_LCD_write4bits
    i2_LCD_pulseEnable->i2_LCD_EN_SET
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->_fround
    _regularTemperatura->___ftge
    _getTemperatura->___ftdiv
    ___lwtoft->___ftpack
    ___ftmul->___wmul
    ___ftdiv->___ftmul

Critical Paths under _main in BANK0

    _main->_LCD_createChar
    _main->_LCD_print
    _main->_LCD_setCursor
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _LCD_setCursor->_LCD_command
    _LCD_print->_LCD_write
    _LCD_init->_LCD_command
    _LCD_display->_LCD_command
    _LCD_clear->_LCD_command
    _LCD_createChar->_LCD_command
    _LCD_createChar->_LCD_write
    _LCD_write->_LCD_send
    _LCD_command->_LCD_send
    _LCD_send->_LCD_write4bits
    _LCD_pulseEnable->_LCD_EN_SET

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _timerInt->_sprintf

Critical Paths under _main in BANK1

    _main->_LCD_createChar

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4850
                     _LCD_createChar
                           _LCD_init
                          _LCD_print
                      _LCD_setCursor
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     197
                    _ADCC_Initialize
                    _I2C1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     174
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             3     0      3     174
                                             41 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                             41 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_setCursor                                        2     1      1     790
                                             46 BANK0      2     1      1
                        _LCD_command
 ---------------------------------------------------------------------------------
 (1) _LCD_print                                            3     1      2     768
                                             46 BANK0      2     0      2
                                              0 BANK1      1     1      0
                          _LCD_write
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             1     1      0    1687
                                             46 BANK0      1     1      0
                         _LCD_EN_SET
                         _LCD_RS_SET
                          _LCD_clear
                        _LCD_command
                        _LCD_display
                     _LCD_write4bits
 ---------------------------------------------------------------------------------
 (2) _LCD_display                                          0     0      0     490
                        _LCD_command
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            0     0      0     490
                        _LCD_command
 ---------------------------------------------------------------------------------
 (1) _LCD_createChar                                       5     3      2    1234
                                             46 BANK0      2     0      2
                                              0 BANK1      3     3      0
                        _LCD_command
                          _LCD_write
 ---------------------------------------------------------------------------------
 (2) _LCD_write                                            1     1      0     490
                                             45 BANK0      1     1      0
                           _LCD_send
 ---------------------------------------------------------------------------------
 (2) _LCD_command                                          1     1      0     490
                                             45 BANK0      1     1      0
                           _LCD_send
 ---------------------------------------------------------------------------------
 (3) _LCD_send                                             2     1      1     459
                                             43 BANK0      2     1      1
                         _LCD_RS_SET
                     _LCD_write4bits
 ---------------------------------------------------------------------------------
 (4) _LCD_write4bits                                       1     1      0     155
                                             42 BANK0      1     1      0
                    _LCD_pulseEnable
 ---------------------------------------------------------------------------------
 (5) _LCD_pulseEnable                                      0     0      0      31
                         _LCD_EN_SET
 ---------------------------------------------------------------------------------
 (6) _LCD_EN_SET                                           1     1      0      31
                                             41 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _LCD_RS_SET                                           1     1      0      31
                                             41 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          18    18      0   63419
                                             23 BANK0     18    18      0
               _I2C1_BusCollisionISR
                           _I2C1_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0   63419
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (10) _TMR0_CallBack                                       0     0      0   63419
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                           _timerInt *
 ---------------------------------------------------------------------------------
 (11) _timerInt                                            3     3      0   63419
                                             76 COMRAM     3     3      0
                     _getTemperatura
                 _regularTemperatura
                            _sprintf
                        i2_LCD_print
                    i2_LCD_setCursor
                        i2_LCD_write
 ---------------------------------------------------------------------------------
 (12) i2_LCD_setCursor                                     2     1      1     408
                                              5 COMRAM     2     1      1
                      i2_LCD_command
 ---------------------------------------------------------------------------------
 (13) i2_LCD_command                                       1     1      0     272
                                              4 COMRAM     1     1      0
                         i2_LCD_send
 ---------------------------------------------------------------------------------
 (12) i2_LCD_print                                         3     1      2     377
                                              5 COMRAM     3     1      2
                        i2_LCD_write
 ---------------------------------------------------------------------------------
 (12) i2_LCD_write                                         1     1      0     272
                                              4 COMRAM     1     1      0
                         i2_LCD_send
 ---------------------------------------------------------------------------------
 (13) i2_LCD_send                                          2     1      1     250
                                              2 COMRAM     2     1      1
                       i2_LCD_RS_SET
                   i2_LCD_write4bits
 ---------------------------------------------------------------------------------
 (14) i2_LCD_write4bits                                    1     1      0     110
                                              1 COMRAM     1     1      0
                  i2_LCD_pulseEnable
 ---------------------------------------------------------------------------------
 (15) i2_LCD_pulseEnable                                   0     0      0      22
                       i2_LCD_EN_SET
 ---------------------------------------------------------------------------------
 (16) i2_LCD_EN_SET                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (14) i2_LCD_RS_SET                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) _sprintf                                            44    37      7   50005
                                             63 COMRAM    13     6      7
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (13) _scale                                               7     4      3   11907
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (13) _isdigit                                             3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (13) _fround                                             10     7      3   11709
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (14) ___wmul                                              6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (14) ___awmod                                             6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (14) ___awdiv                                             8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (13) __tdiv_to_l_                                        15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (13) __div_to_l_                                         12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (13) ___lltoft                                            9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (13) ___llmod                                             9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (13) ___lldiv                                            13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (13) ___fttol                                            15    11      4     480
                                             35 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (13) ___ftsub                                             6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (14) ___ftadd                                            12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (13) ___ftneg                                             3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (12) _regularTemperatura                                  3     0      3    1364
                                              9 COMRAM     3     0      3
                             ___ftge
 ---------------------------------------------------------------------------------
 (13) ___ftge                                              9     3      6    1200
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (12) _getTemperatura                                      5     2      3   10948
                                             50 COMRAM     5     2      3
           _ADCC_GetSingleConversion
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (13) ___lwtoft                                            3     0      3    2603
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (14) ___ftmul                                            15     9      6    5237
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (13) ___ftdiv                                            15     9      6    3063
                                             35 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (15) ___ftpack                                            8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (13) _ADCC_GetSingleConversion                            5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (11) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C1_ISR                                             2     2      0       0
                                              0 COMRAM     2     2      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (10) _I2C1_Stop                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _I2C1_FunctionComplete                               0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C1_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_createChar
     _LCD_command
       _LCD_send
         _LCD_RS_SET
         _LCD_write4bits
           _LCD_pulseEnable
             _LCD_EN_SET
     _LCD_write
       _LCD_send
         _LCD_RS_SET
         _LCD_write4bits
           _LCD_pulseEnable
             _LCD_EN_SET
   _LCD_init
     _LCD_EN_SET
     _LCD_RS_SET
     _LCD_clear
       _LCD_command
         _LCD_send
           _LCD_RS_SET
           _LCD_write4bits
             _LCD_pulseEnable
               _LCD_EN_SET
     _LCD_command
       _LCD_send
         _LCD_RS_SET
         _LCD_write4bits
           _LCD_pulseEnable
             _LCD_EN_SET
     _LCD_display
       _LCD_command
         _LCD_send
           _LCD_RS_SET
           _LCD_write4bits
             _LCD_pulseEnable
               _LCD_EN_SET
     _LCD_write4bits
       _LCD_pulseEnable
         _LCD_EN_SET
   _LCD_print
     _LCD_write
       _LCD_send
         _LCD_RS_SET
         _LCD_write4bits
           _LCD_pulseEnable
             _LCD_EN_SET
   _LCD_setCursor
     _LCD_command
       _LCD_send
         _LCD_RS_SET
         _LCD_write4bits
           _LCD_pulseEnable
             _LCD_EN_SET
   _SYSTEM_Initialize
     _ADCC_Initialize
     _I2C1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TMR0_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _timerInt *
         _getTemperatura
           _ADCC_GetSingleConversion
           ___ftdiv
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft
             ___ftpack
         _regularTemperatura
           ___ftge
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         i2_LCD_print
           i2_LCD_write
             i2_LCD_send
               i2_LCD_RS_SET
               i2_LCD_write4bits
                 i2_LCD_pulseEnable
                   i2_LCD_EN_SET
         i2_LCD_setCursor
           i2_LCD_command
             i2_LCD_send
               i2_LCD_RS_SET
               i2_LCD_write4bits
                 i2_LCD_pulseEnable
                   i2_LCD_EN_SET
         i2_LCD_write
           i2_LCD_send
             i2_LCD_RS_SET
             i2_LCD_write4bits
               i2_LCD_pulseEnable
                 i2_LCD_EN_SET

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E87      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      3       3       8        1.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     30      77       5       74.4%
BITBANK14           88      0       0      33        0.0%
BANK14              88      0       0      34        0.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     4F      5E       1      100.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D8       6        0.0%
DATA                 0      0      D8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Thu Jun 21 13:43:30 2018

                             __CFG_CP$OFF 000000                              ___awdiv@sign 000C  
                     ___wmul@multiplicand 0011                   __size_of_LCD_createChar 0052  
                            ___ftadd@exp1 0039                              ___ftadd@exp2 0038  
                        ??_getTemperatura 0036                              ___ftadd@sign 0037  
                                     l600 2C5A                                       l534 2E5C  
                                     l641 2DF0                                       l643 2E10  
                                     l670 2F9E                                       l590 2DA2  
                                     l671 2FA0                                       l591 2D72  
                                     l664 2F80                                       l665 2F82  
                                     l593 2D7E                                       l666 2F8A  
                                     l594 2D8A                                       l667 2F8C  
                                     l595 2D96                                       l668 2F94  
                                     l669 2F96                                       l599 2C8A  
                                     _GIE 007F97                              __CFG_CPD$OFF 000000  
                            ___awmod@sign 0006                                       tosl 000FFD  
                                     wreg 000FE8                 __size_ofi2_LCD_write4bits 0030  
                            __CFG_LVP$OFF 000000                              __CFG_ZCD$OFF 000000  
                            ___ftdiv@cntr 002D                          __end_of_I2C1_ISR 1FB6  
                            ___ftdiv@sign 0032                                      l4448 2DE0  
                                    STR_1 0F77                                      STR_2 0F8A  
                                    STR_3 0F84                              ?_LCD_command 0001  
                            ?_LCD_display 0001                                      _LATA 000F83  
                                    _LATB 000F84                                      _LATC 000F85  
                                    _LATD 000F86                                      _LATE 000F87  
                                    u4007 2916                                      u4017 293C  
                                    u4027 294A                                      u4037 2958  
                                    u4047 3232                                      u4057 315C  
                                    u3490 273A                                      u3905 3226  
                                    u3906 3228                                      u3970 2C7C  
                                    u3980 2CAC                                      u3895 3214  
                                    u3896 3216                                      u3977 2C72  
                                    u3987 2CA2                                      _WPUA 000F10  
                                    _WPUB 000F18                                      _WPUC 000F20  
                                    _WPUD 000F25                                      _WPUE 000F2D  
                           __CFG_FCMEN$ON 000000                                      _main 2E12  
                            ___ftpack@arg 0001                              ___ftpack@exp 0004  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    indf0 000FEF                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 005F                    __size_of_LCD_setCursor 0054  
                             ?i2_LCD_send 0003                                      prodh 000FF4  
                                    prodl 000FF3                                      start 00C8  
                      __size_of_LCD_clear 0010                              _sprintf$2174 009B  
                           __CFG_CSWEN$ON 000000                              ___ftmul@cntr 0022  
                      __size_of_LCD_print 0062                              ___param_bank 000000  
                            ___ftmul@sign 0023                        __size_of_LCD_write 0012  
                           __CFG_SCANE$ON 000000                              ___fttol@exp1 0032  
                            ___fttol@lval 002E                   __end_of_TMR0_Initialize 3032  
                              _i2c1_state 005B            ??_TMR0_DefaultInterruptHandler 0001  
          __size_of_OSCILLATOR_Initialize 0018                          __end_of_LCD_init 298C  
           __end_of_OSCILLATOR_Initialize 31B2                          __end_of_LCD_send 312A  
                                   _ADACQ 000F5C                                     _ADCAP 000F5D  
                                   _ADACT 000F56                                     ?_main 0001  
                                   _ADCLK 000F57                                     _ADCNT 000F67  
                                   _ADPCH 000F5F                                     _ADREF 000F58  
                         __end_of___awdiv 2A10                         __end_of_I2C1_Stop 329E  
                                   _ADPRE 000F5E                           __end_of___ftadd 2162  
                           __CFG_WDTE$OFF 000000                           __end_of___awmod 2B80  
                                   _ADRPT 000F66                           __end_of___ftdiv 268A  
                         __end_of___ftneg 30A0                           __end_of___lldiv 2A92  
                         __end_of___ftmul 25A4                           ___awdiv@divisor 0009  
                         __end_of___llmod 2C52                           __end_of___ftsub 2F72  
                         __end_of___fttol 24B0                            __CFG_DEBUG$OFF 000000  
                                   i2l400 1DA2                                     i2l402 1DEE  
                                   i2l411 1E3C                                     i2l403 1DFE  
                                   i2l420 1EC2                                     i2l412 1E4C  
                                   i2l405 1E06                                     i2l430 1F22  
                                   i2l422 1EC8                                     i2l414 1E7A  
                                   i2l406 1E0E                                     i2l423 1EDA  
                                   i2l407 1E1E                                     i2l432 1F2A  
                                   i2l416 1EB4                                     i2l600 2CBA  
                                   i2l280 0070                                     i2l441 31DC  
                                   i2l433 1F32                                     i2l425 1EFE  
                                   i2l409 1E36                                     i2l434 1F52  
                                   i2l426 1EF6                                     i2l186 30D0  
                                   i2l282 007C                                     i2l435 1F58  
                                   i2l436 1F5C                                     i2l429 1F10  
                                   i2l701 18C6                                     i2l438 1F64  
                                   i2l702 1A2E                                     i2l710 1036  
                                   i2l278 0060                                     i2l711 101C  
                                   i2l704 1AEA                                     i2l712 0FE0  
                                   i2l721 1622                                     i2l730 12EC  
                                   i2l722 1084                                     i2l547 28C0  
                                   i2l723 10C6                                     i2l715 1048  
                                   i2l708 0F9C                                     i2l733 1294  
                                   i2l725 1158                                     i2l709 0FB2  
                                   i2l750 1492                                     i2l726 11BE  
                                   i2l718 1044                                     i2l670 3000  
                                   i2l590 2ED2                                     i2l399 1F70  
                                   i2l751 1496                                     i2l719 1070  
                                   i2l671 3002                                     i2l591 2EAA  
                                   i2l760 1656                                     i2l752 14B8  
                                   i2l744 144E                                     i2l728 11E4  
                                   i2l664 2FE2                                     i2l753 15F6  
                                   i2l745 13B4                                     i2l729 1224  
                                   i2l665 2FE4                                     i2l593 2EB4  
                                   i2l762 1676                                     i2l754 1508  
                                   i2l666 2FEC                                     i2l594 2EBE  
                                   i2l691 1C6C                                     i2l763 169A  
                                   i2l747 146E                                     i2l739 1352  
                                   i2l667 2FEE                                     i2l595 2EC8  
                                   i2l940 29EE                                     i2l756 1618  
                                   i2l748 1458                                     i2l668 2FF6  
                                   i2l941 29F8                                     i2l933 29A0  
                                   i2l757 1602                                     i2l669 2FF8  
                                   i2l942 2A06                                     i2l934 29B0  
                                   i2l950 2B3E                                     i2l694 1D44  
                                   i2l759 163A                                     i2l599 2CE6  
                                   i2l936 29CE                                     i2l937 29C6  
                                   i2l953 2B5E                                     i2l697 18F0  
                                   i2l954 2B68                                     i2l946 2B24  
                                   i2l698 180A                                     i2l971 2380  
                                   i2l955 2B76                                     i2l947 2B30  
                                   i2l972 2370                           ___awdiv@counter 000B  
                                   i2l965 22B2                                     i2l949 2B46  
                                   i2l967 22D0                                     i2l968 2312  
                                   i2l977 23A4                                     i2l969 2342  
                                   i2l978 2398                                     i2l997 2766  
                                   i2l998 275C                                     _OSCEN 000EDC  
                                   _TMR0H 000FD4                                     _TMR0L 000FD3  
                                   _TRISA 000F88                                     _TRISB 000F89  
                                   _TRISC 000F8A                                     _TRISD 000F8B  
                                   _TRISE 000F8C                           LCD_EN_SET@value 00C4  
       __size_of_TMR0_SetInterruptHandler 000E              __end_of_I2C1_BusCollisionISR 32A6  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                 ?_TMR0_SetInterruptHandler 00C4  
                     __size_of_LCD_EN_SET 0012                             __CFG_WRT3$OFF 000000  
                           __CFG_WRT4$OFF 000000                             __CFG_WRT5$OFF 000000  
                            ___lltoft@exp 0011                             __CFG_WRT6$OFF 000000  
                           __CFG_WRT7$OFF 000000                            __CFG_EBTR0$OFF 000000  
                          __CFG_EBTR1$OFF 000000                    regularTemperatura@temp 000A  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                       ??_I2C1_Initialize 00C4                            __CFG_EBTR4$OFF 000000  
                          __CFG_EBTR5$OFF 000000                            __CFG_EBTR6$OFF 000000  
                        __end_of_TMR0_ISR 310A                            __CFG_EBTR7$OFF 000000  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
                         __end_of_dpowers 0F29                       __size_of_LCD_RS_SET 0012  
                                   _scale 16C4                           __end_of_isdigit 3148  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 0005  
                          __pbitbssCOMRAM 02F0                            __CFG_BOREN$OFF 000000  
                                   pclath 000FFA                                     tablat 000FF5  
                            ?i2_LCD_print 0006                              ?i2_LCD_write 0001  
                                   status 000FD8                                     wtemp6 0060  
                         __end_of_sprintf 16C4                           __initialization 2EEE  
                            __end_of_main 2E5E               ?_INTERRUPT_InterruptManager 0001  
                     timerInt@temperatura 004D                               _i2c1_object 0060  
                                  ??_main 00CB                             ___fttol@sign1 002D  
                             LCD_print@cs 0100                             _LCD_setCursor 2D6C  
                           __activetblptr 000003                      __size_of__tdiv_to_l_ 0132  
                     __size_ofi2_LCD_send 0018                         __end_of_LCD_clear 323A  
                       __end_of_LCD_print 2CB4                         __end_of_LCD_write 31F4  
                                  _ADACCH 000F71                                    _ADACCL 000F70  
                                  _ADCON0 000F60                                    _ADCON1 000F59  
                                  _ADCON2 000F5A                                    _ADCON3 000F5B  
                                  _ADERRH 000F6F                                    _ADERRL 000F6E  
                        ___llmod@dividend 0001                                    _ADLTHH 000F6B  
                                  ?_scale 0024                                    _ADLTHL 000F6A  
                                  _ADRESH 000F64                                    _ADRESL 000F63  
                                  _ADSTAT 000F65                                    _ADUTHH 000F6D  
                        ___awdiv@dividend 0007                                    _ADUTHL 000F6C  
                                  _ANSELA 000F11                                    _ANSELB 000F19  
                                  _ANSELC 000F21                                    _ANSELD 000F26  
                                  _ANSELE 000F2E                          __end_of___ftpack 27EC  
                                  _T0CON0 000FD5                                    _T0CON1 000FD6  
                __size_ofi2_LCD_setCursor 0048                          __end_of___lltoft 2D6C  
                                  _RC3PPS 000EFA                                    _RC4PPS 000EFB  
                                  _ODCONA 000F0F                                    _ODCONB 000F17  
                                  _ODCONC 000F1F                                    _ODCOND 000F24  
                                  _ODCONE 000F2C                                    i2l1000 279A  
                            __displaymode 0067                                    i2l1001 2784  
                                  i2l1003 27C2                                    i2l1004 27B8  
                                  i2l1100 256A                                    i2l1110 2F48  
                                  i2l1104 3092                                    i2l1032 2032  
                                  i2l1042 208E                                    i2l1122 2482  
                                  i2l1114 23E8                                    i2l1051 20CC  
                                  i2l1043 2084                                    i2l1123 2476  
                                  i2l1052 20C2                                    i2l1028 2008  
                                  i2l1116 245E                                    i2l1061 25CC  
                                  i2l1037 2098                                    u210_41 1FC6  
                                  i2l1125 249E                                    i2l1117 244E  
                                  i2l1054 20F0                                    i2l1063 25F4  
                                  i2l1055 210C                                    i2l1071 21BA  
                                  i2l1064 2632                                    i2l1056 213C  
                                  i2l1160 2A80                                    i2l1072 21F4  
                                  i2l1065 2658                                    i2l1081 227C  
                                  i2l1073 221C                                    i2l1129 3140  
                                  i2l1170 2C40                                    i2l1082 2270  
                                  i2l1155 2A3E                                    i2l1075 2258  
                                  i2l1156 2A32                                    i2l1076 2248  
                                  i2l1093 24D8                                    u211_41 1FDA  
                                  i2l1165 2C0A                                    i2l1069 218E  
                                  i2l1086 281C                                    i2l1166 2BFE  
                                  i2l1095 2500                                    i2l1087 284C  
                                  i2l1159 2A72                                    i2l1096 2532  
                                  i2l1176 2D22                                    i2l1097 2542  
                                  i2l1169 2C32                                    i2l1177 2D16  
                          __CFG_WDTCCS$SC 000000                                    i2l1099 255A  
                                  i2l4044 1DEE                                    u231_41 24C0  
                                  i2l3726 126E                                    i2l3718 1224  
                                  i2l2946 2878                                    i2l3746 1356  
                                  i2l3836 1696                                    i2l3774 1458  
                                  u233_41 24E8                                    u280_41 25B4  
                                  u264_41 2172                          __end_of___lwtoft 30C4  
                                  u282_41 25DC                                    u290_41 23CC  
                                  u266_41 219E                          i2LCD_write@value 0005  
                                  _OSCFRQ 000EDE                             ?i2_LCD_EN_SET 0001  
                          __CFG_PWRTE$OFF 000000                              _calefactorON 02F1  
                          __CFG_XINST$OFF 000000                          __end_of__powers_ 0F50  
                 __size_of_LCD_write4bits 0034                 __CFG_RSTOSC$HFINTOSC_1MHZ 000000  
                           ?i2_LCD_RS_SET 0001                            _p_i2c1_current 0052  
                                  ___ftge 27EC                                    ___wmul 3032  
                               ??___awdiv 000B                                 ??___ftadd 0034  
                          __CFG_STVREN$ON 000000                                 ??___awmod 0005  
                               ??___ftdiv 002A                                 ??___ftneg 0004  
                               ??___lldiv 0009                                 ??___ftmul 001B  
                               ??___llmod 0009                                 ??___ftsub 0040  
                               ??___fttol 0028                          ?_TMR0_Initialize 0001  
                                  _fround 1B14                                 ?_I2C1_ISR 0001  
                                  clear_0 2F14                                    clear_1 2F22  
                        ___awdiv@quotient 000D                           ___awmod@divisor 0003  
                          _LCD_createChar 2DC0                            ?_LCD_setCursor 00C9  
                         ___awmod@counter 0005               __size_of_regularTemperatura 008C  
                   ___ftmul@f3_as_product 001F                           _ADCC_Initialize 2E5E  
                               ??_isdigit 0001                          __end_of_timerInt 2B10  
                            __mediumconst 0000                         LCD_setCursor@fila 00C9  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                          i2_LCD_write4bits 2FD8  
       __size_of_ADCC_GetSingleConversion 0024                     __end_of_TMR0_CallBack 307C  
               ?_ADCC_GetSingleConversion 0001  TMR0_SetInterruptHandler@InterruptHandler 00C4  
                               ??_sprintf 0047             __size_of_INTERRUPT_Initialize 0004  
                       _SYSTEM_Initialize 3180                                __accesstop 0060  
                 __end_of__initialization 2F28                                ___ftadd@f1 002E  
                              ___ftadd@f2 0031                      __size_of_LCD_command 0012  
                    __size_of_LCD_display 000E                                ___ftge@ff1 0001  
                              ___ftge@ff2 0004                                 ?_LCD_init 0001  
                      ?_SYSTEM_Initialize 0001                            ??i2_LCD_EN_SET 0001  
                               ?_LCD_send 00C6                             ___rparam_used 000001  
                            ??_LCD_EN_SET 00C4                                ___ftdiv@f1 0024  
                              ___ftdiv@f2 0027                                ___ftdiv@f3 002E  
                              ___ftneg@f1 0001                            _i2c1_trb_count 005A  
                          ??i2_LCD_RS_SET 0001                                ___ftmul@f1 0015  
                              ___ftmul@f2 0018                              ??_LCD_RS_SET 00C4  
                   _I2C1_FunctionComplete 31CA                      _I2C1_BusCollisionISR 32A4  
                              ___ftsub@f1 003A                                ___ftsub@f2 003D  
                              ___fttol@f1 0024                            __pcstackCOMRAM 0001  
                            __pidataBANK0 328E                       ??_SYSTEM_Initialize 00C7  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0009  
                  __end_of_LCD_createChar 2E12                             __end_of_scale 1B14  
                              ??_I2C1_ISR 0001                              LCD_send@mode 00C6  
                  __size_ofi2_LCD_command 000E                                ___lwtoft@c 0009  
                              __div_to_l_ 2294                         i2LCD_RS_SET@value 0001  
                   TMR0_ISR@CountCallBack 0056                        __end_of_LCD_EN_SET 3218  
                         __div_to_l_@exp1 000C                           __div_to_l_@cntr 000B  
                                 ??_scale 0027                 __end_of_SYSTEM_Initialize 319A  
                         __div_to_l_@quot 0007                        __end_of_LCD_RS_SET 322A  
                              __pbssBANK0 0060                                ??_LCD_init 00C9  
                            ??i2_LCD_send 0004                                ??_LCD_send 00C7  
                    __size_ofi2_LCD_print 005C                             __div_to_l_@f1 0001  
                           __div_to_l_@f2 0004                      __size_ofi2_LCD_write 000E  
                __size_of_LCD_pulseEnable 001C                         ??i2_LCD_setCursor 0007  
                      i2LCD_command@value 0005                     ?_I2C1_BusCollisionISR 0001  
                          _SSP1DATPPSbits 000EB8                                   ?___ftge 0001  
        __end_of_TMR0_SetInterruptHandler 3248                                   ?___wmul 000F  
                              ??_TMR0_ISR 0050                           __CFG_PPS1WAY$ON 000000  
                 __end_of_ADCC_Initialize 2EA6                           ?_LCD_createChar 00C9  
                         ??_LCD_setCursor 00CA                           _I2C1_Initialize 2FA6  
                       i2LCD_write4bits@a 0002                                   _ADFLTRH 000F73  
                                 _ADFLTRL 000F72                            LCD_write@value 00C8  
                                 ?_fround 0024                                   _ADPREVH 000F62  
                                 _ADPREVL 000F61                                 ?___ftpack 0001  
                                 _ADSTPTH 000F69                                   _ADSTPTL 000F68  
                          _SSP1CLKPPSbits 000EB7                                 ?___lltoft 0009  
                               ?___lwtoft 0009                     LCD_createChar@charmap 00C9  
                                 _OSCCON1 000ED8                                   _OSCCON3 000EDA  
                      __end_ofi2_LCD_send 31CA                                 _I2C1_Stop 3296  
                                 _OSCTUNE 000EDD                                   _SSP1ADD 000F93  
                                 _PPSLOCK 000EA0                                   _SSP1BUF 000F92  
                            i2LCD_print@s 0006                             i2_LCD_command 3256  
                  ?_I2C1_FunctionComplete 0001                         __end_of__npowers_ 0F77  
                                 __Hparam 0000                                _scale$2173 0027  
                       i2_LCD_pulseEnable 3164                            _LCD_write4bits 2F72  
                                 __Lparam 0000                        _p_i2c1_trb_current 0054  
                               ?_timerInt 0001                        ?i2_LCD_pulseEnable 0001  
                         __size_of___ftge 0090                                   ___awdiv 298C  
                                 ___ftadd 1FB6                                   ___awmod 2B10  
                                 ___ftdiv 25A4                                   ___ftneg 307C  
                                 ___lldiv 2A10                           __size_of___wmul 0026  
                                 ___ftmul 24B0                                   ___llmod 2BEC  
                                 ___ftsub 2F32                                   ___fttol 23BC  
                            __psmallconst 0F00                                   __pcinit 2EEE  
                              ??___ftpack 0006                           __size_of_fround 0276  
                                 __ramtop 0F00                                ??___lltoft 000D  
                                 __ptext0 2E12                                   __ptext1 3180  
                                 __ptext2 3008                                   __ptext3 323A  
                                 __ptext4 268A                                   __ptext5 319A  
                                 __ptext6 329E                                   __ptext7 2FA6  
                                 __ptext8 2E5E                                   __ptext9 2D6C  
                              ??___lwtoft 000C                       ??i2_LCD_pulseEnable 0002  
                             ?__div_to_l_ 0001                                   _dpowers 0F01  
                   _OSCILLATOR_Initialize 319A                      __end_ofi2_LCD_EN_SET 3280  
                                 _isdigit 312A                          ___awmod@dividend 0001  
                ??_PIN_MANAGER_Initialize 00C4                                ?_I2C1_Stop 0001  
                         __displaycontrol 0068                      __end_ofi2_LCD_RS_SET 328E  
              __size_of_SYSTEM_Initialize 001A                                   _sprintf 0F90  
                    I2C1_ISR@pi2c_buf_ptr 0050                                 _LCD_clear 322A  
                    end_of_initialization 2F28                   __size_of_getTemperatura 006C  
                          ?i2_LCD_command 0001                                 _LCD_print 2C52  
                               _LCD_write 31E2                 __end_ofi2_LCD_pulseEnable 3180  
                  __end_of_LCD_write4bits 2FA6                    ??_I2C1_BusCollisionISR 0001  
                 __end_of_I2C1_Initialize 2FD8                           ___lldiv@divisor 0005  
                  i2LCD_setCursor@columna 0007                           ___lldiv@counter 000D  
                __end_ofi2_LCD_write4bits 3008                                ??_timerInt 004D  
                                 postdec1 000FE5                                   postdec2 000FDD  
                                 postinc0 000FEE                                   postinc2 000FDE  
                        ?_ADCC_Initialize 0001                            __tdiv_to_l_@f1 0001  
                          __tdiv_to_l_@f2 0004          __end_of_ADCC_GetSingleConversion 30E8  
                       ??_LCD_pulseEnable 00C5                     __CFG_WDTCPS$WDTCPS_31 000000  
                           ??__tdiv_to_l_ 0007                  _TMR0_SetInterruptHandler 323A  
                               _PORTDbits 000F90                                 _PORTEbits 000F91  
                       __size_of_I2C1_ISR 022C                            i2LCD_send@mode 0003  
                        __CFG_FEXTOSC$OFF 000000                                ?_LCD_clear 0001  
       I2C1_ISR@i2c_10bit_address_restart 0058                                ?_LCD_print 00C9  
                              ?_LCD_write 0001                               ___ftdiv@exp 0031  
                         ?_LCD_write4bits 0001                       __size_of__div_to_l_ 0128  
                       __size_of_LCD_init 0084                         __size_of_LCD_send 0020  
                             ___ftmul@exp 001E              __end_of_INTERRUPT_Initialize 32A2  
                          __end_of___ftge 287C                __end_of_regularTemperatura 2908  
                          __end_of___wmul 3058                   I2C1_MasterWrite@trBlock 008F  
                       __size_of_TMR0_ISR 0022                  I2C1_Stop@completion_code 0001  
                  ?_OSCILLATOR_Initialize 0001                            __end_of_fround 1D8A  
                     start_initialization 2EEE                               ??_I2C1_Stop 0001  
                __size_of_TMR0_Initialize 002A           __size_of_PIN_MANAGER_Initialize 00B4  
                     __end_of__tdiv_to_l_ 2294                             LCD_send@value 00C7  
                         ??i2_LCD_command 0005                           i2_LCD_setCursor 2EA6  
                           ??_LCD_command 00C8                             ??_LCD_display 00C9  
                              LCD_print@s 00C9                           ___llmod@divisor 0005  
              __size_ofi2_LCD_pulseEnable 001C                           ___llmod@counter 0009  
                        ??_LCD_createChar 00CB                          ?_I2C1_Initialize 0001  
                        __CFG_LPBOREN$OFF 000000                                  ??___ftge 0007  
                                ??___wmul 0013                    __size_of_TMR0_CallBack 0024  
                             __pdataBANK0 00CB                     __size_ofi2_LCD_EN_SET 000E  
                                ??_fround 0027                             sprintf@tmpval 00A8  
                         LCD_RS_SET@value 00C4                     __size_ofi2_LCD_RS_SET 000E  
                              fround@prec 002D                  _ADCC_GetSingleConversion 30C4  
                       __size_of___ftpack 00AE                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0050                         __size_of___lwtoft 0024  
                           __pcstackBANK0 009B                             __pcstackBANK1 0100  
                           _i2c1_tr_queue 0095                              _isdigit$1691 0002  
                          _getTemperatura 2B80                               ??_LCD_clear 00C9  
                           ??i2_LCD_print 0008                               ??_LCD_print 00CB  
                           ??i2_LCD_write 0005                               ??_LCD_write 00C8  
                 ??_I2C1_FunctionComplete 0001                               sprintf@flag 00A0  
                             sprintf@fval 00AE                               sprintf@prec 00AC  
                   _TMR0_InterruptHandler 00D3                                 __pnvBANK0 00D3  
                     __end_of_LCD_command 3206                       __end_of_LCD_display 3256  
                            i2_LCD_EN_SET 3272                    _PIN_MANAGER_Initialize 268A  
                         LCD_write4bits@a 00C5                                 __pintcode 0008  
                            i2_LCD_RS_SET 3280           ADCC_GetSingleConversion@channel 0005  
                                ?___awdiv 0007                                  ?___ftadd 002E  
                                ?___awmod 0001                                  ?___ftdiv 0024  
                                ?___ftneg 0001                                  ?___lldiv 0001  
                                ?___ftmul 0015                                  ?___llmod 0001  
                                ?___ftsub 003A                                 __npowers_ 0F50  
                                ?___fttol 0024                         __size_of_timerInt 007E  
                                _I2C1_ISR 1D8A                     __end_of_LCD_setCursor 2DC0  
            ??_INTERRUPT_InterruptManager 00B2                               __tdiv_to_l_ 2162  
                 __end_ofi2_LCD_setCursor 2EEE                              ??__div_to_l_ 0007  
                             __smallconst 0F00                                  ?_isdigit 0001  
                  __end_of_getTemperatura 2BEC                                  ?_sprintf 0040  
                           _TMR0_CallBack 3058                            __size_of_scale 0450  
                    _INTERRUPT_Initialize 329E                    I2C1_MasterRead@trBlock 0089  
                       ??_TMR0_Initialize 00C7                            ___wmul@product 0013  
                         _LCD_pulseEnable 3148                                  _LCD_init 2908  
                                _LCD_send 310A                                  _PIE0bits 000EC2  
                                _PIE3bits 000EC5                       __CFG_BORV$VBOR_2P45 000000  
                                i2u202_40 27CC                                  i2u220_40 2062  
                                i2u205_45 328A                                  i2u205_46 328C  
                                i2u214_40 1FFA                                  i2u302_40 2C0E  
     __size_of_INTERRUPT_InterruptManager 00C0                                  i2u224_40 20A0  
                                i2u240_40 29D2                                  i2u320_40 126E  
                                i2u312_40 10FE                                  i2u312_45 10F4  
                                i2u217_40 2024                                  i2u227_40 20D4  
                                i2u324_40 1394                                  i2u316_40 11F6  
                                i2u317_40 1236                ??_TMR0_SetInterruptHandler 00C7  
                                i2u246_40 2B4A                                  i2u406_47 3178  
                                i2u327_40 147C                                  _PIR0bits 000ECA  
                                i2u272_40 2282                                  i2u328_40 148C  
                                i2u344_40 2CDC                       __end_ofi2_LCD_print 2D10  
                                i2u344_47 2CD2                                  i2u337_40 16B6  
                                i2u345_40 2D08                                  i2u352_48 3068  
                                i2u353_40 30FC                        __end_of__div_to_l_ 23BC  
                                i2u345_47 2CFE                                  i2u195_45 327C  
                                i2u347_45 2B02                                  i2u195_46 327E  
                                i2u347_47 2B04                                  i2u292_40 2406  
                                i2u292_45 23FE                                  i2u348_45 2B0C  
                                i2u348_47 2B0E                                  _PIR3bits 000ECD  
                                i2u198_40 274E                                  i2u279_40 23AA  
                                i2u296_40 2488                                  i2u299_40 2A42  
                     __end_ofi2_LCD_write 3272                         ?i2_LCD_write4bits 0001  
                                _SSP1CON1 000F96                                  _SSP1CON3 000F98  
                                _TMR0_ISR 30E8                                  _SSP1STAT 000F95  
                  LCD_createChar@location 0100                        ??i2_LCD_write4bits 0002  
                              _ADCON0bits 000F60                                _ADCON1bits 000F59  
                              _ADCON2bits 000F5A                                _ADCON3bits 000F5B  
                       ___wmul@multiplier 000F                             i2LCD_print@cs 0008  
                         ?_getTemperatura 0033                         i2LCD_EN_SET@value 0001  
                          ?_TMR0_CallBack 0001                                 copy_data0 2F02  
                        ??_LCD_write4bits 00C5                     ?_INTERRUPT_Initialize 0001  
                             _LCD_command 31F4                               _LCD_display 3248  
                           _simboloGrados 00CB                       _aireacondicionadoON 02F0  
                              _ADSTATbits 000F65                                  __Hrparam 0000  
           __size_of_I2C1_BusCollisionISR 0002                                  __Lrparam 0000  
                  I2C1_ISR@i2c_bytes_left 0059                   ??_OSCILLATOR_Initialize 00C4  
                        __size_of___awdiv 0084                          __size_of___ftadd 01AC  
                        __size_of___awmod 0070                          __size_of___ftdiv 00E6  
                        __size_of___ftneg 0024                          __size_of___lldiv 0082  
                        __size_of___ftmul 00F4                          __size_of___llmod 0066  
                        __size_of___ftsub 0040                          __size_of___fttol 00F4  
                                ___ftpack 273E                               _fround$2171 002A  
                             _fround$2172 0027                                  ___lltoft 2D10  
                                ___lwtoft 30A0                          ?i2_LCD_setCursor 0006  
                              sprintf@exp 00A6                                sprintf@val 00A2  
                              _T0CON0bits 000FD5                  __size_of_ADCC_Initialize 0048  
                        __size_of_isdigit 001E                       I2C1_ISR@i2c_address 005C  
                                __ptext10 2C52                                  __ptext11 2908  
                                __ptext20 3206                                  __ptext12 3248  
                                __ptext21 3218                                  __ptext13 322A  
                                __ptext30 3264                                  __ptext14 2DC0  
                                __ptext31 31B2                                  __ptext23 30E8  
                                __ptext15 31E2                                  __ptext40 3032  
                                __ptext32 2FD8                                  __ptext24 3058  
                                __ptext16 31F4                                  __ptext41 2B10  
                                __ptext33 3164                                  __ptext25 32A2  
                                __ptext17 310A                                  __ptext50 1FB6  
                                __ptext42 298C                                  __ptext34 3272  
                                __ptext26 2A92                                  __ptext18 2F72  
                                __ptext51 307C                                  __ptext43 2162  
                                __ptext35 3280                                  __ptext27 2EA6  
                                __ptext19 3148                                  __ptext60 1D8A  
                                __ptext52 287C                                  __ptext44 2294  
                                __ptext36 0F90                                  __ptext28 3256  
                                __ptext61 3296                                  __ptext53 27EC  
                                __ptext45 2D10                                  __ptext37 16C4  
                                __ptext29 2CB4                                  __ptext62 31CA  
                                __ptext54 2B80                                  __ptext46 2BEC  
                                __ptext38 312A                                  __ptext63 32A4  
                                __ptext55 30A0                                  __ptext47 2A10  
                                __ptext39 1B14                                  __ptext64 0000  
                                __ptext56 24B0                                  __ptext48 23BC  
                                __ptext57 25A4                                  __ptext49 2F32  
                                __ptext58 273E                                  __ptext59 30C4  
                      _regularTemperatura 287C                              _SSP1CON1bits 000F96  
                            _SSP1CON2bits 000F97                                  __powers_ 0F29  
                 __end_of_LCD_pulseEnable 3164                          __size_of_sprintf 0734  
                             i2_LCD_print 2CB4                               i2_LCD_write 3264  
                           __size_of_main 004C                       ?_regularTemperatura 000A  
    __end_of_TMR0_DefaultInterruptHandler 32A4     __size_of_TMR0_DefaultInterruptHandler 0002  
            _TMR0_DefaultInterruptHandler 32A2                                _LCD_EN_SET 3206  
                    __CFG_WDTCWS$WDTCWS_7 000000                      LCD_setCursor@columna 00CA  
                              _LCD_RS_SET 3218                                  _timerInt 2A92  
              ??_ADCC_GetSingleConversion 0003                                  int$flags 005F  
                        __displayfunction 00D6        __end_of_INTERRUPT_InterruptManager 00C8  
              _INTERRUPT_InterruptManager 0008                      ??_regularTemperatura 000D  
             PIN_MANAGER_Initialize@state 00C4                                _INTCONbits 000FF2  
                         ??_TMR0_CallBack 0050                                  isdigit@c 0003  
                  ??_INTERRUPT_Initialize 00C4                                  scale@scl 002A  
                                intlevel2 0000                     __end_ofi2_LCD_command 3264  
                               sprintf@ap 009E                          __tdiv_to_l_@exp1 000F  
                               sprintf@sp 0040                          __tdiv_to_l_@cntr 000E  
                        __tdiv_to_l_@quot 000A                          ___lldiv@dividend 0001  
                 ?_PIN_MANAGER_Initialize 0001                         __CFG_CLKOUTEN$OFF 000000  
          __size_of_I2C1_FunctionComplete 0018                                i2_LCD_send 31B2  
                            _vectorString 0069             __end_of_I2C1_FunctionComplete 31E2  
                             _PPSLOCKbits 000EA0                       i2LCD_setCursor@fila 0006  
           ?_TMR0_DefaultInterruptHandler 0001                    getTemperatura@valorADC 0036  
                         LCD_createChar@i 0101                  __size_of_I2C1_Initialize 0032  
                            ?__tdiv_to_l_ 0001                                  sprintf@c 00B1  
                                sprintf@f 0042                          ___lldiv@quotient 0009  
                         _TMR0_Initialize 3008                              _ADACTPPSbits 000EAE  
                        ?_LCD_pulseEnable 0001            __end_of_PIN_MANAGER_Initialize 273E  
                       ??_ADCC_Initialize 00C4                          LCD_command@value 00C8  
                      __size_of_I2C1_Stop 0008                           i2LCD_send@value 0004  
                             ?_LCD_EN_SET 0001                               ?_LCD_RS_SET 0001  
